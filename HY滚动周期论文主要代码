# jupyter notebook编写的python调用gurobi代码

# 使用ARIMA模型预测需求，并与实际比较
import openpyxl               
from datashape import string
from openpyxl import load_workbook
import numpy as np
import pandas as pd
import random
import re
import matplotlib.pyplot as plt
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.graphics.tsaplots import plot_pacf, plot_acf
from statsmodels.tsa.arima.model import ARIMA
import statsmodels.api as sm
import gurobipy as gp
from gurobipy import GRB
from statsmodels.stats.diagnostic import acorr_ljungbox
from scipy import stats
from matplotlib.font_manager import FontProperties
import warnings
from arch.unitroot import ADF
import statsmodels.api as sm
import statsmodels.formula.api as smf
import statsmodels.tsa.api as smt
from statsmodels.tsa.stattools import adfuller
from statsmodels.stats.diagnostic import acorr_ljungbox
from statsmodels.graphics.api import qqplot
warnings.filterwarnings("ignore")
from datetime import datetime, timedelta
import math
import tracemalloc
import time

df = pd.read_excel('C:/Users/net2/Downloads/客机航班.xlsx')
Original_Requirements = pd.read_excel('C:/Users/net2/Downloads/需求.xlsx',sheet_name='需求')
print("---------------------------------------------客机航班数据---------------------------------------------")
print(df)
print("\n---------------------------------------------需求数据---------------------------------------------")
print(Original_Requirements)

# 提取客机航班起飞时间段表与抵达时间段表
passengerStartTime_BH = [element.strftime("%Y-%m-%d %H:%M") for element in df['起飞时刻BH'].dropna()]
passengerEndTime_BH = [element.strftime("%Y-%m-%d %H:%M") for element in df['到达时刻BH'].dropna()]
passengerStartTime_BS = [element.strftime("%Y-%m-%d %H:%M") for element in df['起飞时刻BS'].dropna()]
passengerEndTime_BS = [element.strftime("%Y-%m-%d %H:%M") for element in df['到达时刻BS'].dropna()]
passengerStartTime_HB = [element.strftime("%Y-%m-%d %H:%M") for element in df['起飞时刻HB'].dropna()]
passengerEndTime_HB = [element.strftime("%Y-%m-%d %H:%M") for element in df['到达时刻HB'].dropna()]
passengerStartTime_HS = [element.strftime("%Y-%m-%d %H:%M") for element in df['起飞时刻HS'].dropna()]
passengerEndTime_HS = [element.strftime("%Y-%m-%d %H:%M") for element in df['到达时刻HS'].dropna()]
passengerStartTime_SB = [element.strftime("%Y-%m-%d %H:%M") for element in df['起飞时刻SB'].dropna()]
passengerEndTime_SB = [element.strftime("%Y-%m-%d %H:%M") for element in df['到达时刻SB'].dropna()]
passengerStartTime_SH = [element.strftime("%Y-%m-%d %H:%M") for element in df['起飞时刻SH'].dropna()]
passengerEndTime_SH = [element.strftime("%Y-%m-%d %H:%M") for element in df['到达时刻SH'].dropna()]

# 计算客机航班的飞行时间
passenger_flight_times_BH = []
passenger_flight_times_BS = []
passenger_flight_times_HB = []
passenger_flight_times_HS = []
passenger_flight_times_SB = []
passenger_flight_times_SH = []

def freightIdentify(lst1,lst2):
    passengerStartTime = [element.strftime("%Y-%m-%d %H:%M") for element in lst1.dropna()]
    passengerEndTime = [element.strftime("%Y-%m-%d %H:%M") for element in lst2.dropna()]
    passenger_flight_times = []
    
    for departure_time, arrival_time in zip(passengerStartTime, passengerEndTime):
        departure_datetime = datetime.strptime(departure_time, "%Y-%m-%d %H:%M")
        arrival_datetime = datetime.strptime(arrival_time, "%Y-%m-%d %H:%M")
        if arrival_datetime < departure_datetime:
            arrival_datetime += timedelta(days=1)
        flight_time = arrival_datetime - departure_datetime
        flight_hours = flight_time.total_seconds() / 3600
        passenger_flight_times.append(flight_hours)
        
    return passenger_flight_times

def departureTimeIdentify(lst):
    passengerStartTime = [element.strftime("%Y-%m-%d %H:%M") for element in lst.dropna()]
    departure_times = [datetime.strptime(time, "%Y-%m-%d %H:%M") for time in passengerStartTime]
    hours_from_midnight = [(departure_time - departure_time.replace(hour=0, minute=0)).total_seconds() / 3600 for departure_time in departure_times]
    return hours_from_midnight

def TimeTableOfPassenger(lst):
    TimeTable0 = []
    for i in range(K):
        passenger_flight_time_add = [x + 24 * i for x in lst]
        
        for j in range(len(passenger_flight_time_add)):
            TimeTable0.append(passenger_flight_time_add[j])
    arrPassenger = np.array(TimeTable0)
    passengerTimeTable = arrPassenger.reshape((1, -1)).tolist()[0]
    return passengerTimeTable

def process_value(value):
    if isinstance(value, int):
        return value
    elif isinstance(value, float):
        return math.floor(value)
    else:
        raise ValueError("Unsupported value type")

def passCantTransCal(lst):
    passCantTrans = []
    for a in lst:
        if a.is_integer():
            passCantTrans.append(int(a) + 1)
        else:
            next_int = math.ceil(a)
            passCantTrans.append(next_int)
    return max(passCantTrans)

def passengerTimeCal(lst):
    passengerTime = []
    for a in lst:
        if a.is_integer():
            passengerTime.append(int(a))
        else:
            prev_int = math.floor(a)
            passengerTime.append(prev_int)
    return passengerTime

# 每天的时间段系数
Time_Table = [0.008,0.008,0.008,0.008,0.008,0.008,0.008,0.008,0.008,0.008,0.662,0.037,0.128,0.004,0.011,0.02,0.01,0.007,0,0.009,0.008,0.008,0.008,0.008]

passenger_flight_times_BH = freightIdentify(df['起飞时刻BH'],df['到达时刻BH'])
passenger_flight_times_BS = freightIdentify(df['起飞时刻BS'],df['到达时刻BS'])
passenger_flight_times_HB = freightIdentify(df['起飞时刻HB'],df['到达时刻HB'])
passenger_flight_times_HS = freightIdentify(df['起飞时刻HS'],df['到达时刻HS'])
passenger_flight_times_SB = freightIdentify(df['起飞时刻SB'],df['到达时刻SB'])
passenger_flight_times_SH = freightIdentify(df['起飞时刻SH'],df['到达时刻SH'])
hours_from_midnight_BH = departureTimeIdentify(df['起飞时刻BH'])
hours_from_midnight_BS = departureTimeIdentify(df['起飞时刻BS'])
hours_from_midnight_HB = departureTimeIdentify(df['起飞时刻HB'])
hours_from_midnight_HS = departureTimeIdentify(df['起飞时刻HS'])
hours_from_midnight_SB = departureTimeIdentify(df['起飞时刻SB'])
hours_from_midnight_SH = departureTimeIdentify(df['起飞时刻SH'])

print("-----------------------三地两两之间客机航班飞行时间-----------------------")
print("北京→杭州：\n",passenger_flight_times_BH)
print("\n")
print("北京→深圳：\n",passenger_flight_times_BS)
print("\n")
print("杭州→北京：\n",passenger_flight_times_HB)
print("\n")
print("杭州→深圳：\n",passenger_flight_times_HS)
print("\n")
print("深圳→北京：\n",passenger_flight_times_SB)
print("\n")
print("深圳→杭州：\n",passenger_flight_times_SH)


departure_times_BH = [datetime.strptime(time, "%Y-%m-%d %H:%M") for time in passengerStartTime_BH]
departure_times_BS = [datetime.strptime(time, "%Y-%m-%d %H:%M") for time in passengerStartTime_BS]
departure_times_HB = [datetime.strptime(time, "%Y-%m-%d %H:%M") for time in passengerStartTime_HB]
departure_times_HS = [datetime.strptime(time, "%Y-%m-%d %H:%M") for time in passengerStartTime_HS]
departure_times_SB = [datetime.strptime(time, "%Y-%m-%d %H:%M") for time in passengerStartTime_SB]
departure_times_SH = [datetime.strptime(time, "%Y-%m-%d %H:%M") for time in passengerStartTime_SH]

hours_from_midnight_BH = [(departure_time - departure_time.replace(hour=0, minute=0)).total_seconds() / 3600 for departure_time in departure_times_BH]
hours_from_midnight_BS = [(departure_time - departure_time.replace(hour=0, minute=0)).total_seconds() / 3600 for departure_time in departure_times_BS]
hours_from_midnight_HB = [(departure_time - departure_time.replace(hour=0, minute=0)).total_seconds() / 3600 for departure_time in departure_times_HB]
hours_from_midnight_HS = [(departure_time - departure_time.replace(hour=0, minute=0)).total_seconds() / 3600 for departure_time in departure_times_HS]
hours_from_midnight_SB = [(departure_time - departure_time.replace(hour=0, minute=0)).total_seconds() / 3600 for departure_time in departure_times_SB]
hours_from_midnight_SH = [(departure_time - departure_time.replace(hour=0, minute=0)).total_seconds() / 3600 for departure_time in departure_times_SH]

print("\n\n\n------------------------三地两两之间起飞时刻表------------------------\n")
print("北京→杭州起飞时刻:\n", hours_from_midnight_BH)
print("\n")
print("北京→深圳起飞时刻:\n", hours_from_midnight_BS)
print("\n")
print("杭州→北京起飞时刻:\n", hours_from_midnight_HB)
print("\n")
print("杭州→深圳起飞时刻:\n", hours_from_midnight_HS)
print("\n")
print("深圳→北京起飞时刻:\n", hours_from_midnight_SB)
print("\n")
print("深圳→杭州起飞时刻:\n", hours_from_midnight_SH)

del departure_times_BH
del departure_times_BS
del departure_times_HB
del departure_times_HS
del departure_times_SB
del departure_times_SH

del passengerStartTime_BH
del passengerEndTime_BH
del passengerStartTime_BS
del passengerEndTime_BS
del passengerStartTime_HB
del passengerEndTime_HB
del passengerStartTime_HS
del passengerEndTime_HS
del passengerStartTime_SB
del passengerEndTime_SB
del passengerStartTime_SH
del passengerEndTime_SH

t1 = 0.5  # 北京-北京
t2 = 1.5  # 北京-潍坊
t3 = 2    # 北京-沈阳
t4 = 0.5  # 杭州-杭州
t5 = 1    # 杭州-南京
t6 = 1.5  # 杭州-上海
t7 = 0.5  # 深圳-深圳
t8 = 1.5  # 深圳-香港

def TimeSplit(lst):
    lstu = []
    for pred in lst:
        temp = []
        for a in Time_Table:
            temp.append(pred * a * Perc)
        lstu.extend(temp)
    return lstu

q = 7
Perc = (0.395+0.096+0.104+0.032)
perc1 = (0.395+0.032)/(0.395+0.096+0.104+0.032)
perc2 = (0.096+0.104)/(0.395+0.096+0.104+0.032)
# 当前全货机运输小时单价为39400元，小时油耗2.3t，油价3200元/t
cargo_per = 39400
L = 2.3
OilPrice = 3200

# 由于没有货机航班的数据，因此需要作出假设，假设每架货机运力为60t，货机数量为10
N = 15
Q = 50

Tcargo_1 = 2.4  # 货机航班从北京飞往杭州需要2.4小时
Tcargo_2 = 2.5  # 货机航班从杭州飞往深圳需要2.5小时
Tcargo_3 = 3.5  # 货机航班从深圳飞往北京需要3.5小时

cargo_BH_unit = [1,2,3,3,3,5,6,8,16,21,22,22,23,24,24]
cargo_HS_unit = [9,10,11,11,11,13,14,16,24,5,6,6,7,8,8]
cargo_SB_unit = [17,18,19,19,19,21,22,24,8,13,14,14,15,16,16]

c1 = 300 # 假设单位仓储成本
c2_1 = 2000 # 假设时效性货物单位逾期成本
c2_2 = 800 # 假设经济性性货物单位逾期成本
c3_1 = 70000 # 假设时效性货物的单位丢弃成本
c3_2 = 40000 # 加上经济性货物的单位丢弃成本

C2per = [0,2000,800]

# 假设时效需求货物需要在发货后12小时内送达目的地机场，经济需求货物需在发货后24小时送达
T_1 = [0,12,24]

# 假设客机分段计价总共分成3段
FR_BH = [20000,12000,8000]
lBH = [0,0.4*q,0.7*q]
FR_BS = [20000,12000,8000]
lBS = [0,0.4*q,0.7*q]
FR_HB = [20000,12000,8000]
lHB = [0,0.4*q,0.7*q]
FR_HS = [20000,12000,8000]
lHS = [0,0.4*q,0.7*q]
FR_SB = [20000,12000,8000]
lSB = [0,0.4*q,0.7*q]
FR_SH = [20000,12000,8000]
lSH = [0,0.4*q,0.7*q]

passengerCapacity = q * (len(hours_from_midnight_BH)+len(hours_from_midnight_BS)+len(hours_from_midnight_HB)+len(hours_from_midnight_HS)+len(hours_from_midnight_SB)+len(hours_from_midnight_SH))
passengerCapacity_BH = q * len(hours_from_midnight_BH)
passengerCapacity_BS = q * len(hours_from_midnight_BS)
passengerCapacity_HB = q * len(hours_from_midnight_HB)
passengerCapacity_HS = q * len(hours_from_midnight_HS)
passengerCapacity_SB = q * len(hours_from_midnight_SB)
passengerCapacity_SH = q * len(hours_from_midnight_SH)

def mainFunctionARIMA(K):
    cargo_BH = []
    cargo_HS = []
    cargo_SB = []
        
    for i in range(K):
        cargo_BH_add = [x + 24 * i for x in cargo_BH_unit]
        cargo_HS_add = [x + 24 * i for x in cargo_HS_unit]
        cargo_SB_add = [x + 24 * i for x in cargo_SB_unit]
        for j in range(N):
            cargo_BH.append(cargo_BH_add[j])
            cargo_HS.append(cargo_HS_add[j])
            cargo_SB.append(cargo_SB_add[j])
    del cargo_BH_add,cargo_HS_add,cargo_SB_add
    BH_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_BH)
    BS_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_BS)
    HB_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_HB)
    HS_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_HS)
    SB_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_SB)
    SH_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_SH)
    flightTime_BH = passenger_flight_times_BH * K
    flightTime_BS = passenger_flight_times_BS * K
    flightTime_HB = passenger_flight_times_HB * K
    flightTime_HS = passenger_flight_times_HS * K
    flightTime_SB = passenger_flight_times_SB * K
    flightTime_SH = passenger_flight_times_SH * K
    first_flight_BH = min(min(BH_passengerTimeTable),min(cargo_BH))
    last_flight_BH = max(max(BH_passengerTimeTable),max(cargo_BH))
    first_flight_HS = min(min(HS_passengerTimeTable),min(cargo_HS))
    last_flight_HS = max(max(HS_passengerTimeTable),max(cargo_HS))
    first_flight_SB = min(min(SB_passengerTimeTable),min(cargo_SB))
    last_flight_SB = max(max(SB_passengerTimeTable),max(cargo_SB))
    first_flight_BS = min(BS_passengerTimeTable)
    last_flight_BS = max(BS_passengerTimeTable)
    first_flight_SH = min(SH_passengerTimeTable)
    last_flight_SH = max(SH_passengerTimeTable)
    first_flight_HB = min(HB_passengerTimeTable)
    last_flight_HB = max(HB_passengerTimeTable)
    BHcant_transport_passenger = passCantTransCal(BH_passengerTimeTable)
    BScant_transport_passenger = passCantTransCal(BS_passengerTimeTable)
    HBcant_transport_passenger = passCantTransCal(HB_passengerTimeTable)
    HScant_transport_passenger = passCantTransCal(HS_passengerTimeTable)
    SBcant_transport_passenger = passCantTransCal(SB_passengerTimeTable)
    SHcant_transport_passenger = passCantTransCal(SH_passengerTimeTable)
    BHcant_transport_cargo = max(cargo_BH) + 1
    HScant_transport_cargo = max(cargo_HS) + 1
    SBcant_transport_cargo = max(cargo_SB) + 1
    first_BH = process_value(first_flight_BH)
    first_BS = process_value(first_flight_BS)
    first_HB = process_value(first_flight_HB)
    first_HS = process_value(first_flight_HS)
    first_SB = process_value(first_flight_SB)
    first_SH = process_value(first_flight_SH)
    last_BH = process_value(last_flight_BH)
    last_BS = process_value(last_flight_BS)
    last_HB = process_value(last_flight_HB)
    last_HS = process_value(last_flight_HS)
    last_SB = process_value(last_flight_SB)
    last_SH = process_value(last_flight_SH)
    passengerTime_BH = passengerTimeCal(BH_passengerTimeTable)
    passengerTime_BS = passengerTimeCal(BS_passengerTimeTable)
    passengerTime_HB = passengerTimeCal(HB_passengerTimeTable)
    passengerTime_HS = passengerTimeCal(HS_passengerTimeTable)
    passengerTime_SB = passengerTimeCal(SB_passengerTimeTable)
    passengerTime_SH = passengerTimeCal(SH_passengerTimeTable)

    C1 = 0 # C1为未运完的仓储成本，初始值为0
    C2 = 0 # C2为未运完的逾期延迟成本，初始值为0
    C3 = 0 # C3为能运完的逾期延迟成本，初始值为0
    C4 = 0 # C4为能运完的仓储成本，初始值为0
    C5 = 0 # C5为运输成本，初始值为0
    C6 = 0 # C6为丢弃成本，初始值为0
    C7 = 0
    transported_1 = 0
    transported_2 = 0
    cargoUsed = 0
    
    # 进行模型拟合和预测
    model_1_4 = ARIMA(train['北京→杭州'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_1_4 = model_1_4.fit()
    model_1_5 = ARIMA(train['北京→南京'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_1_5 = model_1_5.fit()
    model_1_6 = ARIMA(train['北京→上海'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_1_6 = model_1_6.fit()
    model_1_7 = ARIMA(train['北京→深圳'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_1_7 = model_1_7.fit()
    model_1_8 = ARIMA(train['北京→香港'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_1_8 = model_1_8.fit()
    model_2_4 = ARIMA(train['潍坊→杭州'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_2_4 = model_2_4.fit()
    model_2_5 = ARIMA(train['潍坊→南京'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_2_5 = model_2_5.fit()
    model_2_6 = ARIMA(train['潍坊→上海'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_2_6 = model_2_6.fit()
    model_2_7 = ARIMA(train['潍坊→深圳'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_2_7 = model_2_7.fit()
    model_2_8 = ARIMA(train['潍坊→香港'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_2_8 = model_2_8.fit()
    model_3_4 = ARIMA(train['沈阳→杭州'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_3_4 = model_3_4.fit()
    model_3_5 = ARIMA(train['沈阳→南京'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_3_5 = model_3_5.fit()
    model_3_6 = ARIMA(train['沈阳→上海'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_3_6 = model_3_6.fit()
    model_3_7 = ARIMA(train['沈阳→深圳'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_3_7 = model_3_7.fit()
    model_3_8 = ARIMA(train['沈阳→香港'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_3_8 = model_3_8.fit()
    model_4_1 = ARIMA(train['杭州→北京'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_4_1 = model_4_1.fit()
    model_4_2 = ARIMA(train['杭州→潍坊'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_4_2 = model_4_2.fit()
    model_4_3 = ARIMA(train['杭州→沈阳'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_4_3 = model_4_3.fit()
    model_4_7 = ARIMA(train['杭州→深圳'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_4_7 = model_4_7.fit()
    model_4_8 = ARIMA(train['杭州→香港'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_4_8 = model_4_8.fit()
    model_5_1 = ARIMA(train['南京→北京'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_5_1 = model_5_1.fit()
    model_5_2 = ARIMA(train['南京→潍坊'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_5_2 = model_5_2.fit()
    model_5_3 = ARIMA(train['南京→沈阳'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_5_3 = model_5_3.fit()
    model_5_7 = ARIMA(train['南京→深圳'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_5_7 = model_5_7.fit()
    model_5_8 = ARIMA(train['南京→香港'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_5_8 = model_5_8.fit()
    model_6_1 = ARIMA(train['上海→北京'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_6_1 = model_6_1.fit()
    model_6_2 = ARIMA(train['上海→潍坊'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_6_2 = model_6_2.fit()
    model_6_3 = ARIMA(train['上海→沈阳'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_6_3 = model_6_3.fit()
    model_6_7 = ARIMA(train['上海→深圳'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_6_7 = model_6_7.fit()
    model_6_8 = ARIMA(train['上海→香港'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_6_8 = model_6_8.fit()
    model_7_1 = ARIMA(train['深圳→北京'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_7_1 = model_7_1.fit()
    model_7_2 = ARIMA(train['深圳→潍坊'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_7_2 = model_7_2.fit()
    model_7_3 = ARIMA(train['深圳→沈阳'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_7_3 = model_7_3.fit()
    model_7_4 = ARIMA(train['深圳→杭州'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_7_4 = model_7_4.fit()
    model_7_5 = ARIMA(train['深圳→南京'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_7_5 = model_7_5.fit()
    model_7_6 = ARIMA(train['深圳→上海'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_7_6 = model_7_6.fit()
    model_8_1 = ARIMA(train['香港→北京'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_8_1 = model_8_1.fit()
    model_8_2 = ARIMA(train['香港→潍坊'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_8_2 = model_8_2.fit()
    model_8_3 = ARIMA(train['香港→沈阳'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_8_3 = model_8_3.fit()
    model_8_4 = ARIMA(train['香港→杭州'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_8_4 = model_8_4.fit()
    model_8_5 = ARIMA(train['香港→南京'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_8_5 = model_8_5.fit()
    model_8_6 = ARIMA(train['香港→上海'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_8_6 = model_8_6.fit()
    
    # 进行未来一步的预测
    forecast_1_4 = model_fit_1_4.forecast(steps=K)
    forecast_1_5 = model_fit_1_5.forecast(steps=K)
    forecast_1_6 = model_fit_1_6.forecast(steps=K)
    forecast_1_7 = model_fit_1_7.forecast(steps=K)
    forecast_1_8 = model_fit_1_8.forecast(steps=K)
    forecast_2_4 = model_fit_2_4.forecast(steps=K)
    forecast_2_5 = model_fit_2_5.forecast(steps=K)
    forecast_2_6 = model_fit_2_6.forecast(steps=K)
    forecast_2_7 = model_fit_2_7.forecast(steps=K)
    forecast_2_8 = model_fit_2_8.forecast(steps=K)
    forecast_3_4 = model_fit_3_4.forecast(steps=K)
    forecast_3_5 = model_fit_3_5.forecast(steps=K)
    forecast_3_6 = model_fit_3_6.forecast(steps=K)
    forecast_3_7 = model_fit_3_7.forecast(steps=K)
    forecast_3_8 = model_fit_3_8.forecast(steps=K)
    forecast_4_1 = model_fit_4_1.forecast(steps=K)
    forecast_4_2 = model_fit_4_2.forecast(steps=K)
    forecast_4_3 = model_fit_4_3.forecast(steps=K)
    forecast_4_7 = model_fit_4_7.forecast(steps=K)
    forecast_4_8 = model_fit_4_8.forecast(steps=K)
    forecast_5_1 = model_fit_5_1.forecast(steps=K)
    forecast_5_2 = model_fit_5_2.forecast(steps=K)
    forecast_5_3 = model_fit_5_3.forecast(steps=K)
    forecast_5_7 = model_fit_5_7.forecast(steps=K)
    forecast_5_8 = model_fit_5_8.forecast(steps=K)
    forecast_6_1 = model_fit_6_1.forecast(steps=K)
    forecast_6_2 = model_fit_6_2.forecast(steps=K)
    forecast_6_3 = model_fit_6_3.forecast(steps=K)
    forecast_6_7 = model_fit_6_7.forecast(steps=K)
    forecast_6_8 = model_fit_6_8.forecast(steps=K)
    forecast_7_1 = model_fit_7_1.forecast(steps=K)
    forecast_7_2 = model_fit_7_2.forecast(steps=K)
    forecast_7_3 = model_fit_7_3.forecast(steps=K)
    forecast_7_4 = model_fit_7_4.forecast(steps=K)
    forecast_7_5 = model_fit_7_5.forecast(steps=K)
    forecast_7_6 = model_fit_7_6.forecast(steps=K)
    forecast_8_1 = model_fit_8_1.forecast(steps=K)
    forecast_8_2 = model_fit_8_2.forecast(steps=K)
    forecast_8_3 = model_fit_8_3.forecast(steps=K)
    forecast_8_4 = model_fit_8_4.forecast(steps=K)
    forecast_8_5 = model_fit_8_5.forecast(steps=K)
    forecast_8_6 = model_fit_8_6.forecast(steps=K)
    
    forecast_1_4_K = TimeSplit(forecast_1_4)
    forecast_1_5_K = TimeSplit(forecast_1_5)
    forecast_1_6_K = TimeSplit(forecast_1_6)
    forecast_1_7_K = TimeSplit(forecast_1_7)
    forecast_1_8_K = TimeSplit(forecast_1_8)
    forecast_2_4_K = TimeSplit(forecast_2_4)
    forecast_2_5_K = TimeSplit(forecast_2_5)
    forecast_2_6_K = TimeSplit(forecast_2_6)
    forecast_2_7_K = TimeSplit(forecast_2_7)
    forecast_2_8_K = TimeSplit(forecast_2_8)
    forecast_3_4_K = TimeSplit(forecast_3_4)
    forecast_3_5_K = TimeSplit(forecast_3_5)
    forecast_3_6_K = TimeSplit(forecast_3_6)
    forecast_3_7_K = TimeSplit(forecast_3_7)
    forecast_3_8_K = TimeSplit(forecast_3_8)
    forecast_4_1_K = TimeSplit(forecast_4_1)
    forecast_4_2_K = TimeSplit(forecast_4_2)
    forecast_4_3_K = TimeSplit(forecast_4_3)
    forecast_4_7_K = TimeSplit(forecast_4_7)
    forecast_4_8_K = TimeSplit(forecast_4_8)
    forecast_5_1_K = TimeSplit(forecast_5_1)
    forecast_5_2_K = TimeSplit(forecast_5_2)
    forecast_5_3_K = TimeSplit(forecast_5_3)
    forecast_5_7_K = TimeSplit(forecast_5_7)
    forecast_5_8_K = TimeSplit(forecast_5_8)
    forecast_6_1_K = TimeSplit(forecast_6_1)
    forecast_6_2_K = TimeSplit(forecast_6_2)
    forecast_6_3_K = TimeSplit(forecast_6_3)
    forecast_6_7_K = TimeSplit(forecast_6_7)
    forecast_6_8_K = TimeSplit(forecast_6_8)
    forecast_7_1_K = TimeSplit(forecast_7_1)
    forecast_7_2_K = TimeSplit(forecast_7_2)
    forecast_7_3_K = TimeSplit(forecast_7_3)
    forecast_7_4_K = TimeSplit(forecast_7_4)
    forecast_7_5_K = TimeSplit(forecast_7_5)
    forecast_7_6_K = TimeSplit(forecast_7_6)
    forecast_8_1_K = TimeSplit(forecast_8_1)
    forecast_8_2_K = TimeSplit(forecast_8_2)
    forecast_8_3_K = TimeSplit(forecast_8_3)
    forecast_8_4_K = TimeSplit(forecast_8_4)
    forecast_8_5_K = TimeSplit(forecast_8_5)
    forecast_8_6_K = TimeSplit(forecast_8_6)
    
    forecast_1_4_K[0] += left_to_leave_1_4[-1]
    forecast_1_5_K[0] += left_to_leave_1_5[-1]
    forecast_1_6_K[0] += left_to_leave_1_6[-1]
    forecast_1_7_K[0] += left_to_leave_1_7[-1]
    forecast_1_8_K[0] += left_to_leave_1_8[-1]
    forecast_2_4_K[0] += left_to_leave_2_4[-1]
    forecast_2_5_K[0] += left_to_leave_2_5[-1]
    forecast_2_6_K[0] += left_to_leave_2_6[-1]
    forecast_2_7_K[0] += left_to_leave_2_7[-1]
    forecast_2_8_K[0] += left_to_leave_2_8[-1]
    forecast_3_4_K[0] += left_to_leave_3_4[-1]
    forecast_3_5_K[0] += left_to_leave_3_5[-1]
    forecast_3_6_K[0] += left_to_leave_3_6[-1]
    forecast_3_7_K[0] += left_to_leave_3_7[-1]
    forecast_3_8_K[0] += left_to_leave_3_8[-1]
    forecast_4_1_K[0] += left_to_leave_4_1[-1]
    forecast_4_2_K[0] += left_to_leave_4_2[-1]
    forecast_4_3_K[0] += left_to_leave_4_3[-1]
    forecast_4_7_K[0] += left_to_leave_4_7[-1]
    forecast_4_8_K[0] += left_to_leave_4_8[-1]
    forecast_5_1_K[0] += left_to_leave_5_1[-1]
    forecast_5_2_K[0] += left_to_leave_5_2[-1]
    forecast_5_3_K[0] += left_to_leave_5_3[-1]
    forecast_5_7_K[0] += left_to_leave_5_7[-1]
    forecast_5_8_K[0] += left_to_leave_5_8[-1]
    forecast_6_1_K[0] += left_to_leave_6_1[-1]
    forecast_6_2_K[0] += left_to_leave_6_2[-1]
    forecast_6_3_K[0] += left_to_leave_6_3[-1]
    forecast_6_7_K[0] += left_to_leave_6_7[-1]
    forecast_6_8_K[0] += left_to_leave_6_8[-1]
    forecast_7_1_K[0] += left_to_leave_7_1[-1]
    forecast_7_2_K[0] += left_to_leave_7_2[-1]
    forecast_7_3_K[0] += left_to_leave_7_3[-1]
    forecast_7_4_K[0] += left_to_leave_7_4[-1]
    forecast_7_5_K[0] += left_to_leave_7_5[-1]
    forecast_7_6_K[0] += left_to_leave_7_6[-1]
    forecast_8_1_K[0] += left_to_leave_8_1[-1]
    forecast_8_2_K[0] += left_to_leave_8_2[-1]
    forecast_8_3_K[0] += left_to_leave_8_3[-1]
    forecast_8_4_K[0] += left_to_leave_8_4[-1]
    forecast_8_5_K[0] += left_to_leave_8_5[-1]
    forecast_8_6_K[0] += left_to_leave_8_6[-1]
    
    # 计算时效快递的需求
    TimeSensitive_Req_1_4 = [x * perc1 for x in forecast_1_4_K]
    TimeSensitive_Req_1_5 = [x * perc1 for x in forecast_1_5_K]
    TimeSensitive_Req_1_6 = [x * perc1 for x in forecast_1_6_K]
    TimeSensitive_Req_1_7 = [x * perc1 for x in forecast_1_7_K]
    TimeSensitive_Req_1_8 = [x * perc1 for x in forecast_1_8_K]
    TimeSensitive_Req_2_4 = [x * perc1 for x in forecast_2_4_K]
    TimeSensitive_Req_2_5 = [x * perc1 for x in forecast_2_5_K]
    TimeSensitive_Req_2_6 = [x * perc1 for x in forecast_2_6_K]
    TimeSensitive_Req_2_7 = [x * perc1 for x in forecast_2_7_K]
    TimeSensitive_Req_2_8 = [x * perc1 for x in forecast_2_8_K]
    TimeSensitive_Req_3_4 = [x * perc1 for x in forecast_3_4_K]
    TimeSensitive_Req_3_5 = [x * perc1 for x in forecast_3_5_K]
    TimeSensitive_Req_3_6 = [x * perc1 for x in forecast_3_6_K]
    TimeSensitive_Req_3_7 = [x * perc1 for x in forecast_3_7_K]
    TimeSensitive_Req_3_8 = [x * perc1 for x in forecast_3_8_K]
    TimeSensitive_Req_4_1 = [x * perc1 for x in forecast_4_1_K]
    TimeSensitive_Req_4_2 = [x * perc1 for x in forecast_4_2_K]
    TimeSensitive_Req_4_3 = [x * perc1 for x in forecast_4_3_K]
    TimeSensitive_Req_4_7 = [x * perc1 for x in forecast_4_7_K]
    TimeSensitive_Req_4_8 = [x * perc1 for x in forecast_4_8_K]
    TimeSensitive_Req_5_1 = [x * perc1 for x in forecast_5_1_K]
    TimeSensitive_Req_5_2 = [x * perc1 for x in forecast_5_2_K]
    TimeSensitive_Req_5_3 = [x * perc1 for x in forecast_5_3_K]
    TimeSensitive_Req_5_7 = [x * perc1 for x in forecast_5_7_K]
    TimeSensitive_Req_5_8 = [x * perc1 for x in forecast_5_8_K]
    TimeSensitive_Req_6_1 = [x * perc1 for x in forecast_6_1_K]
    TimeSensitive_Req_6_2 = [x * perc1 for x in forecast_6_2_K]
    TimeSensitive_Req_6_3 = [x * perc1 for x in forecast_6_3_K]
    TimeSensitive_Req_6_7 = [x * perc1 for x in forecast_6_7_K]
    TimeSensitive_Req_6_8 = [x * perc1 for x in forecast_6_8_K]
    TimeSensitive_Req_7_1 = [x * perc1 for x in forecast_7_1_K]
    TimeSensitive_Req_7_2 = [x * perc1 for x in forecast_7_2_K]
    TimeSensitive_Req_7_3 = [x * perc1 for x in forecast_7_3_K]
    TimeSensitive_Req_7_4 = [x * perc1 for x in forecast_7_4_K]
    TimeSensitive_Req_7_5 = [x * perc1 for x in forecast_7_5_K]
    TimeSensitive_Req_7_6 = [x * perc1 for x in forecast_7_6_K]
    TimeSensitive_Req_8_1 = [x * perc1 for x in forecast_8_1_K]
    TimeSensitive_Req_8_2 = [x * perc1 for x in forecast_8_2_K]
    TimeSensitive_Req_8_3 = [x * perc1 for x in forecast_8_3_K]
    TimeSensitive_Req_8_4 = [x * perc1 for x in forecast_8_4_K]
    TimeSensitive_Req_8_5 = [x * perc1 for x in forecast_8_5_K]
    TimeSensitive_Req_8_6 = [x * perc1 for x in forecast_8_6_K]
    
    # 计算经济快递的需求
    Economy_Req_1_4 = [x * perc2 for x in forecast_1_4_K]
    Economy_Req_1_5 = [x * perc2 for x in forecast_1_5_K]
    Economy_Req_1_6 = [x * perc2 for x in forecast_1_6_K]
    Economy_Req_1_7 = [x * perc2 for x in forecast_1_7_K]
    Economy_Req_1_8 = [x * perc2 for x in forecast_1_8_K]
    Economy_Req_2_4 = [x * perc2 for x in forecast_2_4_K]
    Economy_Req_2_5 = [x * perc2 for x in forecast_2_5_K]
    Economy_Req_2_6 = [x * perc2 for x in forecast_2_6_K]
    Economy_Req_2_7 = [x * perc2 for x in forecast_2_7_K]
    Economy_Req_2_8 = [x * perc2 for x in forecast_2_8_K]
    Economy_Req_3_4 = [x * perc2 for x in forecast_3_4_K]
    Economy_Req_3_5 = [x * perc2 for x in forecast_3_5_K]
    Economy_Req_3_6 = [x * perc2 for x in forecast_3_6_K]
    Economy_Req_3_7 = [x * perc2 for x in forecast_3_7_K]
    Economy_Req_3_8 = [x * perc2 for x in forecast_3_8_K]
    Economy_Req_4_1 = [x * perc2 for x in forecast_4_1_K]
    Economy_Req_4_2 = [x * perc2 for x in forecast_4_2_K]
    Economy_Req_4_3 = [x * perc2 for x in forecast_4_3_K]
    Economy_Req_4_7 = [x * perc2 for x in forecast_4_7_K]
    Economy_Req_4_8 = [x * perc2 for x in forecast_4_8_K]
    Economy_Req_5_1 = [x * perc2 for x in forecast_5_1_K]
    Economy_Req_5_2 = [x * perc2 for x in forecast_5_2_K]
    Economy_Req_5_3 = [x * perc2 for x in forecast_5_3_K]
    Economy_Req_5_7 = [x * perc2 for x in forecast_5_7_K]
    Economy_Req_5_8 = [x * perc2 for x in forecast_5_8_K]
    Economy_Req_6_1 = [x * perc2 for x in forecast_6_1_K]
    Economy_Req_6_2 = [x * perc2 for x in forecast_6_2_K]
    Economy_Req_6_3 = [x * perc2 for x in forecast_6_3_K]
    Economy_Req_6_7 = [x * perc2 for x in forecast_6_7_K]
    Economy_Req_6_8 = [x * perc2 for x in forecast_6_8_K]
    Economy_Req_7_1 = [x * perc2 for x in forecast_7_1_K]
    Economy_Req_7_2 = [x * perc2 for x in forecast_7_2_K]
    Economy_Req_7_3 = [x * perc2 for x in forecast_7_3_K]
    Economy_Req_7_4 = [x * perc2 for x in forecast_7_4_K]
    Economy_Req_7_5 = [x * perc2 for x in forecast_7_5_K]
    Economy_Req_7_6 = [x * perc2 for x in forecast_7_6_K]
    Economy_Req_8_1 = [x * perc2 for x in forecast_8_1_K]
    Economy_Req_8_2 = [x * perc2 for x in forecast_8_2_K]
    Economy_Req_8_3 = [x * perc2 for x in forecast_8_3_K]
    Economy_Req_8_4 = [x * perc2 for x in forecast_8_4_K]
    Economy_Req_8_5 = [x * perc2 for x in forecast_8_5_K]
    Economy_Req_8_6 = [x * perc2 for x in forecast_8_6_K]
    
    # 主要计算模型
    m = gp.Model()
    m.Params.OutputFlag = 0
    m.Params.MIPGap = 0.005
    
    x_1_4 = {}
    x_1_5 = {}
    x_1_6 = {}
    x_1_7 = {}
    x_1_8 = {}
    x_2_4 = {}
    x_2_5 = {}
    x_2_6 = {}
    x_2_7 = {}
    x_2_8 = {}
    x_3_4 = {}
    x_3_5 = {}
    x_3_6 = {}
    x_3_7 = {}
    x_3_8 = {}
    x_4_1 = {}
    x_4_2 = {}
    x_4_3 = {}
    x_4_7 = {}
    x_4_8 = {}
    x_5_1 = {}
    x_5_2 = {}
    x_5_3 = {}
    x_5_7 = {}
    x_5_8 = {}
    x_6_1 = {}
    x_6_2 = {}
    x_6_3 = {}
    x_6_7 = {}
    x_6_8 = {}
    x_7_1 = {}
    x_7_2 = {}
    x_7_3 = {}
    x_7_4 = {}
    x_7_5 = {}
    x_7_6 = {}
    x_8_1 = {}
    x_8_2 = {}
    x_8_3 = {}
    x_8_4 = {}
    x_8_5 = {}
    x_8_6 = {}
    
    y_1_4 = {}
    y_1_5 = {}
    y_1_6 = {}
    y_1_7 = {}
    y_1_8 = {}
    y_2_4 = {}
    y_2_5 = {}
    y_2_6 = {}
    y_2_7 = {}
    y_2_8 = {}
    y_3_4 = {}
    y_3_5 = {}
    y_3_6 = {}
    y_3_7 = {}
    y_3_8 = {}
    y_4_1 = {}
    y_4_2 = {}
    y_4_3 = {}
    y_4_7 = {}
    y_4_8 = {}
    y_5_1 = {}
    y_5_2 = {}
    y_5_3 = {}
    y_5_7 = {}
    y_5_8 = {}
    y_6_1 = {}
    y_6_2 = {}
    y_6_3 = {}
    y_6_7 = {}
    y_6_8 = {}
    y_7_1 = {}
    y_7_2 = {}
    y_7_3 = {}
    y_7_4 = {}
    y_7_5 = {}
    y_7_6 = {}
    y_8_1 = {}
    y_8_2 = {}
    y_8_3 = {}
    y_8_4 = {}
    y_8_5 = {}
    y_8_6 = {}
    
    for w in range(1,3):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                x_1_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_1_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_1_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_2_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_2_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_2_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_3_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_3_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_3_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                x_1_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_1_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_2_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_2_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_3_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_3_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                x_4_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_4_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_4_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_5_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_5_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_5_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_6_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_6_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_6_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                x_4_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_4_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_5_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_5_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_6_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_6_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                x_7_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_7_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_7_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                x_7_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_7_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_7_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                
    for w in range(1,3):
        for j in range(N*K):
            for i in range(cargo_BH[j]):
                y_1_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_1_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_1_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_1_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_1_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_2_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_2_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_2_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_2_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_2_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_3_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_3_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_3_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_3_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_3_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
            for i in range(cargo_HS[j]):
                y_4_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_4_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_4_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_5_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_5_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_5_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_6_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_6_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_6_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_4_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_4_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_5_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_5_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_6_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_6_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
            for i in range(cargo_SB[j]):
                y_7_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_7_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_7_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_7_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_7_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_7_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                
    # 客机容量限制约束
    for j in range(len(passengerTime_BH)):
        cal1_BH = 0
        cal1_BH += gp.quicksum(x_1_4[i,j,w]+x_1_5[i,j,w]+x_1_6[i,j,w]+x_2_4[i,j,w]+x_2_5[i,j,w]+x_2_6[i,j,w]+x_3_4[i,j,w]+x_3_5[i,j,w]+x_3_6[i,j,w] for w in range(1,3) for i in range(passengerTime_BH[j]))
        m.addConstr(cal1_BH <= q)
    for j in range(len(passengerTime_BS)):
        cal1_BS = 0
        cal1_BS += gp.quicksum(x_1_7[i,j,w]+x_1_8[i,j,w]+x_2_7[i,j,w]+x_2_8[i,j,w]+x_3_7[i,j,w]+x_3_8[i,j,w] for w in range(1,3) for i in range(passengerTime_BS[j]))
        m.addConstr(cal1_BS <= q)
    for j in range(len(passengerTime_HB)):
        cal1_HB = 0
        cal1_HB += gp.quicksum(x_4_1[i,j,w]+x_4_2[i,j,w]+x_4_3[i,j,w]+x_5_1[i,j,w]+x_5_2[i,j,w]+x_5_3[i,j,w]+x_6_1[i,j,w]+x_6_2[i,j,w]+x_6_3[i,j,w] for w in range(1,3) for i in range(passengerTime_HB[j]))
        m.addConstr(cal1_HB <= q)
    for j in range(len(passengerTime_HS)):
        cal1_HS = 0
        cal1_HS += gp.quicksum(x_4_7[i,j,w]+x_4_8[i,j,w]+x_5_7[i,j,w]+x_5_8[i,j,w]+x_6_7[i,j,w]+x_6_8[i,j,w] for w in range(1,3) for i in range(passengerTime_HS[j]))
        m.addConstr(cal1_HS <= q)
    for j in range(len(passengerTime_SB)):
        cal1_SB = 0
        cal1_SB += gp.quicksum(x_7_1[i,j,w]+x_7_2[i,j,w]+x_7_3[i,j,w]+x_8_1[i,j,w]+x_8_2[i,j,w]+x_8_3[i,j,w] for w in range(1,3) for i in range(passengerTime_SB[j]))
        m.addConstr(cal1_SB <= q)
    for j in range(len(passengerTime_SH)):
        cal1_SH = 0
        cal1_SH += gp.quicksum(x_7_4[i,j,w]+x_7_5[i,j,w]+x_7_6[i,j,w]+x_8_4[i,j,w]+x_8_5[i,j,w]+x_8_6[i,j,w] for w in range(1,3) for i in range(passengerTime_SH[j]))
        m.addConstr(cal1_SH <= q)
        
    # 货机容量约束
    for j in range(N*K):
        cal2_BH = 0
        cal2_BH += (gp.quicksum((y_1_4[i,j,w]+y_1_5[i,j,w]+y_1_6[i,j,w]+y_2_4[i,j,w]+y_2_5[i,j,w]+y_2_6[i,j,w]+y_3_4[i,j,w]+y_3_5[i,j,w]+y_3_6[i,j,w]+y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w]) for w in range(1,3) for i in range(cargo_BH[j]))+gp.quicksum(y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w] for w in range(1,3) for i in range(cargo_SB[j])))
        m.addConstr(cal2_BH <= Q)
    for j in range(N*K):
        cal2_HS = 0
        cal2_HS += (gp.quicksum((y_4_7[i,j,w]+y_4_8[i,j,w]+y_5_7[i,j,w]+y_5_8[i,j,w]+y_6_7[i,j,w]+y_6_8[i,j,w]+y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w]) for w in range(1,3) for i in range(cargo_HS[j]))+gp.quicksum(y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w] for w in range(1,3) for i in range(cargo_BH[j])))
        m.addConstr(cal2_HS <= Q)
    for j in range(N*K):
        cal2_SB = 0
        cal2_SB += (gp.quicksum((y_7_1[i,j,w]+y_7_2[i,j,w]+y_7_3[i,j,w]+y_8_1[i,j,w]+y_8_2[i,j,w]+y_8_3[i,j,w]+y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w]) for w in range(1,3) for i in range(cargo_SB[j]))+gp.quicksum(y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w] for w in range(1,3) for i in range(cargo_HS[j])))
        m.addConstr(cal2_SB <= Q)
        
    # 在能运完的货物中，被运走的货物量最多达到这个时间段的订单需求量
    # 能运完的货物的仓储成本和逾期成本及被丢弃货物的成本计算
    for w in range(1,3):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                C3 += C2per[w] * (x_1_4[i,j,w]*max(BH_passengerTimeTable[j]+t1+t4-i-T_1[w]+flightTime_BH[j],0)+x_1_5[i,j,w]*max(BH_passengerTimeTable[j]+t1+t5-i-T_1[w]+flightTime_BH[j],0)+x_1_6[i,j,w]*max(BH_passengerTimeTable[j]+t1+t6-i-T_1[w]+flightTime_BH[j],0)+x_2_4[i,j,w]*max(BH_passengerTimeTable[j]+t2+t4-i-T_1[w]+flightTime_BH[j],0)+x_2_5[i,j,w]*max(BH_passengerTimeTable[j]+t2+t5-i-T_1[w]+flightTime_BH[j],0)+x_2_6[i,j,w]*max(BH_passengerTimeTable[j]+t2+t6-i-T_1[w]+flightTime_BH[j],0)+x_3_4[i,j,w]*max(BH_passengerTimeTable[j]+t3+t4-i-T_1[w]+flightTime_BH[j],0)+x_3_5[i,j,w]*max(BH_passengerTimeTable[j]+t3+t5-i-T_1[w]+flightTime_BH[j],0)+x_3_6[i,j,w]*max(BH_passengerTimeTable[j]+t3+t6-i-T_1[w]+flightTime_BH[j],0))
                C4 += c1 * ((x_1_4[i,j,w]+x_1_5[i,j,w]+x_1_6[i,j,w]+x_2_4[i,j,w]+x_2_5[i,j,w]+x_2_6[i,j,w]+x_3_4[i,j,w]+x_3_5[i,j,w]+x_3_6[i,j,w]) * (BH_passengerTimeTable[j] - i))
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                C3 += C2per[w] * (x_1_7[i,j,w]*max(BS_passengerTimeTable[j]+t1+t7-i-T_1[w]+flightTime_BS[j],0)+x_1_8[i,j,w]*max(BS_passengerTimeTable[j]+t1+t8-i-T_1[w]+flightTime_BS[j],0)+x_2_7[i,j,w]*max(BS_passengerTimeTable[j]+t2+t7-i-T_1[w]+flightTime_BS[j],0)+x_2_8[i,j,w]*max(BS_passengerTimeTable[j]+t2+t8-i-T_1[w]+flightTime_BS[j],0)+x_3_7[i,j,w]*max(BS_passengerTimeTable[j]+t3+t7-i-T_1[w]+flightTime_BS[j],0)+x_3_8[i,j,w]*max(BS_passengerTimeTable[j]+t3+t8-i-T_1[w]+flightTime_BS[j],0))
                C4 += c1 * ((x_1_7[i,j,w]+x_1_8[i,j,w]+x_2_7[i,j,w]+x_2_8[i,j,w]+x_3_7[i,j,w]+x_3_8[i,j,w]) * (BS_passengerTimeTable[j] - i))
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                C3 += C2per[w] * (x_4_1[i,j,w]*max(HB_passengerTimeTable[j]+t4+t1-i-T_1[w]+flightTime_HB[j],0)+x_4_2[i,j,w]*max(HB_passengerTimeTable[j]+t4+t2-i-T_1[w]+flightTime_HB[j],0)+x_4_3[i,j,w]*max(HB_passengerTimeTable[j]+t4+t3-i-T_1[w]+flightTime_HB[j],0)+x_5_1[i,j,w]*max(HB_passengerTimeTable[j]+t5+t1-i-T_1[w]+flightTime_HB[j],0)+x_5_2[i,j,w]*max(HB_passengerTimeTable[j]+t5+t2-i-T_1[w]+flightTime_HB[j],0)+x_5_3[i,j,w]*max(HB_passengerTimeTable[j]+t5+t3-i-T_1[w]+flightTime_HB[j],0)+x_6_1[i,j,w]*max(HB_passengerTimeTable[j]+t6+t1-i-T_1[w]+flightTime_HB[j],0)+x_6_2[i,j,w]*max(HB_passengerTimeTable[j]+t6+t2-i-T_1[w]+flightTime_HB[j],0)+x_6_3[i,j,w]*max(HB_passengerTimeTable[j]+t6+t3-i-T_1[w]+flightTime_HB[j],0))
                C4 += c1 * ((x_4_1[i,j,w]+x_4_2[i,j,w]+x_4_3[i,j,w]+x_5_1[i,j,w]+x_5_2[i,j,w]+x_5_3[i,j,w]+x_6_1[i,j,w]+x_6_2[i,j,w]+x_6_3[i,j,w]) * (HB_passengerTimeTable[j] - i))
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                C3 += C2per[w] * (x_4_7[i,j,w]*max(HS_passengerTimeTable[j]+t4+t7-i-T_1[w]+flightTime_HS[j],0)+x_4_8[i,j,w]*max(HS_passengerTimeTable[j]+t4+t8-i-T_1[w]+flightTime_HS[j],0)+x_5_7[i,j,w]*max(HS_passengerTimeTable[j]+t5+t7-i-T_1[w]+flightTime_HS[j],0)+x_5_8[i,j,w]*max(HS_passengerTimeTable[j]+t5+t8-i-T_1[w]+flightTime_HS[j],0)+x_6_7[i,j,w]*max(HS_passengerTimeTable[j]+t6+t7-i-T_1[w]+flightTime_HS[j],0)+x_6_8[i,j,w]*max(HS_passengerTimeTable[j]+t6+t8-i-T_1[w]+flightTime_HS[j],0))
                C4 += c1 * ((x_4_7[i,j,w]+x_4_8[i,j,w]+x_5_7[i,j,w]+x_5_8[i,j,w]+x_6_7[i,j,w]+x_6_8[i,j,w]) * (HS_passengerTimeTable[j] - i))
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                C3 += C2per[w] * (x_7_1[i,j,w]*max(SB_passengerTimeTable[j]+t7+t1-i-T_1[w]+flightTime_SB[j],0)+x_7_2[i,j,w]*max(SB_passengerTimeTable[j]+t7+t2-i-T_1[w]+flightTime_SB[j],0)+x_7_3[i,j,w]*max(SB_passengerTimeTable[j]+t7+t3-i-T_1[w]+flightTime_SB[j],0)+x_8_1[i,j,w]*max(SB_passengerTimeTable[j]+t8+t1-i-T_1[w]+flightTime_SB[j],0)+x_8_2[i,j,w]*max(SB_passengerTimeTable[j]+t8+t2-i-T_1[w]+flightTime_SB[j],0)+x_8_3[i,j,w]*max(SB_passengerTimeTable[j]+t8+t3-i-T_1[w]+flightTime_SB[j],0))
                C4 += c1 * ((x_7_1[i,j,w]+x_7_2[i,j,w]+x_7_3[i,j,w]+x_8_1[i,j,w]+x_8_2[i,j,w]+x_8_3[i,j,w]) * (SB_passengerTimeTable[j] - i))
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                C3 += C2per[w] * (x_7_4[i,j,w]*max(SH_passengerTimeTable[j]+t7+t4-i-T_1[w]+flightTime_SH[j],0)+x_7_5[i,j,w]*max(SH_passengerTimeTable[j]+t7+t5-i-T_1[w]+flightTime_SH[j],0)+x_7_6[i,j,w]*max(SH_passengerTimeTable[j]+t7+t6-i-T_1[w]+flightTime_SH[j],0)+x_8_4[i,j,w]*max(SH_passengerTimeTable[j]+t8+t4-i-T_1[w]+flightTime_SH[j],0)+x_8_5[i,j,w]*max(SH_passengerTimeTable[j]+t8+t5-i-T_1[w]+flightTime_SH[j],0)+x_8_6[i,j,w]*max(SH_passengerTimeTable[j]+t8+t6-i-T_1[w]+flightTime_SH[j],0))
                C4 += c1 * ((x_7_4[i,j,w]+x_7_5[i,j,w]+x_7_6[i,j,w]+x_8_4[i,j,w]+x_8_5[i,j,w]+x_8_6[i,j,w]) * (SH_passengerTimeTable[j] - i))
        for j in range(N*K):
            for i in range(cargo_BH[j]):
                C3 += C2per[w] * (y_1_4[i,j,w]*max(cargo_BH[j]+t1+t4-i-T_1[w]+Tcargo_1,0)+y_1_5[i,j,w]*max(cargo_BH[j]+t1+t5-i-T_1[w]+Tcargo_1,0)+y_1_6[i,j,w]*max(cargo_BH[j]+t1+t6-i-T_1[w]+Tcargo_1,0)+y_2_4[i,j,w]*max(cargo_BH[j]+t2+t4-i-T_1[w]+Tcargo_1,0)+y_2_5[i,j,w]*max(cargo_BH[j]+t2+t5-i-T_1[w]+Tcargo_1,0)+y_2_6[i,j,w]*max(cargo_BH[j]+t2+t6-i-T_1[w]+Tcargo_1,0))
                C3 += C2per[w] * (y_1_7[i,j,w]*max(cargo_HS[j]+t1+t7-i-T_1[w]+Tcargo_2,0)+y_1_8[i,j,w]*max(cargo_HS[j]+t1+t8-i-T_1[w]+Tcargo_2,0)+y_2_7[i,j,w]*max(cargo_HS[j]+t2+t7-i-T_1[w]+Tcargo_2,0)+y_2_8[i,j,w]*max(cargo_HS[j]+t2+t8-i-T_1[w]+Tcargo_2,0)+y_3_7[i,j,w]*max(cargo_HS[j]+t3+t7-i-T_1[w]+Tcargo_2,0)+y_3_8[i,j,w]*max(cargo_HS[j]+t3+t8-i-T_1[w]+Tcargo_2,0))
                C4 += c1 * ((y_1_4[i,j,w]+y_1_5[i,j,w]+y_1_6[i,j,w]+y_2_4[i,j,w]+y_2_5[i,j,w]+y_2_6[i,j,w]+y_3_4[i,j,w]+y_3_5[i,j,w]+y_3_6[i,j,w]+y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w]) * (cargo_BH[j] - i))
            for i in range(cargo_HS[j]):
                C3 += C2per[w] * (y_4_1[i,j,w]*max(cargo_SB[j]+t4+t1-i-T_1[w]+Tcargo_3,0)+y_4_2[i,j,w]*max(cargo_SB[j]+t4+t2-i-T_1[w]+Tcargo_3,0)+y_4_3[i,j,w]*max(cargo_SB[j]+t4+t3-i-T_1[w]+Tcargo_3,0)+y_5_1[i,j,w]*max(cargo_HS[j]+t5+t1-i-T_1[w]+Tcargo_3,0)+y_5_2[i,j,w]*max(cargo_SB[j]+t5+t2-i-T_1[w]+Tcargo_3,0)+y_5_3[i,j,w]*max(cargo_SB[j]+t5+t3-i-T_1[w]+Tcargo_3,0))
                C3 += C2per[w] * (y_4_7[i,j,w]*max(cargo_HS[j]+t4+t7-i-T_1[w]+Tcargo_2,0)+y_4_8[i,j,w]*max(cargo_HS[j]+t4+t8-i-T_1[w]+Tcargo_2,0)+y_5_7[i,j,w]*max(cargo_HS[j]+t5+t7-i-T_1[w]+Tcargo_2,0)+y_5_8[i,j,w]*max(cargo_HS[j]+t5+t8-i-T_1[w]+Tcargo_2,0))
                C4 += c1 * ((y_4_7[i,j,w]+y_4_8[i,j,w]+y_5_7[i,j,w]+y_5_8[i,j,w]+y_6_7[i,j,w]+y_6_8[i,j,w]+y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w]) * (cargo_HS[j] - i))
            for i in range(cargo_SB[j]):
                C3 += C2per[w] * (y_7_1[i,j,w]*max(cargo_SB[j]+t7+t1-i-T_1[w]+Tcargo_3,0)+y_7_2[i,j,w]*max(cargo_SB[j]+t7+t2-i-T_1[w]+Tcargo_3,0)+y_7_3[i,j,w]*max(cargo_SB[j]+t7+t3-i-T_1[w]+Tcargo_3,0)+y_8_1[i,j,w]*max(cargo_SB[j]+t8+t1-i-T_1[w]+Tcargo_3,0)+y_8_2[i,j,w]*max(cargo_SB[j]+t8+t2-i-T_1[w]+Tcargo_3,0)+y_8_3[i,j,w]*max(cargo_SB[j]+t8+t3-i-T_1[w]+Tcargo_3,0))
                C3 += C2per[w] * (y_7_4[i,j,w]*max(cargo_BH[j]+t7+t4-i-T_1[w]+Tcargo_1,0)+y_7_5[i,j,w]*max(cargo_BH[j]+t7+t5-i-T_1[w]+Tcargo_1,0)+y_7_6[i,j,w]*max(cargo_BH[j]+t7+t6-i-T_1[w]+Tcargo_1,0)+y_8_4[i,j,w]*max(cargo_BH[j]+t8+t4-i-T_1[w]+Tcargo_1,0)+y_8_5[i,j,w]*max(cargo_BH[j]+t8+t5-i-T_1[w]+Tcargo_1,0)+y_8_6[i,j,w]*max(cargo_BH[j]+t8+t6-i-T_1[w]+Tcargo_1,0))
                C4 += c1 * ((y_7_1[i,j,w]+y_7_2[i,j,w]+y_7_3[i,j,w]+y_8_1[i,j,w]+y_8_2[i,j,w]+y_8_3[i,j,w]+y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w]) * (cargo_SB[j] - i))
                
    TimeSensitive_Req_BH = [x1+x2+x3+x4+x5+x6+x7+x8+x9 for x1,x2,x3,x4,x5,x6,x7,x8,x9 in zip(TimeSensitive_Req_1_4,TimeSensitive_Req_1_5,TimeSensitive_Req_1_6,TimeSensitive_Req_2_4,TimeSensitive_Req_2_5,TimeSensitive_Req_2_6,TimeSensitive_Req_3_4,TimeSensitive_Req_3_5,TimeSensitive_Req_3_6)]
    TimeSensitive_Req_BS = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(TimeSensitive_Req_1_7,TimeSensitive_Req_1_8,TimeSensitive_Req_2_7,TimeSensitive_Req_2_8,TimeSensitive_Req_3_7,TimeSensitive_Req_3_8)]
    TimeSensitive_Req_HB = [x1+x2+x3+x4+x5+x6+x7+x8+x9 for x1,x2,x3,x4,x5,x6,x7,x8,x9 in zip(TimeSensitive_Req_4_1,TimeSensitive_Req_4_2,TimeSensitive_Req_4_3,TimeSensitive_Req_5_1,TimeSensitive_Req_5_2,TimeSensitive_Req_5_3,TimeSensitive_Req_6_1,TimeSensitive_Req_6_2,TimeSensitive_Req_6_3)]
    TimeSensitive_Req_HS = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(TimeSensitive_Req_4_7,TimeSensitive_Req_4_8,TimeSensitive_Req_5_7,TimeSensitive_Req_5_8,TimeSensitive_Req_6_7,TimeSensitive_Req_6_8)]
    TimeSensitive_Req_SB = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(TimeSensitive_Req_7_1,TimeSensitive_Req_7_2,TimeSensitive_Req_7_3,TimeSensitive_Req_8_1,TimeSensitive_Req_8_2,TimeSensitive_Req_8_3)]
    TimeSensitive_Req_SH = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(TimeSensitive_Req_7_4,TimeSensitive_Req_7_5,TimeSensitive_Req_7_6,TimeSensitive_Req_8_4,TimeSensitive_Req_8_5,TimeSensitive_Req_8_6)]
    Economy_Req_BH = [x1+x2+x3+x4+x5+x6+x7+x8+x9 for x1,x2,x3,x4,x5,x6,x7,x8,x9 in zip(Economy_Req_1_4,Economy_Req_1_5,Economy_Req_1_6,Economy_Req_2_4,Economy_Req_2_5,Economy_Req_2_6,Economy_Req_3_4,Economy_Req_3_5,Economy_Req_3_6)]
    Economy_Req_BS = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(Economy_Req_1_7,Economy_Req_1_8,Economy_Req_2_7,Economy_Req_2_8,Economy_Req_3_7,Economy_Req_3_8)]
    Economy_Req_HB = [x1+x2+x3+x4+x5+x6+x7+x8+x9 for x1,x2,x3,x4,x5,x6,x7,x8,x9 in zip(Economy_Req_4_1,Economy_Req_4_2,Economy_Req_4_3,Economy_Req_5_1,Economy_Req_5_2,Economy_Req_5_3,Economy_Req_6_1,Economy_Req_6_2,Economy_Req_6_3)]
    Economy_Req_HS = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(Economy_Req_4_7,Economy_Req_4_8,Economy_Req_5_7,Economy_Req_5_8,Economy_Req_6_7,Economy_Req_6_8)]
    Economy_Req_SB = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(Economy_Req_7_1,Economy_Req_7_2,Economy_Req_7_3,Economy_Req_8_1,Economy_Req_8_2,Economy_Req_8_3)]
    Economy_Req_SH = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(Economy_Req_7_4,Economy_Req_7_5,Economy_Req_7_6,Economy_Req_8_4,Economy_Req_8_5,Economy_Req_8_6)]
    forecast_BH_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_BH,Economy_Req_BH)]
    forecast_BS_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_BS,Economy_Req_BS)]
    forecast_HB_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_HB,Economy_Req_HB)]
    forecast_HS_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_HS,Economy_Req_HS)]
    forecast_SB_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_SB,Economy_Req_SB)]
    forecast_SH_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_SH,Economy_Req_SH)]
    passengerTotalBH = 0
    cargoTotalBH = 0
    passengerTotalBS = 0
    cargoTotalBS = 0
    passengerTotalHB = 0
    cargoTotalHB = 0
    passengerTotalHS = 0
    cargoTotalHS = 0
    passengerTotalSB = 0
    cargoTotalSB = 0
    passengerTotalSH = 0
    cargoTotalSH = 0
    
    for k in range(last_BH):
        transOut1 = 0
        transOut2 = 0
        transOut1_1_4 = 0
        transOut1_1_5 = 0
        transOut1_1_6 = 0
        transOut2_1_4 = 0
        transOut2_1_5 = 0
        transOut2_1_6 = 0
        transOut1_2_4 = 0
        transOut1_2_5 = 0
        transOut1_2_6 = 0
        transOut2_2_4 = 0
        transOut2_2_5 = 0
        transOut2_2_6 = 0
        transOut1_3_4 = 0
        transOut1_3_5 = 0
        transOut1_3_6 = 0
        transOut2_3_4 = 0
        transOut2_3_5 = 0
        transOut2_3_6 = 0
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                if i == k:
                    transOut1_1_4 += x_1_4[i,j,1]
                    transOut2_1_4 += x_1_4[i,j,2]
                    transOut1_1_5 += x_1_5[i,j,1]
                    transOut2_1_5 += x_1_5[i,j,2]
                    transOut1_1_6 += x_1_6[i,j,1]
                    transOut2_1_6 += x_1_6[i,j,2]
                    transOut1_2_4 += x_2_4[i,j,1]
                    transOut2_2_4 += x_2_4[i,j,2]
                    transOut1_2_5 += x_2_5[i,j,1]
                    transOut2_2_5 += x_2_5[i,j,2]
                    transOut1_2_6 += x_2_6[i,j,1]
                    transOut2_2_6 += x_2_6[i,j,2]
                    transOut1_3_4 += x_3_4[i,j,1]
                    transOut2_3_4 += x_3_4[i,j,2]
                    transOut1_3_5 += x_3_5[i,j,1]
                    transOut2_3_5 += x_3_5[i,j,2]
                    transOut1_3_6 += x_3_6[i,j,1]
                    transOut2_3_6 += x_3_6[i,j,2]
                    transOut1 += (x_1_4[i,j,1]+x_1_5[i,j,1]+x_1_6[i,j,1]+x_2_4[i,j,1]+x_2_5[i,j,1]+x_2_6[i,j,1]+x_3_4[i,j,1]+x_3_5[i,j,1]+x_3_6[i,j,1])
                    transOut2 += (x_1_4[i,j,2]+x_1_5[i,j,2]+x_1_6[i,j,2]+x_2_4[i,j,2]+x_2_5[i,j,2]+x_2_6[i,j,2]+x_3_4[i,j,2]+x_3_5[i,j,2]+x_3_6[i,j,2])
                    passengerTotalBH += (x_1_4[i,j,1]+x_1_5[i,j,1]+x_1_6[i,j,1]+x_2_4[i,j,1]+x_2_5[i,j,1]+x_2_6[i,j,1]+x_3_4[i,j,1]+x_3_5[i,j,1]+x_3_6[i,j,1]+x_1_4[i,j,2]+x_1_5[i,j,2]+x_1_6[i,j,2]+x_2_4[i,j,2]+x_2_5[i,j,2]+x_2_6[i,j,2]+x_3_4[i,j,2]+x_3_5[i,j,2]+x_3_6[i,j,2])          
        for j in range(N*K):
            for i in range(cargo_BH[j]):
                if i == k:
                    transOut1_1_4 += y_1_4[i,j,1]
                    transOut2_1_4 += y_1_4[i,j,2]
                    transOut1_1_5 += y_1_5[i,j,1]
                    transOut2_1_5 += y_1_5[i,j,2]
                    transOut1_1_6 += y_1_6[i,j,1]
                    transOut2_1_6 += y_1_6[i,j,2]
                    transOut1_2_4 += y_2_4[i,j,1]
                    transOut2_2_4 += y_2_4[i,j,2]
                    transOut1_2_5 += y_2_5[i,j,1]
                    transOut2_2_5 += y_2_5[i,j,2]
                    transOut1_2_6 += y_2_6[i,j,1]
                    transOut2_2_6 += y_2_6[i,j,2]
                    transOut1_3_4 += y_3_4[i,j,1]
                    transOut2_3_4 += y_3_4[i,j,2]
                    transOut1_3_5 += y_3_5[i,j,1]
                    transOut2_3_5 += y_3_5[i,j,2]
                    transOut1_3_6 += y_3_6[i,j,1]
                    transOut2_3_6 += y_3_6[i,j,2]
                    transOut1 += (y_1_4[i,j,1]+y_1_5[i,j,1]+y_1_6[i,j,1]+y_2_4[i,j,1]+y_2_5[i,j,1]+y_2_6[i,j,1]+y_3_4[i,j,1]+y_3_5[i,j,1]+y_3_6[i,j,1])
                    transOut2 += (y_1_4[i,j,2]+y_1_5[i,j,2]+y_1_6[i,j,2]+y_2_4[i,j,2]+y_2_5[i,j,2]+y_2_6[i,j,2]+y_3_4[i,j,2]+y_3_5[i,j,2]+y_3_6[i,j,2])
                    cargoTotalBH += (y_1_4[i,j,1]+y_1_5[i,j,1]+y_1_6[i,j,1]+y_2_4[i,j,1]+y_2_5[i,j,1]+y_2_6[i,j,1]+y_3_4[i,j,1]+y_3_5[i,j,1]+y_3_6[i,j,1]+y_1_4[i,j,2]+y_1_5[i,j,2]+y_1_6[i,j,2]+y_2_4[i,j,2]+y_2_5[i,j,2]+y_2_6[i,j,2]+y_3_4[i,j,2]+y_3_5[i,j,2]+y_3_6[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_1_4 <= TimeSensitive_Req_1_4[k])
        m.addConstr(transOut2_1_4 <= Economy_Req_1_4[k])
        m.addConstr(transOut1_1_5 <= TimeSensitive_Req_1_5[k])
        m.addConstr(transOut2_1_5 <= Economy_Req_1_5[k])
        m.addConstr(transOut1_1_6 <= TimeSensitive_Req_1_6[k])
        m.addConstr(transOut2_1_6 <= Economy_Req_1_6[k])
        m.addConstr(transOut1_2_4 <= TimeSensitive_Req_2_4[k])
        m.addConstr(transOut2_2_4 <= Economy_Req_2_4[k])
        m.addConstr(transOut1_2_5 <= TimeSensitive_Req_2_5[k])
        m.addConstr(transOut2_2_5 <= Economy_Req_2_5[k])
        m.addConstr(transOut1_2_6 <= TimeSensitive_Req_2_6[k])
        m.addConstr(transOut2_2_6 <= Economy_Req_2_6[k])
        m.addConstr(transOut1_3_4 <= TimeSensitive_Req_3_4[k])
        m.addConstr(transOut2_3_4 <= Economy_Req_3_4[k])
        m.addConstr(transOut1_3_5 <= TimeSensitive_Req_3_5[k])
        m.addConstr(transOut2_3_5 <= Economy_Req_3_5[k])
        m.addConstr(transOut1_3_6 <= TimeSensitive_Req_3_6[k])
        m.addConstr(transOut2_3_6 <= Economy_Req_3_6[k])
        trash = c3_1 * (TimeSensitive_Req_BH[k]-transOut1) + c3_2 * (Economy_Req_BH[k]-transOut2)
        C6 += trash
    for k in range(last_BS):
        transOut1 = 0
        transOut2 = 0
        transOut1_1_7 = 0
        transOut2_1_7 = 0
        transOut1_1_8 = 0
        transOut2_1_8 = 0
        transOut1_2_7 = 0
        transOut2_2_7 = 0
        transOut1_2_8 = 0
        transOut2_2_8 = 0
        transOut1_3_7 = 0
        transOut2_3_7 = 0
        transOut1_3_8 = 0
        transOut2_3_8 = 0
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                if i == k:
                    transOut1_1_7 += x_1_7[i,j,1]
                    transOut2_1_7 += x_1_7[i,j,2]
                    transOut1_1_8 += x_1_8[i,j,1]
                    transOut2_1_8 += x_1_8[i,j,2]
                    transOut1_2_7 += x_2_7[i,j,1]
                    transOut2_2_7 += x_2_7[i,j,2]
                    transOut1_2_8 += x_2_8[i,j,1]
                    transOut2_2_8 += x_2_8[i,j,2]
                    transOut1_3_7 += x_3_7[i,j,1]
                    transOut2_3_7 += x_3_7[i,j,2]
                    transOut1_3_8 += x_3_8[i,j,1]
                    transOut2_3_8 += x_3_8[i,j,2]
                    transOut1 += (x_1_7[i,j,1]+x_1_8[i,j,1]+x_2_7[i,j,1]+x_2_8[i,j,1]+x_3_7[i,j,1]+x_3_8[i,j,1])
                    transOut2 += (x_1_7[i,j,2]+x_1_8[i,j,2]+x_2_7[i,j,2]+x_2_8[i,j,2]+x_3_7[i,j,2]+x_3_8[i,j,2])
                    passengerTotalBS += (x_1_7[i,j,1]+x_1_8[i,j,1]+x_2_7[i,j,1]+x_2_8[i,j,1]+x_3_7[i,j,1]+x_3_8[i,j,1]+x_1_7[i,j,2]+x_1_8[i,j,2]+x_2_7[i,j,2]+x_2_8[i,j,2]+x_3_7[i,j,2]+x_3_8[i,j,2])
        for j in range(N*K):
            for i in range(cargo_BH[j]):
                if i == k:
                    transOut1_1_7 += y_1_7[i,j,1]
                    transOut2_1_7 += y_1_7[i,j,2]
                    transOut1_1_8 += y_1_8[i,j,1]
                    transOut2_1_8 += y_1_8[i,j,2]
                    transOut1_2_7 += y_2_7[i,j,1]
                    transOut2_2_7 += y_2_7[i,j,2]
                    transOut1_2_8 += y_2_8[i,j,1]
                    transOut2_2_8 += y_2_8[i,j,2]
                    transOut1_3_7 += y_3_7[i,j,1]
                    transOut2_3_7 += y_3_7[i,j,2]
                    transOut1_3_8 += y_3_8[i,j,1]
                    transOut2_3_8 += y_3_8[i,j,2]
                    transOut1 += (y_1_7[i,j,1]+y_1_8[i,j,1]+y_2_7[i,j,1]+y_2_8[i,j,1]+y_3_7[i,j,1]+y_3_8[i,j,1])
                    transOut2 += (y_1_7[i,j,2]+y_1_8[i,j,2]+y_2_7[i,j,2]+y_2_8[i,j,2]+y_3_7[i,j,2]+y_3_8[i,j,2])
                    cargoTotalBS += (y_1_7[i,j,1]+y_1_8[i,j,1]+y_2_7[i,j,1]+y_2_8[i,j,1]+y_3_7[i,j,1]+y_3_8[i,j,1]+y_1_7[i,j,2]+y_1_8[i,j,2]+y_2_7[i,j,2]+y_2_8[i,j,2]+y_3_7[i,j,2]+y_3_8[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_1_7 <= TimeSensitive_Req_1_7[k])
        m.addConstr(transOut2_1_7 <= Economy_Req_1_7[k])
        m.addConstr(transOut1_1_8 <= TimeSensitive_Req_1_8[k])
        m.addConstr(transOut2_1_8 <= Economy_Req_1_8[k])
        m.addConstr(transOut1_2_7 <= TimeSensitive_Req_2_7[k])
        m.addConstr(transOut2_2_7 <= Economy_Req_2_7[k])
        m.addConstr(transOut1_2_8 <= TimeSensitive_Req_2_8[k])
        m.addConstr(transOut2_2_8 <= Economy_Req_2_8[k])
        m.addConstr(transOut1_3_7 <= TimeSensitive_Req_3_7[k])
        m.addConstr(transOut2_3_7 <= Economy_Req_3_7[k])
        m.addConstr(transOut1_3_8 <= TimeSensitive_Req_3_8[k])
        m.addConstr(transOut2_3_8 <= Economy_Req_3_8[k])
        trash = c3_1 * (TimeSensitive_Req_BS[k]-transOut1) + c3_2 * (Economy_Req_BS[k]-transOut2)
        C6 += trash
    for k in range(last_HB):
        transOut1 = 0
        transOut2 = 0
        transOut1_4_1 = 0
        transOut2_4_1 = 0
        transOut1_4_2 = 0
        transOut2_4_2 = 0
        transOut1_4_3 = 0
        transOut2_4_3 = 0
        transOut1_5_1 = 0
        transOut2_5_1 = 0
        transOut1_5_2 = 0
        transOut2_5_2 = 0
        transOut1_5_3 = 0
        transOut2_5_3 = 0
        transOut1_6_1 = 0
        transOut2_6_1 = 0
        transOut1_6_2 = 0
        transOut2_6_2 = 0
        transOut1_6_3 = 0
        transOut2_6_3 = 0
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                if i == k:
                    transOut1_4_1 += x_4_1[i,j,1]
                    transOut2_4_1 += x_4_1[i,j,2]
                    transOut1_4_2 += x_4_2[i,j,1]
                    transOut2_4_2 += x_4_2[i,j,2]
                    transOut1_4_3 += x_4_3[i,j,1]
                    transOut2_4_3 += x_4_3[i,j,2]
                    transOut1_5_1 += x_5_1[i,j,1]
                    transOut2_5_1 += x_5_1[i,j,2]
                    transOut1_5_2 += x_5_2[i,j,1]
                    transOut2_5_2 += x_5_2[i,j,2]
                    transOut1_5_3 += x_5_3[i,j,1]
                    transOut2_5_3 += x_5_3[i,j,2]
                    transOut1_6_1 += x_6_1[i,j,1]
                    transOut2_6_1 += x_6_1[i,j,2]
                    transOut1_6_2 += x_6_2[i,j,1]
                    transOut2_6_2 += x_6_2[i,j,2]
                    transOut1_6_3 += x_6_3[i,j,1]
                    transOut2_6_3 += x_6_3[i,j,2]
                    transOut1 += x_4_1[i,j,1]+x_4_2[i,j,1]+x_4_3[i,j,1]+x_5_1[i,j,1]+x_5_2[i,j,1]+x_5_3[i,j,1]+x_6_1[i,j,1]+x_6_2[i,j,1]+x_6_3[i,j,1]
                    transOut2 += x_4_1[i,j,2]+x_4_2[i,j,2]+x_4_3[i,j,2]+x_5_1[i,j,2]+x_5_2[i,j,2]+x_5_3[i,j,2]+x_6_1[i,j,2]+x_6_2[i,j,2]+x_6_3[i,j,2]
                    passengerTotalHB += (x_4_1[i,j,1]+x_4_2[i,j,1]+x_4_3[i,j,1]+x_5_1[i,j,1]+x_5_2[i,j,1]+x_5_3[i,j,1]+x_6_1[i,j,1]+x_6_2[i,j,1]+x_6_3[i,j,1]+x_4_1[i,j,2]+x_4_2[i,j,2]+x_4_3[i,j,2]+x_5_1[i,j,2]+x_5_2[i,j,2]+x_5_3[i,j,2]+x_6_1[i,j,2]+x_6_2[i,j,2]+x_6_3[i,j,2])
        for j in range(N*K):
            for i in range(cargo_HS[j]):
                if i == k:
                    transOut1_4_1 += y_4_1[i,j,1]
                    transOut2_4_1 += y_4_1[i,j,2]
                    transOut1_4_2 += y_4_2[i,j,1]
                    transOut2_4_2 += y_4_2[i,j,2]
                    transOut1_4_3 += y_4_3[i,j,1]
                    transOut2_4_3 += y_4_3[i,j,2]
                    transOut1_5_1 += y_5_1[i,j,1]
                    transOut2_5_1 += y_5_1[i,j,2]
                    transOut1_5_2 += y_5_2[i,j,1]
                    transOut2_5_2 += y_5_2[i,j,2]
                    transOut1_5_3 += y_5_3[i,j,1]
                    transOut2_5_3 += y_5_3[i,j,2]
                    transOut1_6_1 += y_6_1[i,j,1]
                    transOut2_6_1 += y_6_1[i,j,2]
                    transOut1_6_2 += y_6_2[i,j,1]
                    transOut2_6_2 += y_6_2[i,j,2]
                    transOut1_6_3 += y_6_3[i,j,1]
                    transOut2_6_3 += y_6_3[i,j,2]
                    transOut1 += y_4_1[i,j,1]+y_4_2[i,j,1]+y_4_3[i,j,1]+y_5_1[i,j,1]+y_5_2[i,j,1]+y_5_3[i,j,1]+y_6_1[i,j,1]+y_6_2[i,j,1]+y_6_3[i,j,1]
                    transOut2 += y_4_1[i,j,2]+y_4_2[i,j,2]+y_4_3[i,j,2]+y_5_1[i,j,2]+y_5_2[i,j,2]+y_5_3[i,j,2]+y_6_1[i,j,2]+y_6_2[i,j,2]+y_6_3[i,j,2]
                    cargoTotalHB += (y_4_1[i,j,1]+y_4_2[i,j,1]+y_4_3[i,j,1]+y_5_1[i,j,1]+y_5_2[i,j,1]+y_5_3[i,j,1]+y_6_1[i,j,1]+y_6_2[i,j,1]+y_6_3[i,j,1]+y_4_1[i,j,2]+y_4_2[i,j,2]+y_4_3[i,j,2]+y_5_1[i,j,2]+y_5_2[i,j,2]+y_5_3[i,j,2]+y_6_1[i,j,2]+y_6_2[i,j,2]+y_6_3[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_4_1 <= TimeSensitive_Req_4_1[k])
        m.addConstr(transOut2_4_1 <= Economy_Req_4_1[k])
        m.addConstr(transOut1_4_2 <= TimeSensitive_Req_4_2[k])
        m.addConstr(transOut2_4_2 <= Economy_Req_4_2[k])
        m.addConstr(transOut1_4_3 <= TimeSensitive_Req_4_3[k])
        m.addConstr(transOut2_4_3 <= Economy_Req_4_3[k])
        m.addConstr(transOut1_5_1 <= TimeSensitive_Req_5_1[k])
        m.addConstr(transOut2_5_1 <= Economy_Req_5_1[k])
        m.addConstr(transOut1_5_2 <= TimeSensitive_Req_5_2[k])
        m.addConstr(transOut2_5_2 <= Economy_Req_5_2[k])
        m.addConstr(transOut1_5_3 <= TimeSensitive_Req_5_3[k])
        m.addConstr(transOut2_5_3 <= Economy_Req_5_3[k])
        m.addConstr(transOut1_6_1 <= TimeSensitive_Req_6_1[k])
        m.addConstr(transOut2_6_1 <= Economy_Req_6_1[k])
        m.addConstr(transOut1_6_2 <= TimeSensitive_Req_6_2[k])
        m.addConstr(transOut2_6_2 <= Economy_Req_6_2[k])
        m.addConstr(transOut1_6_3 <= TimeSensitive_Req_6_3[k])
        m.addConstr(transOut2_6_3 <= Economy_Req_6_3[k])
        trash = c3_1 * (TimeSensitive_Req_HB[k]-transOut1) + c3_2 * (Economy_Req_HB[k]-transOut2)
        C6 += trash
    for k in range(last_HS):
        transOut1 = 0
        transOut2 = 0
        transOut1_4_7 = 0
        transOut2_4_7 = 0
        transOut1_4_8 = 0
        transOut2_4_8 = 0
        transOut1_5_7 = 0
        transOut2_5_7 = 0
        transOut1_5_8 = 0
        transOut2_5_8 = 0
        transOut1_6_7 = 0
        transOut2_6_7 = 0
        transOut1_6_8 = 0
        transOut2_6_8 = 0
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                if i == k:
                    transOut1_4_7 += x_4_7[i,j,1]
                    transOut2_4_7 += x_4_7[i,j,2]
                    transOut1_4_8 += x_4_8[i,j,1]
                    transOut2_4_8 += x_4_8[i,j,2]
                    transOut1_5_7 += x_5_7[i,j,1]
                    transOut2_5_7 += x_5_7[i,j,2]
                    transOut1_5_8 += x_5_8[i,j,1]
                    transOut2_5_8 += x_5_8[i,j,2]
                    transOut1_6_7 += x_6_7[i,j,1]
                    transOut2_6_7 += x_6_7[i,j,2]
                    transOut1_6_8 += x_6_8[i,j,1]
                    transOut2_6_8 += x_6_8[i,j,2]
                    transOut1 += x_4_7[i,j,1]+x_4_8[i,j,1]+x_5_7[i,j,1]+x_5_8[i,j,1]+x_6_7[i,j,1]+x_6_8[i,j,1]
                    transOut2 += x_4_7[i,j,2]+x_4_8[i,j,2]+x_5_7[i,j,2]+x_5_8[i,j,2]+x_6_7[i,j,2]+x_6_8[i,j,2]
                    passengerTotalHS += (x_4_7[i,j,1]+x_4_8[i,j,1]+x_5_7[i,j,1]+x_5_8[i,j,1]+x_6_7[i,j,1]+x_6_8[i,j,1]+x_4_7[i,j,2]+x_4_8[i,j,2]+x_5_7[i,j,2]+x_5_8[i,j,2]+x_6_7[i,j,2]+x_6_8[i,j,2])
        for j in range(N*K):
            for i in range(cargo_HS[j]):
                if i == k:
                    transOut1_4_7 += y_4_7[i,j,1]
                    transOut2_4_7 += y_4_7[i,j,2]
                    transOut1_4_8 += y_4_8[i,j,1]
                    transOut2_4_8 += y_4_8[i,j,2]
                    transOut1_5_7 += y_5_7[i,j,1]
                    transOut2_5_7 += y_5_7[i,j,2]
                    transOut1_5_8 += y_5_8[i,j,1]
                    transOut2_5_8 += y_5_8[i,j,2]
                    transOut1_6_7 += y_6_7[i,j,1]
                    transOut2_6_7 += y_6_7[i,j,2]
                    transOut1_6_8 += y_6_8[i,j,1]
                    transOut2_6_8 += y_6_8[i,j,2]
                    transOut1 += y_4_7[i,j,1]+y_4_8[i,j,1]+y_5_7[i,j,1]+y_5_8[i,j,1]+y_6_7[i,j,1]+y_6_8[i,j,1]
                    transOut2 += y_4_7[i,j,2]+y_4_8[i,j,2]+y_5_7[i,j,2]+y_5_8[i,j,2]+y_6_7[i,j,2]+y_6_8[i,j,2]
                    cargoTotalHS += (y_4_7[i,j,1]+y_4_8[i,j,1]+y_5_7[i,j,1]+y_5_8[i,j,1]+y_6_7[i,j,1]+y_6_8[i,j,1]+y_4_7[i,j,2]+y_4_8[i,j,2]+y_5_7[i,j,2]+y_5_8[i,j,2]+y_6_7[i,j,2]+y_6_8[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_4_7 <= TimeSensitive_Req_4_7[k])
        m.addConstr(transOut2_4_7 <= Economy_Req_4_7[k])
        m.addConstr(transOut1_4_8 <= TimeSensitive_Req_4_8[k])
        m.addConstr(transOut2_4_8 <= Economy_Req_4_8[k])
        m.addConstr(transOut1_5_7 <= TimeSensitive_Req_5_7[k])
        m.addConstr(transOut2_5_7 <= Economy_Req_5_7[k])
        m.addConstr(transOut1_5_8 <= TimeSensitive_Req_5_8[k])
        m.addConstr(transOut2_5_8 <= Economy_Req_5_8[k])
        m.addConstr(transOut1_6_7 <= TimeSensitive_Req_6_7[k])
        m.addConstr(transOut2_6_7 <= Economy_Req_6_7[k])
        m.addConstr(transOut1_6_8 <= TimeSensitive_Req_6_8[k])
        m.addConstr(transOut2_6_8 <= Economy_Req_6_8[k])
        trash = c3_1 * (TimeSensitive_Req_HS[k]-transOut1) + c3_2 * (Economy_Req_HS[k]-transOut2)
        C6 += trash
    for k in range(last_SB):
        transOut1 = 0
        transOut2 = 0
        transOut1_7_1 = 0
        transOut2_7_1 = 0
        transOut1_7_2 = 0
        transOut2_7_2 = 0
        transOut1_7_3 = 0
        transOut2_7_3 = 0
        transOut1_8_1 = 0
        transOut2_8_1 = 0
        transOut1_8_2 = 0
        transOut2_8_2 = 0
        transOut1_8_3 = 0
        transOut2_8_3 = 0
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                if i == k:
                    transOut1_7_1 += x_7_1[i,j,1]
                    transOut2_7_1 += x_7_1[i,j,2]
                    transOut1_7_2 += x_7_2[i,j,1]
                    transOut2_7_2 += x_7_2[i,j,2]
                    transOut1_7_3 += x_7_3[i,j,1]
                    transOut2_7_3 += x_7_3[i,j,2]
                    transOut1_8_1 += x_8_1[i,j,1]
                    transOut2_8_1 += x_8_1[i,j,2]
                    transOut1_8_2 += x_8_2[i,j,1]
                    transOut2_8_2 += x_8_2[i,j,2]
                    transOut1_8_3 += x_8_3[i,j,1]
                    transOut2_8_3 += x_8_3[i,j,2]
                    transOut1 += x_7_1[i,j,1]+x_7_2[i,j,1]+x_7_3[i,j,1]+x_8_1[i,j,1]+x_8_2[i,j,1]+x_8_3[i,j,1]
                    transOut2 += x_7_1[i,j,2]+x_7_2[i,j,2]+x_7_3[i,j,2]+x_8_1[i,j,2]+x_8_2[i,j,2]+x_8_3[i,j,2]
                    passengerTotalSB += (x_7_1[i,j,1]+x_7_2[i,j,1]+x_7_3[i,j,1]+x_8_1[i,j,1]+x_8_2[i,j,1]+x_8_3[i,j,1]+x_7_1[i,j,2]+x_7_2[i,j,2]+x_7_3[i,j,2]+x_8_1[i,j,2]+x_8_2[i,j,2]+x_8_3[i,j,2])
        for j in range(N*K):
            for i in range(cargo_SB[j]):
                if i == k:
                    transOut1_7_1 += y_7_1[i,j,1]
                    transOut2_7_1 += y_7_1[i,j,2]
                    transOut1_7_2 += y_7_2[i,j,1]
                    transOut2_7_2 += y_7_2[i,j,2]
                    transOut1_7_3 += y_7_3[i,j,1]
                    transOut2_7_3 += y_7_3[i,j,2]
                    transOut1_8_1 += y_8_1[i,j,1]
                    transOut2_8_1 += y_8_1[i,j,2]
                    transOut1_8_2 += y_8_2[i,j,1]
                    transOut2_8_2 += y_8_2[i,j,2]
                    transOut1_8_3 += y_8_3[i,j,1]
                    transOut2_8_3 += y_8_3[i,j,2]
                    transOut1 += y_7_1[i,j,1]+y_7_2[i,j,1]+y_7_3[i,j,1]+y_8_1[i,j,1]+y_8_2[i,j,1]+y_8_3[i,j,1]
                    transOut2 += y_7_1[i,j,2]+y_7_2[i,j,2]+y_7_3[i,j,2]+y_8_1[i,j,2]+y_8_2[i,j,2]+y_8_3[i,j,2]
                    cargoTotalSB += (y_7_1[i,j,1]+y_7_2[i,j,1]+y_7_3[i,j,1]+y_8_1[i,j,1]+y_8_2[i,j,1]+y_8_3[i,j,1]+y_7_1[i,j,2]+y_7_2[i,j,2]+y_7_3[i,j,2]+y_8_1[i,j,2]+y_8_2[i,j,2]+y_8_3[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_7_1 <= TimeSensitive_Req_7_1[k])
        m.addConstr(transOut2_7_1 <= Economy_Req_7_1[k])
        m.addConstr(transOut1_7_2 <= TimeSensitive_Req_7_2[k])
        m.addConstr(transOut2_7_2 <= Economy_Req_7_2[k])
        m.addConstr(transOut1_7_3 <= TimeSensitive_Req_7_3[k])
        m.addConstr(transOut2_7_3 <= Economy_Req_7_3[k])
        m.addConstr(transOut1_8_1 <= TimeSensitive_Req_8_1[k])
        m.addConstr(transOut2_8_1 <= Economy_Req_8_1[k])
        m.addConstr(transOut1_8_2 <= TimeSensitive_Req_8_2[k])
        m.addConstr(transOut2_8_2 <= Economy_Req_8_2[k])
        m.addConstr(transOut1_8_3 <= TimeSensitive_Req_8_3[k])
        m.addConstr(transOut2_8_3 <= Economy_Req_8_3[k])
        trash = c3_1 * (TimeSensitive_Req_SB[k]-transOut1) + c3_2 * (Economy_Req_SB[k]-transOut2)
        C6 += trash
    for k in range(last_SH):
        transOut1 = 0
        transOut2 = 0
        transOut1_7_4 = 0
        transOut2_7_4 = 0
        transOut1_7_5 = 0
        transOut2_7_5 = 0
        transOut1_7_6 = 0
        transOut2_7_6 = 0
        transOut1_8_4 = 0
        transOut2_8_4 = 0
        transOut1_8_5 = 0
        transOut2_8_5 = 0
        transOut1_8_6 = 0
        transOut2_8_6 = 0
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                if i == k:
                    transOut1_7_4 += x_7_4[i,j,1]
                    transOut2_7_4 += x_7_4[i,j,2]
                    transOut1_7_5 += x_7_5[i,j,1]
                    transOut2_7_5 += x_7_5[i,j,2]
                    transOut1_7_6 += x_7_6[i,j,1]
                    transOut2_7_6 += x_7_6[i,j,2]
                    transOut1_8_4 += x_8_4[i,j,1]
                    transOut2_8_4 += x_8_4[i,j,2]
                    transOut1_8_5 += x_8_5[i,j,1]
                    transOut2_8_5 += x_8_5[i,j,2]
                    transOut1_8_6 += x_8_6[i,j,1]
                    transOut2_8_6 += x_8_6[i,j,2]
                    transOut1 += x_7_4[i,j,1]+x_7_5[i,j,1]+x_7_6[i,j,1]+x_8_4[i,j,1]+x_8_5[i,j,1]+x_8_6[i,j,1]
                    transOut2 += x_7_4[i,j,2]+x_7_5[i,j,2]+x_7_6[i,j,2]+x_8_4[i,j,2]+x_8_5[i,j,2]+x_8_6[i,j,2]
                    passengerTotalSH += (x_7_4[i,j,1]+x_7_5[i,j,1]+x_7_6[i,j,1]+x_8_4[i,j,1]+x_8_5[i,j,1]+x_8_6[i,j,1]+x_7_4[i,j,2]+x_7_5[i,j,2]+x_7_6[i,j,2]+x_8_4[i,j,2]+x_8_5[i,j,2]+x_8_6[i,j,2])
        for j in range(N*K):
            for i in range(cargo_SB[j]):
                if i == k:
                    transOut1_7_4 += y_7_4[i,j,1]
                    transOut2_7_4 += y_7_4[i,j,2]
                    transOut1_7_5 += y_7_5[i,j,1]
                    transOut2_7_5 += y_7_5[i,j,2]
                    transOut1_7_6 += y_7_6[i,j,1]
                    transOut2_7_6 += y_7_6[i,j,2]
                    transOut1_8_4 += y_8_4[i,j,1]
                    transOut2_8_4 += y_8_4[i,j,2]
                    transOut1_8_5 += y_8_5[i,j,1]
                    transOut2_8_5 += y_8_5[i,j,2]
                    transOut1_8_6 += y_8_6[i,j,1]
                    transOut2_8_6 += y_8_6[i,j,2]
                    transOut1 += y_7_4[i,j,1]+y_7_5[i,j,1]+y_7_6[i,j,1]+y_8_4[i,j,1]+y_8_5[i,j,1]+y_8_6[i,j,1]
                    transOut2 += y_7_4[i,j,2]+y_7_5[i,j,2]+y_7_6[i,j,2]+y_8_4[i,j,2]+y_8_5[i,j,2]+y_8_6[i,j,2]
                    cargoTotalSH += (y_7_4[i,j,1]+y_7_5[i,j,1]+y_7_6[i,j,1]+y_8_4[i,j,1]+y_8_5[i,j,1]+y_8_6[i,j,1]+y_7_4[i,j,2]+y_7_5[i,j,2]+y_7_6[i,j,2]+y_8_4[i,j,2]+y_8_5[i,j,2]+y_8_6[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_7_4 <= TimeSensitive_Req_7_4[k])
        m.addConstr(transOut2_7_4 <= Economy_Req_7_4[k])
        m.addConstr(transOut1_7_5 <= TimeSensitive_Req_7_5[k])
        m.addConstr(transOut2_7_5 <= Economy_Req_7_5[k])
        m.addConstr(transOut1_7_6 <= TimeSensitive_Req_7_6[k])
        m.addConstr(transOut2_7_6 <= Economy_Req_7_6[k])
        m.addConstr(transOut1_8_4 <= TimeSensitive_Req_8_4[k])
        m.addConstr(transOut2_8_4 <= Economy_Req_8_4[k])
        m.addConstr(transOut1_8_5 <= TimeSensitive_Req_8_5[k])
        m.addConstr(transOut2_8_5 <= Economy_Req_8_5[k])
        m.addConstr(transOut1_8_6 <= TimeSensitive_Req_8_6[k])
        m.addConstr(transOut2_8_6 <= Economy_Req_8_6[k])
        trash = c3_1 * (TimeSensitive_Req_SH[k]-transOut1) + c3_2 * (Economy_Req_SH[k]-transOut2)
        C6 += trash
    
    desertTotalBH = sum(forecast_1_4_K)+sum(forecast_1_5_K)+sum(forecast_1_6_K)+sum(forecast_2_4_K)+sum(forecast_2_5_K)+sum(forecast_2_6_K)+sum(forecast_3_4_K)+sum(forecast_3_5_K)+sum(forecast_3_6_K)-passengerTotalBH-cargoTotalBH
    desertTotalBS = sum(forecast_1_7_K)+sum(forecast_1_8_K)+sum(forecast_2_7_K)+sum(forecast_2_8_K)+sum(forecast_3_7_K)+sum(forecast_3_8_K)-passengerTotalBS-cargoTotalBS
    desertTotalHB = sum(forecast_4_1_K)+sum(forecast_4_2_K)+sum(forecast_4_3_K)+sum(forecast_5_1_K)+sum(forecast_5_2_K)+sum(forecast_5_3_K)+sum(forecast_6_1_K)+sum(forecast_6_2_K)+sum(forecast_6_3_K)-passengerTotalHB-cargoTotalHB
    desertTotalHS = sum(forecast_4_7_K)+sum(forecast_4_8_K)+sum(forecast_5_7_K)+sum(forecast_5_8_K)+sum(forecast_6_7_K)+sum(forecast_6_8_K)-passengerTotalHS-cargoTotalHS
    desertTotalSB = sum(forecast_7_1_K)+sum(forecast_7_2_K)+sum(forecast_7_3_K)+sum(forecast_8_1_K)+sum(forecast_8_2_K)+sum(forecast_8_3_K)-passengerTotalSB-cargoTotalSB
    desertTotalSH = sum(forecast_7_4_K)+sum(forecast_7_5_K)+sum(forecast_7_6_K)+sum(forecast_8_4_K)+sum(forecast_8_5_K)+sum(forecast_8_6_K)-passengerTotalSH-cargoTotalSH
                      
    # 本周期内无法运完的货物的仓储成本和预期逾期成本
    left_1_4 = 0
    left_1_5 = 0
    left_1_6 = 0
    left_1_7 = 0
    left_1_8 = 0
    left_2_4 = 0
    left_2_5 = 0
    left_2_6 = 0
    left_2_7 = 0
    left_2_8 = 0
    left_3_4 = 0
    left_3_5 = 0
    left_3_6 = 0
    left_3_7 = 0
    left_3_8 = 0
    left_4_1 = 0
    left_4_2 = 0
    left_4_3 = 0
    left_4_7 = 0
    left_4_8 = 0
    left_5_1 = 0
    left_5_2 = 0
    left_5_3 = 0
    left_5_7 = 0
    left_5_8 = 0
    left_6_1 = 0
    left_6_2 = 0
    left_6_3 = 0
    left_6_7 = 0
    left_6_8 = 0
    left_7_1 = 0
    left_7_2 = 0
    left_7_3 = 0
    left_7_4 = 0
    left_7_5 = 0
    left_7_6 = 0
    left_8_1 = 0
    left_8_2 = 0
    left_8_3 = 0
    left_8_4 = 0
    left_8_5 = 0
    left_8_6 = 0                 
    for i in range(last_BH, 24 * K):
        left_1_4 += forecast_1_4_K[i]
        left_1_5 += forecast_1_5_K[i]
        left_1_6 += forecast_1_6_K[i]
        left_2_4 += forecast_2_4_K[i]
        left_2_5 += forecast_2_5_K[i]
        left_2_6 += forecast_2_6_K[i]
        left_3_4 += forecast_3_4_K[i]
        left_3_5 += forecast_3_5_K[i]
        left_3_6 += forecast_3_6_K[i]      
        C1 += c1 * (forecast_1_4_K[i]+forecast_1_5_K[i]+forecast_1_6_K[i]+forecast_2_4_K[i]+forecast_2_5_K[i]+forecast_2_6_K[i]+forecast_3_4_K[i]+forecast_3_5_K[i]+forecast_3_6_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_BH[i] + c2_2 * Economy_Req_BH[i]) * (24 * K - i + first_BH - 1) * (1 - (i + 1) / (24 * K))
    for i in range(last_BS, 24 * K):
        left_1_7 += forecast_1_7_K[i]
        left_1_8 += forecast_1_8_K[i]
        left_2_7 += forecast_2_7_K[i]
        left_2_8 += forecast_2_8_K[i]
        left_3_7 += forecast_3_7_K[i]
        left_3_8 += forecast_3_8_K[i]
        C1 += c1 * (forecast_1_7_K[i]+forecast_1_8_K[i]+forecast_2_7_K[i]+forecast_2_8_K[i]+forecast_3_7_K[i]+forecast_3_8_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_BS[i] + c2_2 * Economy_Req_BS[i]) * (24 * K - i + first_BS - 1) * (1 - (i + 1) / (24 * K))  
    for i in range(last_HB, 24 * K):
        left_4_1 += forecast_4_1_K[i]
        left_4_2 += forecast_4_2_K[i]
        left_4_3 += forecast_4_3_K[i]
        left_5_1 += forecast_5_1_K[i]
        left_5_2 += forecast_5_2_K[i]
        left_5_3 += forecast_5_3_K[i]
        left_6_1 += forecast_6_1_K[i]
        left_6_2 += forecast_6_2_K[i]
        left_6_3 += forecast_6_3_K[i]
        C1 += c1 * (forecast_4_1_K[i]+forecast_4_2_K[i]+forecast_4_3_K[i]+forecast_5_1_K[i]+forecast_5_2_K[i]+forecast_5_3_K[i]+forecast_6_1_K[i]+forecast_6_2_K[i]+forecast_6_3_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_HB[i] + c2_2 * Economy_Req_HB[i]) * (24 * K - i + first_HB - 1) * (1 - (i + 1) / (24 * K))
    for i in range(last_HS, 24 * K):
        left_4_7 += forecast_4_7_K[i]
        left_4_8 += forecast_4_8_K[i]
        left_5_7 += forecast_5_7_K[i]
        left_5_8 += forecast_5_8_K[i]
        left_6_7 += forecast_6_7_K[i]
        left_6_8 += forecast_6_8_K[i]  
        C1 += c1 * (forecast_4_7_K[i]+forecast_4_8_K[i]+forecast_5_7_K[i]+forecast_5_8_K[i]+forecast_6_7_K[i]+forecast_6_8_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_HS[i] + c2_2 * Economy_Req_HS[i]) * (24 * K - i + first_HS - 1) * (1 - (i + 1) / (24 * K))
    for i in range(last_SB, 24 * K):
        left_7_1 += forecast_7_1_K[i]
        left_7_2 += forecast_7_2_K[i]
        left_7_3 += forecast_7_3_K[i]
        left_8_1 += forecast_8_1_K[i]
        left_8_2 += forecast_8_2_K[i]
        left_8_3 += forecast_8_3_K[i]   
        C1 += c1 * (forecast_7_1_K[i]+forecast_7_2_K[i]+forecast_7_3_K[i]+forecast_8_1_K[i]+forecast_8_2_K[i]+forecast_8_3_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_SB[i] + c2_2 * Economy_Req_SB[i]) * (24 * K - i + first_SB - 1) * (1 - (i + 1) / (24 * K))
    for i in range(last_SH, 24 * K):
        left_7_4 += forecast_7_4_K[i]
        left_7_5 += forecast_7_5_K[i]
        left_7_6 += forecast_7_6_K[i]
        left_8_4 += forecast_8_4_K[i]
        left_8_5 += forecast_8_5_K[i]
        left_8_6 += forecast_8_6_K[i]
        C1 += c1 * (forecast_7_4_K[i]+forecast_7_5_K[i]+forecast_7_6_K[i]+forecast_8_4_K[i]+forecast_8_5_K[i]+forecast_8_6_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_SH[i] + c2_2 * Economy_Req_SH[i]) * (24 * K - i + first_SH - 1) * (1 - (i + 1) / (24 * K))       
                
    left_to_leave_1_4.append(left_1_4)
    left_to_leave_1_5.append(left_1_5)
    left_to_leave_1_6.append(left_1_6)
    left_to_leave_1_7.append(left_1_7)
    left_to_leave_1_8.append(left_1_8)
    left_to_leave_2_4.append(left_2_4)
    left_to_leave_2_5.append(left_2_5)
    left_to_leave_2_6.append(left_2_6)
    left_to_leave_2_7.append(left_2_7)
    left_to_leave_2_8.append(left_2_8)
    left_to_leave_3_4.append(left_3_4)
    left_to_leave_3_5.append(left_3_5)
    left_to_leave_3_6.append(left_3_6)
    left_to_leave_3_7.append(left_3_7)
    left_to_leave_3_8.append(left_3_8)
    left_to_leave_4_1.append(left_4_1)
    left_to_leave_4_2.append(left_4_2)
    left_to_leave_4_3.append(left_4_3)
    left_to_leave_4_7.append(left_4_7)
    left_to_leave_4_8.append(left_4_8)
    left_to_leave_5_1.append(left_5_1)
    left_to_leave_5_2.append(left_5_2)
    left_to_leave_5_3.append(left_5_3)
    left_to_leave_5_7.append(left_5_7)
    left_to_leave_5_8.append(left_5_8)
    left_to_leave_6_1.append(left_6_1)
    left_to_leave_6_2.append(left_6_2)
    left_to_leave_6_3.append(left_6_3)
    left_to_leave_6_7.append(left_6_7)
    left_to_leave_6_8.append(left_6_8)
    left_to_leave_7_1.append(left_7_1)
    left_to_leave_7_2.append(left_7_2)
    left_to_leave_7_3.append(left_7_3)
    left_to_leave_7_4.append(left_7_4)
    left_to_leave_7_5.append(left_7_5)
    left_to_leave_7_6.append(left_7_6)
    left_to_leave_8_1.append(left_8_1)
    left_to_leave_8_2.append(left_8_2)
    left_to_leave_8_3.append(left_8_3)
    left_to_leave_8_4.append(left_8_4)
    left_to_leave_8_5.append(left_8_5)
    left_to_leave_8_6.append(left_8_6)
                      
    # 计算每个航段上客机和货机运输的量
    passengerTrans_BH = 0
    passengerTrans_BS = 0
    passengerTrans_HB = 0
    passengerTrans_HS = 0
    passengerTrans_SB = 0
    passengerTrans_SH = 0
    cargoTrans = 0
    cargoTrans_BH = 0
    cargoTrans_HS = 0
    cargoTrans_SB = 0
    for w in range(1,3):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                passengerTrans_BH += (x_1_4[i,j,w]+x_1_5[i,j,w]+x_1_6[i,j,w]+x_2_4[i,j,w]+x_2_5[i,j,w]+x_2_6[i,j,w]+x_3_4[i,j,w]+x_3_5[i,j,w]+x_3_6[i,j,w])
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                passengerTrans_BS += (x_1_7[i,j,w]+x_1_8[i,j,w]+x_2_7[i,j,w]+x_2_8[i,j,w]+x_3_7[i,j,w]+x_3_8[i,j,w])
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                passengerTrans_HB += (x_4_1[i,j,w]+x_4_2[i,j,w]+x_4_3[i,j,w]+x_5_1[i,j,w]+x_5_2[i,j,w]+x_5_3[i,j,w]+x_6_1[i,j,w]+x_6_2[i,j,w]+x_6_3[i,j,w])
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                passengerTrans_HS += (x_4_7[i,j,w]+x_4_8[i,j,w]+x_5_7[i,j,w]+x_5_8[i,j,w]+x_6_7[i,j,w]+x_6_8[i,j,w])
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                passengerTrans_SB += (x_7_1[i,j,w]+x_7_2[i,j,w]+x_7_3[i,j,w]+x_8_1[i,j,w]+x_8_2[i,j,w]+x_8_3[i,j,w])
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                passengerTrans_SH += (x_7_4[i,j,w]+x_7_5[i,j,w]+x_7_6[i,j,w]+x_8_4[i,j,w]+x_8_5[i,j,w]+x_8_6[i,j,w])
        for j in range(N*K):
            for i in range(cargo_BH[j]):
                cargoTrans += (y_1_4[i,j,w]+y_1_5[i,j,w]+y_1_6[i,j,w]+y_2_4[i,j,w]+y_2_5[i,j,w]+y_2_6[i,j,w]+y_3_4[i,j,w]+y_3_5[i,j,w]+y_3_6[i,j,w]+y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w])
                cargoTrans_BH += (y_1_4[i,j,w]+y_1_5[i,j,w]+y_1_6[i,j,w]+y_2_4[i,j,w]+y_2_5[i,j,w]+y_2_6[i,j,w]+y_3_4[i,j,w]+y_3_5[i,j,w]+y_3_6[i,j,w]+y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w])
                cargoTrans_HS += (y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w])
            for i in range(cargo_HS[j]):
                cargoTrans += (y_4_7[i,j,w]+y_4_8[i,j,w]+y_5_7[i,j,w]+y_5_8[i,j,w]+y_6_7[i,j,w]+y_6_8[i,j,w]+y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w])
                cargoTrans_HS += (y_4_7[i,j,w]+y_4_8[i,j,w]+y_5_7[i,j,w]+y_5_8[i,j,w]+y_6_7[i,j,w]+y_6_8[i,j,w]+y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w])
                cargoTrans_SB += (y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w])
            for i in range(cargo_SB[j]):
                cargoTrans += (y_7_1[i,j,w]+y_7_2[i,j,w]+y_7_3[i,j,w]+y_8_1[i,j,w]+y_8_2[i,j,w]+y_8_3[i,j,w]+y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w])
                cargoTrans_SB += (y_7_1[i,j,w]+y_7_2[i,j,w]+y_7_3[i,j,w]+y_8_1[i,j,w]+y_8_2[i,j,w]+y_8_3[i,j,w]+y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w])
                cargoTrans_BH += (y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w])
    passengerTrans = passengerTrans_BH+passengerTrans_BS+passengerTrans_HB+passengerTrans_HS+passengerTrans_SB+passengerTrans_SH
    
    # 只有客机运输成本是分段计价的
    zBH = {}
    zBS = {}
    zHB = {}
    zHS = {}
    zSB = {}
    zSH = {}
    A_BH = m.addVars(range(len(FR_BH)), vtype=GRB.BINARY)
    A_BS = m.addVars(range(len(FR_BS)), vtype=GRB.BINARY)
    A_HB = m.addVars(range(len(FR_HB)), vtype=GRB.BINARY)
    A_HS = m.addVars(range(len(FR_HS)), vtype=GRB.BINARY)
    A_SB = m.addVars(range(len(FR_SB)), vtype=GRB.BINARY)
    A_SH = m.addVars(range(len(FR_SH)), vtype=GRB.BINARY)
    
    for r in range(len(FR_BH)):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                zBH[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                zBS[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                zHB[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                zHS[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                zSB[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                zSH[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                
    m.addConstr(gp.quicksum(A_BH[r] for r in range(len(FR_BH))) == 1)
    m.addConstr(gp.quicksum(A_BS[r] for r in range(len(FR_BS))) == 1)
    m.addConstr(gp.quicksum(A_HB[r] for r in range(len(FR_HB))) == 1)
    m.addConstr(gp.quicksum(A_HS[r] for r in range(len(FR_HS))) == 1)
    m.addConstr(gp.quicksum(A_SB[r] for r in range(len(FR_SB))) == 1)
    m.addConstr(gp.quicksum(A_SH[r] for r in range(len(FR_SH))) == 1)
    
    for r in range(len(FR_BH)):
        for j in range(len(passengerTime_BH)):
            m.addConstr(gp.quicksum(x_1_4[i,j,w]+x_1_5[i,j,w]+x_1_6[i,j,w]+x_2_4[i,j,w]+x_2_5[i,j,w]+x_2_6[i,j,w]+x_3_4[i,j,w]+x_3_5[i,j,w]+x_3_6[i,j,w] for w in range(1,3) for i in range(passengerTime_BH[j])) >= lBH[r] * A_BH[r])
        for j in range(len(passengerTime_BS)):
            m.addConstr(gp.quicksum(x_1_7[i,j,w]+x_1_8[i,j,w]+x_2_7[i,j,w]+x_2_8[i,j,w]+x_3_7[i,j,w]+x_3_8[i,j,w] for w in range(1,3) for i in range(passengerTime_BS[j])) >= lBS[r] * A_BS[r])
        for j in range(len(passengerTime_HB)):
            m.addConstr(gp.quicksum(x_4_1[i,j,w]+x_4_2[i,j,w]+x_4_3[i,j,w]+x_5_1[i,j,w]+x_5_2[i,j,w]+x_5_3[i,j,w]+x_6_1[i,j,w]+x_6_2[i,j,w]+x_6_3[i,j,w] for w in range(1,3) for i in range(passengerTime_HB[j])) >= lHB[r] * A_HB[r])
        for j in range(len(passengerTime_HS)):
            m.addConstr(gp.quicksum(x_4_7[i,j,w]+x_4_8[i,j,w]+x_5_7[i,j,w]+x_5_8[i,j,w]+x_6_7[i,j,w]+x_6_8[i,j,w] for w in range(1,3) for i in range(passengerTime_HS[j])) >= lHS[r] * A_HS[r])
        for j in range(len(passengerTime_SB)):
            m.addConstr(gp.quicksum(x_7_1[i,j,w]+x_7_2[i,j,w]+x_7_3[i,j,w]+x_8_1[i,j,w]+x_8_2[i,j,w]+x_8_3[i,j,w] for w in range(1,3) for i in range(passengerTime_SB[j])) >= lSB[r] * A_SB[r])
        for j in range(len(passengerTime_SH)):
            m.addConstr(gp.quicksum(x_7_4[i,j,w]+x_7_5[i,j,w]+x_7_6[i,j,w]+x_8_4[i,j,w]+x_8_5[i,j,w]+x_8_6[i,j,w] for w in range(1,3) for i in range(passengerTime_SH[j])) >= lSH[r] * A_SH[r])
        
    for r in range(len(FR_BH)):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                m.addConstr(zBH[i,j,r] <= A_BH[r] * forecast_BH_K[i])
                m.addConstr(zBH[i,j,r] <= (x_1_4[i,j,1]+x_1_5[i,j,1]+x_1_6[i,j,1]+x_2_4[i,j,1]+x_2_5[i,j,1]+x_2_6[i,j,1]+x_3_4[i,j,1]+x_3_5[i,j,1]+x_3_6[i,j,1]+x_1_4[i,j,2]+x_1_5[i,j,2]+x_1_6[i,j,2]+x_2_4[i,j,2]+x_2_5[i,j,2]+x_2_6[i,j,2]+x_3_4[i,j,2]+x_3_5[i,j,2]+x_3_6[i,j,2]))
                m.addConstr(zBH[i,j,r] >= (x_1_4[i,j,1]+x_1_5[i,j,1]+x_1_6[i,j,1]+x_2_4[i,j,1]+x_2_5[i,j,1]+x_2_6[i,j,1]+x_3_4[i,j,1]+x_3_5[i,j,1]+x_3_6[i,j,1]+x_1_4[i,j,2]+x_1_5[i,j,2]+x_1_6[i,j,2]+x_2_4[i,j,2]+x_2_5[i,j,2]+x_2_6[i,j,2]+x_3_4[i,j,2]+x_3_5[i,j,2]+x_3_6[i,j,2] - forecast_BH_K[i] * (1 - A_BH[r])))
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                m.addConstr(zBS[i,j,r] <= A_BS[r] * forecast_BS_K[i])
                m.addConstr(zBS[i,j,r] <= (x_1_7[i,j,1]+x_1_8[i,j,1]+x_2_7[i,j,1]+x_2_8[i,j,1]+x_3_7[i,j,1]+x_3_8[i,j,1]+x_1_7[i,j,2]+x_1_8[i,j,2]+x_2_7[i,j,2]+x_2_8[i,j,2]+x_3_7[i,j,2]+x_3_8[i,j,2]))
                m.addConstr(zBS[i,j,r] >= (x_1_7[i,j,1]+x_1_8[i,j,1]+x_2_7[i,j,1]+x_2_8[i,j,1]+x_3_7[i,j,1]+x_3_8[i,j,1]+x_1_7[i,j,2]+x_1_8[i,j,2]+x_2_7[i,j,2]+x_2_8[i,j,2]+x_3_7[i,j,2]+x_3_8[i,j,2] - forecast_BS_K[i] * (1 - A_BS[r])))
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                m.addConstr(zHB[i,j,r] <= A_HB[r] * forecast_HB_K[i])
                m.addConstr(zHB[i,j,r] <= (x_4_1[i,j,1]+x_4_2[i,j,1]+x_4_3[i,j,1]+x_5_1[i,j,1]+x_5_2[i,j,1]+x_5_3[i,j,1]+x_6_1[i,j,1]+x_6_2[i,j,1]+x_6_3[i,j,1]+x_4_1[i,j,2]+x_4_2[i,j,2]+x_4_3[i,j,2]+x_5_1[i,j,2]+x_5_2[i,j,2]+x_5_3[i,j,2]+x_6_1[i,j,2]+x_6_2[i,j,2]+x_6_3[i,j,2]))
                m.addConstr(zHB[i,j,r] >= (x_4_1[i,j,1]+x_4_2[i,j,1]+x_4_3[i,j,1]+x_5_1[i,j,1]+x_5_2[i,j,1]+x_5_3[i,j,1]+x_6_1[i,j,1]+x_6_2[i,j,1]+x_6_3[i,j,1]+x_4_1[i,j,2]+x_4_2[i,j,2]+x_4_3[i,j,2]+x_5_1[i,j,2]+x_5_2[i,j,2]+x_5_3[i,j,2]+x_6_1[i,j,2]+x_6_2[i,j,2]+x_6_3[i,j,2] - forecast_HB_K[i] * (1 - A_HB[r])))
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                m.addConstr(zHS[i,j,r] <= A_HS[r] * forecast_HS_K[i])
                m.addConstr(zHS[i,j,r] <= (x_4_7[i,j,1]+x_4_8[i,j,1]+x_5_7[i,j,1]+x_5_8[i,j,1]+x_6_7[i,j,1]+x_6_8[i,j,1]+x_4_7[i,j,2]+x_4_8[i,j,2]+x_5_7[i,j,2]+x_5_8[i,j,2]+x_6_7[i,j,2]+x_6_8[i,j,2]))
                m.addConstr(zHS[i,j,r] >= (x_4_7[i,j,1]+x_4_8[i,j,1]+x_5_7[i,j,1]+x_5_8[i,j,1]+x_6_7[i,j,1]+x_6_8[i,j,1]+x_4_7[i,j,2]+x_4_8[i,j,2]+x_5_7[i,j,2]+x_5_8[i,j,2]+x_6_7[i,j,2]+x_6_8[i,j,2] - forecast_HS_K[i] * (1 - A_HS[r])))
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                m.addConstr(zSB[i,j,r] <= A_BH[r] * forecast_SB_K[i])
                m.addConstr(zSB[i,j,r] <= (x_7_1[i,j,1]+x_7_2[i,j,1]+x_7_3[i,j,1]+x_8_1[i,j,1]+x_8_2[i,j,1]+x_8_3[i,j,1]+x_7_1[i,j,2]+x_7_2[i,j,2]+x_7_3[i,j,2]+x_8_1[i,j,2]+x_8_2[i,j,2]+x_8_3[i,j,2]))
                m.addConstr(zSB[i,j,r] >= (x_7_1[i,j,1]+x_7_2[i,j,1]+x_7_3[i,j,1]+x_8_1[i,j,1]+x_8_2[i,j,1]+x_8_3[i,j,1]+x_7_1[i,j,2]+x_7_2[i,j,2]+x_7_3[i,j,2]+x_8_1[i,j,2]+x_8_2[i,j,2]+x_8_3[i,j,2] - forecast_SB_K[i] * (1 - A_SB[r])))
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                m.addConstr(zSH[i,j,r] <= A_SH[r] * forecast_SH_K[i])
                m.addConstr(zSH[i,j,r] <= (x_7_4[i,j,1]+x_7_5[i,j,1]+x_7_6[i,j,1]+x_8_4[i,j,1]+x_8_5[i,j,1]+x_8_6[i,j,1]+x_7_4[i,j,2]+x_7_5[i,j,2]+x_7_6[i,j,2]+x_8_4[i,j,2]+x_8_5[i,j,2]+x_8_6[i,j,2]))
                m.addConstr(zSH[i,j,r] >= (x_7_4[i,j,1]+x_7_5[i,j,1]+x_7_6[i,j,1]+x_8_4[i,j,1]+x_8_5[i,j,1]+x_8_6[i,j,1]+x_7_4[i,j,2]+x_7_5[i,j,2]+x_7_6[i,j,2]+x_8_4[i,j,2]+x_8_5[i,j,2]+x_8_6[i,j,2] - forecast_SH_K[i] * (1 - A_SH[r])))
                
    for r in range(len(FR_BH)):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                C5 += FR_BH[r] * zBH[i,j,r]
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                C5 += FR_BS[r] * zBS[i,j,r]
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                C5 += FR_HB[r] * zHB[i,j,r]
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                C5 += FR_HS[r] * zHS[i,j,r]
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                C5 += FR_SB[r] * zSB[i,j,r]
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                C5 += FR_SH[r] * zSH[i,j,r]
    
    cargo_operating_perHour = cargo_per + L * OilPrice
    
    nBH = {}
    nHS = {}
    nSB = {}
    M = 0.0001
    for j in range(N*K):
        nBH[j] = m.addVar(vtype=GRB.BINARY)
        nHS[j] = m.addVar(vtype=GRB.BINARY)
        nSB[j] = m.addVar(vtype=GRB.BINARY)
        
    for j in range(N*K):
        m.addConstr(nBH[j] >= M * gp.quicksum((y_1_4[i,j,w]+y_1_5[i,j,w]+y_1_6[i,j,w]+y_2_4[i,j,w]+y_2_5[i,j,w]+y_2_6[i,j,w]+y_3_4[i,j,w]+y_3_5[i,j,w]+y_3_6[i,j,w]+y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w]) for i in range(cargo_BH[j]) for w in range(1,3)) + M * gp.quicksum(y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w] for i in range(cargo_SB[j]) for w in range(1,3)))
        m.addConstr(nHS[j] >= M * gp.quicksum((y_4_7[i,j,w]+y_4_8[i,j,w]+y_5_7[i,j,w]+y_5_8[i,j,w]+y_6_7[i,j,w]+y_6_8[i,j,w]+y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w]) for i in range(cargo_HS[j]) for w in range(1,3)) + M * gp.quicksum(y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w] for i in range(cargo_BH[j]) for w in range(1,3)))
        m.addConstr(nSB[j] >= M * gp.quicksum((y_7_1[i,j,w]+y_7_2[i,j,w]+y_7_3[i,j,w]+y_8_1[i,j,w]+y_8_2[i,j,w]+y_8_3[i,j,w]+y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w]) for i in range(cargo_SB[j]) for w in range(1,3)) + M * gp.quicksum(y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w] for i in range(cargo_HS[j]) for w in range(1,3)))
        
    cargoUsed_BH = 0
    cargoUsed_HS = 0
    cargoUsed_SB = 0
    for j in range(N*K):
        cargoUsed_BH += nBH[j]
        cargoUsed_HS += nHS[j]
        cargoUsed_SB += nSB[j]
        C7 += cargo_operating_perHour * (Tcargo_1*nBH[j]+Tcargo_2*nHS[j]+Tcargo_3*nSB[j])
    
    requi = sum(forecast_BH_K)+sum(forecast_BS_K)+sum(forecast_HB_K)+sum(forecast_HS_K)+sum(forecast_SB_K)+sum(forecast_SH_K)
    unTrans = requi - transported_1 - transported_2
    untransprop = unTrans / requi
    
    m.setObjective(theta1 * (C1 + C2 + C3 + C4 + C5 + C6 + C7) + theta2 * untransprop, GRB.MINIMIZE)
    m.optimize()
    
    cargo_operating = cargo_operating_perHour * (Tcargo_1+Tcargo_2+Tcargo_3) * max(cargoUsed_BH.getValue(),cargoUsed_HS.getValue(),cargoUsed_SB.getValue())
    
    
    
    result1 = C1+C2+C3.getValue()+C4.getValue()+C5.getValue()+C6.getValue()+cargo_operating
    result2 = C3.getValue()+C2
    result3 = C4.getValue()+C1
    result4 = C5.getValue()
    result5 = cargo_operating
    result6 = transported_1.getValue()
    result7 = transported_2.getValue()
    result8 = unTrans.getValue()
    result9 = requi
    result10 = passengerTrans.getValue()
    result11 = cargoTrans.getValue()
    result12 = C6.getValue()
    result13 = passengerTrans_BH.getValue()
    result14 = passengerTrans_BS.getValue()
    result15 = passengerTrans_HB.getValue()
    result16 = passengerTrans_HS.getValue()
    result17 = passengerTrans_SB.getValue()
    result18 = passengerTrans_SH.getValue()
    result19 = cargoTrans_BH.getValue()
    result20 = cargoTrans_HS.getValue()
    result21 = cargoTrans_SB.getValue()
    result22 = max(cargoUsed_BH.getValue(),cargoUsed_HS.getValue(),cargoUsed_SB.getValue())
    output1 = passengerTotalBH.getValue()
    output2 = passengerTotalBS.getValue()
    output3 = passengerTotalHB.getValue()
    output4 = passengerTotalHS.getValue()
    output5 = passengerTotalSB.getValue()
    output6 = passengerTotalSH.getValue()
    output7 = cargoTotalBH.getValue()
    output8 = cargoTotalBS.getValue()
    output9 = cargoTotalHB.getValue()
    output10 = cargoTotalHS.getValue()
    output11 = cargoTotalSB.getValue()
    output12 = cargoTotalSH.getValue()
    output13 = desertTotalBH.getValue()
    output14 = desertTotalBS.getValue()
    output15 = desertTotalHB.getValue()
    output16 = desertTotalHS.getValue()
    output17 = desertTotalSB.getValue()
    output18 = desertTotalSH.getValue()
    
    return result1,result2,result3,result4,result5,result6,result7,result8,result9,result10,result11,result12,result13,result14,result15,result16,result17,result18,result19,result20,result21,result22,output1,output2,output3,output4,output5,output6,output7,output8,output9,output10,output11,output12,output13,output14,output15,output16,output17,output18

def leftFunctionARIMA(K):
    cargo_BH = []
    cargo_HS = []
    cargo_SB = []
        
    for i in range(K):
        cargo_BH_add = [x + 24 * i for x in cargo_BH_unit]
        cargo_HS_add = [x + 24 * i for x in cargo_HS_unit]
        cargo_SB_add = [x + 24 * i for x in cargo_SB_unit]
        for j in range(N):
            cargo_BH.append(cargo_BH_add[j])
            cargo_HS.append(cargo_HS_add[j])
            cargo_SB.append(cargo_SB_add[j])
    del cargo_BH_add,cargo_HS_add,cargo_SB_add
    BH_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_BH)
    BS_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_BS)
    HB_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_HB)
    HS_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_HS)
    SB_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_SB)
    SH_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_SH)
    flightTime_BH = passenger_flight_times_BH * K
    flightTime_BS = passenger_flight_times_BS * K
    flightTime_HB = passenger_flight_times_HB * K
    flightTime_HS = passenger_flight_times_HS * K
    flightTime_SB = passenger_flight_times_SB * K
    flightTime_SH = passenger_flight_times_SH * K
    first_flight_BH = min(min(BH_passengerTimeTable),min(cargo_BH))
    last_flight_BH = max(max(BH_passengerTimeTable),max(cargo_BH))
    first_flight_HS = min(min(HS_passengerTimeTable),min(cargo_HS))
    last_flight_HS = max(max(HS_passengerTimeTable),max(cargo_HS))
    first_flight_SB = min(min(SB_passengerTimeTable),min(cargo_SB))
    last_flight_SB = max(max(SB_passengerTimeTable),max(cargo_SB))
    first_flight_BS = min(BS_passengerTimeTable)
    last_flight_BS = max(BS_passengerTimeTable)
    first_flight_SH = min(SH_passengerTimeTable)
    last_flight_SH = max(SH_passengerTimeTable)
    first_flight_HB = min(HB_passengerTimeTable)
    last_flight_HB = max(HB_passengerTimeTable)
    BHcant_transport_passenger = passCantTransCal(BH_passengerTimeTable)
    BScant_transport_passenger = passCantTransCal(BS_passengerTimeTable)
    HBcant_transport_passenger = passCantTransCal(HB_passengerTimeTable)
    HScant_transport_passenger = passCantTransCal(HS_passengerTimeTable)
    SBcant_transport_passenger = passCantTransCal(SB_passengerTimeTable)
    SHcant_transport_passenger = passCantTransCal(SH_passengerTimeTable)
    BHcant_transport_cargo = max(cargo_BH) + 1
    HScant_transport_cargo = max(cargo_HS) + 1
    SBcant_transport_cargo = max(cargo_SB) + 1
    first_BH = process_value(first_flight_BH)
    first_BS = process_value(first_flight_BS)
    first_HB = process_value(first_flight_HB)
    first_HS = process_value(first_flight_HS)
    first_SB = process_value(first_flight_SB)
    first_SH = process_value(first_flight_SH)
    last_BH = process_value(last_flight_BH)
    last_BS = process_value(last_flight_BS)
    last_HB = process_value(last_flight_HB)
    last_HS = process_value(last_flight_HS)
    last_SB = process_value(last_flight_SB)
    last_SH = process_value(last_flight_SH)
    passengerTime_BH = passengerTimeCal(BH_passengerTimeTable)
    passengerTime_BS = passengerTimeCal(BS_passengerTimeTable)
    passengerTime_HB = passengerTimeCal(HB_passengerTimeTable)
    passengerTime_HS = passengerTimeCal(HS_passengerTimeTable)
    passengerTime_SB = passengerTimeCal(SB_passengerTimeTable)
    passengerTime_SH = passengerTimeCal(SH_passengerTimeTable)

    C1 = 0 # C1为未运完的仓储成本，初始值为0
    C2 = 0 # C2为未运完的逾期延迟成本，初始值为0
    C3 = 0 # C3为能运完的逾期延迟成本，初始值为0
    C4 = 0 # C4为能运完的仓储成本，初始值为0
    C5 = 0 # C5为运输成本，初始值为0
    C6 = 0 # C6为丢弃成本，初始值为0
    C7 = 0
    transported_1 = 0
    transported_2 = 0
    cargoUsed = 0
    
    # 进行模型拟合和预测
    model_1_4 = ARIMA(train['北京→杭州'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_1_4 = model_1_4.fit()
    model_1_5 = ARIMA(train['北京→南京'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_1_5 = model_1_5.fit()
    model_1_6 = ARIMA(train['北京→上海'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_1_6 = model_1_6.fit()
    model_1_7 = ARIMA(train['北京→深圳'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_1_7 = model_1_7.fit()
    model_1_8 = ARIMA(train['北京→香港'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_1_8 = model_1_8.fit()
    model_2_4 = ARIMA(train['潍坊→杭州'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_2_4 = model_2_4.fit()
    model_2_5 = ARIMA(train['潍坊→南京'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_2_5 = model_2_5.fit()
    model_2_6 = ARIMA(train['潍坊→上海'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_2_6 = model_2_6.fit()
    model_2_7 = ARIMA(train['潍坊→深圳'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_2_7 = model_2_7.fit()
    model_2_8 = ARIMA(train['潍坊→香港'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_2_8 = model_2_8.fit()
    model_3_4 = ARIMA(train['沈阳→杭州'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_3_4 = model_3_4.fit()
    model_3_5 = ARIMA(train['沈阳→南京'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_3_5 = model_3_5.fit()
    model_3_6 = ARIMA(train['沈阳→上海'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_3_6 = model_3_6.fit()
    model_3_7 = ARIMA(train['沈阳→深圳'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_3_7 = model_3_7.fit()
    model_3_8 = ARIMA(train['沈阳→香港'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_3_8 = model_3_8.fit()
    model_4_1 = ARIMA(train['杭州→北京'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_4_1 = model_4_1.fit()
    model_4_2 = ARIMA(train['杭州→潍坊'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_4_2 = model_4_2.fit()
    model_4_3 = ARIMA(train['杭州→沈阳'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_4_3 = model_4_3.fit()
    model_4_7 = ARIMA(train['杭州→深圳'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_4_7 = model_4_7.fit()
    model_4_8 = ARIMA(train['杭州→香港'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_4_8 = model_4_8.fit()
    model_5_1 = ARIMA(train['南京→北京'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_5_1 = model_5_1.fit()
    model_5_2 = ARIMA(train['南京→潍坊'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_5_2 = model_5_2.fit()
    model_5_3 = ARIMA(train['南京→沈阳'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_5_3 = model_5_3.fit()
    model_5_7 = ARIMA(train['南京→深圳'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_5_7 = model_5_7.fit()
    model_5_8 = ARIMA(train['南京→香港'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_5_8 = model_5_8.fit()
    model_6_1 = ARIMA(train['上海→北京'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_6_1 = model_6_1.fit()
    model_6_2 = ARIMA(train['上海→潍坊'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_6_2 = model_6_2.fit()
    model_6_3 = ARIMA(train['上海→沈阳'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_6_3 = model_6_3.fit()
    model_6_7 = ARIMA(train['上海→深圳'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_6_7 = model_6_7.fit()
    model_6_8 = ARIMA(train['上海→香港'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_6_8 = model_6_8.fit()
    model_7_1 = ARIMA(train['深圳→北京'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_7_1 = model_7_1.fit()
    model_7_2 = ARIMA(train['深圳→潍坊'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_7_2 = model_7_2.fit()
    model_7_3 = ARIMA(train['深圳→沈阳'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_7_3 = model_7_3.fit()
    model_7_4 = ARIMA(train['深圳→杭州'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_7_4 = model_7_4.fit()
    model_7_5 = ARIMA(train['深圳→南京'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_7_5 = model_7_5.fit()
    model_7_6 = ARIMA(train['深圳→上海'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_7_6 = model_7_6.fit()
    model_8_1 = ARIMA(train['香港→北京'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_8_1 = model_8_1.fit()
    model_8_2 = ARIMA(train['香港→潍坊'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_8_2 = model_8_2.fit()
    model_8_3 = ARIMA(train['香港→沈阳'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_8_3 = model_8_3.fit()
    model_8_4 = ARIMA(train['香港→杭州'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_8_4 = model_8_4.fit()
    model_8_5 = ARIMA(train['香港→南京'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_8_5 = model_8_5.fit()
    model_8_6 = ARIMA(train['香港→上海'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_8_6 = model_8_6.fit()
    
    # 进行未来一步的预测
    forecast_1_4 = model_fit_1_4.forecast(steps=K)
    forecast_1_5 = model_fit_1_5.forecast(steps=K)
    forecast_1_6 = model_fit_1_6.forecast(steps=K)
    forecast_1_7 = model_fit_1_7.forecast(steps=K)
    forecast_1_8 = model_fit_1_8.forecast(steps=K)
    forecast_2_4 = model_fit_2_4.forecast(steps=K)
    forecast_2_5 = model_fit_2_5.forecast(steps=K)
    forecast_2_6 = model_fit_2_6.forecast(steps=K)
    forecast_2_7 = model_fit_2_7.forecast(steps=K)
    forecast_2_8 = model_fit_2_8.forecast(steps=K)
    forecast_3_4 = model_fit_3_4.forecast(steps=K)
    forecast_3_5 = model_fit_3_5.forecast(steps=K)
    forecast_3_6 = model_fit_3_6.forecast(steps=K)
    forecast_3_7 = model_fit_3_7.forecast(steps=K)
    forecast_3_8 = model_fit_3_8.forecast(steps=K)
    forecast_4_1 = model_fit_4_1.forecast(steps=K)
    forecast_4_2 = model_fit_4_2.forecast(steps=K)
    forecast_4_3 = model_fit_4_3.forecast(steps=K)
    forecast_4_7 = model_fit_4_7.forecast(steps=K)
    forecast_4_8 = model_fit_4_8.forecast(steps=K)
    forecast_5_1 = model_fit_5_1.forecast(steps=K)
    forecast_5_2 = model_fit_5_2.forecast(steps=K)
    forecast_5_3 = model_fit_5_3.forecast(steps=K)
    forecast_5_7 = model_fit_5_7.forecast(steps=K)
    forecast_5_8 = model_fit_5_8.forecast(steps=K)
    forecast_6_1 = model_fit_6_1.forecast(steps=K)
    forecast_6_2 = model_fit_6_2.forecast(steps=K)
    forecast_6_3 = model_fit_6_3.forecast(steps=K)
    forecast_6_7 = model_fit_6_7.forecast(steps=K)
    forecast_6_8 = model_fit_6_8.forecast(steps=K)
    forecast_7_1 = model_fit_7_1.forecast(steps=K)
    forecast_7_2 = model_fit_7_2.forecast(steps=K)
    forecast_7_3 = model_fit_7_3.forecast(steps=K)
    forecast_7_4 = model_fit_7_4.forecast(steps=K)
    forecast_7_5 = model_fit_7_5.forecast(steps=K)
    forecast_7_6 = model_fit_7_6.forecast(steps=K)
    forecast_8_1 = model_fit_8_1.forecast(steps=K)
    forecast_8_2 = model_fit_8_2.forecast(steps=K)
    forecast_8_3 = model_fit_8_3.forecast(steps=K)
    forecast_8_4 = model_fit_8_4.forecast(steps=K)
    forecast_8_5 = model_fit_8_5.forecast(steps=K)
    forecast_8_6 = model_fit_8_6.forecast(steps=K)
    
    forecast_1_4_K = TimeSplit(forecast_1_4)
    forecast_1_5_K = TimeSplit(forecast_1_5)
    forecast_1_6_K = TimeSplit(forecast_1_6)
    forecast_1_7_K = TimeSplit(forecast_1_7)
    forecast_1_8_K = TimeSplit(forecast_1_8)
    forecast_2_4_K = TimeSplit(forecast_2_4)
    forecast_2_5_K = TimeSplit(forecast_2_5)
    forecast_2_6_K = TimeSplit(forecast_2_6)
    forecast_2_7_K = TimeSplit(forecast_2_7)
    forecast_2_8_K = TimeSplit(forecast_2_8)
    forecast_3_4_K = TimeSplit(forecast_3_4)
    forecast_3_5_K = TimeSplit(forecast_3_5)
    forecast_3_6_K = TimeSplit(forecast_3_6)
    forecast_3_7_K = TimeSplit(forecast_3_7)
    forecast_3_8_K = TimeSplit(forecast_3_8)
    forecast_4_1_K = TimeSplit(forecast_4_1)
    forecast_4_2_K = TimeSplit(forecast_4_2)
    forecast_4_3_K = TimeSplit(forecast_4_3)
    forecast_4_7_K = TimeSplit(forecast_4_7)
    forecast_4_8_K = TimeSplit(forecast_4_8)
    forecast_5_1_K = TimeSplit(forecast_5_1)
    forecast_5_2_K = TimeSplit(forecast_5_2)
    forecast_5_3_K = TimeSplit(forecast_5_3)
    forecast_5_7_K = TimeSplit(forecast_5_7)
    forecast_5_8_K = TimeSplit(forecast_5_8)
    forecast_6_1_K = TimeSplit(forecast_6_1)
    forecast_6_2_K = TimeSplit(forecast_6_2)
    forecast_6_3_K = TimeSplit(forecast_6_3)
    forecast_6_7_K = TimeSplit(forecast_6_7)
    forecast_6_8_K = TimeSplit(forecast_6_8)
    forecast_7_1_K = TimeSplit(forecast_7_1)
    forecast_7_2_K = TimeSplit(forecast_7_2)
    forecast_7_3_K = TimeSplit(forecast_7_3)
    forecast_7_4_K = TimeSplit(forecast_7_4)
    forecast_7_5_K = TimeSplit(forecast_7_5)
    forecast_7_6_K = TimeSplit(forecast_7_6)
    forecast_8_1_K = TimeSplit(forecast_8_1)
    forecast_8_2_K = TimeSplit(forecast_8_2)
    forecast_8_3_K = TimeSplit(forecast_8_3)
    forecast_8_4_K = TimeSplit(forecast_8_4)
    forecast_8_5_K = TimeSplit(forecast_8_5)
    forecast_8_6_K = TimeSplit(forecast_8_6)
    
    forecast_1_4_K[0] += left_to_leave_1_4[-1]
    forecast_1_5_K[0] += left_to_leave_1_5[-1]
    forecast_1_6_K[0] += left_to_leave_1_6[-1]
    forecast_1_7_K[0] += left_to_leave_1_7[-1]
    forecast_1_8_K[0] += left_to_leave_1_8[-1]
    forecast_2_4_K[0] += left_to_leave_2_4[-1]
    forecast_2_5_K[0] += left_to_leave_2_5[-1]
    forecast_2_6_K[0] += left_to_leave_2_6[-1]
    forecast_2_7_K[0] += left_to_leave_2_7[-1]
    forecast_2_8_K[0] += left_to_leave_2_8[-1]
    forecast_3_4_K[0] += left_to_leave_3_4[-1]
    forecast_3_5_K[0] += left_to_leave_3_5[-1]
    forecast_3_6_K[0] += left_to_leave_3_6[-1]
    forecast_3_7_K[0] += left_to_leave_3_7[-1]
    forecast_3_8_K[0] += left_to_leave_3_8[-1]
    forecast_4_1_K[0] += left_to_leave_4_1[-1]
    forecast_4_2_K[0] += left_to_leave_4_2[-1]
    forecast_4_3_K[0] += left_to_leave_4_3[-1]
    forecast_4_7_K[0] += left_to_leave_4_7[-1]
    forecast_4_8_K[0] += left_to_leave_4_8[-1]
    forecast_5_1_K[0] += left_to_leave_5_1[-1]
    forecast_5_2_K[0] += left_to_leave_5_2[-1]
    forecast_5_3_K[0] += left_to_leave_5_3[-1]
    forecast_5_7_K[0] += left_to_leave_5_7[-1]
    forecast_5_8_K[0] += left_to_leave_5_8[-1]
    forecast_6_1_K[0] += left_to_leave_6_1[-1]
    forecast_6_2_K[0] += left_to_leave_6_2[-1]
    forecast_6_3_K[0] += left_to_leave_6_3[-1]
    forecast_6_7_K[0] += left_to_leave_6_7[-1]
    forecast_6_8_K[0] += left_to_leave_6_8[-1]
    forecast_7_1_K[0] += left_to_leave_7_1[-1]
    forecast_7_2_K[0] += left_to_leave_7_2[-1]
    forecast_7_3_K[0] += left_to_leave_7_3[-1]
    forecast_7_4_K[0] += left_to_leave_7_4[-1]
    forecast_7_5_K[0] += left_to_leave_7_5[-1]
    forecast_7_6_K[0] += left_to_leave_7_6[-1]
    forecast_8_1_K[0] += left_to_leave_8_1[-1]
    forecast_8_2_K[0] += left_to_leave_8_2[-1]
    forecast_8_3_K[0] += left_to_leave_8_3[-1]
    forecast_8_4_K[0] += left_to_leave_8_4[-1]
    forecast_8_5_K[0] += left_to_leave_8_5[-1]
    forecast_8_6_K[0] += left_to_leave_8_6[-1]
    
    # 计算时效快递的需求
    TimeSensitive_Req_1_4 = [x * perc1 for x in forecast_1_4_K]
    TimeSensitive_Req_1_5 = [x * perc1 for x in forecast_1_5_K]
    TimeSensitive_Req_1_6 = [x * perc1 for x in forecast_1_6_K]
    TimeSensitive_Req_1_7 = [x * perc1 for x in forecast_1_7_K]
    TimeSensitive_Req_1_8 = [x * perc1 for x in forecast_1_8_K]
    TimeSensitive_Req_2_4 = [x * perc1 for x in forecast_2_4_K]
    TimeSensitive_Req_2_5 = [x * perc1 for x in forecast_2_5_K]
    TimeSensitive_Req_2_6 = [x * perc1 for x in forecast_2_6_K]
    TimeSensitive_Req_2_7 = [x * perc1 for x in forecast_2_7_K]
    TimeSensitive_Req_2_8 = [x * perc1 for x in forecast_2_8_K]
    TimeSensitive_Req_3_4 = [x * perc1 for x in forecast_3_4_K]
    TimeSensitive_Req_3_5 = [x * perc1 for x in forecast_3_5_K]
    TimeSensitive_Req_3_6 = [x * perc1 for x in forecast_3_6_K]
    TimeSensitive_Req_3_7 = [x * perc1 for x in forecast_3_7_K]
    TimeSensitive_Req_3_8 = [x * perc1 for x in forecast_3_8_K]
    TimeSensitive_Req_4_1 = [x * perc1 for x in forecast_4_1_K]
    TimeSensitive_Req_4_2 = [x * perc1 for x in forecast_4_2_K]
    TimeSensitive_Req_4_3 = [x * perc1 for x in forecast_4_3_K]
    TimeSensitive_Req_4_7 = [x * perc1 for x in forecast_4_7_K]
    TimeSensitive_Req_4_8 = [x * perc1 for x in forecast_4_8_K]
    TimeSensitive_Req_5_1 = [x * perc1 for x in forecast_5_1_K]
    TimeSensitive_Req_5_2 = [x * perc1 for x in forecast_5_2_K]
    TimeSensitive_Req_5_3 = [x * perc1 for x in forecast_5_3_K]
    TimeSensitive_Req_5_7 = [x * perc1 for x in forecast_5_7_K]
    TimeSensitive_Req_5_8 = [x * perc1 for x in forecast_5_8_K]
    TimeSensitive_Req_6_1 = [x * perc1 for x in forecast_6_1_K]
    TimeSensitive_Req_6_2 = [x * perc1 for x in forecast_6_2_K]
    TimeSensitive_Req_6_3 = [x * perc1 for x in forecast_6_3_K]
    TimeSensitive_Req_6_7 = [x * perc1 for x in forecast_6_7_K]
    TimeSensitive_Req_6_8 = [x * perc1 for x in forecast_6_8_K]
    TimeSensitive_Req_7_1 = [x * perc1 for x in forecast_7_1_K]
    TimeSensitive_Req_7_2 = [x * perc1 for x in forecast_7_2_K]
    TimeSensitive_Req_7_3 = [x * perc1 for x in forecast_7_3_K]
    TimeSensitive_Req_7_4 = [x * perc1 for x in forecast_7_4_K]
    TimeSensitive_Req_7_5 = [x * perc1 for x in forecast_7_5_K]
    TimeSensitive_Req_7_6 = [x * perc1 for x in forecast_7_6_K]
    TimeSensitive_Req_8_1 = [x * perc1 for x in forecast_8_1_K]
    TimeSensitive_Req_8_2 = [x * perc1 for x in forecast_8_2_K]
    TimeSensitive_Req_8_3 = [x * perc1 for x in forecast_8_3_K]
    TimeSensitive_Req_8_4 = [x * perc1 for x in forecast_8_4_K]
    TimeSensitive_Req_8_5 = [x * perc1 for x in forecast_8_5_K]
    TimeSensitive_Req_8_6 = [x * perc1 for x in forecast_8_6_K]
    
    # 计算经济快递的需求
    Economy_Req_1_4 = [x * perc2 for x in forecast_1_4_K]
    Economy_Req_1_5 = [x * perc2 for x in forecast_1_5_K]
    Economy_Req_1_6 = [x * perc2 for x in forecast_1_6_K]
    Economy_Req_1_7 = [x * perc2 for x in forecast_1_7_K]
    Economy_Req_1_8 = [x * perc2 for x in forecast_1_8_K]
    Economy_Req_2_4 = [x * perc2 for x in forecast_2_4_K]
    Economy_Req_2_5 = [x * perc2 for x in forecast_2_5_K]
    Economy_Req_2_6 = [x * perc2 for x in forecast_2_6_K]
    Economy_Req_2_7 = [x * perc2 for x in forecast_2_7_K]
    Economy_Req_2_8 = [x * perc2 for x in forecast_2_8_K]
    Economy_Req_3_4 = [x * perc2 for x in forecast_3_4_K]
    Economy_Req_3_5 = [x * perc2 for x in forecast_3_5_K]
    Economy_Req_3_6 = [x * perc2 for x in forecast_3_6_K]
    Economy_Req_3_7 = [x * perc2 for x in forecast_3_7_K]
    Economy_Req_3_8 = [x * perc2 for x in forecast_3_8_K]
    Economy_Req_4_1 = [x * perc2 for x in forecast_4_1_K]
    Economy_Req_4_2 = [x * perc2 for x in forecast_4_2_K]
    Economy_Req_4_3 = [x * perc2 for x in forecast_4_3_K]
    Economy_Req_4_7 = [x * perc2 for x in forecast_4_7_K]
    Economy_Req_4_8 = [x * perc2 for x in forecast_4_8_K]
    Economy_Req_5_1 = [x * perc2 for x in forecast_5_1_K]
    Economy_Req_5_2 = [x * perc2 for x in forecast_5_2_K]
    Economy_Req_5_3 = [x * perc2 for x in forecast_5_3_K]
    Economy_Req_5_7 = [x * perc2 for x in forecast_5_7_K]
    Economy_Req_5_8 = [x * perc2 for x in forecast_5_8_K]
    Economy_Req_6_1 = [x * perc2 for x in forecast_6_1_K]
    Economy_Req_6_2 = [x * perc2 for x in forecast_6_2_K]
    Economy_Req_6_3 = [x * perc2 for x in forecast_6_3_K]
    Economy_Req_6_7 = [x * perc2 for x in forecast_6_7_K]
    Economy_Req_6_8 = [x * perc2 for x in forecast_6_8_K]
    Economy_Req_7_1 = [x * perc2 for x in forecast_7_1_K]
    Economy_Req_7_2 = [x * perc2 for x in forecast_7_2_K]
    Economy_Req_7_3 = [x * perc2 for x in forecast_7_3_K]
    Economy_Req_7_4 = [x * perc2 for x in forecast_7_4_K]
    Economy_Req_7_5 = [x * perc2 for x in forecast_7_5_K]
    Economy_Req_7_6 = [x * perc2 for x in forecast_7_6_K]
    Economy_Req_8_1 = [x * perc2 for x in forecast_8_1_K]
    Economy_Req_8_2 = [x * perc2 for x in forecast_8_2_K]
    Economy_Req_8_3 = [x * perc2 for x in forecast_8_3_K]
    Economy_Req_8_4 = [x * perc2 for x in forecast_8_4_K]
    Economy_Req_8_5 = [x * perc2 for x in forecast_8_5_K]
    Economy_Req_8_6 = [x * perc2 for x in forecast_8_6_K]
    
    # 主要计算模型
    m = gp.Model()
    m.Params.OutputFlag = 0
    m.Params.MIPGap = 0.005
    
    x_1_4 = {}
    x_1_5 = {}
    x_1_6 = {}
    x_1_7 = {}
    x_1_8 = {}
    x_2_4 = {}
    x_2_5 = {}
    x_2_6 = {}
    x_2_7 = {}
    x_2_8 = {}
    x_3_4 = {}
    x_3_5 = {}
    x_3_6 = {}
    x_3_7 = {}
    x_3_8 = {}
    x_4_1 = {}
    x_4_2 = {}
    x_4_3 = {}
    x_4_7 = {}
    x_4_8 = {}
    x_5_1 = {}
    x_5_2 = {}
    x_5_3 = {}
    x_5_7 = {}
    x_5_8 = {}
    x_6_1 = {}
    x_6_2 = {}
    x_6_3 = {}
    x_6_7 = {}
    x_6_8 = {}
    x_7_1 = {}
    x_7_2 = {}
    x_7_3 = {}
    x_7_4 = {}
    x_7_5 = {}
    x_7_6 = {}
    x_8_1 = {}
    x_8_2 = {}
    x_8_3 = {}
    x_8_4 = {}
    x_8_5 = {}
    x_8_6 = {}
    
    y_1_4 = {}
    y_1_5 = {}
    y_1_6 = {}
    y_1_7 = {}
    y_1_8 = {}
    y_2_4 = {}
    y_2_5 = {}
    y_2_6 = {}
    y_2_7 = {}
    y_2_8 = {}
    y_3_4 = {}
    y_3_5 = {}
    y_3_6 = {}
    y_3_7 = {}
    y_3_8 = {}
    y_4_1 = {}
    y_4_2 = {}
    y_4_3 = {}
    y_4_7 = {}
    y_4_8 = {}
    y_5_1 = {}
    y_5_2 = {}
    y_5_3 = {}
    y_5_7 = {}
    y_5_8 = {}
    y_6_1 = {}
    y_6_2 = {}
    y_6_3 = {}
    y_6_7 = {}
    y_6_8 = {}
    y_7_1 = {}
    y_7_2 = {}
    y_7_3 = {}
    y_7_4 = {}
    y_7_5 = {}
    y_7_6 = {}
    y_8_1 = {}
    y_8_2 = {}
    y_8_3 = {}
    y_8_4 = {}
    y_8_5 = {}
    y_8_6 = {}
    
    for w in range(1,3):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                x_1_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_1_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_1_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_2_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_2_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_2_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_3_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_3_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_3_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                x_1_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_1_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_2_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_2_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_3_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_3_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                x_4_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_4_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_4_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_5_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_5_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_5_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_6_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_6_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_6_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                x_4_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_4_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_5_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_5_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_6_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_6_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                x_7_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_7_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_7_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                x_7_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_7_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_7_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                
    for w in range(1,3):
        for j in range(N*K):
            for i in range(cargo_BH[j]):
                y_1_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_1_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_1_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_1_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_1_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_2_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_2_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_2_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_2_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_2_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_3_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_3_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_3_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_3_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_3_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
            for i in range(cargo_HS[j]):
                y_4_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_4_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_4_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_5_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_5_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_5_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_6_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_6_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_6_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_4_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_4_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_5_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_5_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_6_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_6_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
            for i in range(cargo_SB[j]):
                y_7_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_7_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_7_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_7_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_7_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_7_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                
    # 客机容量限制约束
    for j in range(len(passengerTime_BH)):
        cal1_BH = 0
        cal1_BH += gp.quicksum(x_1_4[i,j,w]+x_1_5[i,j,w]+x_1_6[i,j,w]+x_2_4[i,j,w]+x_2_5[i,j,w]+x_2_6[i,j,w]+x_3_4[i,j,w]+x_3_5[i,j,w]+x_3_6[i,j,w] for w in range(1,3) for i in range(passengerTime_BH[j]))
        m.addConstr(cal1_BH <= q)
    for j in range(len(passengerTime_BS)):
        cal1_BS = 0
        cal1_BS += gp.quicksum(x_1_7[i,j,w]+x_1_8[i,j,w]+x_2_7[i,j,w]+x_2_8[i,j,w]+x_3_7[i,j,w]+x_3_8[i,j,w] for w in range(1,3) for i in range(passengerTime_BS[j]))
        m.addConstr(cal1_BS <= q)
    for j in range(len(passengerTime_HB)):
        cal1_HB = 0
        cal1_HB += gp.quicksum(x_4_1[i,j,w]+x_4_2[i,j,w]+x_4_3[i,j,w]+x_5_1[i,j,w]+x_5_2[i,j,w]+x_5_3[i,j,w]+x_6_1[i,j,w]+x_6_2[i,j,w]+x_6_3[i,j,w] for w in range(1,3) for i in range(passengerTime_HB[j]))
        m.addConstr(cal1_HB <= q)
    for j in range(len(passengerTime_HS)):
        cal1_HS = 0
        cal1_HS += gp.quicksum(x_4_7[i,j,w]+x_4_8[i,j,w]+x_5_7[i,j,w]+x_5_8[i,j,w]+x_6_7[i,j,w]+x_6_8[i,j,w] for w in range(1,3) for i in range(passengerTime_HS[j]))
        m.addConstr(cal1_HS <= q)
    for j in range(len(passengerTime_SB)):
        cal1_SB = 0
        cal1_SB += gp.quicksum(x_7_1[i,j,w]+x_7_2[i,j,w]+x_7_3[i,j,w]+x_8_1[i,j,w]+x_8_2[i,j,w]+x_8_3[i,j,w] for w in range(1,3) for i in range(passengerTime_SB[j]))
        m.addConstr(cal1_SB <= q)
    for j in range(len(passengerTime_SH)):
        cal1_SH = 0
        cal1_SH += gp.quicksum(x_7_4[i,j,w]+x_7_5[i,j,w]+x_7_6[i,j,w]+x_8_4[i,j,w]+x_8_5[i,j,w]+x_8_6[i,j,w] for w in range(1,3) for i in range(passengerTime_SH[j]))
        m.addConstr(cal1_SH <= q)
        
    # 货机容量约束
    for j in range(N*K):
        cal2_BH = 0
        cal2_BH += (gp.quicksum((y_1_4[i,j,w]+y_1_5[i,j,w]+y_1_6[i,j,w]+y_2_4[i,j,w]+y_2_5[i,j,w]+y_2_6[i,j,w]+y_3_4[i,j,w]+y_3_5[i,j,w]+y_3_6[i,j,w]+y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w]) for w in range(1,3) for i in range(cargo_BH[j]))+gp.quicksum(y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w] for w in range(1,3) for i in range(cargo_SB[j])))
        m.addConstr(cal2_BH <= Q)
    for j in range(N*K):
        cal2_HS = 0
        cal2_HS += (gp.quicksum((y_4_7[i,j,w]+y_4_8[i,j,w]+y_5_7[i,j,w]+y_5_8[i,j,w]+y_6_7[i,j,w]+y_6_8[i,j,w]+y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w]) for w in range(1,3) for i in range(cargo_HS[j]))+gp.quicksum(y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w] for w in range(1,3) for i in range(cargo_BH[j])))
        m.addConstr(cal2_HS <= Q)
    for j in range(N*K):
        cal2_SB = 0
        cal2_SB += (gp.quicksum((y_7_1[i,j,w]+y_7_2[i,j,w]+y_7_3[i,j,w]+y_8_1[i,j,w]+y_8_2[i,j,w]+y_8_3[i,j,w]+y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w]) for w in range(1,3) for i in range(cargo_SB[j]))+gp.quicksum(y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w] for w in range(1,3) for i in range(cargo_HS[j])))
        m.addConstr(cal2_SB <= Q)
        
    # 在能运完的货物中，被运走的货物量最多达到这个时间段的订单需求量
    # 能运完的货物的仓储成本和逾期成本及被丢弃货物的成本计算
    for w in range(1,3):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                C3 += C2per[w] * (x_1_4[i,j,w]*max(BH_passengerTimeTable[j]+t1+t4-i-T_1[w]+flightTime_BH[j],0)+x_1_5[i,j,w]*max(BH_passengerTimeTable[j]+t1+t5-i-T_1[w]+flightTime_BH[j],0)+x_1_6[i,j,w]*max(BH_passengerTimeTable[j]+t1+t6-i-T_1[w]+flightTime_BH[j],0)+x_2_4[i,j,w]*max(BH_passengerTimeTable[j]+t2+t4-i-T_1[w]+flightTime_BH[j],0)+x_2_5[i,j,w]*max(BH_passengerTimeTable[j]+t2+t5-i-T_1[w]+flightTime_BH[j],0)+x_2_6[i,j,w]*max(BH_passengerTimeTable[j]+t2+t6-i-T_1[w]+flightTime_BH[j],0)+x_3_4[i,j,w]*max(BH_passengerTimeTable[j]+t3+t4-i-T_1[w]+flightTime_BH[j],0)+x_3_5[i,j,w]*max(BH_passengerTimeTable[j]+t3+t5-i-T_1[w]+flightTime_BH[j],0)+x_3_6[i,j,w]*max(BH_passengerTimeTable[j]+t3+t6-i-T_1[w]+flightTime_BH[j],0))
                C4 += c1 * ((x_1_4[i,j,w]+x_1_5[i,j,w]+x_1_6[i,j,w]+x_2_4[i,j,w]+x_2_5[i,j,w]+x_2_6[i,j,w]+x_3_4[i,j,w]+x_3_5[i,j,w]+x_3_6[i,j,w]) * (BH_passengerTimeTable[j] - i))
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                C3 += C2per[w] * (x_1_7[i,j,w]*max(BS_passengerTimeTable[j]+t1+t7-i-T_1[w]+flightTime_BS[j],0)+x_1_8[i,j,w]*max(BS_passengerTimeTable[j]+t1+t8-i-T_1[w]+flightTime_BS[j],0)+x_2_7[i,j,w]*max(BS_passengerTimeTable[j]+t2+t7-i-T_1[w]+flightTime_BS[j],0)+x_2_8[i,j,w]*max(BS_passengerTimeTable[j]+t2+t8-i-T_1[w]+flightTime_BS[j],0)+x_3_7[i,j,w]*max(BS_passengerTimeTable[j]+t3+t7-i-T_1[w]+flightTime_BS[j],0)+x_3_8[i,j,w]*max(BS_passengerTimeTable[j]+t3+t8-i-T_1[w]+flightTime_BS[j],0))
                C4 += c1 * ((x_1_7[i,j,w]+x_1_8[i,j,w]+x_2_7[i,j,w]+x_2_8[i,j,w]+x_3_7[i,j,w]+x_3_8[i,j,w]) * (BS_passengerTimeTable[j] - i))
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                C3 += C2per[w] * (x_4_1[i,j,w]*max(HB_passengerTimeTable[j]+t4+t1-i-T_1[w]+flightTime_HB[j],0)+x_4_2[i,j,w]*max(HB_passengerTimeTable[j]+t4+t2-i-T_1[w]+flightTime_HB[j],0)+x_4_3[i,j,w]*max(HB_passengerTimeTable[j]+t4+t3-i-T_1[w]+flightTime_HB[j],0)+x_5_1[i,j,w]*max(HB_passengerTimeTable[j]+t5+t1-i-T_1[w]+flightTime_HB[j],0)+x_5_2[i,j,w]*max(HB_passengerTimeTable[j]+t5+t2-i-T_1[w]+flightTime_HB[j],0)+x_5_3[i,j,w]*max(HB_passengerTimeTable[j]+t5+t3-i-T_1[w]+flightTime_HB[j],0)+x_6_1[i,j,w]*max(HB_passengerTimeTable[j]+t6+t1-i-T_1[w]+flightTime_HB[j],0)+x_6_2[i,j,w]*max(HB_passengerTimeTable[j]+t6+t2-i-T_1[w]+flightTime_HB[j],0)+x_6_3[i,j,w]*max(HB_passengerTimeTable[j]+t6+t3-i-T_1[w]+flightTime_HB[j],0))
                C4 += c1 * ((x_4_1[i,j,w]+x_4_2[i,j,w]+x_4_3[i,j,w]+x_5_1[i,j,w]+x_5_2[i,j,w]+x_5_3[i,j,w]+x_6_1[i,j,w]+x_6_2[i,j,w]+x_6_3[i,j,w]) * (HB_passengerTimeTable[j] - i))
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                C3 += C2per[w] * (x_4_7[i,j,w]*max(HS_passengerTimeTable[j]+t4+t7-i-T_1[w]+flightTime_HS[j],0)+x_4_8[i,j,w]*max(HS_passengerTimeTable[j]+t4+t8-i-T_1[w]+flightTime_HS[j],0)+x_5_7[i,j,w]*max(HS_passengerTimeTable[j]+t5+t7-i-T_1[w]+flightTime_HS[j],0)+x_5_8[i,j,w]*max(HS_passengerTimeTable[j]+t5+t8-i-T_1[w]+flightTime_HS[j],0)+x_6_7[i,j,w]*max(HS_passengerTimeTable[j]+t6+t7-i-T_1[w]+flightTime_HS[j],0)+x_6_8[i,j,w]*max(HS_passengerTimeTable[j]+t6+t8-i-T_1[w]+flightTime_HS[j],0))
                C4 += c1 * ((x_4_7[i,j,w]+x_4_8[i,j,w]+x_5_7[i,j,w]+x_5_8[i,j,w]+x_6_7[i,j,w]+x_6_8[i,j,w]) * (HS_passengerTimeTable[j] - i))
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                C3 += C2per[w] * (x_7_1[i,j,w]*max(SB_passengerTimeTable[j]+t7+t1-i-T_1[w]+flightTime_SB[j],0)+x_7_2[i,j,w]*max(SB_passengerTimeTable[j]+t7+t2-i-T_1[w]+flightTime_SB[j],0)+x_7_3[i,j,w]*max(SB_passengerTimeTable[j]+t7+t3-i-T_1[w]+flightTime_SB[j],0)+x_8_1[i,j,w]*max(SB_passengerTimeTable[j]+t8+t1-i-T_1[w]+flightTime_SB[j],0)+x_8_2[i,j,w]*max(SB_passengerTimeTable[j]+t8+t2-i-T_1[w]+flightTime_SB[j],0)+x_8_3[i,j,w]*max(SB_passengerTimeTable[j]+t8+t3-i-T_1[w]+flightTime_SB[j],0))
                C4 += c1 * ((x_7_1[i,j,w]+x_7_2[i,j,w]+x_7_3[i,j,w]+x_8_1[i,j,w]+x_8_2[i,j,w]+x_8_3[i,j,w]) * (SB_passengerTimeTable[j] - i))
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                C3 += C2per[w] * (x_7_4[i,j,w]*max(SH_passengerTimeTable[j]+t7+t4-i-T_1[w]+flightTime_SH[j],0)+x_7_5[i,j,w]*max(SH_passengerTimeTable[j]+t7+t5-i-T_1[w]+flightTime_SH[j],0)+x_7_6[i,j,w]*max(SH_passengerTimeTable[j]+t7+t6-i-T_1[w]+flightTime_SH[j],0)+x_8_4[i,j,w]*max(SH_passengerTimeTable[j]+t8+t4-i-T_1[w]+flightTime_SH[j],0)+x_8_5[i,j,w]*max(SH_passengerTimeTable[j]+t8+t5-i-T_1[w]+flightTime_SH[j],0)+x_8_6[i,j,w]*max(SH_passengerTimeTable[j]+t8+t6-i-T_1[w]+flightTime_SH[j],0))
                C4 += c1 * ((x_7_4[i,j,w]+x_7_5[i,j,w]+x_7_6[i,j,w]+x_8_4[i,j,w]+x_8_5[i,j,w]+x_8_6[i,j,w]) * (SH_passengerTimeTable[j] - i))
        for j in range(N*K):
            for i in range(cargo_BH[j]):
                C3 += C2per[w] * (y_1_4[i,j,w]*max(cargo_BH[j]+t1+t4-i-T_1[w]+Tcargo_1,0)+y_1_5[i,j,w]*max(cargo_BH[j]+t1+t5-i-T_1[w]+Tcargo_1,0)+y_1_6[i,j,w]*max(cargo_BH[j]+t1+t6-i-T_1[w]+Tcargo_1,0)+y_2_4[i,j,w]*max(cargo_BH[j]+t2+t4-i-T_1[w]+Tcargo_1,0)+y_2_5[i,j,w]*max(cargo_BH[j]+t2+t5-i-T_1[w]+Tcargo_1,0)+y_2_6[i,j,w]*max(cargo_BH[j]+t2+t6-i-T_1[w]+Tcargo_1,0))
                C3 += C2per[w] * (y_1_7[i,j,w]*max(cargo_HS[j]+t1+t7-i-T_1[w]+Tcargo_2,0)+y_1_8[i,j,w]*max(cargo_HS[j]+t1+t8-i-T_1[w]+Tcargo_2,0)+y_2_7[i,j,w]*max(cargo_HS[j]+t2+t7-i-T_1[w]+Tcargo_2,0)+y_2_8[i,j,w]*max(cargo_HS[j]+t2+t8-i-T_1[w]+Tcargo_2,0)+y_3_7[i,j,w]*max(cargo_HS[j]+t3+t7-i-T_1[w]+Tcargo_2,0)+y_3_8[i,j,w]*max(cargo_HS[j]+t3+t8-i-T_1[w]+Tcargo_2,0))
                C4 += c1 * ((y_1_4[i,j,w]+y_1_5[i,j,w]+y_1_6[i,j,w]+y_2_4[i,j,w]+y_2_5[i,j,w]+y_2_6[i,j,w]+y_3_4[i,j,w]+y_3_5[i,j,w]+y_3_6[i,j,w]+y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w]) * (cargo_BH[j] - i))
            for i in range(cargo_HS[j]):
                C3 += C2per[w] * (y_4_1[i,j,w]*max(cargo_SB[j]+t4+t1-i-T_1[w]+Tcargo_3,0)+y_4_2[i,j,w]*max(cargo_SB[j]+t4+t2-i-T_1[w]+Tcargo_3,0)+y_4_3[i,j,w]*max(cargo_SB[j]+t4+t3-i-T_1[w]+Tcargo_3,0)+y_5_1[i,j,w]*max(cargo_HS[j]+t5+t1-i-T_1[w]+Tcargo_3,0)+y_5_2[i,j,w]*max(cargo_SB[j]+t5+t2-i-T_1[w]+Tcargo_3,0)+y_5_3[i,j,w]*max(cargo_SB[j]+t5+t3-i-T_1[w]+Tcargo_3,0))
                C3 += C2per[w] * (y_4_7[i,j,w]*max(cargo_HS[j]+t4+t7-i-T_1[w]+Tcargo_2,0)+y_4_8[i,j,w]*max(cargo_HS[j]+t4+t8-i-T_1[w]+Tcargo_2,0)+y_5_7[i,j,w]*max(cargo_HS[j]+t5+t7-i-T_1[w]+Tcargo_2,0)+y_5_8[i,j,w]*max(cargo_HS[j]+t5+t8-i-T_1[w]+Tcargo_2,0))
                C4 += c1 * ((y_4_7[i,j,w]+y_4_8[i,j,w]+y_5_7[i,j,w]+y_5_8[i,j,w]+y_6_7[i,j,w]+y_6_8[i,j,w]+y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w]) * (cargo_HS[j] - i))
            for i in range(cargo_SB[j]):
                C3 += C2per[w] * (y_7_1[i,j,w]*max(cargo_SB[j]+t7+t1-i-T_1[w]+Tcargo_3,0)+y_7_2[i,j,w]*max(cargo_SB[j]+t7+t2-i-T_1[w]+Tcargo_3,0)+y_7_3[i,j,w]*max(cargo_SB[j]+t7+t3-i-T_1[w]+Tcargo_3,0)+y_8_1[i,j,w]*max(cargo_SB[j]+t8+t1-i-T_1[w]+Tcargo_3,0)+y_8_2[i,j,w]*max(cargo_SB[j]+t8+t2-i-T_1[w]+Tcargo_3,0)+y_8_3[i,j,w]*max(cargo_SB[j]+t8+t3-i-T_1[w]+Tcargo_3,0))
                C3 += C2per[w] * (y_7_4[i,j,w]*max(cargo_BH[j]+t7+t4-i-T_1[w]+Tcargo_1,0)+y_7_5[i,j,w]*max(cargo_BH[j]+t7+t5-i-T_1[w]+Tcargo_1,0)+y_7_6[i,j,w]*max(cargo_BH[j]+t7+t6-i-T_1[w]+Tcargo_1,0)+y_8_4[i,j,w]*max(cargo_BH[j]+t8+t4-i-T_1[w]+Tcargo_1,0)+y_8_5[i,j,w]*max(cargo_BH[j]+t8+t5-i-T_1[w]+Tcargo_1,0)+y_8_6[i,j,w]*max(cargo_BH[j]+t8+t6-i-T_1[w]+Tcargo_1,0))
                C4 += c1 * ((y_7_1[i,j,w]+y_7_2[i,j,w]+y_7_3[i,j,w]+y_8_1[i,j,w]+y_8_2[i,j,w]+y_8_3[i,j,w]+y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w]) * (cargo_SB[j] - i))
                
    TimeSensitive_Req_BH = [x1+x2+x3+x4+x5+x6+x7+x8+x9 for x1,x2,x3,x4,x5,x6,x7,x8,x9 in zip(TimeSensitive_Req_1_4,TimeSensitive_Req_1_5,TimeSensitive_Req_1_6,TimeSensitive_Req_2_4,TimeSensitive_Req_2_5,TimeSensitive_Req_2_6,TimeSensitive_Req_3_4,TimeSensitive_Req_3_5,TimeSensitive_Req_3_6)]
    TimeSensitive_Req_BS = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(TimeSensitive_Req_1_7,TimeSensitive_Req_1_8,TimeSensitive_Req_2_7,TimeSensitive_Req_2_8,TimeSensitive_Req_3_7,TimeSensitive_Req_3_8)]
    TimeSensitive_Req_HB = [x1+x2+x3+x4+x5+x6+x7+x8+x9 for x1,x2,x3,x4,x5,x6,x7,x8,x9 in zip(TimeSensitive_Req_4_1,TimeSensitive_Req_4_2,TimeSensitive_Req_4_3,TimeSensitive_Req_5_1,TimeSensitive_Req_5_2,TimeSensitive_Req_5_3,TimeSensitive_Req_6_1,TimeSensitive_Req_6_2,TimeSensitive_Req_6_3)]
    TimeSensitive_Req_HS = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(TimeSensitive_Req_4_7,TimeSensitive_Req_4_8,TimeSensitive_Req_5_7,TimeSensitive_Req_5_8,TimeSensitive_Req_6_7,TimeSensitive_Req_6_8)]
    TimeSensitive_Req_SB = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(TimeSensitive_Req_7_1,TimeSensitive_Req_7_2,TimeSensitive_Req_7_3,TimeSensitive_Req_8_1,TimeSensitive_Req_8_2,TimeSensitive_Req_8_3)]
    TimeSensitive_Req_SH = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(TimeSensitive_Req_7_4,TimeSensitive_Req_7_5,TimeSensitive_Req_7_6,TimeSensitive_Req_8_4,TimeSensitive_Req_8_5,TimeSensitive_Req_8_6)]
    Economy_Req_BH = [x1+x2+x3+x4+x5+x6+x7+x8+x9 for x1,x2,x3,x4,x5,x6,x7,x8,x9 in zip(Economy_Req_1_4,Economy_Req_1_5,Economy_Req_1_6,Economy_Req_2_4,Economy_Req_2_5,Economy_Req_2_6,Economy_Req_3_4,Economy_Req_3_5,Economy_Req_3_6)]
    Economy_Req_BS = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(Economy_Req_1_7,Economy_Req_1_8,Economy_Req_2_7,Economy_Req_2_8,Economy_Req_3_7,Economy_Req_3_8)]
    Economy_Req_HB = [x1+x2+x3+x4+x5+x6+x7+x8+x9 for x1,x2,x3,x4,x5,x6,x7,x8,x9 in zip(Economy_Req_4_1,Economy_Req_4_2,Economy_Req_4_3,Economy_Req_5_1,Economy_Req_5_2,Economy_Req_5_3,Economy_Req_6_1,Economy_Req_6_2,Economy_Req_6_3)]
    Economy_Req_HS = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(Economy_Req_4_7,Economy_Req_4_8,Economy_Req_5_7,Economy_Req_5_8,Economy_Req_6_7,Economy_Req_6_8)]
    Economy_Req_SB = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(Economy_Req_7_1,Economy_Req_7_2,Economy_Req_7_3,Economy_Req_8_1,Economy_Req_8_2,Economy_Req_8_3)]
    Economy_Req_SH = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(Economy_Req_7_4,Economy_Req_7_5,Economy_Req_7_6,Economy_Req_8_4,Economy_Req_8_5,Economy_Req_8_6)]
    forecast_BH_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_BH,Economy_Req_BH)]
    forecast_BS_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_BS,Economy_Req_BS)]
    forecast_HB_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_HB,Economy_Req_HB)]
    forecast_HS_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_HS,Economy_Req_HS)]
    forecast_SB_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_SB,Economy_Req_SB)]
    forecast_SH_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_SH,Economy_Req_SH)]
    passengerTotalBH = 0
    cargoTotalBH = 0
    passengerTotalBS = 0
    cargoTotalBS = 0
    passengerTotalHB = 0
    cargoTotalHB = 0
    passengerTotalHS = 0
    cargoTotalHS = 0
    passengerTotalSB = 0
    cargoTotalSB = 0
    passengerTotalSH = 0
    cargoTotalSH = 0
    
    for k in range(last_BH):
        transOut1 = 0
        transOut2 = 0
        transOut1_1_4 = 0
        transOut1_1_5 = 0
        transOut1_1_6 = 0
        transOut2_1_4 = 0
        transOut2_1_5 = 0
        transOut2_1_6 = 0
        transOut1_2_4 = 0
        transOut1_2_5 = 0
        transOut1_2_6 = 0
        transOut2_2_4 = 0
        transOut2_2_5 = 0
        transOut2_2_6 = 0
        transOut1_3_4 = 0
        transOut1_3_5 = 0
        transOut1_3_6 = 0
        transOut2_3_4 = 0
        transOut2_3_5 = 0
        transOut2_3_6 = 0
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                if i == k:
                    transOut1_1_4 += x_1_4[i,j,1]
                    transOut2_1_4 += x_1_4[i,j,2]
                    transOut1_1_5 += x_1_5[i,j,1]
                    transOut2_1_5 += x_1_5[i,j,2]
                    transOut1_1_6 += x_1_6[i,j,1]
                    transOut2_1_6 += x_1_6[i,j,2]
                    transOut1_2_4 += x_2_4[i,j,1]
                    transOut2_2_4 += x_2_4[i,j,2]
                    transOut1_2_5 += x_2_5[i,j,1]
                    transOut2_2_5 += x_2_5[i,j,2]
                    transOut1_2_6 += x_2_6[i,j,1]
                    transOut2_2_6 += x_2_6[i,j,2]
                    transOut1_3_4 += x_3_4[i,j,1]
                    transOut2_3_4 += x_3_4[i,j,2]
                    transOut1_3_5 += x_3_5[i,j,1]
                    transOut2_3_5 += x_3_5[i,j,2]
                    transOut1_3_6 += x_3_6[i,j,1]
                    transOut2_3_6 += x_3_6[i,j,2]
                    transOut1 += (x_1_4[i,j,1]+x_1_5[i,j,1]+x_1_6[i,j,1]+x_2_4[i,j,1]+x_2_5[i,j,1]+x_2_6[i,j,1]+x_3_4[i,j,1]+x_3_5[i,j,1]+x_3_6[i,j,1])
                    transOut2 += (x_1_4[i,j,2]+x_1_5[i,j,2]+x_1_6[i,j,2]+x_2_4[i,j,2]+x_2_5[i,j,2]+x_2_6[i,j,2]+x_3_4[i,j,2]+x_3_5[i,j,2]+x_3_6[i,j,2])
                    passengerTotalBH += (x_1_4[i,j,1]+x_1_5[i,j,1]+x_1_6[i,j,1]+x_2_4[i,j,1]+x_2_5[i,j,1]+x_2_6[i,j,1]+x_3_4[i,j,1]+x_3_5[i,j,1]+x_3_6[i,j,1]+x_1_4[i,j,2]+x_1_5[i,j,2]+x_1_6[i,j,2]+x_2_4[i,j,2]+x_2_5[i,j,2]+x_2_6[i,j,2]+x_3_4[i,j,2]+x_3_5[i,j,2]+x_3_6[i,j,2])          
        for j in range(N*K):
            for i in range(cargo_BH[j]):
                if i == k:
                    transOut1_1_4 += y_1_4[i,j,1]
                    transOut2_1_4 += y_1_4[i,j,2]
                    transOut1_1_5 += y_1_5[i,j,1]
                    transOut2_1_5 += y_1_5[i,j,2]
                    transOut1_1_6 += y_1_6[i,j,1]
                    transOut2_1_6 += y_1_6[i,j,2]
                    transOut1_2_4 += y_2_4[i,j,1]
                    transOut2_2_4 += y_2_4[i,j,2]
                    transOut1_2_5 += y_2_5[i,j,1]
                    transOut2_2_5 += y_2_5[i,j,2]
                    transOut1_2_6 += y_2_6[i,j,1]
                    transOut2_2_6 += y_2_6[i,j,2]
                    transOut1_3_4 += y_3_4[i,j,1]
                    transOut2_3_4 += y_3_4[i,j,2]
                    transOut1_3_5 += y_3_5[i,j,1]
                    transOut2_3_5 += y_3_5[i,j,2]
                    transOut1_3_6 += y_3_6[i,j,1]
                    transOut2_3_6 += y_3_6[i,j,2]
                    transOut1 += (y_1_4[i,j,1]+y_1_5[i,j,1]+y_1_6[i,j,1]+y_2_4[i,j,1]+y_2_5[i,j,1]+y_2_6[i,j,1]+y_3_4[i,j,1]+y_3_5[i,j,1]+y_3_6[i,j,1])
                    transOut2 += (y_1_4[i,j,2]+y_1_5[i,j,2]+y_1_6[i,j,2]+y_2_4[i,j,2]+y_2_5[i,j,2]+y_2_6[i,j,2]+y_3_4[i,j,2]+y_3_5[i,j,2]+y_3_6[i,j,2])
                    cargoTotalBH += (y_1_4[i,j,1]+y_1_5[i,j,1]+y_1_6[i,j,1]+y_2_4[i,j,1]+y_2_5[i,j,1]+y_2_6[i,j,1]+y_3_4[i,j,1]+y_3_5[i,j,1]+y_3_6[i,j,1]+y_1_4[i,j,2]+y_1_5[i,j,2]+y_1_6[i,j,2]+y_2_4[i,j,2]+y_2_5[i,j,2]+y_2_6[i,j,2]+y_3_4[i,j,2]+y_3_5[i,j,2]+y_3_6[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_1_4 <= TimeSensitive_Req_1_4[k])
        m.addConstr(transOut2_1_4 <= Economy_Req_1_4[k])
        m.addConstr(transOut1_1_5 <= TimeSensitive_Req_1_5[k])
        m.addConstr(transOut2_1_5 <= Economy_Req_1_5[k])
        m.addConstr(transOut1_1_6 <= TimeSensitive_Req_1_6[k])
        m.addConstr(transOut2_1_6 <= Economy_Req_1_6[k])
        m.addConstr(transOut1_2_4 <= TimeSensitive_Req_2_4[k])
        m.addConstr(transOut2_2_4 <= Economy_Req_2_4[k])
        m.addConstr(transOut1_2_5 <= TimeSensitive_Req_2_5[k])
        m.addConstr(transOut2_2_5 <= Economy_Req_2_5[k])
        m.addConstr(transOut1_2_6 <= TimeSensitive_Req_2_6[k])
        m.addConstr(transOut2_2_6 <= Economy_Req_2_6[k])
        m.addConstr(transOut1_3_4 <= TimeSensitive_Req_3_4[k])
        m.addConstr(transOut2_3_4 <= Economy_Req_3_4[k])
        m.addConstr(transOut1_3_5 <= TimeSensitive_Req_3_5[k])
        m.addConstr(transOut2_3_5 <= Economy_Req_3_5[k])
        m.addConstr(transOut1_3_6 <= TimeSensitive_Req_3_6[k])
        m.addConstr(transOut2_3_6 <= Economy_Req_3_6[k])
        trash = c3_1 * (TimeSensitive_Req_BH[k]-transOut1) + c3_2 * (Economy_Req_BH[k]-transOut2)
        C6 += trash
    for k in range(last_BS):
        transOut1 = 0
        transOut2 = 0
        transOut1_1_7 = 0
        transOut2_1_7 = 0
        transOut1_1_8 = 0
        transOut2_1_8 = 0
        transOut1_2_7 = 0
        transOut2_2_7 = 0
        transOut1_2_8 = 0
        transOut2_2_8 = 0
        transOut1_3_7 = 0
        transOut2_3_7 = 0
        transOut1_3_8 = 0
        transOut2_3_8 = 0
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                if i == k:
                    transOut1_1_7 += x_1_7[i,j,1]
                    transOut2_1_7 += x_1_7[i,j,2]
                    transOut1_1_8 += x_1_8[i,j,1]
                    transOut2_1_8 += x_1_8[i,j,2]
                    transOut1_2_7 += x_2_7[i,j,1]
                    transOut2_2_7 += x_2_7[i,j,2]
                    transOut1_2_8 += x_2_8[i,j,1]
                    transOut2_2_8 += x_2_8[i,j,2]
                    transOut1_3_7 += x_3_7[i,j,1]
                    transOut2_3_7 += x_3_7[i,j,2]
                    transOut1_3_8 += x_3_8[i,j,1]
                    transOut2_3_8 += x_3_8[i,j,2]
                    transOut1 += (x_1_7[i,j,1]+x_1_8[i,j,1]+x_2_7[i,j,1]+x_2_8[i,j,1]+x_3_7[i,j,1]+x_3_8[i,j,1])
                    transOut2 += (x_1_7[i,j,2]+x_1_8[i,j,2]+x_2_7[i,j,2]+x_2_8[i,j,2]+x_3_7[i,j,2]+x_3_8[i,j,2])
                    passengerTotalBS += (x_1_7[i,j,1]+x_1_8[i,j,1]+x_2_7[i,j,1]+x_2_8[i,j,1]+x_3_7[i,j,1]+x_3_8[i,j,1]+x_1_7[i,j,2]+x_1_8[i,j,2]+x_2_7[i,j,2]+x_2_8[i,j,2]+x_3_7[i,j,2]+x_3_8[i,j,2])
        for j in range(N*K):
            for i in range(cargo_BH[j]):
                if i == k:
                    transOut1_1_7 += y_1_7[i,j,1]
                    transOut2_1_7 += y_1_7[i,j,2]
                    transOut1_1_8 += y_1_8[i,j,1]
                    transOut2_1_8 += y_1_8[i,j,2]
                    transOut1_2_7 += y_2_7[i,j,1]
                    transOut2_2_7 += y_2_7[i,j,2]
                    transOut1_2_8 += y_2_8[i,j,1]
                    transOut2_2_8 += y_2_8[i,j,2]
                    transOut1_3_7 += y_3_7[i,j,1]
                    transOut2_3_7 += y_3_7[i,j,2]
                    transOut1_3_8 += y_3_8[i,j,1]
                    transOut2_3_8 += y_3_8[i,j,2]
                    transOut1 += (y_1_7[i,j,1]+y_1_8[i,j,1]+y_2_7[i,j,1]+y_2_8[i,j,1]+y_3_7[i,j,1]+y_3_8[i,j,1])
                    transOut2 += (y_1_7[i,j,2]+y_1_8[i,j,2]+y_2_7[i,j,2]+y_2_8[i,j,2]+y_3_7[i,j,2]+y_3_8[i,j,2])
                    cargoTotalBS += (y_1_7[i,j,1]+y_1_8[i,j,1]+y_2_7[i,j,1]+y_2_8[i,j,1]+y_3_7[i,j,1]+y_3_8[i,j,1]+y_1_7[i,j,2]+y_1_8[i,j,2]+y_2_7[i,j,2]+y_2_8[i,j,2]+y_3_7[i,j,2]+y_3_8[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_1_7 <= TimeSensitive_Req_1_7[k])
        m.addConstr(transOut2_1_7 <= Economy_Req_1_7[k])
        m.addConstr(transOut1_1_8 <= TimeSensitive_Req_1_8[k])
        m.addConstr(transOut2_1_8 <= Economy_Req_1_8[k])
        m.addConstr(transOut1_2_7 <= TimeSensitive_Req_2_7[k])
        m.addConstr(transOut2_2_7 <= Economy_Req_2_7[k])
        m.addConstr(transOut1_2_8 <= TimeSensitive_Req_2_8[k])
        m.addConstr(transOut2_2_8 <= Economy_Req_2_8[k])
        m.addConstr(transOut1_3_7 <= TimeSensitive_Req_3_7[k])
        m.addConstr(transOut2_3_7 <= Economy_Req_3_7[k])
        m.addConstr(transOut1_3_8 <= TimeSensitive_Req_3_8[k])
        m.addConstr(transOut2_3_8 <= Economy_Req_3_8[k])
        trash = c3_1 * (TimeSensitive_Req_BS[k]-transOut1) + c3_2 * (Economy_Req_BS[k]-transOut2)
        C6 += trash
    for k in range(last_HB):
        transOut1 = 0
        transOut2 = 0
        transOut1_4_1 = 0
        transOut2_4_1 = 0
        transOut1_4_2 = 0
        transOut2_4_2 = 0
        transOut1_4_3 = 0
        transOut2_4_3 = 0
        transOut1_5_1 = 0
        transOut2_5_1 = 0
        transOut1_5_2 = 0
        transOut2_5_2 = 0
        transOut1_5_3 = 0
        transOut2_5_3 = 0
        transOut1_6_1 = 0
        transOut2_6_1 = 0
        transOut1_6_2 = 0
        transOut2_6_2 = 0
        transOut1_6_3 = 0
        transOut2_6_3 = 0
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                if i == k:
                    transOut1_4_1 += x_4_1[i,j,1]
                    transOut2_4_1 += x_4_1[i,j,2]
                    transOut1_4_2 += x_4_2[i,j,1]
                    transOut2_4_2 += x_4_2[i,j,2]
                    transOut1_4_3 += x_4_3[i,j,1]
                    transOut2_4_3 += x_4_3[i,j,2]
                    transOut1_5_1 += x_5_1[i,j,1]
                    transOut2_5_1 += x_5_1[i,j,2]
                    transOut1_5_2 += x_5_2[i,j,1]
                    transOut2_5_2 += x_5_2[i,j,2]
                    transOut1_5_3 += x_5_3[i,j,1]
                    transOut2_5_3 += x_5_3[i,j,2]
                    transOut1_6_1 += x_6_1[i,j,1]
                    transOut2_6_1 += x_6_1[i,j,2]
                    transOut1_6_2 += x_6_2[i,j,1]
                    transOut2_6_2 += x_6_2[i,j,2]
                    transOut1_6_3 += x_6_3[i,j,1]
                    transOut2_6_3 += x_6_3[i,j,2]
                    transOut1 += x_4_1[i,j,1]+x_4_2[i,j,1]+x_4_3[i,j,1]+x_5_1[i,j,1]+x_5_2[i,j,1]+x_5_3[i,j,1]+x_6_1[i,j,1]+x_6_2[i,j,1]+x_6_3[i,j,1]
                    transOut2 += x_4_1[i,j,2]+x_4_2[i,j,2]+x_4_3[i,j,2]+x_5_1[i,j,2]+x_5_2[i,j,2]+x_5_3[i,j,2]+x_6_1[i,j,2]+x_6_2[i,j,2]+x_6_3[i,j,2]
                    passengerTotalHB += (x_4_1[i,j,1]+x_4_2[i,j,1]+x_4_3[i,j,1]+x_5_1[i,j,1]+x_5_2[i,j,1]+x_5_3[i,j,1]+x_6_1[i,j,1]+x_6_2[i,j,1]+x_6_3[i,j,1]+x_4_1[i,j,2]+x_4_2[i,j,2]+x_4_3[i,j,2]+x_5_1[i,j,2]+x_5_2[i,j,2]+x_5_3[i,j,2]+x_6_1[i,j,2]+x_6_2[i,j,2]+x_6_3[i,j,2])
        for j in range(N*K):
            for i in range(cargo_HS[j]):
                if i == k:
                    transOut1_4_1 += y_4_1[i,j,1]
                    transOut2_4_1 += y_4_1[i,j,2]
                    transOut1_4_2 += y_4_2[i,j,1]
                    transOut2_4_2 += y_4_2[i,j,2]
                    transOut1_4_3 += y_4_3[i,j,1]
                    transOut2_4_3 += y_4_3[i,j,2]
                    transOut1_5_1 += y_5_1[i,j,1]
                    transOut2_5_1 += y_5_1[i,j,2]
                    transOut1_5_2 += y_5_2[i,j,1]
                    transOut2_5_2 += y_5_2[i,j,2]
                    transOut1_5_3 += y_5_3[i,j,1]
                    transOut2_5_3 += y_5_3[i,j,2]
                    transOut1_6_1 += y_6_1[i,j,1]
                    transOut2_6_1 += y_6_1[i,j,2]
                    transOut1_6_2 += y_6_2[i,j,1]
                    transOut2_6_2 += y_6_2[i,j,2]
                    transOut1_6_3 += y_6_3[i,j,1]
                    transOut2_6_3 += y_6_3[i,j,2]
                    transOut1 += y_4_1[i,j,1]+y_4_2[i,j,1]+y_4_3[i,j,1]+y_5_1[i,j,1]+y_5_2[i,j,1]+y_5_3[i,j,1]+y_6_1[i,j,1]+y_6_2[i,j,1]+y_6_3[i,j,1]
                    transOut2 += y_4_1[i,j,2]+y_4_2[i,j,2]+y_4_3[i,j,2]+y_5_1[i,j,2]+y_5_2[i,j,2]+y_5_3[i,j,2]+y_6_1[i,j,2]+y_6_2[i,j,2]+y_6_3[i,j,2]
                    cargoTotalHB += (y_4_1[i,j,1]+y_4_2[i,j,1]+y_4_3[i,j,1]+y_5_1[i,j,1]+y_5_2[i,j,1]+y_5_3[i,j,1]+y_6_1[i,j,1]+y_6_2[i,j,1]+y_6_3[i,j,1]+y_4_1[i,j,2]+y_4_2[i,j,2]+y_4_3[i,j,2]+y_5_1[i,j,2]+y_5_2[i,j,2]+y_5_3[i,j,2]+y_6_1[i,j,2]+y_6_2[i,j,2]+y_6_3[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_4_1 <= TimeSensitive_Req_4_1[k])
        m.addConstr(transOut2_4_1 <= Economy_Req_4_1[k])
        m.addConstr(transOut1_4_2 <= TimeSensitive_Req_4_2[k])
        m.addConstr(transOut2_4_2 <= Economy_Req_4_2[k])
        m.addConstr(transOut1_4_3 <= TimeSensitive_Req_4_3[k])
        m.addConstr(transOut2_4_3 <= Economy_Req_4_3[k])
        m.addConstr(transOut1_5_1 <= TimeSensitive_Req_5_1[k])
        m.addConstr(transOut2_5_1 <= Economy_Req_5_1[k])
        m.addConstr(transOut1_5_2 <= TimeSensitive_Req_5_2[k])
        m.addConstr(transOut2_5_2 <= Economy_Req_5_2[k])
        m.addConstr(transOut1_5_3 <= TimeSensitive_Req_5_3[k])
        m.addConstr(transOut2_5_3 <= Economy_Req_5_3[k])
        m.addConstr(transOut1_6_1 <= TimeSensitive_Req_6_1[k])
        m.addConstr(transOut2_6_1 <= Economy_Req_6_1[k])
        m.addConstr(transOut1_6_2 <= TimeSensitive_Req_6_2[k])
        m.addConstr(transOut2_6_2 <= Economy_Req_6_2[k])
        m.addConstr(transOut1_6_3 <= TimeSensitive_Req_6_3[k])
        m.addConstr(transOut2_6_3 <= Economy_Req_6_3[k])
        trash = c3_1 * (TimeSensitive_Req_HB[k]-transOut1) + c3_2 * (Economy_Req_HB[k]-transOut2)
        C6 += trash
    for k in range(last_HS):
        transOut1 = 0
        transOut2 = 0
        transOut1_4_7 = 0
        transOut2_4_7 = 0
        transOut1_4_8 = 0
        transOut2_4_8 = 0
        transOut1_5_7 = 0
        transOut2_5_7 = 0
        transOut1_5_8 = 0
        transOut2_5_8 = 0
        transOut1_6_7 = 0
        transOut2_6_7 = 0
        transOut1_6_8 = 0
        transOut2_6_8 = 0
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                if i == k:
                    transOut1_4_7 += x_4_7[i,j,1]
                    transOut2_4_7 += x_4_7[i,j,2]
                    transOut1_4_8 += x_4_8[i,j,1]
                    transOut2_4_8 += x_4_8[i,j,2]
                    transOut1_5_7 += x_5_7[i,j,1]
                    transOut2_5_7 += x_5_7[i,j,2]
                    transOut1_5_8 += x_5_8[i,j,1]
                    transOut2_5_8 += x_5_8[i,j,2]
                    transOut1_6_7 += x_6_7[i,j,1]
                    transOut2_6_7 += x_6_7[i,j,2]
                    transOut1_6_8 += x_6_8[i,j,1]
                    transOut2_6_8 += x_6_8[i,j,2]
                    transOut1 += x_4_7[i,j,1]+x_4_8[i,j,1]+x_5_7[i,j,1]+x_5_8[i,j,1]+x_6_7[i,j,1]+x_6_8[i,j,1]
                    transOut2 += x_4_7[i,j,2]+x_4_8[i,j,2]+x_5_7[i,j,2]+x_5_8[i,j,2]+x_6_7[i,j,2]+x_6_8[i,j,2]
                    passengerTotalHS += (x_4_7[i,j,1]+x_4_8[i,j,1]+x_5_7[i,j,1]+x_5_8[i,j,1]+x_6_7[i,j,1]+x_6_8[i,j,1]+x_4_7[i,j,2]+x_4_8[i,j,2]+x_5_7[i,j,2]+x_5_8[i,j,2]+x_6_7[i,j,2]+x_6_8[i,j,2])
        for j in range(N*K):
            for i in range(cargo_HS[j]):
                if i == k:
                    transOut1_4_7 += y_4_7[i,j,1]
                    transOut2_4_7 += y_4_7[i,j,2]
                    transOut1_4_8 += y_4_8[i,j,1]
                    transOut2_4_8 += y_4_8[i,j,2]
                    transOut1_5_7 += y_5_7[i,j,1]
                    transOut2_5_7 += y_5_7[i,j,2]
                    transOut1_5_8 += y_5_8[i,j,1]
                    transOut2_5_8 += y_5_8[i,j,2]
                    transOut1_6_7 += y_6_7[i,j,1]
                    transOut2_6_7 += y_6_7[i,j,2]
                    transOut1_6_8 += y_6_8[i,j,1]
                    transOut2_6_8 += y_6_8[i,j,2]
                    transOut1 += y_4_7[i,j,1]+y_4_8[i,j,1]+y_5_7[i,j,1]+y_5_8[i,j,1]+y_6_7[i,j,1]+y_6_8[i,j,1]
                    transOut2 += y_4_7[i,j,2]+y_4_8[i,j,2]+y_5_7[i,j,2]+y_5_8[i,j,2]+y_6_7[i,j,2]+y_6_8[i,j,2]
                    cargoTotalHS += (y_4_7[i,j,1]+y_4_8[i,j,1]+y_5_7[i,j,1]+y_5_8[i,j,1]+y_6_7[i,j,1]+y_6_8[i,j,1]+y_4_7[i,j,2]+y_4_8[i,j,2]+y_5_7[i,j,2]+y_5_8[i,j,2]+y_6_7[i,j,2]+y_6_8[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_4_7 <= TimeSensitive_Req_4_7[k])
        m.addConstr(transOut2_4_7 <= Economy_Req_4_7[k])
        m.addConstr(transOut1_4_8 <= TimeSensitive_Req_4_8[k])
        m.addConstr(transOut2_4_8 <= Economy_Req_4_8[k])
        m.addConstr(transOut1_5_7 <= TimeSensitive_Req_5_7[k])
        m.addConstr(transOut2_5_7 <= Economy_Req_5_7[k])
        m.addConstr(transOut1_5_8 <= TimeSensitive_Req_5_8[k])
        m.addConstr(transOut2_5_8 <= Economy_Req_5_8[k])
        m.addConstr(transOut1_6_7 <= TimeSensitive_Req_6_7[k])
        m.addConstr(transOut2_6_7 <= Economy_Req_6_7[k])
        m.addConstr(transOut1_6_8 <= TimeSensitive_Req_6_8[k])
        m.addConstr(transOut2_6_8 <= Economy_Req_6_8[k])
        trash = c3_1 * (TimeSensitive_Req_HS[k]-transOut1) + c3_2 * (Economy_Req_HS[k]-transOut2)
        C6 += trash
    for k in range(last_SB):
        transOut1 = 0
        transOut2 = 0
        transOut1_7_1 = 0
        transOut2_7_1 = 0
        transOut1_7_2 = 0
        transOut2_7_2 = 0
        transOut1_7_3 = 0
        transOut2_7_3 = 0
        transOut1_8_1 = 0
        transOut2_8_1 = 0
        transOut1_8_2 = 0
        transOut2_8_2 = 0
        transOut1_8_3 = 0
        transOut2_8_3 = 0
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                if i == k:
                    transOut1_7_1 += x_7_1[i,j,1]
                    transOut2_7_1 += x_7_1[i,j,2]
                    transOut1_7_2 += x_7_2[i,j,1]
                    transOut2_7_2 += x_7_2[i,j,2]
                    transOut1_7_3 += x_7_3[i,j,1]
                    transOut2_7_3 += x_7_3[i,j,2]
                    transOut1_8_1 += x_8_1[i,j,1]
                    transOut2_8_1 += x_8_1[i,j,2]
                    transOut1_8_2 += x_8_2[i,j,1]
                    transOut2_8_2 += x_8_2[i,j,2]
                    transOut1_8_3 += x_8_3[i,j,1]
                    transOut2_8_3 += x_8_3[i,j,2]
                    transOut1 += x_7_1[i,j,1]+x_7_2[i,j,1]+x_7_3[i,j,1]+x_8_1[i,j,1]+x_8_2[i,j,1]+x_8_3[i,j,1]
                    transOut2 += x_7_1[i,j,2]+x_7_2[i,j,2]+x_7_3[i,j,2]+x_8_1[i,j,2]+x_8_2[i,j,2]+x_8_3[i,j,2]
                    passengerTotalSB += (x_7_1[i,j,1]+x_7_2[i,j,1]+x_7_3[i,j,1]+x_8_1[i,j,1]+x_8_2[i,j,1]+x_8_3[i,j,1]+x_7_1[i,j,2]+x_7_2[i,j,2]+x_7_3[i,j,2]+x_8_1[i,j,2]+x_8_2[i,j,2]+x_8_3[i,j,2])
        for j in range(N*K):
            for i in range(cargo_SB[j]):
                if i == k:
                    transOut1_7_1 += y_7_1[i,j,1]
                    transOut2_7_1 += y_7_1[i,j,2]
                    transOut1_7_2 += y_7_2[i,j,1]
                    transOut2_7_2 += y_7_2[i,j,2]
                    transOut1_7_3 += y_7_3[i,j,1]
                    transOut2_7_3 += y_7_3[i,j,2]
                    transOut1_8_1 += y_8_1[i,j,1]
                    transOut2_8_1 += y_8_1[i,j,2]
                    transOut1_8_2 += y_8_2[i,j,1]
                    transOut2_8_2 += y_8_2[i,j,2]
                    transOut1_8_3 += y_8_3[i,j,1]
                    transOut2_8_3 += y_8_3[i,j,2]
                    transOut1 += y_7_1[i,j,1]+y_7_2[i,j,1]+y_7_3[i,j,1]+y_8_1[i,j,1]+y_8_2[i,j,1]+y_8_3[i,j,1]
                    transOut2 += y_7_1[i,j,2]+y_7_2[i,j,2]+y_7_3[i,j,2]+y_8_1[i,j,2]+y_8_2[i,j,2]+y_8_3[i,j,2]
                    cargoTotalSB += (y_7_1[i,j,1]+y_7_2[i,j,1]+y_7_3[i,j,1]+y_8_1[i,j,1]+y_8_2[i,j,1]+y_8_3[i,j,1]+y_7_1[i,j,2]+y_7_2[i,j,2]+y_7_3[i,j,2]+y_8_1[i,j,2]+y_8_2[i,j,2]+y_8_3[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_7_1 <= TimeSensitive_Req_7_1[k])
        m.addConstr(transOut2_7_1 <= Economy_Req_7_1[k])
        m.addConstr(transOut1_7_2 <= TimeSensitive_Req_7_2[k])
        m.addConstr(transOut2_7_2 <= Economy_Req_7_2[k])
        m.addConstr(transOut1_7_3 <= TimeSensitive_Req_7_3[k])
        m.addConstr(transOut2_7_3 <= Economy_Req_7_3[k])
        m.addConstr(transOut1_8_1 <= TimeSensitive_Req_8_1[k])
        m.addConstr(transOut2_8_1 <= Economy_Req_8_1[k])
        m.addConstr(transOut1_8_2 <= TimeSensitive_Req_8_2[k])
        m.addConstr(transOut2_8_2 <= Economy_Req_8_2[k])
        m.addConstr(transOut1_8_3 <= TimeSensitive_Req_8_3[k])
        m.addConstr(transOut2_8_3 <= Economy_Req_8_3[k])
        trash = c3_1 * (TimeSensitive_Req_SB[k]-transOut1) + c3_2 * (Economy_Req_SB[k]-transOut2)
        C6 += trash
    for k in range(last_SH):
        transOut1 = 0
        transOut2 = 0
        transOut1_7_4 = 0
        transOut2_7_4 = 0
        transOut1_7_5 = 0
        transOut2_7_5 = 0
        transOut1_7_6 = 0
        transOut2_7_6 = 0
        transOut1_8_4 = 0
        transOut2_8_4 = 0
        transOut1_8_5 = 0
        transOut2_8_5 = 0
        transOut1_8_6 = 0
        transOut2_8_6 = 0
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                if i == k:
                    transOut1_7_4 += x_7_4[i,j,1]
                    transOut2_7_4 += x_7_4[i,j,2]
                    transOut1_7_5 += x_7_5[i,j,1]
                    transOut2_7_5 += x_7_5[i,j,2]
                    transOut1_7_6 += x_7_6[i,j,1]
                    transOut2_7_6 += x_7_6[i,j,2]
                    transOut1_8_4 += x_8_4[i,j,1]
                    transOut2_8_4 += x_8_4[i,j,2]
                    transOut1_8_5 += x_8_5[i,j,1]
                    transOut2_8_5 += x_8_5[i,j,2]
                    transOut1_8_6 += x_8_6[i,j,1]
                    transOut2_8_6 += x_8_6[i,j,2]
                    transOut1 += x_7_4[i,j,1]+x_7_5[i,j,1]+x_7_6[i,j,1]+x_8_4[i,j,1]+x_8_5[i,j,1]+x_8_6[i,j,1]
                    transOut2 += x_7_4[i,j,2]+x_7_5[i,j,2]+x_7_6[i,j,2]+x_8_4[i,j,2]+x_8_5[i,j,2]+x_8_6[i,j,2]
                    passengerTotalSH += (x_7_4[i,j,1]+x_7_5[i,j,1]+x_7_6[i,j,1]+x_8_4[i,j,1]+x_8_5[i,j,1]+x_8_6[i,j,1]+x_7_4[i,j,2]+x_7_5[i,j,2]+x_7_6[i,j,2]+x_8_4[i,j,2]+x_8_5[i,j,2]+x_8_6[i,j,2])
        for j in range(N*K):
            for i in range(cargo_SB[j]):
                if i == k:
                    transOut1_7_4 += y_7_4[i,j,1]
                    transOut2_7_4 += y_7_4[i,j,2]
                    transOut1_7_5 += y_7_5[i,j,1]
                    transOut2_7_5 += y_7_5[i,j,2]
                    transOut1_7_6 += y_7_6[i,j,1]
                    transOut2_7_6 += y_7_6[i,j,2]
                    transOut1_8_4 += y_8_4[i,j,1]
                    transOut2_8_4 += y_8_4[i,j,2]
                    transOut1_8_5 += y_8_5[i,j,1]
                    transOut2_8_5 += y_8_5[i,j,2]
                    transOut1_8_6 += y_8_6[i,j,1]
                    transOut2_8_6 += y_8_6[i,j,2]
                    transOut1 += y_7_4[i,j,1]+y_7_5[i,j,1]+y_7_6[i,j,1]+y_8_4[i,j,1]+y_8_5[i,j,1]+y_8_6[i,j,1]
                    transOut2 += y_7_4[i,j,2]+y_7_5[i,j,2]+y_7_6[i,j,2]+y_8_4[i,j,2]+y_8_5[i,j,2]+y_8_6[i,j,2]
                    cargoTotalSH += (y_7_4[i,j,1]+y_7_5[i,j,1]+y_7_6[i,j,1]+y_8_4[i,j,1]+y_8_5[i,j,1]+y_8_6[i,j,1]+y_7_4[i,j,2]+y_7_5[i,j,2]+y_7_6[i,j,2]+y_8_4[i,j,2]+y_8_5[i,j,2]+y_8_6[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_7_4 <= TimeSensitive_Req_7_4[k])
        m.addConstr(transOut2_7_4 <= Economy_Req_7_4[k])
        m.addConstr(transOut1_7_5 <= TimeSensitive_Req_7_5[k])
        m.addConstr(transOut2_7_5 <= Economy_Req_7_5[k])
        m.addConstr(transOut1_7_6 <= TimeSensitive_Req_7_6[k])
        m.addConstr(transOut2_7_6 <= Economy_Req_7_6[k])
        m.addConstr(transOut1_8_4 <= TimeSensitive_Req_8_4[k])
        m.addConstr(transOut2_8_4 <= Economy_Req_8_4[k])
        m.addConstr(transOut1_8_5 <= TimeSensitive_Req_8_5[k])
        m.addConstr(transOut2_8_5 <= Economy_Req_8_5[k])
        m.addConstr(transOut1_8_6 <= TimeSensitive_Req_8_6[k])
        m.addConstr(transOut2_8_6 <= Economy_Req_8_6[k])
        trash = c3_1 * (TimeSensitive_Req_SH[k]-transOut1) + c3_2 * (Economy_Req_SH[k]-transOut2)
        C6 += trash
    
    desertTotalBH = sum(forecast_1_4_K)+sum(forecast_1_5_K)+sum(forecast_1_6_K)+sum(forecast_2_4_K)+sum(forecast_2_5_K)+sum(forecast_2_6_K)+sum(forecast_3_4_K)+sum(forecast_3_5_K)+sum(forecast_3_6_K)-passengerTotalBH-cargoTotalBH
    desertTotalBS = sum(forecast_1_7_K)+sum(forecast_1_8_K)+sum(forecast_2_7_K)+sum(forecast_2_8_K)+sum(forecast_3_7_K)+sum(forecast_3_8_K)-passengerTotalBS-cargoTotalBS
    desertTotalHB = sum(forecast_4_1_K)+sum(forecast_4_2_K)+sum(forecast_4_3_K)+sum(forecast_5_1_K)+sum(forecast_5_2_K)+sum(forecast_5_3_K)+sum(forecast_6_1_K)+sum(forecast_6_2_K)+sum(forecast_6_3_K)-passengerTotalHB-cargoTotalHB
    desertTotalHS = sum(forecast_4_7_K)+sum(forecast_4_8_K)+sum(forecast_5_7_K)+sum(forecast_5_8_K)+sum(forecast_6_7_K)+sum(forecast_6_8_K)-passengerTotalHS-cargoTotalHS
    desertTotalSB = sum(forecast_7_1_K)+sum(forecast_7_2_K)+sum(forecast_7_3_K)+sum(forecast_8_1_K)+sum(forecast_8_2_K)+sum(forecast_8_3_K)-passengerTotalSB-cargoTotalSB
    desertTotalSH = sum(forecast_7_4_K)+sum(forecast_7_5_K)+sum(forecast_7_6_K)+sum(forecast_8_4_K)+sum(forecast_8_5_K)+sum(forecast_8_6_K)-passengerTotalSH-cargoTotalSH
                      
    # 本周期内无法运完的货物的仓储成本和预期逾期成本
    left_1_4 = 0
    left_1_5 = 0
    left_1_6 = 0
    left_1_7 = 0
    left_1_8 = 0
    left_2_4 = 0
    left_2_5 = 0
    left_2_6 = 0
    left_2_7 = 0
    left_2_8 = 0
    left_3_4 = 0
    left_3_5 = 0
    left_3_6 = 0
    left_3_7 = 0
    left_3_8 = 0
    left_4_1 = 0
    left_4_2 = 0
    left_4_3 = 0
    left_4_7 = 0
    left_4_8 = 0
    left_5_1 = 0
    left_5_2 = 0
    left_5_3 = 0
    left_5_7 = 0
    left_5_8 = 0
    left_6_1 = 0
    left_6_2 = 0
    left_6_3 = 0
    left_6_7 = 0
    left_6_8 = 0
    left_7_1 = 0
    left_7_2 = 0
    left_7_3 = 0
    left_7_4 = 0
    left_7_5 = 0
    left_7_6 = 0
    left_8_1 = 0
    left_8_2 = 0
    left_8_3 = 0
    left_8_4 = 0
    left_8_5 = 0
    left_8_6 = 0                 
    for i in range(last_BH, 24 * K):
        left_1_4 += forecast_1_4_K[i]
        left_1_5 += forecast_1_5_K[i]
        left_1_6 += forecast_1_6_K[i]
        left_2_4 += forecast_2_4_K[i]
        left_2_5 += forecast_2_5_K[i]
        left_2_6 += forecast_2_6_K[i]
        left_3_4 += forecast_3_4_K[i]
        left_3_5 += forecast_3_5_K[i]
        left_3_6 += forecast_3_6_K[i]      
        C1 += c1 * (forecast_1_4_K[i]+forecast_1_5_K[i]+forecast_1_6_K[i]+forecast_2_4_K[i]+forecast_2_5_K[i]+forecast_2_6_K[i]+forecast_3_4_K[i]+forecast_3_5_K[i]+forecast_3_6_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_BH[i] + c2_2 * Economy_Req_BH[i]) * (24 * K - i + first_BH - 1) * (1 - (i + 1) / (24 * K))
    for i in range(last_BS, 24 * K):
        left_1_7 += forecast_1_7_K[i]
        left_1_8 += forecast_1_8_K[i]
        left_2_7 += forecast_2_7_K[i]
        left_2_8 += forecast_2_8_K[i]
        left_3_7 += forecast_3_7_K[i]
        left_3_8 += forecast_3_8_K[i]
        C1 += c1 * (forecast_1_7_K[i]+forecast_1_8_K[i]+forecast_2_7_K[i]+forecast_2_8_K[i]+forecast_3_7_K[i]+forecast_3_8_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_BS[i] + c2_2 * Economy_Req_BS[i]) * (24 * K - i + first_BS - 1) * (1 - (i + 1) / (24 * K))  
    for i in range(last_HB, 24 * K):
        left_4_1 += forecast_4_1_K[i]
        left_4_2 += forecast_4_2_K[i]
        left_4_3 += forecast_4_3_K[i]
        left_5_1 += forecast_5_1_K[i]
        left_5_2 += forecast_5_2_K[i]
        left_5_3 += forecast_5_3_K[i]
        left_6_1 += forecast_6_1_K[i]
        left_6_2 += forecast_6_2_K[i]
        left_6_3 += forecast_6_3_K[i]
        C1 += c1 * (forecast_4_1_K[i]+forecast_4_2_K[i]+forecast_4_3_K[i]+forecast_5_1_K[i]+forecast_5_2_K[i]+forecast_5_3_K[i]+forecast_6_1_K[i]+forecast_6_2_K[i]+forecast_6_3_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_HB[i] + c2_2 * Economy_Req_HB[i]) * (24 * K - i + first_HB - 1) * (1 - (i + 1) / (24 * K))
    for i in range(last_HS, 24 * K):
        left_4_7 += forecast_4_7_K[i]
        left_4_8 += forecast_4_8_K[i]
        left_5_7 += forecast_5_7_K[i]
        left_5_8 += forecast_5_8_K[i]
        left_6_7 += forecast_6_7_K[i]
        left_6_8 += forecast_6_8_K[i]  
        C1 += c1 * (forecast_4_7_K[i]+forecast_4_8_K[i]+forecast_5_7_K[i]+forecast_5_8_K[i]+forecast_6_7_K[i]+forecast_6_8_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_HS[i] + c2_2 * Economy_Req_HS[i]) * (24 * K - i + first_HS - 1) * (1 - (i + 1) / (24 * K))
    for i in range(last_SB, 24 * K):
        left_7_1 += forecast_7_1_K[i]
        left_7_2 += forecast_7_2_K[i]
        left_7_3 += forecast_7_3_K[i]
        left_8_1 += forecast_8_1_K[i]
        left_8_2 += forecast_8_2_K[i]
        left_8_3 += forecast_8_3_K[i]   
        C1 += c1 * (forecast_7_1_K[i]+forecast_7_2_K[i]+forecast_7_3_K[i]+forecast_8_1_K[i]+forecast_8_2_K[i]+forecast_8_3_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_SB[i] + c2_2 * Economy_Req_SB[i]) * (24 * K - i + first_SB - 1) * (1 - (i + 1) / (24 * K))
    for i in range(last_SH, 24 * K):
        left_7_4 += forecast_7_4_K[i]
        left_7_5 += forecast_7_5_K[i]
        left_7_6 += forecast_7_6_K[i]
        left_8_4 += forecast_8_4_K[i]
        left_8_5 += forecast_8_5_K[i]
        left_8_6 += forecast_8_6_K[i]
        C1 += c1 * (forecast_7_4_K[i]+forecast_7_5_K[i]+forecast_7_6_K[i]+forecast_8_4_K[i]+forecast_8_5_K[i]+forecast_8_6_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_SH[i] + c2_2 * Economy_Req_SH[i]) * (24 * K - i + first_SH - 1) * (1 - (i + 1) / (24 * K))       
                
    left_to_leave_1_4.append(left_1_4)
    left_to_leave_1_5.append(left_1_5)
    left_to_leave_1_6.append(left_1_6)
    left_to_leave_1_7.append(left_1_7)
    left_to_leave_1_8.append(left_1_8)
    left_to_leave_2_4.append(left_2_4)
    left_to_leave_2_5.append(left_2_5)
    left_to_leave_2_6.append(left_2_6)
    left_to_leave_2_7.append(left_2_7)
    left_to_leave_2_8.append(left_2_8)
    left_to_leave_3_4.append(left_3_4)
    left_to_leave_3_5.append(left_3_5)
    left_to_leave_3_6.append(left_3_6)
    left_to_leave_3_7.append(left_3_7)
    left_to_leave_3_8.append(left_3_8)
    left_to_leave_4_1.append(left_4_1)
    left_to_leave_4_2.append(left_4_2)
    left_to_leave_4_3.append(left_4_3)
    left_to_leave_4_7.append(left_4_7)
    left_to_leave_4_8.append(left_4_8)
    left_to_leave_5_1.append(left_5_1)
    left_to_leave_5_2.append(left_5_2)
    left_to_leave_5_3.append(left_5_3)
    left_to_leave_5_7.append(left_5_7)
    left_to_leave_5_8.append(left_5_8)
    left_to_leave_6_1.append(left_6_1)
    left_to_leave_6_2.append(left_6_2)
    left_to_leave_6_3.append(left_6_3)
    left_to_leave_6_7.append(left_6_7)
    left_to_leave_6_8.append(left_6_8)
    left_to_leave_7_1.append(left_7_1)
    left_to_leave_7_2.append(left_7_2)
    left_to_leave_7_3.append(left_7_3)
    left_to_leave_7_4.append(left_7_4)
    left_to_leave_7_5.append(left_7_5)
    left_to_leave_7_6.append(left_7_6)
    left_to_leave_8_1.append(left_8_1)
    left_to_leave_8_2.append(left_8_2)
    left_to_leave_8_3.append(left_8_3)
    left_to_leave_8_4.append(left_8_4)
    left_to_leave_8_5.append(left_8_5)
    left_to_leave_8_6.append(left_8_6)
                      
    # 计算每个航段上客机和货机运输的量
    passengerTrans_BH = 0
    passengerTrans_BS = 0
    passengerTrans_HB = 0
    passengerTrans_HS = 0
    passengerTrans_SB = 0
    passengerTrans_SH = 0
    cargoTrans = 0
    cargoTrans_BH = 0
    cargoTrans_HS = 0
    cargoTrans_SB = 0
    for w in range(1,3):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                passengerTrans_BH += (x_1_4[i,j,w]+x_1_5[i,j,w]+x_1_6[i,j,w]+x_2_4[i,j,w]+x_2_5[i,j,w]+x_2_6[i,j,w]+x_3_4[i,j,w]+x_3_5[i,j,w]+x_3_6[i,j,w])
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                passengerTrans_BS += (x_1_7[i,j,w]+x_1_8[i,j,w]+x_2_7[i,j,w]+x_2_8[i,j,w]+x_3_7[i,j,w]+x_3_8[i,j,w])
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                passengerTrans_HB += (x_4_1[i,j,w]+x_4_2[i,j,w]+x_4_3[i,j,w]+x_5_1[i,j,w]+x_5_2[i,j,w]+x_5_3[i,j,w]+x_6_1[i,j,w]+x_6_2[i,j,w]+x_6_3[i,j,w])
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                passengerTrans_HS += (x_4_7[i,j,w]+x_4_8[i,j,w]+x_5_7[i,j,w]+x_5_8[i,j,w]+x_6_7[i,j,w]+x_6_8[i,j,w])
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                passengerTrans_SB += (x_7_1[i,j,w]+x_7_2[i,j,w]+x_7_3[i,j,w]+x_8_1[i,j,w]+x_8_2[i,j,w]+x_8_3[i,j,w])
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                passengerTrans_SH += (x_7_4[i,j,w]+x_7_5[i,j,w]+x_7_6[i,j,w]+x_8_4[i,j,w]+x_8_5[i,j,w]+x_8_6[i,j,w])
        for j in range(N*K):
            for i in range(cargo_BH[j]):
                cargoTrans += (y_1_4[i,j,w]+y_1_5[i,j,w]+y_1_6[i,j,w]+y_2_4[i,j,w]+y_2_5[i,j,w]+y_2_6[i,j,w]+y_3_4[i,j,w]+y_3_5[i,j,w]+y_3_6[i,j,w]+y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w])
                cargoTrans_BH += (y_1_4[i,j,w]+y_1_5[i,j,w]+y_1_6[i,j,w]+y_2_4[i,j,w]+y_2_5[i,j,w]+y_2_6[i,j,w]+y_3_4[i,j,w]+y_3_5[i,j,w]+y_3_6[i,j,w]+y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w])
                cargoTrans_HS += (y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w])
            for i in range(cargo_HS[j]):
                cargoTrans += (y_4_7[i,j,w]+y_4_8[i,j,w]+y_5_7[i,j,w]+y_5_8[i,j,w]+y_6_7[i,j,w]+y_6_8[i,j,w]+y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w])
                cargoTrans_HS += (y_4_7[i,j,w]+y_4_8[i,j,w]+y_5_7[i,j,w]+y_5_8[i,j,w]+y_6_7[i,j,w]+y_6_8[i,j,w]+y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w])
                cargoTrans_SB += (y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w])
            for i in range(cargo_SB[j]):
                cargoTrans += (y_7_1[i,j,w]+y_7_2[i,j,w]+y_7_3[i,j,w]+y_8_1[i,j,w]+y_8_2[i,j,w]+y_8_3[i,j,w]+y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w])
                cargoTrans_SB += (y_7_1[i,j,w]+y_7_2[i,j,w]+y_7_3[i,j,w]+y_8_1[i,j,w]+y_8_2[i,j,w]+y_8_3[i,j,w]+y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w])
                cargoTrans_BH += (y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w])
    passengerTrans = passengerTrans_BH+passengerTrans_BS+passengerTrans_HB+passengerTrans_HS+passengerTrans_SB+passengerTrans_SH
    
    # 只有客机运输成本是分段计价的
    zBH = {}
    zBS = {}
    zHB = {}
    zHS = {}
    zSB = {}
    zSH = {}
    A_BH = m.addVars(range(len(FR_BH)), vtype=GRB.BINARY)
    A_BS = m.addVars(range(len(FR_BS)), vtype=GRB.BINARY)
    A_HB = m.addVars(range(len(FR_HB)), vtype=GRB.BINARY)
    A_HS = m.addVars(range(len(FR_HS)), vtype=GRB.BINARY)
    A_SB = m.addVars(range(len(FR_SB)), vtype=GRB.BINARY)
    A_SH = m.addVars(range(len(FR_SH)), vtype=GRB.BINARY)
    
    for r in range(len(FR_BH)):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                zBH[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                zBS[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                zHB[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                zHS[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                zSB[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                zSH[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                
    m.addConstr(gp.quicksum(A_BH[r] for r in range(len(FR_BH))) == 1)
    m.addConstr(gp.quicksum(A_BS[r] for r in range(len(FR_BS))) == 1)
    m.addConstr(gp.quicksum(A_HB[r] for r in range(len(FR_HB))) == 1)
    m.addConstr(gp.quicksum(A_HS[r] for r in range(len(FR_HS))) == 1)
    m.addConstr(gp.quicksum(A_SB[r] for r in range(len(FR_SB))) == 1)
    m.addConstr(gp.quicksum(A_SH[r] for r in range(len(FR_SH))) == 1)
    
    for r in range(len(FR_BH)):
        for j in range(len(passengerTime_BH)):
            m.addConstr(gp.quicksum(x_1_4[i,j,w]+x_1_5[i,j,w]+x_1_6[i,j,w]+x_2_4[i,j,w]+x_2_5[i,j,w]+x_2_6[i,j,w]+x_3_4[i,j,w]+x_3_5[i,j,w]+x_3_6[i,j,w] for w in range(1,3) for i in range(passengerTime_BH[j])) >= lBH[r] * A_BH[r])
        for j in range(len(passengerTime_BS)):
            m.addConstr(gp.quicksum(x_1_7[i,j,w]+x_1_8[i,j,w]+x_2_7[i,j,w]+x_2_8[i,j,w]+x_3_7[i,j,w]+x_3_8[i,j,w] for w in range(1,3) for i in range(passengerTime_BS[j])) >= lBS[r] * A_BS[r])
        for j in range(len(passengerTime_HB)):
            m.addConstr(gp.quicksum(x_4_1[i,j,w]+x_4_2[i,j,w]+x_4_3[i,j,w]+x_5_1[i,j,w]+x_5_2[i,j,w]+x_5_3[i,j,w]+x_6_1[i,j,w]+x_6_2[i,j,w]+x_6_3[i,j,w] for w in range(1,3) for i in range(passengerTime_HB[j])) >= lHB[r] * A_HB[r])
        for j in range(len(passengerTime_HS)):
            m.addConstr(gp.quicksum(x_4_7[i,j,w]+x_4_8[i,j,w]+x_5_7[i,j,w]+x_5_8[i,j,w]+x_6_7[i,j,w]+x_6_8[i,j,w] for w in range(1,3) for i in range(passengerTime_HS[j])) >= lHS[r] * A_HS[r])
        for j in range(len(passengerTime_SB)):
            m.addConstr(gp.quicksum(x_7_1[i,j,w]+x_7_2[i,j,w]+x_7_3[i,j,w]+x_8_1[i,j,w]+x_8_2[i,j,w]+x_8_3[i,j,w] for w in range(1,3) for i in range(passengerTime_SB[j])) >= lSB[r] * A_SB[r])
        for j in range(len(passengerTime_SH)):
            m.addConstr(gp.quicksum(x_7_4[i,j,w]+x_7_5[i,j,w]+x_7_6[i,j,w]+x_8_4[i,j,w]+x_8_5[i,j,w]+x_8_6[i,j,w] for w in range(1,3) for i in range(passengerTime_SH[j])) >= lSH[r] * A_SH[r])
        
    for r in range(len(FR_BH)):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                m.addConstr(zBH[i,j,r] <= A_BH[r] * forecast_BH_K[i])
                m.addConstr(zBH[i,j,r] <= (x_1_4[i,j,1]+x_1_5[i,j,1]+x_1_6[i,j,1]+x_2_4[i,j,1]+x_2_5[i,j,1]+x_2_6[i,j,1]+x_3_4[i,j,1]+x_3_5[i,j,1]+x_3_6[i,j,1]+x_1_4[i,j,2]+x_1_5[i,j,2]+x_1_6[i,j,2]+x_2_4[i,j,2]+x_2_5[i,j,2]+x_2_6[i,j,2]+x_3_4[i,j,2]+x_3_5[i,j,2]+x_3_6[i,j,2]))
                m.addConstr(zBH[i,j,r] >= (x_1_4[i,j,1]+x_1_5[i,j,1]+x_1_6[i,j,1]+x_2_4[i,j,1]+x_2_5[i,j,1]+x_2_6[i,j,1]+x_3_4[i,j,1]+x_3_5[i,j,1]+x_3_6[i,j,1]+x_1_4[i,j,2]+x_1_5[i,j,2]+x_1_6[i,j,2]+x_2_4[i,j,2]+x_2_5[i,j,2]+x_2_6[i,j,2]+x_3_4[i,j,2]+x_3_5[i,j,2]+x_3_6[i,j,2] - forecast_BH_K[i] * (1 - A_BH[r])))
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                m.addConstr(zBS[i,j,r] <= A_BS[r] * forecast_BS_K[i])
                m.addConstr(zBS[i,j,r] <= (x_1_7[i,j,1]+x_1_8[i,j,1]+x_2_7[i,j,1]+x_2_8[i,j,1]+x_3_7[i,j,1]+x_3_8[i,j,1]+x_1_7[i,j,2]+x_1_8[i,j,2]+x_2_7[i,j,2]+x_2_8[i,j,2]+x_3_7[i,j,2]+x_3_8[i,j,2]))
                m.addConstr(zBS[i,j,r] >= (x_1_7[i,j,1]+x_1_8[i,j,1]+x_2_7[i,j,1]+x_2_8[i,j,1]+x_3_7[i,j,1]+x_3_8[i,j,1]+x_1_7[i,j,2]+x_1_8[i,j,2]+x_2_7[i,j,2]+x_2_8[i,j,2]+x_3_7[i,j,2]+x_3_8[i,j,2] - forecast_BS_K[i] * (1 - A_BS[r])))
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                m.addConstr(zHB[i,j,r] <= A_HB[r] * forecast_HB_K[i])
                m.addConstr(zHB[i,j,r] <= (x_4_1[i,j,1]+x_4_2[i,j,1]+x_4_3[i,j,1]+x_5_1[i,j,1]+x_5_2[i,j,1]+x_5_3[i,j,1]+x_6_1[i,j,1]+x_6_2[i,j,1]+x_6_3[i,j,1]+x_4_1[i,j,2]+x_4_2[i,j,2]+x_4_3[i,j,2]+x_5_1[i,j,2]+x_5_2[i,j,2]+x_5_3[i,j,2]+x_6_1[i,j,2]+x_6_2[i,j,2]+x_6_3[i,j,2]))
                m.addConstr(zHB[i,j,r] >= (x_4_1[i,j,1]+x_4_2[i,j,1]+x_4_3[i,j,1]+x_5_1[i,j,1]+x_5_2[i,j,1]+x_5_3[i,j,1]+x_6_1[i,j,1]+x_6_2[i,j,1]+x_6_3[i,j,1]+x_4_1[i,j,2]+x_4_2[i,j,2]+x_4_3[i,j,2]+x_5_1[i,j,2]+x_5_2[i,j,2]+x_5_3[i,j,2]+x_6_1[i,j,2]+x_6_2[i,j,2]+x_6_3[i,j,2] - forecast_HB_K[i] * (1 - A_HB[r])))
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                m.addConstr(zHS[i,j,r] <= A_HS[r] * forecast_HS_K[i])
                m.addConstr(zHS[i,j,r] <= (x_4_7[i,j,1]+x_4_8[i,j,1]+x_5_7[i,j,1]+x_5_8[i,j,1]+x_6_7[i,j,1]+x_6_8[i,j,1]+x_4_7[i,j,2]+x_4_8[i,j,2]+x_5_7[i,j,2]+x_5_8[i,j,2]+x_6_7[i,j,2]+x_6_8[i,j,2]))
                m.addConstr(zHS[i,j,r] >= (x_4_7[i,j,1]+x_4_8[i,j,1]+x_5_7[i,j,1]+x_5_8[i,j,1]+x_6_7[i,j,1]+x_6_8[i,j,1]+x_4_7[i,j,2]+x_4_8[i,j,2]+x_5_7[i,j,2]+x_5_8[i,j,2]+x_6_7[i,j,2]+x_6_8[i,j,2] - forecast_HS_K[i] * (1 - A_HS[r])))
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                m.addConstr(zSB[i,j,r] <= A_BH[r] * forecast_SB_K[i])
                m.addConstr(zSB[i,j,r] <= (x_7_1[i,j,1]+x_7_2[i,j,1]+x_7_3[i,j,1]+x_8_1[i,j,1]+x_8_2[i,j,1]+x_8_3[i,j,1]+x_7_1[i,j,2]+x_7_2[i,j,2]+x_7_3[i,j,2]+x_8_1[i,j,2]+x_8_2[i,j,2]+x_8_3[i,j,2]))
                m.addConstr(zSB[i,j,r] >= (x_7_1[i,j,1]+x_7_2[i,j,1]+x_7_3[i,j,1]+x_8_1[i,j,1]+x_8_2[i,j,1]+x_8_3[i,j,1]+x_7_1[i,j,2]+x_7_2[i,j,2]+x_7_3[i,j,2]+x_8_1[i,j,2]+x_8_2[i,j,2]+x_8_3[i,j,2] - forecast_SB_K[i] * (1 - A_SB[r])))
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                m.addConstr(zSH[i,j,r] <= A_SH[r] * forecast_SH_K[i])
                m.addConstr(zSH[i,j,r] <= (x_7_4[i,j,1]+x_7_5[i,j,1]+x_7_6[i,j,1]+x_8_4[i,j,1]+x_8_5[i,j,1]+x_8_6[i,j,1]+x_7_4[i,j,2]+x_7_5[i,j,2]+x_7_6[i,j,2]+x_8_4[i,j,2]+x_8_5[i,j,2]+x_8_6[i,j,2]))
                m.addConstr(zSH[i,j,r] >= (x_7_4[i,j,1]+x_7_5[i,j,1]+x_7_6[i,j,1]+x_8_4[i,j,1]+x_8_5[i,j,1]+x_8_6[i,j,1]+x_7_4[i,j,2]+x_7_5[i,j,2]+x_7_6[i,j,2]+x_8_4[i,j,2]+x_8_5[i,j,2]+x_8_6[i,j,2] - forecast_SH_K[i] * (1 - A_SH[r])))
                
    for r in range(len(FR_BH)):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                C5 += FR_BH[r] * zBH[i,j,r]
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                C5 += FR_BS[r] * zBS[i,j,r]
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                C5 += FR_HB[r] * zHB[i,j,r]
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                C5 += FR_HS[r] * zHS[i,j,r]
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                C5 += FR_SB[r] * zSB[i,j,r]
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                C5 += FR_SH[r] * zSH[i,j,r]
    
    cargo_operating_perHour = cargo_per + L * OilPrice
    
    nBH = {}
    nHS = {}
    nSB = {}
    M = 0.0001
    for j in range(N*K):
        nBH[j] = m.addVar(vtype=GRB.BINARY)
        nHS[j] = m.addVar(vtype=GRB.BINARY)
        nSB[j] = m.addVar(vtype=GRB.BINARY)
        
    for j in range(N*K):
        m.addConstr(nBH[j] >= M * gp.quicksum((y_1_4[i,j,w]+y_1_5[i,j,w]+y_1_6[i,j,w]+y_2_4[i,j,w]+y_2_5[i,j,w]+y_2_6[i,j,w]+y_3_4[i,j,w]+y_3_5[i,j,w]+y_3_6[i,j,w]+y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w]) for i in range(cargo_BH[j]) for w in range(1,3)) + M * gp.quicksum(y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w] for i in range(cargo_SB[j]) for w in range(1,3)))
        m.addConstr(nHS[j] >= M * gp.quicksum((y_4_7[i,j,w]+y_4_8[i,j,w]+y_5_7[i,j,w]+y_5_8[i,j,w]+y_6_7[i,j,w]+y_6_8[i,j,w]+y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w]) for i in range(cargo_HS[j]) for w in range(1,3)) + M * gp.quicksum(y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w] for i in range(cargo_BH[j]) for w in range(1,3)))
        m.addConstr(nSB[j] >= M * gp.quicksum((y_7_1[i,j,w]+y_7_2[i,j,w]+y_7_3[i,j,w]+y_8_1[i,j,w]+y_8_2[i,j,w]+y_8_3[i,j,w]+y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w]) for i in range(cargo_SB[j]) for w in range(1,3)) + M * gp.quicksum(y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w] for i in range(cargo_HS[j]) for w in range(1,3)))
        
    cargoUsed_BH = 0
    cargoUsed_HS = 0
    cargoUsed_SB = 0
    for j in range(N*K):
        cargoUsed_BH += nBH[j]
        cargoUsed_HS += nHS[j]
        cargoUsed_SB += nSB[j]
        C7 += cargo_operating_perHour * (Tcargo_1*nBH[j]+Tcargo_2*nHS[j]+Tcargo_3*nSB[j])
    
    requi = sum(forecast_BH_K)+sum(forecast_BS_K)+sum(forecast_HB_K)+sum(forecast_HS_K)+sum(forecast_SB_K)+sum(forecast_SH_K)
    unTrans = requi - transported_1 - transported_2
    untransprop = unTrans / requi
    
    m.setObjective(theta1 * (C1 + C2 + C3 + C4 + C5 + C6 + C7) + theta2 * untransprop, GRB.MINIMIZE)
    m.optimize()
    
    cargo_operating = cargo_operating_perHour * (Tcargo_1+Tcargo_2+Tcargo_3) * max(cargoUsed_BH.getValue(),cargoUsed_HS.getValue(),cargoUsed_SB.getValue())
    
    
    
    result1 = C1+C2+C3.getValue()+C4.getValue()+C5.getValue()+C6.getValue()+cargo_operating
    result2 = C3.getValue()+C2
    result3 = C4.getValue()+C1
    result4 = C5.getValue()
    result5 = cargo_operating
    result6 = transported_1.getValue()
    result7 = transported_2.getValue()
    result8 = unTrans.getValue()
    result9 = requi
    result10 = passengerTrans.getValue()
    result11 = cargoTrans.getValue()
    result12 = C6.getValue()
    result13 = passengerTrans_BH.getValue()
    result14 = passengerTrans_BS.getValue()
    result15 = passengerTrans_HB.getValue()
    result16 = passengerTrans_HS.getValue()
    result17 = passengerTrans_SB.getValue()
    result18 = passengerTrans_SH.getValue()
    result19 = cargoTrans_BH.getValue()
    result20 = cargoTrans_HS.getValue()
    result21 = cargoTrans_SB.getValue()
    result22 = max(cargoUsed_BH.getValue(),cargoUsed_HS.getValue(),cargoUsed_SB.getValue())
    output1 = passengerTotalBH.getValue()
    output2 = passengerTotalBS.getValue()
    output3 = passengerTotalHB.getValue()
    output4 = passengerTotalHS.getValue()
    output5 = passengerTotalSB.getValue()
    output6 = passengerTotalSH.getValue()
    output7 = cargoTotalBH.getValue()
    output8 = cargoTotalBS.getValue()
    output9 = cargoTotalHB.getValue()
    output10 = cargoTotalHS.getValue()
    output11 = cargoTotalSB.getValue()
    output12 = cargoTotalSH.getValue()
    output13 = desertTotalBH.getValue()
    output14 = desertTotalBS.getValue()
    output15 = desertTotalHB.getValue()
    output16 = desertTotalHS.getValue()
    output17 = desertTotalSB.getValue()
    output18 = desertTotalSH.getValue()
    
    return result1,result2,result3,result4,result5,result6,result7,result8,result9,result10,result11,result12,result13,result14,result15,result16,result17,result18,result19,result20,result21,result22,output1,output2,output3,output4,output5,output6,output7,output8,output9,output10,output11,output12,output13,output14,output15,output16,output17,output18

def mainFunctionACTUAL(K):
    cargo_BH = []
    cargo_HS = []
    cargo_SB = []
        
    for i in range(K):
        cargo_BH_add = [x + 24 * i for x in cargo_BH_unit]
        cargo_HS_add = [x + 24 * i for x in cargo_HS_unit]
        cargo_SB_add = [x + 24 * i for x in cargo_SB_unit]
        for j in range(N):
            cargo_BH.append(cargo_BH_add[j])
            cargo_HS.append(cargo_HS_add[j])
            cargo_SB.append(cargo_SB_add[j])
    del cargo_BH_add,cargo_HS_add,cargo_SB_add
    BH_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_BH)
    BS_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_BS)
    HB_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_HB)
    HS_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_HS)
    SB_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_SB)
    SH_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_SH)
    flightTime_BH = passenger_flight_times_BH * K
    flightTime_BS = passenger_flight_times_BS * K
    flightTime_HB = passenger_flight_times_HB * K
    flightTime_HS = passenger_flight_times_HS * K
    flightTime_SB = passenger_flight_times_SB * K
    flightTime_SH = passenger_flight_times_SH * K
    first_flight_BH = min(min(BH_passengerTimeTable),min(cargo_BH))
    last_flight_BH = max(max(BH_passengerTimeTable),max(cargo_BH))
    first_flight_HS = min(min(HS_passengerTimeTable),min(cargo_HS))
    last_flight_HS = max(max(HS_passengerTimeTable),max(cargo_HS))
    first_flight_SB = min(min(SB_passengerTimeTable),min(cargo_SB))
    last_flight_SB = max(max(SB_passengerTimeTable),max(cargo_SB))
    first_flight_BS = min(BS_passengerTimeTable)
    last_flight_BS = max(BS_passengerTimeTable)
    first_flight_SH = min(SH_passengerTimeTable)
    last_flight_SH = max(SH_passengerTimeTable)
    first_flight_HB = min(HB_passengerTimeTable)
    last_flight_HB = max(HB_passengerTimeTable)
    BHcant_transport_passenger = passCantTransCal(BH_passengerTimeTable)
    BScant_transport_passenger = passCantTransCal(BS_passengerTimeTable)
    HBcant_transport_passenger = passCantTransCal(HB_passengerTimeTable)
    HScant_transport_passenger = passCantTransCal(HS_passengerTimeTable)
    SBcant_transport_passenger = passCantTransCal(SB_passengerTimeTable)
    SHcant_transport_passenger = passCantTransCal(SH_passengerTimeTable)
    BHcant_transport_cargo = max(cargo_BH) + 1
    HScant_transport_cargo = max(cargo_HS) + 1
    SBcant_transport_cargo = max(cargo_SB) + 1
    first_BH = process_value(first_flight_BH)
    first_BS = process_value(first_flight_BS)
    first_HB = process_value(first_flight_HB)
    first_HS = process_value(first_flight_HS)
    first_SB = process_value(first_flight_SB)
    first_SH = process_value(first_flight_SH)
    last_BH = process_value(last_flight_BH)
    last_BS = process_value(last_flight_BS)
    last_HB = process_value(last_flight_HB)
    last_HS = process_value(last_flight_HS)
    last_SB = process_value(last_flight_SB)
    last_SH = process_value(last_flight_SH)
    passengerTime_BH = passengerTimeCal(BH_passengerTimeTable)
    passengerTime_BS = passengerTimeCal(BS_passengerTimeTable)
    passengerTime_HB = passengerTimeCal(HB_passengerTimeTable)
    passengerTime_HS = passengerTimeCal(HS_passengerTimeTable)
    passengerTime_SB = passengerTimeCal(SB_passengerTimeTable)
    passengerTime_SH = passengerTimeCal(SH_passengerTimeTable)

    C1 = 0 # C1为未运完的仓储成本，初始值为0
    C2 = 0 # C2为未运完的逾期延迟成本，初始值为0
    C3 = 0 # C3为能运完的逾期延迟成本，初始值为0
    C4 = 0 # C4为能运完的仓储成本，初始值为0
    C5 = 0 # C5为运输成本，初始值为0
    C6 = 0 # C6为丢弃成本，初始值为0
    C7 = 0
    transported_1 = 0
    transported_2 = 0
    cargoUsed = 0
    
    forecast_1_4_K = TimeSplit(forecast_1_4)
    forecast_1_5_K = TimeSplit(forecast_1_5)
    forecast_1_6_K = TimeSplit(forecast_1_6)
    forecast_1_7_K = TimeSplit(forecast_1_7)
    forecast_1_8_K = TimeSplit(forecast_1_8)
    forecast_2_4_K = TimeSplit(forecast_2_4)
    forecast_2_5_K = TimeSplit(forecast_2_5)
    forecast_2_6_K = TimeSplit(forecast_2_6)
    forecast_2_7_K = TimeSplit(forecast_2_7)
    forecast_2_8_K = TimeSplit(forecast_2_8)
    forecast_3_4_K = TimeSplit(forecast_3_4)
    forecast_3_5_K = TimeSplit(forecast_3_5)
    forecast_3_6_K = TimeSplit(forecast_3_6)
    forecast_3_7_K = TimeSplit(forecast_3_7)
    forecast_3_8_K = TimeSplit(forecast_3_8)
    forecast_4_1_K = TimeSplit(forecast_4_1)
    forecast_4_2_K = TimeSplit(forecast_4_2)
    forecast_4_3_K = TimeSplit(forecast_4_3)
    forecast_4_7_K = TimeSplit(forecast_4_7)
    forecast_4_8_K = TimeSplit(forecast_4_8)
    forecast_5_1_K = TimeSplit(forecast_5_1)
    forecast_5_2_K = TimeSplit(forecast_5_2)
    forecast_5_3_K = TimeSplit(forecast_5_3)
    forecast_5_7_K = TimeSplit(forecast_5_7)
    forecast_5_8_K = TimeSplit(forecast_5_8)
    forecast_6_1_K = TimeSplit(forecast_6_1)
    forecast_6_2_K = TimeSplit(forecast_6_2)
    forecast_6_3_K = TimeSplit(forecast_6_3)
    forecast_6_7_K = TimeSplit(forecast_6_7)
    forecast_6_8_K = TimeSplit(forecast_6_8)
    forecast_7_1_K = TimeSplit(forecast_7_1)
    forecast_7_2_K = TimeSplit(forecast_7_2)
    forecast_7_3_K = TimeSplit(forecast_7_3)
    forecast_7_4_K = TimeSplit(forecast_7_4)
    forecast_7_5_K = TimeSplit(forecast_7_5)
    forecast_7_6_K = TimeSplit(forecast_7_6)
    forecast_8_1_K = TimeSplit(forecast_8_1)
    forecast_8_2_K = TimeSplit(forecast_8_2)
    forecast_8_3_K = TimeSplit(forecast_8_3)
    forecast_8_4_K = TimeSplit(forecast_8_4)
    forecast_8_5_K = TimeSplit(forecast_8_5)
    forecast_8_6_K = TimeSplit(forecast_8_6)
    
    forecast_1_4_K[0] += left_to_leave_1_4[-1]
    forecast_1_5_K[0] += left_to_leave_1_5[-1]
    forecast_1_6_K[0] += left_to_leave_1_6[-1]
    forecast_1_7_K[0] += left_to_leave_1_7[-1]
    forecast_1_8_K[0] += left_to_leave_1_8[-1]
    forecast_2_4_K[0] += left_to_leave_2_4[-1]
    forecast_2_5_K[0] += left_to_leave_2_5[-1]
    forecast_2_6_K[0] += left_to_leave_2_6[-1]
    forecast_2_7_K[0] += left_to_leave_2_7[-1]
    forecast_2_8_K[0] += left_to_leave_2_8[-1]
    forecast_3_4_K[0] += left_to_leave_3_4[-1]
    forecast_3_5_K[0] += left_to_leave_3_5[-1]
    forecast_3_6_K[0] += left_to_leave_3_6[-1]
    forecast_3_7_K[0] += left_to_leave_3_7[-1]
    forecast_3_8_K[0] += left_to_leave_3_8[-1]
    forecast_4_1_K[0] += left_to_leave_4_1[-1]
    forecast_4_2_K[0] += left_to_leave_4_2[-1]
    forecast_4_3_K[0] += left_to_leave_4_3[-1]
    forecast_4_7_K[0] += left_to_leave_4_7[-1]
    forecast_4_8_K[0] += left_to_leave_4_8[-1]
    forecast_5_1_K[0] += left_to_leave_5_1[-1]
    forecast_5_2_K[0] += left_to_leave_5_2[-1]
    forecast_5_3_K[0] += left_to_leave_5_3[-1]
    forecast_5_7_K[0] += left_to_leave_5_7[-1]
    forecast_5_8_K[0] += left_to_leave_5_8[-1]
    forecast_6_1_K[0] += left_to_leave_6_1[-1]
    forecast_6_2_K[0] += left_to_leave_6_2[-1]
    forecast_6_3_K[0] += left_to_leave_6_3[-1]
    forecast_6_7_K[0] += left_to_leave_6_7[-1]
    forecast_6_8_K[0] += left_to_leave_6_8[-1]
    forecast_7_1_K[0] += left_to_leave_7_1[-1]
    forecast_7_2_K[0] += left_to_leave_7_2[-1]
    forecast_7_3_K[0] += left_to_leave_7_3[-1]
    forecast_7_4_K[0] += left_to_leave_7_4[-1]
    forecast_7_5_K[0] += left_to_leave_7_5[-1]
    forecast_7_6_K[0] += left_to_leave_7_6[-1]
    forecast_8_1_K[0] += left_to_leave_8_1[-1]
    forecast_8_2_K[0] += left_to_leave_8_2[-1]
    forecast_8_3_K[0] += left_to_leave_8_3[-1]
    forecast_8_4_K[0] += left_to_leave_8_4[-1]
    forecast_8_5_K[0] += left_to_leave_8_5[-1]
    forecast_8_6_K[0] += left_to_leave_8_6[-1]
    
    # 计算时效快递的需求
    TimeSensitive_Req_1_4 = [x * perc1 for x in forecast_1_4_K]
    TimeSensitive_Req_1_5 = [x * perc1 for x in forecast_1_5_K]
    TimeSensitive_Req_1_6 = [x * perc1 for x in forecast_1_6_K]
    TimeSensitive_Req_1_7 = [x * perc1 for x in forecast_1_7_K]
    TimeSensitive_Req_1_8 = [x * perc1 for x in forecast_1_8_K]
    TimeSensitive_Req_2_4 = [x * perc1 for x in forecast_2_4_K]
    TimeSensitive_Req_2_5 = [x * perc1 for x in forecast_2_5_K]
    TimeSensitive_Req_2_6 = [x * perc1 for x in forecast_2_6_K]
    TimeSensitive_Req_2_7 = [x * perc1 for x in forecast_2_7_K]
    TimeSensitive_Req_2_8 = [x * perc1 for x in forecast_2_8_K]
    TimeSensitive_Req_3_4 = [x * perc1 for x in forecast_3_4_K]
    TimeSensitive_Req_3_5 = [x * perc1 for x in forecast_3_5_K]
    TimeSensitive_Req_3_6 = [x * perc1 for x in forecast_3_6_K]
    TimeSensitive_Req_3_7 = [x * perc1 for x in forecast_3_7_K]
    TimeSensitive_Req_3_8 = [x * perc1 for x in forecast_3_8_K]
    TimeSensitive_Req_4_1 = [x * perc1 for x in forecast_4_1_K]
    TimeSensitive_Req_4_2 = [x * perc1 for x in forecast_4_2_K]
    TimeSensitive_Req_4_3 = [x * perc1 for x in forecast_4_3_K]
    TimeSensitive_Req_4_7 = [x * perc1 for x in forecast_4_7_K]
    TimeSensitive_Req_4_8 = [x * perc1 for x in forecast_4_8_K]
    TimeSensitive_Req_5_1 = [x * perc1 for x in forecast_5_1_K]
    TimeSensitive_Req_5_2 = [x * perc1 for x in forecast_5_2_K]
    TimeSensitive_Req_5_3 = [x * perc1 for x in forecast_5_3_K]
    TimeSensitive_Req_5_7 = [x * perc1 for x in forecast_5_7_K]
    TimeSensitive_Req_5_8 = [x * perc1 for x in forecast_5_8_K]
    TimeSensitive_Req_6_1 = [x * perc1 for x in forecast_6_1_K]
    TimeSensitive_Req_6_2 = [x * perc1 for x in forecast_6_2_K]
    TimeSensitive_Req_6_3 = [x * perc1 for x in forecast_6_3_K]
    TimeSensitive_Req_6_7 = [x * perc1 for x in forecast_6_7_K]
    TimeSensitive_Req_6_8 = [x * perc1 for x in forecast_6_8_K]
    TimeSensitive_Req_7_1 = [x * perc1 for x in forecast_7_1_K]
    TimeSensitive_Req_7_2 = [x * perc1 for x in forecast_7_2_K]
    TimeSensitive_Req_7_3 = [x * perc1 for x in forecast_7_3_K]
    TimeSensitive_Req_7_4 = [x * perc1 for x in forecast_7_4_K]
    TimeSensitive_Req_7_5 = [x * perc1 for x in forecast_7_5_K]
    TimeSensitive_Req_7_6 = [x * perc1 for x in forecast_7_6_K]
    TimeSensitive_Req_8_1 = [x * perc1 for x in forecast_8_1_K]
    TimeSensitive_Req_8_2 = [x * perc1 for x in forecast_8_2_K]
    TimeSensitive_Req_8_3 = [x * perc1 for x in forecast_8_3_K]
    TimeSensitive_Req_8_4 = [x * perc1 for x in forecast_8_4_K]
    TimeSensitive_Req_8_5 = [x * perc1 for x in forecast_8_5_K]
    TimeSensitive_Req_8_6 = [x * perc1 for x in forecast_8_6_K]
    
    # 计算经济快递的需求
    Economy_Req_1_4 = [x * perc2 for x in forecast_1_4_K]
    Economy_Req_1_5 = [x * perc2 for x in forecast_1_5_K]
    Economy_Req_1_6 = [x * perc2 for x in forecast_1_6_K]
    Economy_Req_1_7 = [x * perc2 for x in forecast_1_7_K]
    Economy_Req_1_8 = [x * perc2 for x in forecast_1_8_K]
    Economy_Req_2_4 = [x * perc2 for x in forecast_2_4_K]
    Economy_Req_2_5 = [x * perc2 for x in forecast_2_5_K]
    Economy_Req_2_6 = [x * perc2 for x in forecast_2_6_K]
    Economy_Req_2_7 = [x * perc2 for x in forecast_2_7_K]
    Economy_Req_2_8 = [x * perc2 for x in forecast_2_8_K]
    Economy_Req_3_4 = [x * perc2 for x in forecast_3_4_K]
    Economy_Req_3_5 = [x * perc2 for x in forecast_3_5_K]
    Economy_Req_3_6 = [x * perc2 for x in forecast_3_6_K]
    Economy_Req_3_7 = [x * perc2 for x in forecast_3_7_K]
    Economy_Req_3_8 = [x * perc2 for x in forecast_3_8_K]
    Economy_Req_4_1 = [x * perc2 for x in forecast_4_1_K]
    Economy_Req_4_2 = [x * perc2 for x in forecast_4_2_K]
    Economy_Req_4_3 = [x * perc2 for x in forecast_4_3_K]
    Economy_Req_4_7 = [x * perc2 for x in forecast_4_7_K]
    Economy_Req_4_8 = [x * perc2 for x in forecast_4_8_K]
    Economy_Req_5_1 = [x * perc2 for x in forecast_5_1_K]
    Economy_Req_5_2 = [x * perc2 for x in forecast_5_2_K]
    Economy_Req_5_3 = [x * perc2 for x in forecast_5_3_K]
    Economy_Req_5_7 = [x * perc2 for x in forecast_5_7_K]
    Economy_Req_5_8 = [x * perc2 for x in forecast_5_8_K]
    Economy_Req_6_1 = [x * perc2 for x in forecast_6_1_K]
    Economy_Req_6_2 = [x * perc2 for x in forecast_6_2_K]
    Economy_Req_6_3 = [x * perc2 for x in forecast_6_3_K]
    Economy_Req_6_7 = [x * perc2 for x in forecast_6_7_K]
    Economy_Req_6_8 = [x * perc2 for x in forecast_6_8_K]
    Economy_Req_7_1 = [x * perc2 for x in forecast_7_1_K]
    Economy_Req_7_2 = [x * perc2 for x in forecast_7_2_K]
    Economy_Req_7_3 = [x * perc2 for x in forecast_7_3_K]
    Economy_Req_7_4 = [x * perc2 for x in forecast_7_4_K]
    Economy_Req_7_5 = [x * perc2 for x in forecast_7_5_K]
    Economy_Req_7_6 = [x * perc2 for x in forecast_7_6_K]
    Economy_Req_8_1 = [x * perc2 for x in forecast_8_1_K]
    Economy_Req_8_2 = [x * perc2 for x in forecast_8_2_K]
    Economy_Req_8_3 = [x * perc2 for x in forecast_8_3_K]
    Economy_Req_8_4 = [x * perc2 for x in forecast_8_4_K]
    Economy_Req_8_5 = [x * perc2 for x in forecast_8_5_K]
    Economy_Req_8_6 = [x * perc2 for x in forecast_8_6_K]
    
    # 主要计算模型
    m = gp.Model()
    m.Params.OutputFlag = 0
    m.Params.MIPGap = 0.005
    
    x_1_4 = {}
    x_1_5 = {}
    x_1_6 = {}
    x_1_7 = {}
    x_1_8 = {}
    x_2_4 = {}
    x_2_5 = {}
    x_2_6 = {}
    x_2_7 = {}
    x_2_8 = {}
    x_3_4 = {}
    x_3_5 = {}
    x_3_6 = {}
    x_3_7 = {}
    x_3_8 = {}
    x_4_1 = {}
    x_4_2 = {}
    x_4_3 = {}
    x_4_7 = {}
    x_4_8 = {}
    x_5_1 = {}
    x_5_2 = {}
    x_5_3 = {}
    x_5_7 = {}
    x_5_8 = {}
    x_6_1 = {}
    x_6_2 = {}
    x_6_3 = {}
    x_6_7 = {}
    x_6_8 = {}
    x_7_1 = {}
    x_7_2 = {}
    x_7_3 = {}
    x_7_4 = {}
    x_7_5 = {}
    x_7_6 = {}
    x_8_1 = {}
    x_8_2 = {}
    x_8_3 = {}
    x_8_4 = {}
    x_8_5 = {}
    x_8_6 = {}
    
    y_1_4 = {}
    y_1_5 = {}
    y_1_6 = {}
    y_1_7 = {}
    y_1_8 = {}
    y_2_4 = {}
    y_2_5 = {}
    y_2_6 = {}
    y_2_7 = {}
    y_2_8 = {}
    y_3_4 = {}
    y_3_5 = {}
    y_3_6 = {}
    y_3_7 = {}
    y_3_8 = {}
    y_4_1 = {}
    y_4_2 = {}
    y_4_3 = {}
    y_4_7 = {}
    y_4_8 = {}
    y_5_1 = {}
    y_5_2 = {}
    y_5_3 = {}
    y_5_7 = {}
    y_5_8 = {}
    y_6_1 = {}
    y_6_2 = {}
    y_6_3 = {}
    y_6_7 = {}
    y_6_8 = {}
    y_7_1 = {}
    y_7_2 = {}
    y_7_3 = {}
    y_7_4 = {}
    y_7_5 = {}
    y_7_6 = {}
    y_8_1 = {}
    y_8_2 = {}
    y_8_3 = {}
    y_8_4 = {}
    y_8_5 = {}
    y_8_6 = {}
    
    for w in range(1,3):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                x_1_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_1_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_1_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_2_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_2_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_2_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_3_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_3_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_3_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                x_1_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_1_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_2_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_2_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_3_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_3_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                x_4_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_4_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_4_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_5_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_5_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_5_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_6_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_6_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_6_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                x_4_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_4_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_5_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_5_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_6_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_6_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                x_7_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_7_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_7_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                x_7_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_7_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_7_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                
    for w in range(1,3):
        for j in range(N*K):
            for i in range(cargo_BH[j]):
                y_1_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_1_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_1_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_1_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_1_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_2_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_2_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_2_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_2_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_2_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_3_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_3_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_3_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_3_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_3_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
            for i in range(cargo_HS[j]):
                y_4_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_4_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_4_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_5_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_5_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_5_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_6_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_6_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_6_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_4_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_4_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_5_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_5_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_6_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_6_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
            for i in range(cargo_SB[j]):
                y_7_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_7_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_7_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_7_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_7_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_7_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                
    # 客机容量限制约束
    for j in range(len(passengerTime_BH)):
        cal1_BH = 0
        cal1_BH += gp.quicksum(x_1_4[i,j,w]+x_1_5[i,j,w]+x_1_6[i,j,w]+x_2_4[i,j,w]+x_2_5[i,j,w]+x_2_6[i,j,w]+x_3_4[i,j,w]+x_3_5[i,j,w]+x_3_6[i,j,w] for w in range(1,3) for i in range(passengerTime_BH[j]))
        m.addConstr(cal1_BH <= q)
    for j in range(len(passengerTime_BS)):
        cal1_BS = 0
        cal1_BS += gp.quicksum(x_1_7[i,j,w]+x_1_8[i,j,w]+x_2_7[i,j,w]+x_2_8[i,j,w]+x_3_7[i,j,w]+x_3_8[i,j,w] for w in range(1,3) for i in range(passengerTime_BS[j]))
        m.addConstr(cal1_BS <= q)
    for j in range(len(passengerTime_HB)):
        cal1_HB = 0
        cal1_HB += gp.quicksum(x_4_1[i,j,w]+x_4_2[i,j,w]+x_4_3[i,j,w]+x_5_1[i,j,w]+x_5_2[i,j,w]+x_5_3[i,j,w]+x_6_1[i,j,w]+x_6_2[i,j,w]+x_6_3[i,j,w] for w in range(1,3) for i in range(passengerTime_HB[j]))
        m.addConstr(cal1_HB <= q)
    for j in range(len(passengerTime_HS)):
        cal1_HS = 0
        cal1_HS += gp.quicksum(x_4_7[i,j,w]+x_4_8[i,j,w]+x_5_7[i,j,w]+x_5_8[i,j,w]+x_6_7[i,j,w]+x_6_8[i,j,w] for w in range(1,3) for i in range(passengerTime_HS[j]))
        m.addConstr(cal1_HS <= q)
    for j in range(len(passengerTime_SB)):
        cal1_SB = 0
        cal1_SB += gp.quicksum(x_7_1[i,j,w]+x_7_2[i,j,w]+x_7_3[i,j,w]+x_8_1[i,j,w]+x_8_2[i,j,w]+x_8_3[i,j,w] for w in range(1,3) for i in range(passengerTime_SB[j]))
        m.addConstr(cal1_SB <= q)
    for j in range(len(passengerTime_SH)):
        cal1_SH = 0
        cal1_SH += gp.quicksum(x_7_4[i,j,w]+x_7_5[i,j,w]+x_7_6[i,j,w]+x_8_4[i,j,w]+x_8_5[i,j,w]+x_8_6[i,j,w] for w in range(1,3) for i in range(passengerTime_SH[j]))
        m.addConstr(cal1_SH <= q)
        
    # 货机容量约束
    for j in range(N*K):
        cal2_BH = 0
        cal2_BH += (gp.quicksum((y_1_4[i,j,w]+y_1_5[i,j,w]+y_1_6[i,j,w]+y_2_4[i,j,w]+y_2_5[i,j,w]+y_2_6[i,j,w]+y_3_4[i,j,w]+y_3_5[i,j,w]+y_3_6[i,j,w]+y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w]) for w in range(1,3) for i in range(cargo_BH[j]))+gp.quicksum(y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w] for w in range(1,3) for i in range(cargo_SB[j])))
        m.addConstr(cal2_BH <= Q)
    for j in range(N*K):
        cal2_HS = 0
        cal2_HS += (gp.quicksum((y_4_7[i,j,w]+y_4_8[i,j,w]+y_5_7[i,j,w]+y_5_8[i,j,w]+y_6_7[i,j,w]+y_6_8[i,j,w]+y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w]) for w in range(1,3) for i in range(cargo_HS[j]))+gp.quicksum(y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w] for w in range(1,3) for i in range(cargo_BH[j])))
        m.addConstr(cal2_HS <= Q)
    for j in range(N*K):
        cal2_SB = 0
        cal2_SB += (gp.quicksum((y_7_1[i,j,w]+y_7_2[i,j,w]+y_7_3[i,j,w]+y_8_1[i,j,w]+y_8_2[i,j,w]+y_8_3[i,j,w]+y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w]) for w in range(1,3) for i in range(cargo_SB[j]))+gp.quicksum(y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w] for w in range(1,3) for i in range(cargo_HS[j])))
        m.addConstr(cal2_SB <= Q)
        
    # 在能运完的货物中，被运走的货物量最多达到这个时间段的订单需求量
    # 能运完的货物的仓储成本和逾期成本及被丢弃货物的成本计算
    for w in range(1,3):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                C3 += C2per[w] * (x_1_4[i,j,w]*max(BH_passengerTimeTable[j]+t1+t4-i-T_1[w]+flightTime_BH[j],0)+x_1_5[i,j,w]*max(BH_passengerTimeTable[j]+t1+t5-i-T_1[w]+flightTime_BH[j],0)+x_1_6[i,j,w]*max(BH_passengerTimeTable[j]+t1+t6-i-T_1[w]+flightTime_BH[j],0)+x_2_4[i,j,w]*max(BH_passengerTimeTable[j]+t2+t4-i-T_1[w]+flightTime_BH[j],0)+x_2_5[i,j,w]*max(BH_passengerTimeTable[j]+t2+t5-i-T_1[w]+flightTime_BH[j],0)+x_2_6[i,j,w]*max(BH_passengerTimeTable[j]+t2+t6-i-T_1[w]+flightTime_BH[j],0)+x_3_4[i,j,w]*max(BH_passengerTimeTable[j]+t3+t4-i-T_1[w]+flightTime_BH[j],0)+x_3_5[i,j,w]*max(BH_passengerTimeTable[j]+t3+t5-i-T_1[w]+flightTime_BH[j],0)+x_3_6[i,j,w]*max(BH_passengerTimeTable[j]+t3+t6-i-T_1[w]+flightTime_BH[j],0))
                C4 += c1 * ((x_1_4[i,j,w]+x_1_5[i,j,w]+x_1_6[i,j,w]+x_2_4[i,j,w]+x_2_5[i,j,w]+x_2_6[i,j,w]+x_3_4[i,j,w]+x_3_5[i,j,w]+x_3_6[i,j,w]) * (BH_passengerTimeTable[j] - i))
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                C3 += C2per[w] * (x_1_7[i,j,w]*max(BS_passengerTimeTable[j]+t1+t7-i-T_1[w]+flightTime_BS[j],0)+x_1_8[i,j,w]*max(BS_passengerTimeTable[j]+t1+t8-i-T_1[w]+flightTime_BS[j],0)+x_2_7[i,j,w]*max(BS_passengerTimeTable[j]+t2+t7-i-T_1[w]+flightTime_BS[j],0)+x_2_8[i,j,w]*max(BS_passengerTimeTable[j]+t2+t8-i-T_1[w]+flightTime_BS[j],0)+x_3_7[i,j,w]*max(BS_passengerTimeTable[j]+t3+t7-i-T_1[w]+flightTime_BS[j],0)+x_3_8[i,j,w]*max(BS_passengerTimeTable[j]+t3+t8-i-T_1[w]+flightTime_BS[j],0))
                C4 += c1 * ((x_1_7[i,j,w]+x_1_8[i,j,w]+x_2_7[i,j,w]+x_2_8[i,j,w]+x_3_7[i,j,w]+x_3_8[i,j,w]) * (BS_passengerTimeTable[j] - i))
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                C3 += C2per[w] * (x_4_1[i,j,w]*max(HB_passengerTimeTable[j]+t4+t1-i-T_1[w]+flightTime_HB[j],0)+x_4_2[i,j,w]*max(HB_passengerTimeTable[j]+t4+t2-i-T_1[w]+flightTime_HB[j],0)+x_4_3[i,j,w]*max(HB_passengerTimeTable[j]+t4+t3-i-T_1[w]+flightTime_HB[j],0)+x_5_1[i,j,w]*max(HB_passengerTimeTable[j]+t5+t1-i-T_1[w]+flightTime_HB[j],0)+x_5_2[i,j,w]*max(HB_passengerTimeTable[j]+t5+t2-i-T_1[w]+flightTime_HB[j],0)+x_5_3[i,j,w]*max(HB_passengerTimeTable[j]+t5+t3-i-T_1[w]+flightTime_HB[j],0)+x_6_1[i,j,w]*max(HB_passengerTimeTable[j]+t6+t1-i-T_1[w]+flightTime_HB[j],0)+x_6_2[i,j,w]*max(HB_passengerTimeTable[j]+t6+t2-i-T_1[w]+flightTime_HB[j],0)+x_6_3[i,j,w]*max(HB_passengerTimeTable[j]+t6+t3-i-T_1[w]+flightTime_HB[j],0))
                C4 += c1 * ((x_4_1[i,j,w]+x_4_2[i,j,w]+x_4_3[i,j,w]+x_5_1[i,j,w]+x_5_2[i,j,w]+x_5_3[i,j,w]+x_6_1[i,j,w]+x_6_2[i,j,w]+x_6_3[i,j,w]) * (HB_passengerTimeTable[j] - i))
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                C3 += C2per[w] * (x_4_7[i,j,w]*max(HS_passengerTimeTable[j]+t4+t7-i-T_1[w]+flightTime_HS[j],0)+x_4_8[i,j,w]*max(HS_passengerTimeTable[j]+t4+t8-i-T_1[w]+flightTime_HS[j],0)+x_5_7[i,j,w]*max(HS_passengerTimeTable[j]+t5+t7-i-T_1[w]+flightTime_HS[j],0)+x_5_8[i,j,w]*max(HS_passengerTimeTable[j]+t5+t8-i-T_1[w]+flightTime_HS[j],0)+x_6_7[i,j,w]*max(HS_passengerTimeTable[j]+t6+t7-i-T_1[w]+flightTime_HS[j],0)+x_6_8[i,j,w]*max(HS_passengerTimeTable[j]+t6+t8-i-T_1[w]+flightTime_HS[j],0))
                C4 += c1 * ((x_4_7[i,j,w]+x_4_8[i,j,w]+x_5_7[i,j,w]+x_5_8[i,j,w]+x_6_7[i,j,w]+x_6_8[i,j,w]) * (HS_passengerTimeTable[j] - i))
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                C3 += C2per[w] * (x_7_1[i,j,w]*max(SB_passengerTimeTable[j]+t7+t1-i-T_1[w]+flightTime_SB[j],0)+x_7_2[i,j,w]*max(SB_passengerTimeTable[j]+t7+t2-i-T_1[w]+flightTime_SB[j],0)+x_7_3[i,j,w]*max(SB_passengerTimeTable[j]+t7+t3-i-T_1[w]+flightTime_SB[j],0)+x_8_1[i,j,w]*max(SB_passengerTimeTable[j]+t8+t1-i-T_1[w]+flightTime_SB[j],0)+x_8_2[i,j,w]*max(SB_passengerTimeTable[j]+t8+t2-i-T_1[w]+flightTime_SB[j],0)+x_8_3[i,j,w]*max(SB_passengerTimeTable[j]+t8+t3-i-T_1[w]+flightTime_SB[j],0))
                C4 += c1 * ((x_7_1[i,j,w]+x_7_2[i,j,w]+x_7_3[i,j,w]+x_8_1[i,j,w]+x_8_2[i,j,w]+x_8_3[i,j,w]) * (SB_passengerTimeTable[j] - i))
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                C3 += C2per[w] * (x_7_4[i,j,w]*max(SH_passengerTimeTable[j]+t7+t4-i-T_1[w]+flightTime_SH[j],0)+x_7_5[i,j,w]*max(SH_passengerTimeTable[j]+t7+t5-i-T_1[w]+flightTime_SH[j],0)+x_7_6[i,j,w]*max(SH_passengerTimeTable[j]+t7+t6-i-T_1[w]+flightTime_SH[j],0)+x_8_4[i,j,w]*max(SH_passengerTimeTable[j]+t8+t4-i-T_1[w]+flightTime_SH[j],0)+x_8_5[i,j,w]*max(SH_passengerTimeTable[j]+t8+t5-i-T_1[w]+flightTime_SH[j],0)+x_8_6[i,j,w]*max(SH_passengerTimeTable[j]+t8+t6-i-T_1[w]+flightTime_SH[j],0))
                C4 += c1 * ((x_7_4[i,j,w]+x_7_5[i,j,w]+x_7_6[i,j,w]+x_8_4[i,j,w]+x_8_5[i,j,w]+x_8_6[i,j,w]) * (SH_passengerTimeTable[j] - i))
        for j in range(N*K):
            for i in range(cargo_BH[j]):
                C3 += C2per[w] * (y_1_4[i,j,w]*max(cargo_BH[j]+t1+t4-i-T_1[w]+Tcargo_1,0)+y_1_5[i,j,w]*max(cargo_BH[j]+t1+t5-i-T_1[w]+Tcargo_1,0)+y_1_6[i,j,w]*max(cargo_BH[j]+t1+t6-i-T_1[w]+Tcargo_1,0)+y_2_4[i,j,w]*max(cargo_BH[j]+t2+t4-i-T_1[w]+Tcargo_1,0)+y_2_5[i,j,w]*max(cargo_BH[j]+t2+t5-i-T_1[w]+Tcargo_1,0)+y_2_6[i,j,w]*max(cargo_BH[j]+t2+t6-i-T_1[w]+Tcargo_1,0))
                C3 += C2per[w] * (y_1_7[i,j,w]*max(cargo_HS[j]+t1+t7-i-T_1[w]+Tcargo_2,0)+y_1_8[i,j,w]*max(cargo_HS[j]+t1+t8-i-T_1[w]+Tcargo_2,0)+y_2_7[i,j,w]*max(cargo_HS[j]+t2+t7-i-T_1[w]+Tcargo_2,0)+y_2_8[i,j,w]*max(cargo_HS[j]+t2+t8-i-T_1[w]+Tcargo_2,0)+y_3_7[i,j,w]*max(cargo_HS[j]+t3+t7-i-T_1[w]+Tcargo_2,0)+y_3_8[i,j,w]*max(cargo_HS[j]+t3+t8-i-T_1[w]+Tcargo_2,0))
                C4 += c1 * ((y_1_4[i,j,w]+y_1_5[i,j,w]+y_1_6[i,j,w]+y_2_4[i,j,w]+y_2_5[i,j,w]+y_2_6[i,j,w]+y_3_4[i,j,w]+y_3_5[i,j,w]+y_3_6[i,j,w]+y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w]) * (cargo_BH[j] - i))
            for i in range(cargo_HS[j]):
                C3 += C2per[w] * (y_4_1[i,j,w]*max(cargo_SB[j]+t4+t1-i-T_1[w]+Tcargo_3,0)+y_4_2[i,j,w]*max(cargo_SB[j]+t4+t2-i-T_1[w]+Tcargo_3,0)+y_4_3[i,j,w]*max(cargo_SB[j]+t4+t3-i-T_1[w]+Tcargo_3,0)+y_5_1[i,j,w]*max(cargo_HS[j]+t5+t1-i-T_1[w]+Tcargo_3,0)+y_5_2[i,j,w]*max(cargo_SB[j]+t5+t2-i-T_1[w]+Tcargo_3,0)+y_5_3[i,j,w]*max(cargo_SB[j]+t5+t3-i-T_1[w]+Tcargo_3,0))
                C3 += C2per[w] * (y_4_7[i,j,w]*max(cargo_HS[j]+t4+t7-i-T_1[w]+Tcargo_2,0)+y_4_8[i,j,w]*max(cargo_HS[j]+t4+t8-i-T_1[w]+Tcargo_2,0)+y_5_7[i,j,w]*max(cargo_HS[j]+t5+t7-i-T_1[w]+Tcargo_2,0)+y_5_8[i,j,w]*max(cargo_HS[j]+t5+t8-i-T_1[w]+Tcargo_2,0))
                C4 += c1 * ((y_4_7[i,j,w]+y_4_8[i,j,w]+y_5_7[i,j,w]+y_5_8[i,j,w]+y_6_7[i,j,w]+y_6_8[i,j,w]+y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w]) * (cargo_HS[j] - i))
            for i in range(cargo_SB[j]):
                C3 += C2per[w] * (y_7_1[i,j,w]*max(cargo_SB[j]+t7+t1-i-T_1[w]+Tcargo_3,0)+y_7_2[i,j,w]*max(cargo_SB[j]+t7+t2-i-T_1[w]+Tcargo_3,0)+y_7_3[i,j,w]*max(cargo_SB[j]+t7+t3-i-T_1[w]+Tcargo_3,0)+y_8_1[i,j,w]*max(cargo_SB[j]+t8+t1-i-T_1[w]+Tcargo_3,0)+y_8_2[i,j,w]*max(cargo_SB[j]+t8+t2-i-T_1[w]+Tcargo_3,0)+y_8_3[i,j,w]*max(cargo_SB[j]+t8+t3-i-T_1[w]+Tcargo_3,0))
                C3 += C2per[w] * (y_7_4[i,j,w]*max(cargo_BH[j]+t7+t4-i-T_1[w]+Tcargo_1,0)+y_7_5[i,j,w]*max(cargo_BH[j]+t7+t5-i-T_1[w]+Tcargo_1,0)+y_7_6[i,j,w]*max(cargo_BH[j]+t7+t6-i-T_1[w]+Tcargo_1,0)+y_8_4[i,j,w]*max(cargo_BH[j]+t8+t4-i-T_1[w]+Tcargo_1,0)+y_8_5[i,j,w]*max(cargo_BH[j]+t8+t5-i-T_1[w]+Tcargo_1,0)+y_8_6[i,j,w]*max(cargo_BH[j]+t8+t6-i-T_1[w]+Tcargo_1,0))
                C4 += c1 * ((y_7_1[i,j,w]+y_7_2[i,j,w]+y_7_3[i,j,w]+y_8_1[i,j,w]+y_8_2[i,j,w]+y_8_3[i,j,w]+y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w]) * (cargo_SB[j] - i))
                
    TimeSensitive_Req_BH = [x1+x2+x3+x4+x5+x6+x7+x8+x9 for x1,x2,x3,x4,x5,x6,x7,x8,x9 in zip(TimeSensitive_Req_1_4,TimeSensitive_Req_1_5,TimeSensitive_Req_1_6,TimeSensitive_Req_2_4,TimeSensitive_Req_2_5,TimeSensitive_Req_2_6,TimeSensitive_Req_3_4,TimeSensitive_Req_3_5,TimeSensitive_Req_3_6)]
    TimeSensitive_Req_BS = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(TimeSensitive_Req_1_7,TimeSensitive_Req_1_8,TimeSensitive_Req_2_7,TimeSensitive_Req_2_8,TimeSensitive_Req_3_7,TimeSensitive_Req_3_8)]
    TimeSensitive_Req_HB = [x1+x2+x3+x4+x5+x6+x7+x8+x9 for x1,x2,x3,x4,x5,x6,x7,x8,x9 in zip(TimeSensitive_Req_4_1,TimeSensitive_Req_4_2,TimeSensitive_Req_4_3,TimeSensitive_Req_5_1,TimeSensitive_Req_5_2,TimeSensitive_Req_5_3,TimeSensitive_Req_6_1,TimeSensitive_Req_6_2,TimeSensitive_Req_6_3)]
    TimeSensitive_Req_HS = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(TimeSensitive_Req_4_7,TimeSensitive_Req_4_8,TimeSensitive_Req_5_7,TimeSensitive_Req_5_8,TimeSensitive_Req_6_7,TimeSensitive_Req_6_8)]
    TimeSensitive_Req_SB = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(TimeSensitive_Req_7_1,TimeSensitive_Req_7_2,TimeSensitive_Req_7_3,TimeSensitive_Req_8_1,TimeSensitive_Req_8_2,TimeSensitive_Req_8_3)]
    TimeSensitive_Req_SH = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(TimeSensitive_Req_7_4,TimeSensitive_Req_7_5,TimeSensitive_Req_7_6,TimeSensitive_Req_8_4,TimeSensitive_Req_8_5,TimeSensitive_Req_8_6)]
    Economy_Req_BH = [x1+x2+x3+x4+x5+x6+x7+x8+x9 for x1,x2,x3,x4,x5,x6,x7,x8,x9 in zip(Economy_Req_1_4,Economy_Req_1_5,Economy_Req_1_6,Economy_Req_2_4,Economy_Req_2_5,Economy_Req_2_6,Economy_Req_3_4,Economy_Req_3_5,Economy_Req_3_6)]
    Economy_Req_BS = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(Economy_Req_1_7,Economy_Req_1_8,Economy_Req_2_7,Economy_Req_2_8,Economy_Req_3_7,Economy_Req_3_8)]
    Economy_Req_HB = [x1+x2+x3+x4+x5+x6+x7+x8+x9 for x1,x2,x3,x4,x5,x6,x7,x8,x9 in zip(Economy_Req_4_1,Economy_Req_4_2,Economy_Req_4_3,Economy_Req_5_1,Economy_Req_5_2,Economy_Req_5_3,Economy_Req_6_1,Economy_Req_6_2,Economy_Req_6_3)]
    Economy_Req_HS = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(Economy_Req_4_7,Economy_Req_4_8,Economy_Req_5_7,Economy_Req_5_8,Economy_Req_6_7,Economy_Req_6_8)]
    Economy_Req_SB = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(Economy_Req_7_1,Economy_Req_7_2,Economy_Req_7_3,Economy_Req_8_1,Economy_Req_8_2,Economy_Req_8_3)]
    Economy_Req_SH = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(Economy_Req_7_4,Economy_Req_7_5,Economy_Req_7_6,Economy_Req_8_4,Economy_Req_8_5,Economy_Req_8_6)]
    forecast_BH_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_BH,Economy_Req_BH)]
    forecast_BS_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_BS,Economy_Req_BS)]
    forecast_HB_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_HB,Economy_Req_HB)]
    forecast_HS_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_HS,Economy_Req_HS)]
    forecast_SB_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_SB,Economy_Req_SB)]
    forecast_SH_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_SH,Economy_Req_SH)]
    passengerTotalBH = 0
    cargoTotalBH = 0
    passengerTotalBS = 0
    cargoTotalBS = 0
    passengerTotalHB = 0
    cargoTotalHB = 0
    passengerTotalHS = 0
    cargoTotalHS = 0
    passengerTotalSB = 0
    cargoTotalSB = 0
    passengerTotalSH = 0
    cargoTotalSH = 0
    
    for k in range(last_BH):
        transOut1 = 0
        transOut2 = 0
        transOut1_1_4 = 0
        transOut1_1_5 = 0
        transOut1_1_6 = 0
        transOut2_1_4 = 0
        transOut2_1_5 = 0
        transOut2_1_6 = 0
        transOut1_2_4 = 0
        transOut1_2_5 = 0
        transOut1_2_6 = 0
        transOut2_2_4 = 0
        transOut2_2_5 = 0
        transOut2_2_6 = 0
        transOut1_3_4 = 0
        transOut1_3_5 = 0
        transOut1_3_6 = 0
        transOut2_3_4 = 0
        transOut2_3_5 = 0
        transOut2_3_6 = 0
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                if i == k:
                    transOut1_1_4 += x_1_4[i,j,1]
                    transOut2_1_4 += x_1_4[i,j,2]
                    transOut1_1_5 += x_1_5[i,j,1]
                    transOut2_1_5 += x_1_5[i,j,2]
                    transOut1_1_6 += x_1_6[i,j,1]
                    transOut2_1_6 += x_1_6[i,j,2]
                    transOut1_2_4 += x_2_4[i,j,1]
                    transOut2_2_4 += x_2_4[i,j,2]
                    transOut1_2_5 += x_2_5[i,j,1]
                    transOut2_2_5 += x_2_5[i,j,2]
                    transOut1_2_6 += x_2_6[i,j,1]
                    transOut2_2_6 += x_2_6[i,j,2]
                    transOut1_3_4 += x_3_4[i,j,1]
                    transOut2_3_4 += x_3_4[i,j,2]
                    transOut1_3_5 += x_3_5[i,j,1]
                    transOut2_3_5 += x_3_5[i,j,2]
                    transOut1_3_6 += x_3_6[i,j,1]
                    transOut2_3_6 += x_3_6[i,j,2]
                    transOut1 += (x_1_4[i,j,1]+x_1_5[i,j,1]+x_1_6[i,j,1]+x_2_4[i,j,1]+x_2_5[i,j,1]+x_2_6[i,j,1]+x_3_4[i,j,1]+x_3_5[i,j,1]+x_3_6[i,j,1])
                    transOut2 += (x_1_4[i,j,2]+x_1_5[i,j,2]+x_1_6[i,j,2]+x_2_4[i,j,2]+x_2_5[i,j,2]+x_2_6[i,j,2]+x_3_4[i,j,2]+x_3_5[i,j,2]+x_3_6[i,j,2])
                    passengerTotalBH += (x_1_4[i,j,1]+x_1_5[i,j,1]+x_1_6[i,j,1]+x_2_4[i,j,1]+x_2_5[i,j,1]+x_2_6[i,j,1]+x_3_4[i,j,1]+x_3_5[i,j,1]+x_3_6[i,j,1]+x_1_4[i,j,2]+x_1_5[i,j,2]+x_1_6[i,j,2]+x_2_4[i,j,2]+x_2_5[i,j,2]+x_2_6[i,j,2]+x_3_4[i,j,2]+x_3_5[i,j,2]+x_3_6[i,j,2])          
        for j in range(N*K):
            for i in range(cargo_BH[j]):
                if i == k:
                    transOut1_1_4 += y_1_4[i,j,1]
                    transOut2_1_4 += y_1_4[i,j,2]
                    transOut1_1_5 += y_1_5[i,j,1]
                    transOut2_1_5 += y_1_5[i,j,2]
                    transOut1_1_6 += y_1_6[i,j,1]
                    transOut2_1_6 += y_1_6[i,j,2]
                    transOut1_2_4 += y_2_4[i,j,1]
                    transOut2_2_4 += y_2_4[i,j,2]
                    transOut1_2_5 += y_2_5[i,j,1]
                    transOut2_2_5 += y_2_5[i,j,2]
                    transOut1_2_6 += y_2_6[i,j,1]
                    transOut2_2_6 += y_2_6[i,j,2]
                    transOut1_3_4 += y_3_4[i,j,1]
                    transOut2_3_4 += y_3_4[i,j,2]
                    transOut1_3_5 += y_3_5[i,j,1]
                    transOut2_3_5 += y_3_5[i,j,2]
                    transOut1_3_6 += y_3_6[i,j,1]
                    transOut2_3_6 += y_3_6[i,j,2]
                    transOut1 += (y_1_4[i,j,1]+y_1_5[i,j,1]+y_1_6[i,j,1]+y_2_4[i,j,1]+y_2_5[i,j,1]+y_2_6[i,j,1]+y_3_4[i,j,1]+y_3_5[i,j,1]+y_3_6[i,j,1])
                    transOut2 += (y_1_4[i,j,2]+y_1_5[i,j,2]+y_1_6[i,j,2]+y_2_4[i,j,2]+y_2_5[i,j,2]+y_2_6[i,j,2]+y_3_4[i,j,2]+y_3_5[i,j,2]+y_3_6[i,j,2])
                    cargoTotalBH += (y_1_4[i,j,1]+y_1_5[i,j,1]+y_1_6[i,j,1]+y_2_4[i,j,1]+y_2_5[i,j,1]+y_2_6[i,j,1]+y_3_4[i,j,1]+y_3_5[i,j,1]+y_3_6[i,j,1]+y_1_4[i,j,2]+y_1_5[i,j,2]+y_1_6[i,j,2]+y_2_4[i,j,2]+y_2_5[i,j,2]+y_2_6[i,j,2]+y_3_4[i,j,2]+y_3_5[i,j,2]+y_3_6[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_1_4 <= TimeSensitive_Req_1_4[k])
        m.addConstr(transOut2_1_4 <= Economy_Req_1_4[k])
        m.addConstr(transOut1_1_5 <= TimeSensitive_Req_1_5[k])
        m.addConstr(transOut2_1_5 <= Economy_Req_1_5[k])
        m.addConstr(transOut1_1_6 <= TimeSensitive_Req_1_6[k])
        m.addConstr(transOut2_1_6 <= Economy_Req_1_6[k])
        m.addConstr(transOut1_2_4 <= TimeSensitive_Req_2_4[k])
        m.addConstr(transOut2_2_4 <= Economy_Req_2_4[k])
        m.addConstr(transOut1_2_5 <= TimeSensitive_Req_2_5[k])
        m.addConstr(transOut2_2_5 <= Economy_Req_2_5[k])
        m.addConstr(transOut1_2_6 <= TimeSensitive_Req_2_6[k])
        m.addConstr(transOut2_2_6 <= Economy_Req_2_6[k])
        m.addConstr(transOut1_3_4 <= TimeSensitive_Req_3_4[k])
        m.addConstr(transOut2_3_4 <= Economy_Req_3_4[k])
        m.addConstr(transOut1_3_5 <= TimeSensitive_Req_3_5[k])
        m.addConstr(transOut2_3_5 <= Economy_Req_3_5[k])
        m.addConstr(transOut1_3_6 <= TimeSensitive_Req_3_6[k])
        m.addConstr(transOut2_3_6 <= Economy_Req_3_6[k])
        trash = c3_1 * (TimeSensitive_Req_BH[k]-transOut1) + c3_2 * (Economy_Req_BH[k]-transOut2)
        C6 += trash
    for k in range(last_BS):
        transOut1 = 0
        transOut2 = 0
        transOut1_1_7 = 0
        transOut2_1_7 = 0
        transOut1_1_8 = 0
        transOut2_1_8 = 0
        transOut1_2_7 = 0
        transOut2_2_7 = 0
        transOut1_2_8 = 0
        transOut2_2_8 = 0
        transOut1_3_7 = 0
        transOut2_3_7 = 0
        transOut1_3_8 = 0
        transOut2_3_8 = 0
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                if i == k:
                    transOut1_1_7 += x_1_7[i,j,1]
                    transOut2_1_7 += x_1_7[i,j,2]
                    transOut1_1_8 += x_1_8[i,j,1]
                    transOut2_1_8 += x_1_8[i,j,2]
                    transOut1_2_7 += x_2_7[i,j,1]
                    transOut2_2_7 += x_2_7[i,j,2]
                    transOut1_2_8 += x_2_8[i,j,1]
                    transOut2_2_8 += x_2_8[i,j,2]
                    transOut1_3_7 += x_3_7[i,j,1]
                    transOut2_3_7 += x_3_7[i,j,2]
                    transOut1_3_8 += x_3_8[i,j,1]
                    transOut2_3_8 += x_3_8[i,j,2]
                    transOut1 += (x_1_7[i,j,1]+x_1_8[i,j,1]+x_2_7[i,j,1]+x_2_8[i,j,1]+x_3_7[i,j,1]+x_3_8[i,j,1])
                    transOut2 += (x_1_7[i,j,2]+x_1_8[i,j,2]+x_2_7[i,j,2]+x_2_8[i,j,2]+x_3_7[i,j,2]+x_3_8[i,j,2])
                    passengerTotalBS += (x_1_7[i,j,1]+x_1_8[i,j,1]+x_2_7[i,j,1]+x_2_8[i,j,1]+x_3_7[i,j,1]+x_3_8[i,j,1]+x_1_7[i,j,2]+x_1_8[i,j,2]+x_2_7[i,j,2]+x_2_8[i,j,2]+x_3_7[i,j,2]+x_3_8[i,j,2])
        for j in range(N*K):
            for i in range(cargo_BH[j]):
                if i == k:
                    transOut1_1_7 += y_1_7[i,j,1]
                    transOut2_1_7 += y_1_7[i,j,2]
                    transOut1_1_8 += y_1_8[i,j,1]
                    transOut2_1_8 += y_1_8[i,j,2]
                    transOut1_2_7 += y_2_7[i,j,1]
                    transOut2_2_7 += y_2_7[i,j,2]
                    transOut1_2_8 += y_2_8[i,j,1]
                    transOut2_2_8 += y_2_8[i,j,2]
                    transOut1_3_7 += y_3_7[i,j,1]
                    transOut2_3_7 += y_3_7[i,j,2]
                    transOut1_3_8 += y_3_8[i,j,1]
                    transOut2_3_8 += y_3_8[i,j,2]
                    transOut1 += (y_1_7[i,j,1]+y_1_8[i,j,1]+y_2_7[i,j,1]+y_2_8[i,j,1]+y_3_7[i,j,1]+y_3_8[i,j,1])
                    transOut2 += (y_1_7[i,j,2]+y_1_8[i,j,2]+y_2_7[i,j,2]+y_2_8[i,j,2]+y_3_7[i,j,2]+y_3_8[i,j,2])
                    cargoTotalBS += (y_1_7[i,j,1]+y_1_8[i,j,1]+y_2_7[i,j,1]+y_2_8[i,j,1]+y_3_7[i,j,1]+y_3_8[i,j,1]+y_1_7[i,j,2]+y_1_8[i,j,2]+y_2_7[i,j,2]+y_2_8[i,j,2]+y_3_7[i,j,2]+y_3_8[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_1_7 <= TimeSensitive_Req_1_7[k])
        m.addConstr(transOut2_1_7 <= Economy_Req_1_7[k])
        m.addConstr(transOut1_1_8 <= TimeSensitive_Req_1_8[k])
        m.addConstr(transOut2_1_8 <= Economy_Req_1_8[k])
        m.addConstr(transOut1_2_7 <= TimeSensitive_Req_2_7[k])
        m.addConstr(transOut2_2_7 <= Economy_Req_2_7[k])
        m.addConstr(transOut1_2_8 <= TimeSensitive_Req_2_8[k])
        m.addConstr(transOut2_2_8 <= Economy_Req_2_8[k])
        m.addConstr(transOut1_3_7 <= TimeSensitive_Req_3_7[k])
        m.addConstr(transOut2_3_7 <= Economy_Req_3_7[k])
        m.addConstr(transOut1_3_8 <= TimeSensitive_Req_3_8[k])
        m.addConstr(transOut2_3_8 <= Economy_Req_3_8[k])
        trash = c3_1 * (TimeSensitive_Req_BS[k]-transOut1) + c3_2 * (Economy_Req_BS[k]-transOut2)
        C6 += trash
    for k in range(last_HB):
        transOut1 = 0
        transOut2 = 0
        transOut1_4_1 = 0
        transOut2_4_1 = 0
        transOut1_4_2 = 0
        transOut2_4_2 = 0
        transOut1_4_3 = 0
        transOut2_4_3 = 0
        transOut1_5_1 = 0
        transOut2_5_1 = 0
        transOut1_5_2 = 0
        transOut2_5_2 = 0
        transOut1_5_3 = 0
        transOut2_5_3 = 0
        transOut1_6_1 = 0
        transOut2_6_1 = 0
        transOut1_6_2 = 0
        transOut2_6_2 = 0
        transOut1_6_3 = 0
        transOut2_6_3 = 0
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                if i == k:
                    transOut1_4_1 += x_4_1[i,j,1]
                    transOut2_4_1 += x_4_1[i,j,2]
                    transOut1_4_2 += x_4_2[i,j,1]
                    transOut2_4_2 += x_4_2[i,j,2]
                    transOut1_4_3 += x_4_3[i,j,1]
                    transOut2_4_3 += x_4_3[i,j,2]
                    transOut1_5_1 += x_5_1[i,j,1]
                    transOut2_5_1 += x_5_1[i,j,2]
                    transOut1_5_2 += x_5_2[i,j,1]
                    transOut2_5_2 += x_5_2[i,j,2]
                    transOut1_5_3 += x_5_3[i,j,1]
                    transOut2_5_3 += x_5_3[i,j,2]
                    transOut1_6_1 += x_6_1[i,j,1]
                    transOut2_6_1 += x_6_1[i,j,2]
                    transOut1_6_2 += x_6_2[i,j,1]
                    transOut2_6_2 += x_6_2[i,j,2]
                    transOut1_6_3 += x_6_3[i,j,1]
                    transOut2_6_3 += x_6_3[i,j,2]
                    transOut1 += x_4_1[i,j,1]+x_4_2[i,j,1]+x_4_3[i,j,1]+x_5_1[i,j,1]+x_5_2[i,j,1]+x_5_3[i,j,1]+x_6_1[i,j,1]+x_6_2[i,j,1]+x_6_3[i,j,1]
                    transOut2 += x_4_1[i,j,2]+x_4_2[i,j,2]+x_4_3[i,j,2]+x_5_1[i,j,2]+x_5_2[i,j,2]+x_5_3[i,j,2]+x_6_1[i,j,2]+x_6_2[i,j,2]+x_6_3[i,j,2]
                    passengerTotalHB += (x_4_1[i,j,1]+x_4_2[i,j,1]+x_4_3[i,j,1]+x_5_1[i,j,1]+x_5_2[i,j,1]+x_5_3[i,j,1]+x_6_1[i,j,1]+x_6_2[i,j,1]+x_6_3[i,j,1]+x_4_1[i,j,2]+x_4_2[i,j,2]+x_4_3[i,j,2]+x_5_1[i,j,2]+x_5_2[i,j,2]+x_5_3[i,j,2]+x_6_1[i,j,2]+x_6_2[i,j,2]+x_6_3[i,j,2])
        for j in range(N*K):
            for i in range(cargo_HS[j]):
                if i == k:
                    transOut1_4_1 += y_4_1[i,j,1]
                    transOut2_4_1 += y_4_1[i,j,2]
                    transOut1_4_2 += y_4_2[i,j,1]
                    transOut2_4_2 += y_4_2[i,j,2]
                    transOut1_4_3 += y_4_3[i,j,1]
                    transOut2_4_3 += y_4_3[i,j,2]
                    transOut1_5_1 += y_5_1[i,j,1]
                    transOut2_5_1 += y_5_1[i,j,2]
                    transOut1_5_2 += y_5_2[i,j,1]
                    transOut2_5_2 += y_5_2[i,j,2]
                    transOut1_5_3 += y_5_3[i,j,1]
                    transOut2_5_3 += y_5_3[i,j,2]
                    transOut1_6_1 += y_6_1[i,j,1]
                    transOut2_6_1 += y_6_1[i,j,2]
                    transOut1_6_2 += y_6_2[i,j,1]
                    transOut2_6_2 += y_6_2[i,j,2]
                    transOut1_6_3 += y_6_3[i,j,1]
                    transOut2_6_3 += y_6_3[i,j,2]
                    transOut1 += y_4_1[i,j,1]+y_4_2[i,j,1]+y_4_3[i,j,1]+y_5_1[i,j,1]+y_5_2[i,j,1]+y_5_3[i,j,1]+y_6_1[i,j,1]+y_6_2[i,j,1]+y_6_3[i,j,1]
                    transOut2 += y_4_1[i,j,2]+y_4_2[i,j,2]+y_4_3[i,j,2]+y_5_1[i,j,2]+y_5_2[i,j,2]+y_5_3[i,j,2]+y_6_1[i,j,2]+y_6_2[i,j,2]+y_6_3[i,j,2]
                    cargoTotalHB += (y_4_1[i,j,1]+y_4_2[i,j,1]+y_4_3[i,j,1]+y_5_1[i,j,1]+y_5_2[i,j,1]+y_5_3[i,j,1]+y_6_1[i,j,1]+y_6_2[i,j,1]+y_6_3[i,j,1]+y_4_1[i,j,2]+y_4_2[i,j,2]+y_4_3[i,j,2]+y_5_1[i,j,2]+y_5_2[i,j,2]+y_5_3[i,j,2]+y_6_1[i,j,2]+y_6_2[i,j,2]+y_6_3[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_4_1 <= TimeSensitive_Req_4_1[k])
        m.addConstr(transOut2_4_1 <= Economy_Req_4_1[k])
        m.addConstr(transOut1_4_2 <= TimeSensitive_Req_4_2[k])
        m.addConstr(transOut2_4_2 <= Economy_Req_4_2[k])
        m.addConstr(transOut1_4_3 <= TimeSensitive_Req_4_3[k])
        m.addConstr(transOut2_4_3 <= Economy_Req_4_3[k])
        m.addConstr(transOut1_5_1 <= TimeSensitive_Req_5_1[k])
        m.addConstr(transOut2_5_1 <= Economy_Req_5_1[k])
        m.addConstr(transOut1_5_2 <= TimeSensitive_Req_5_2[k])
        m.addConstr(transOut2_5_2 <= Economy_Req_5_2[k])
        m.addConstr(transOut1_5_3 <= TimeSensitive_Req_5_3[k])
        m.addConstr(transOut2_5_3 <= Economy_Req_5_3[k])
        m.addConstr(transOut1_6_1 <= TimeSensitive_Req_6_1[k])
        m.addConstr(transOut2_6_1 <= Economy_Req_6_1[k])
        m.addConstr(transOut1_6_2 <= TimeSensitive_Req_6_2[k])
        m.addConstr(transOut2_6_2 <= Economy_Req_6_2[k])
        m.addConstr(transOut1_6_3 <= TimeSensitive_Req_6_3[k])
        m.addConstr(transOut2_6_3 <= Economy_Req_6_3[k])
        trash = c3_1 * (TimeSensitive_Req_HB[k]-transOut1) + c3_2 * (Economy_Req_HB[k]-transOut2)
        C6 += trash
    for k in range(last_HS):
        transOut1 = 0
        transOut2 = 0
        transOut1_4_7 = 0
        transOut2_4_7 = 0
        transOut1_4_8 = 0
        transOut2_4_8 = 0
        transOut1_5_7 = 0
        transOut2_5_7 = 0
        transOut1_5_8 = 0
        transOut2_5_8 = 0
        transOut1_6_7 = 0
        transOut2_6_7 = 0
        transOut1_6_8 = 0
        transOut2_6_8 = 0
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                if i == k:
                    transOut1_4_7 += x_4_7[i,j,1]
                    transOut2_4_7 += x_4_7[i,j,2]
                    transOut1_4_8 += x_4_8[i,j,1]
                    transOut2_4_8 += x_4_8[i,j,2]
                    transOut1_5_7 += x_5_7[i,j,1]
                    transOut2_5_7 += x_5_7[i,j,2]
                    transOut1_5_8 += x_5_8[i,j,1]
                    transOut2_5_8 += x_5_8[i,j,2]
                    transOut1_6_7 += x_6_7[i,j,1]
                    transOut2_6_7 += x_6_7[i,j,2]
                    transOut1_6_8 += x_6_8[i,j,1]
                    transOut2_6_8 += x_6_8[i,j,2]
                    transOut1 += x_4_7[i,j,1]+x_4_8[i,j,1]+x_5_7[i,j,1]+x_5_8[i,j,1]+x_6_7[i,j,1]+x_6_8[i,j,1]
                    transOut2 += x_4_7[i,j,2]+x_4_8[i,j,2]+x_5_7[i,j,2]+x_5_8[i,j,2]+x_6_7[i,j,2]+x_6_8[i,j,2]
                    passengerTotalHS += (x_4_7[i,j,1]+x_4_8[i,j,1]+x_5_7[i,j,1]+x_5_8[i,j,1]+x_6_7[i,j,1]+x_6_8[i,j,1]+x_4_7[i,j,2]+x_4_8[i,j,2]+x_5_7[i,j,2]+x_5_8[i,j,2]+x_6_7[i,j,2]+x_6_8[i,j,2])
        for j in range(N*K):
            for i in range(cargo_HS[j]):
                if i == k:
                    transOut1_4_7 += y_4_7[i,j,1]
                    transOut2_4_7 += y_4_7[i,j,2]
                    transOut1_4_8 += y_4_8[i,j,1]
                    transOut2_4_8 += y_4_8[i,j,2]
                    transOut1_5_7 += y_5_7[i,j,1]
                    transOut2_5_7 += y_5_7[i,j,2]
                    transOut1_5_8 += y_5_8[i,j,1]
                    transOut2_5_8 += y_5_8[i,j,2]
                    transOut1_6_7 += y_6_7[i,j,1]
                    transOut2_6_7 += y_6_7[i,j,2]
                    transOut1_6_8 += y_6_8[i,j,1]
                    transOut2_6_8 += y_6_8[i,j,2]
                    transOut1 += y_4_7[i,j,1]+y_4_8[i,j,1]+y_5_7[i,j,1]+y_5_8[i,j,1]+y_6_7[i,j,1]+y_6_8[i,j,1]
                    transOut2 += y_4_7[i,j,2]+y_4_8[i,j,2]+y_5_7[i,j,2]+y_5_8[i,j,2]+y_6_7[i,j,2]+y_6_8[i,j,2]
                    cargoTotalHS += (y_4_7[i,j,1]+y_4_8[i,j,1]+y_5_7[i,j,1]+y_5_8[i,j,1]+y_6_7[i,j,1]+y_6_8[i,j,1]+y_4_7[i,j,2]+y_4_8[i,j,2]+y_5_7[i,j,2]+y_5_8[i,j,2]+y_6_7[i,j,2]+y_6_8[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_4_7 <= TimeSensitive_Req_4_7[k])
        m.addConstr(transOut2_4_7 <= Economy_Req_4_7[k])
        m.addConstr(transOut1_4_8 <= TimeSensitive_Req_4_8[k])
        m.addConstr(transOut2_4_8 <= Economy_Req_4_8[k])
        m.addConstr(transOut1_5_7 <= TimeSensitive_Req_5_7[k])
        m.addConstr(transOut2_5_7 <= Economy_Req_5_7[k])
        m.addConstr(transOut1_5_8 <= TimeSensitive_Req_5_8[k])
        m.addConstr(transOut2_5_8 <= Economy_Req_5_8[k])
        m.addConstr(transOut1_6_7 <= TimeSensitive_Req_6_7[k])
        m.addConstr(transOut2_6_7 <= Economy_Req_6_7[k])
        m.addConstr(transOut1_6_8 <= TimeSensitive_Req_6_8[k])
        m.addConstr(transOut2_6_8 <= Economy_Req_6_8[k])
        trash = c3_1 * (TimeSensitive_Req_HS[k]-transOut1) + c3_2 * (Economy_Req_HS[k]-transOut2)
        C6 += trash
    for k in range(last_SB):
        transOut1 = 0
        transOut2 = 0
        transOut1_7_1 = 0
        transOut2_7_1 = 0
        transOut1_7_2 = 0
        transOut2_7_2 = 0
        transOut1_7_3 = 0
        transOut2_7_3 = 0
        transOut1_8_1 = 0
        transOut2_8_1 = 0
        transOut1_8_2 = 0
        transOut2_8_2 = 0
        transOut1_8_3 = 0
        transOut2_8_3 = 0
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                if i == k:
                    transOut1_7_1 += x_7_1[i,j,1]
                    transOut2_7_1 += x_7_1[i,j,2]
                    transOut1_7_2 += x_7_2[i,j,1]
                    transOut2_7_2 += x_7_2[i,j,2]
                    transOut1_7_3 += x_7_3[i,j,1]
                    transOut2_7_3 += x_7_3[i,j,2]
                    transOut1_8_1 += x_8_1[i,j,1]
                    transOut2_8_1 += x_8_1[i,j,2]
                    transOut1_8_2 += x_8_2[i,j,1]
                    transOut2_8_2 += x_8_2[i,j,2]
                    transOut1_8_3 += x_8_3[i,j,1]
                    transOut2_8_3 += x_8_3[i,j,2]
                    transOut1 += x_7_1[i,j,1]+x_7_2[i,j,1]+x_7_3[i,j,1]+x_8_1[i,j,1]+x_8_2[i,j,1]+x_8_3[i,j,1]
                    transOut2 += x_7_1[i,j,2]+x_7_2[i,j,2]+x_7_3[i,j,2]+x_8_1[i,j,2]+x_8_2[i,j,2]+x_8_3[i,j,2]
                    passengerTotalSB += (x_7_1[i,j,1]+x_7_2[i,j,1]+x_7_3[i,j,1]+x_8_1[i,j,1]+x_8_2[i,j,1]+x_8_3[i,j,1]+x_7_1[i,j,2]+x_7_2[i,j,2]+x_7_3[i,j,2]+x_8_1[i,j,2]+x_8_2[i,j,2]+x_8_3[i,j,2])
        for j in range(N*K):
            for i in range(cargo_SB[j]):
                if i == k:
                    transOut1_7_1 += y_7_1[i,j,1]
                    transOut2_7_1 += y_7_1[i,j,2]
                    transOut1_7_2 += y_7_2[i,j,1]
                    transOut2_7_2 += y_7_2[i,j,2]
                    transOut1_7_3 += y_7_3[i,j,1]
                    transOut2_7_3 += y_7_3[i,j,2]
                    transOut1_8_1 += y_8_1[i,j,1]
                    transOut2_8_1 += y_8_1[i,j,2]
                    transOut1_8_2 += y_8_2[i,j,1]
                    transOut2_8_2 += y_8_2[i,j,2]
                    transOut1_8_3 += y_8_3[i,j,1]
                    transOut2_8_3 += y_8_3[i,j,2]
                    transOut1 += y_7_1[i,j,1]+y_7_2[i,j,1]+y_7_3[i,j,1]+y_8_1[i,j,1]+y_8_2[i,j,1]+y_8_3[i,j,1]
                    transOut2 += y_7_1[i,j,2]+y_7_2[i,j,2]+y_7_3[i,j,2]+y_8_1[i,j,2]+y_8_2[i,j,2]+y_8_3[i,j,2]
                    cargoTotalSB += (y_7_1[i,j,1]+y_7_2[i,j,1]+y_7_3[i,j,1]+y_8_1[i,j,1]+y_8_2[i,j,1]+y_8_3[i,j,1]+y_7_1[i,j,2]+y_7_2[i,j,2]+y_7_3[i,j,2]+y_8_1[i,j,2]+y_8_2[i,j,2]+y_8_3[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_7_1 <= TimeSensitive_Req_7_1[k])
        m.addConstr(transOut2_7_1 <= Economy_Req_7_1[k])
        m.addConstr(transOut1_7_2 <= TimeSensitive_Req_7_2[k])
        m.addConstr(transOut2_7_2 <= Economy_Req_7_2[k])
        m.addConstr(transOut1_7_3 <= TimeSensitive_Req_7_3[k])
        m.addConstr(transOut2_7_3 <= Economy_Req_7_3[k])
        m.addConstr(transOut1_8_1 <= TimeSensitive_Req_8_1[k])
        m.addConstr(transOut2_8_1 <= Economy_Req_8_1[k])
        m.addConstr(transOut1_8_2 <= TimeSensitive_Req_8_2[k])
        m.addConstr(transOut2_8_2 <= Economy_Req_8_2[k])
        m.addConstr(transOut1_8_3 <= TimeSensitive_Req_8_3[k])
        m.addConstr(transOut2_8_3 <= Economy_Req_8_3[k])
        trash = c3_1 * (TimeSensitive_Req_SB[k]-transOut1) + c3_2 * (Economy_Req_SB[k]-transOut2)
        C6 += trash
    for k in range(last_SH):
        transOut1 = 0
        transOut2 = 0
        transOut1_7_4 = 0
        transOut2_7_4 = 0
        transOut1_7_5 = 0
        transOut2_7_5 = 0
        transOut1_7_6 = 0
        transOut2_7_6 = 0
        transOut1_8_4 = 0
        transOut2_8_4 = 0
        transOut1_8_5 = 0
        transOut2_8_5 = 0
        transOut1_8_6 = 0
        transOut2_8_6 = 0
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                if i == k:
                    transOut1_7_4 += x_7_4[i,j,1]
                    transOut2_7_4 += x_7_4[i,j,2]
                    transOut1_7_5 += x_7_5[i,j,1]
                    transOut2_7_5 += x_7_5[i,j,2]
                    transOut1_7_6 += x_7_6[i,j,1]
                    transOut2_7_6 += x_7_6[i,j,2]
                    transOut1_8_4 += x_8_4[i,j,1]
                    transOut2_8_4 += x_8_4[i,j,2]
                    transOut1_8_5 += x_8_5[i,j,1]
                    transOut2_8_5 += x_8_5[i,j,2]
                    transOut1_8_6 += x_8_6[i,j,1]
                    transOut2_8_6 += x_8_6[i,j,2]
                    transOut1 += x_7_4[i,j,1]+x_7_5[i,j,1]+x_7_6[i,j,1]+x_8_4[i,j,1]+x_8_5[i,j,1]+x_8_6[i,j,1]
                    transOut2 += x_7_4[i,j,2]+x_7_5[i,j,2]+x_7_6[i,j,2]+x_8_4[i,j,2]+x_8_5[i,j,2]+x_8_6[i,j,2]
                    passengerTotalSH += (x_7_4[i,j,1]+x_7_5[i,j,1]+x_7_6[i,j,1]+x_8_4[i,j,1]+x_8_5[i,j,1]+x_8_6[i,j,1]+x_7_4[i,j,2]+x_7_5[i,j,2]+x_7_6[i,j,2]+x_8_4[i,j,2]+x_8_5[i,j,2]+x_8_6[i,j,2])
        for j in range(N*K):
            for i in range(cargo_SB[j]):
                if i == k:
                    transOut1_7_4 += y_7_4[i,j,1]
                    transOut2_7_4 += y_7_4[i,j,2]
                    transOut1_7_5 += y_7_5[i,j,1]
                    transOut2_7_5 += y_7_5[i,j,2]
                    transOut1_7_6 += y_7_6[i,j,1]
                    transOut2_7_6 += y_7_6[i,j,2]
                    transOut1_8_4 += y_8_4[i,j,1]
                    transOut2_8_4 += y_8_4[i,j,2]
                    transOut1_8_5 += y_8_5[i,j,1]
                    transOut2_8_5 += y_8_5[i,j,2]
                    transOut1_8_6 += y_8_6[i,j,1]
                    transOut2_8_6 += y_8_6[i,j,2]
                    transOut1 += y_7_4[i,j,1]+y_7_5[i,j,1]+y_7_6[i,j,1]+y_8_4[i,j,1]+y_8_5[i,j,1]+y_8_6[i,j,1]
                    transOut2 += y_7_4[i,j,2]+y_7_5[i,j,2]+y_7_6[i,j,2]+y_8_4[i,j,2]+y_8_5[i,j,2]+y_8_6[i,j,2]
                    cargoTotalSH += (y_7_4[i,j,1]+y_7_5[i,j,1]+y_7_6[i,j,1]+y_8_4[i,j,1]+y_8_5[i,j,1]+y_8_6[i,j,1]+y_7_4[i,j,2]+y_7_5[i,j,2]+y_7_6[i,j,2]+y_8_4[i,j,2]+y_8_5[i,j,2]+y_8_6[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_7_4 <= TimeSensitive_Req_7_4[k])
        m.addConstr(transOut2_7_4 <= Economy_Req_7_4[k])
        m.addConstr(transOut1_7_5 <= TimeSensitive_Req_7_5[k])
        m.addConstr(transOut2_7_5 <= Economy_Req_7_5[k])
        m.addConstr(transOut1_7_6 <= TimeSensitive_Req_7_6[k])
        m.addConstr(transOut2_7_6 <= Economy_Req_7_6[k])
        m.addConstr(transOut1_8_4 <= TimeSensitive_Req_8_4[k])
        m.addConstr(transOut2_8_4 <= Economy_Req_8_4[k])
        m.addConstr(transOut1_8_5 <= TimeSensitive_Req_8_5[k])
        m.addConstr(transOut2_8_5 <= Economy_Req_8_5[k])
        m.addConstr(transOut1_8_6 <= TimeSensitive_Req_8_6[k])
        m.addConstr(transOut2_8_6 <= Economy_Req_8_6[k])
        trash = c3_1 * (TimeSensitive_Req_SH[k]-transOut1) + c3_2 * (Economy_Req_SH[k]-transOut2)
        C6 += trash
    
    desertTotalBH = sum(forecast_1_4_K)+sum(forecast_1_5_K)+sum(forecast_1_6_K)+sum(forecast_2_4_K)+sum(forecast_2_5_K)+sum(forecast_2_6_K)+sum(forecast_3_4_K)+sum(forecast_3_5_K)+sum(forecast_3_6_K)-passengerTotalBH-cargoTotalBH
    desertTotalBS = sum(forecast_1_7_K)+sum(forecast_1_8_K)+sum(forecast_2_7_K)+sum(forecast_2_8_K)+sum(forecast_3_7_K)+sum(forecast_3_8_K)-passengerTotalBS-cargoTotalBS
    desertTotalHB = sum(forecast_4_1_K)+sum(forecast_4_2_K)+sum(forecast_4_3_K)+sum(forecast_5_1_K)+sum(forecast_5_2_K)+sum(forecast_5_3_K)+sum(forecast_6_1_K)+sum(forecast_6_2_K)+sum(forecast_6_3_K)-passengerTotalHB-cargoTotalHB
    desertTotalHS = sum(forecast_4_7_K)+sum(forecast_4_8_K)+sum(forecast_5_7_K)+sum(forecast_5_8_K)+sum(forecast_6_7_K)+sum(forecast_6_8_K)-passengerTotalHS-cargoTotalHS
    desertTotalSB = sum(forecast_7_1_K)+sum(forecast_7_2_K)+sum(forecast_7_3_K)+sum(forecast_8_1_K)+sum(forecast_8_2_K)+sum(forecast_8_3_K)-passengerTotalSB-cargoTotalSB
    desertTotalSH = sum(forecast_7_4_K)+sum(forecast_7_5_K)+sum(forecast_7_6_K)+sum(forecast_8_4_K)+sum(forecast_8_5_K)+sum(forecast_8_6_K)-passengerTotalSH-cargoTotalSH
                      
    # 本周期内无法运完的货物的仓储成本和预期逾期成本
    left_1_4 = 0
    left_1_5 = 0
    left_1_6 = 0
    left_1_7 = 0
    left_1_8 = 0
    left_2_4 = 0
    left_2_5 = 0
    left_2_6 = 0
    left_2_7 = 0
    left_2_8 = 0
    left_3_4 = 0
    left_3_5 = 0
    left_3_6 = 0
    left_3_7 = 0
    left_3_8 = 0
    left_4_1 = 0
    left_4_2 = 0
    left_4_3 = 0
    left_4_7 = 0
    left_4_8 = 0
    left_5_1 = 0
    left_5_2 = 0
    left_5_3 = 0
    left_5_7 = 0
    left_5_8 = 0
    left_6_1 = 0
    left_6_2 = 0
    left_6_3 = 0
    left_6_7 = 0
    left_6_8 = 0
    left_7_1 = 0
    left_7_2 = 0
    left_7_3 = 0
    left_7_4 = 0
    left_7_5 = 0
    left_7_6 = 0
    left_8_1 = 0
    left_8_2 = 0
    left_8_3 = 0
    left_8_4 = 0
    left_8_5 = 0
    left_8_6 = 0                 
    for i in range(last_BH, 24 * K):
        left_1_4 += forecast_1_4_K[i]
        left_1_5 += forecast_1_5_K[i]
        left_1_6 += forecast_1_6_K[i]
        left_2_4 += forecast_2_4_K[i]
        left_2_5 += forecast_2_5_K[i]
        left_2_6 += forecast_2_6_K[i]
        left_3_4 += forecast_3_4_K[i]
        left_3_5 += forecast_3_5_K[i]
        left_3_6 += forecast_3_6_K[i]      
        C1 += c1 * (forecast_1_4_K[i]+forecast_1_5_K[i]+forecast_1_6_K[i]+forecast_2_4_K[i]+forecast_2_5_K[i]+forecast_2_6_K[i]+forecast_3_4_K[i]+forecast_3_5_K[i]+forecast_3_6_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_BH[i] + c2_2 * Economy_Req_BH[i]) * (24 * K - i + first_BH - 1) * (1 - (i + 1) / (24 * K))
    for i in range(last_BS, 24 * K):
        left_1_7 += forecast_1_7_K[i]
        left_1_8 += forecast_1_8_K[i]
        left_2_7 += forecast_2_7_K[i]
        left_2_8 += forecast_2_8_K[i]
        left_3_7 += forecast_3_7_K[i]
        left_3_8 += forecast_3_8_K[i]
        C1 += c1 * (forecast_1_7_K[i]+forecast_1_8_K[i]+forecast_2_7_K[i]+forecast_2_8_K[i]+forecast_3_7_K[i]+forecast_3_8_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_BS[i] + c2_2 * Economy_Req_BS[i]) * (24 * K - i + first_BS - 1) * (1 - (i + 1) / (24 * K))  
    for i in range(last_HB, 24 * K):
        left_4_1 += forecast_4_1_K[i]
        left_4_2 += forecast_4_2_K[i]
        left_4_3 += forecast_4_3_K[i]
        left_5_1 += forecast_5_1_K[i]
        left_5_2 += forecast_5_2_K[i]
        left_5_3 += forecast_5_3_K[i]
        left_6_1 += forecast_6_1_K[i]
        left_6_2 += forecast_6_2_K[i]
        left_6_3 += forecast_6_3_K[i]
        C1 += c1 * (forecast_4_1_K[i]+forecast_4_2_K[i]+forecast_4_3_K[i]+forecast_5_1_K[i]+forecast_5_2_K[i]+forecast_5_3_K[i]+forecast_6_1_K[i]+forecast_6_2_K[i]+forecast_6_3_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_HB[i] + c2_2 * Economy_Req_HB[i]) * (24 * K - i + first_HB - 1) * (1 - (i + 1) / (24 * K))
    for i in range(last_HS, 24 * K):
        left_4_7 += forecast_4_7_K[i]
        left_4_8 += forecast_4_8_K[i]
        left_5_7 += forecast_5_7_K[i]
        left_5_8 += forecast_5_8_K[i]
        left_6_7 += forecast_6_7_K[i]
        left_6_8 += forecast_6_8_K[i]  
        C1 += c1 * (forecast_4_7_K[i]+forecast_4_8_K[i]+forecast_5_7_K[i]+forecast_5_8_K[i]+forecast_6_7_K[i]+forecast_6_8_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_HS[i] + c2_2 * Economy_Req_HS[i]) * (24 * K - i + first_HS - 1) * (1 - (i + 1) / (24 * K))
    for i in range(last_SB, 24 * K):
        left_7_1 += forecast_7_1_K[i]
        left_7_2 += forecast_7_2_K[i]
        left_7_3 += forecast_7_3_K[i]
        left_8_1 += forecast_8_1_K[i]
        left_8_2 += forecast_8_2_K[i]
        left_8_3 += forecast_8_3_K[i]   
        C1 += c1 * (forecast_7_1_K[i]+forecast_7_2_K[i]+forecast_7_3_K[i]+forecast_8_1_K[i]+forecast_8_2_K[i]+forecast_8_3_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_SB[i] + c2_2 * Economy_Req_SB[i]) * (24 * K - i + first_SB - 1) * (1 - (i + 1) / (24 * K))
    for i in range(last_SH, 24 * K):
        left_7_4 += forecast_7_4_K[i]
        left_7_5 += forecast_7_5_K[i]
        left_7_6 += forecast_7_6_K[i]
        left_8_4 += forecast_8_4_K[i]
        left_8_5 += forecast_8_5_K[i]
        left_8_6 += forecast_8_6_K[i]
        C1 += c1 * (forecast_7_4_K[i]+forecast_7_5_K[i]+forecast_7_6_K[i]+forecast_8_4_K[i]+forecast_8_5_K[i]+forecast_8_6_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_SH[i] + c2_2 * Economy_Req_SH[i]) * (24 * K - i + first_SH - 1) * (1 - (i + 1) / (24 * K))       
                
    left_to_leave_1_4.append(left_1_4)
    left_to_leave_1_5.append(left_1_5)
    left_to_leave_1_6.append(left_1_6)
    left_to_leave_1_7.append(left_1_7)
    left_to_leave_1_8.append(left_1_8)
    left_to_leave_2_4.append(left_2_4)
    left_to_leave_2_5.append(left_2_5)
    left_to_leave_2_6.append(left_2_6)
    left_to_leave_2_7.append(left_2_7)
    left_to_leave_2_8.append(left_2_8)
    left_to_leave_3_4.append(left_3_4)
    left_to_leave_3_5.append(left_3_5)
    left_to_leave_3_6.append(left_3_6)
    left_to_leave_3_7.append(left_3_7)
    left_to_leave_3_8.append(left_3_8)
    left_to_leave_4_1.append(left_4_1)
    left_to_leave_4_2.append(left_4_2)
    left_to_leave_4_3.append(left_4_3)
    left_to_leave_4_7.append(left_4_7)
    left_to_leave_4_8.append(left_4_8)
    left_to_leave_5_1.append(left_5_1)
    left_to_leave_5_2.append(left_5_2)
    left_to_leave_5_3.append(left_5_3)
    left_to_leave_5_7.append(left_5_7)
    left_to_leave_5_8.append(left_5_8)
    left_to_leave_6_1.append(left_6_1)
    left_to_leave_6_2.append(left_6_2)
    left_to_leave_6_3.append(left_6_3)
    left_to_leave_6_7.append(left_6_7)
    left_to_leave_6_8.append(left_6_8)
    left_to_leave_7_1.append(left_7_1)
    left_to_leave_7_2.append(left_7_2)
    left_to_leave_7_3.append(left_7_3)
    left_to_leave_7_4.append(left_7_4)
    left_to_leave_7_5.append(left_7_5)
    left_to_leave_7_6.append(left_7_6)
    left_to_leave_8_1.append(left_8_1)
    left_to_leave_8_2.append(left_8_2)
    left_to_leave_8_3.append(left_8_3)
    left_to_leave_8_4.append(left_8_4)
    left_to_leave_8_5.append(left_8_5)
    left_to_leave_8_6.append(left_8_6)
                      
    # 计算每个航段上客机和货机运输的量
    passengerTrans_BH = 0
    passengerTrans_BS = 0
    passengerTrans_HB = 0
    passengerTrans_HS = 0
    passengerTrans_SB = 0
    passengerTrans_SH = 0
    cargoTrans = 0
    cargoTrans_BH = 0
    cargoTrans_HS = 0
    cargoTrans_SB = 0
    for w in range(1,3):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                passengerTrans_BH += (x_1_4[i,j,w]+x_1_5[i,j,w]+x_1_6[i,j,w]+x_2_4[i,j,w]+x_2_5[i,j,w]+x_2_6[i,j,w]+x_3_4[i,j,w]+x_3_5[i,j,w]+x_3_6[i,j,w])
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                passengerTrans_BS += (x_1_7[i,j,w]+x_1_8[i,j,w]+x_2_7[i,j,w]+x_2_8[i,j,w]+x_3_7[i,j,w]+x_3_8[i,j,w])
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                passengerTrans_HB += (x_4_1[i,j,w]+x_4_2[i,j,w]+x_4_3[i,j,w]+x_5_1[i,j,w]+x_5_2[i,j,w]+x_5_3[i,j,w]+x_6_1[i,j,w]+x_6_2[i,j,w]+x_6_3[i,j,w])
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                passengerTrans_HS += (x_4_7[i,j,w]+x_4_8[i,j,w]+x_5_7[i,j,w]+x_5_8[i,j,w]+x_6_7[i,j,w]+x_6_8[i,j,w])
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                passengerTrans_SB += (x_7_1[i,j,w]+x_7_2[i,j,w]+x_7_3[i,j,w]+x_8_1[i,j,w]+x_8_2[i,j,w]+x_8_3[i,j,w])
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                passengerTrans_SH += (x_7_4[i,j,w]+x_7_5[i,j,w]+x_7_6[i,j,w]+x_8_4[i,j,w]+x_8_5[i,j,w]+x_8_6[i,j,w])
        for j in range(N*K):
            for i in range(cargo_BH[j]):
                cargoTrans += (y_1_4[i,j,w]+y_1_5[i,j,w]+y_1_6[i,j,w]+y_2_4[i,j,w]+y_2_5[i,j,w]+y_2_6[i,j,w]+y_3_4[i,j,w]+y_3_5[i,j,w]+y_3_6[i,j,w]+y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w])
                cargoTrans_BH += (y_1_4[i,j,w]+y_1_5[i,j,w]+y_1_6[i,j,w]+y_2_4[i,j,w]+y_2_5[i,j,w]+y_2_6[i,j,w]+y_3_4[i,j,w]+y_3_5[i,j,w]+y_3_6[i,j,w]+y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w])
                cargoTrans_HS += (y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w])
            for i in range(cargo_HS[j]):
                cargoTrans += (y_4_7[i,j,w]+y_4_8[i,j,w]+y_5_7[i,j,w]+y_5_8[i,j,w]+y_6_7[i,j,w]+y_6_8[i,j,w]+y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w])
                cargoTrans_HS += (y_4_7[i,j,w]+y_4_8[i,j,w]+y_5_7[i,j,w]+y_5_8[i,j,w]+y_6_7[i,j,w]+y_6_8[i,j,w]+y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w])
                cargoTrans_SB += (y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w])
            for i in range(cargo_SB[j]):
                cargoTrans += (y_7_1[i,j,w]+y_7_2[i,j,w]+y_7_3[i,j,w]+y_8_1[i,j,w]+y_8_2[i,j,w]+y_8_3[i,j,w]+y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w])
                cargoTrans_SB += (y_7_1[i,j,w]+y_7_2[i,j,w]+y_7_3[i,j,w]+y_8_1[i,j,w]+y_8_2[i,j,w]+y_8_3[i,j,w]+y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w])
                cargoTrans_BH += (y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w])
    passengerTrans = passengerTrans_BH+passengerTrans_BS+passengerTrans_HB+passengerTrans_HS+passengerTrans_SB+passengerTrans_SH
    
    # 只有客机运输成本是分段计价的
    zBH = {}
    zBS = {}
    zHB = {}
    zHS = {}
    zSB = {}
    zSH = {}
    A_BH = m.addVars(range(len(FR_BH)), vtype=GRB.BINARY)
    A_BS = m.addVars(range(len(FR_BS)), vtype=GRB.BINARY)
    A_HB = m.addVars(range(len(FR_HB)), vtype=GRB.BINARY)
    A_HS = m.addVars(range(len(FR_HS)), vtype=GRB.BINARY)
    A_SB = m.addVars(range(len(FR_SB)), vtype=GRB.BINARY)
    A_SH = m.addVars(range(len(FR_SH)), vtype=GRB.BINARY)
    
    for r in range(len(FR_BH)):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                zBH[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                zBS[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                zHB[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                zHS[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                zSB[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                zSH[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                
    m.addConstr(gp.quicksum(A_BH[r] for r in range(len(FR_BH))) == 1)
    m.addConstr(gp.quicksum(A_BS[r] for r in range(len(FR_BS))) == 1)
    m.addConstr(gp.quicksum(A_HB[r] for r in range(len(FR_HB))) == 1)
    m.addConstr(gp.quicksum(A_HS[r] for r in range(len(FR_HS))) == 1)
    m.addConstr(gp.quicksum(A_SB[r] for r in range(len(FR_SB))) == 1)
    m.addConstr(gp.quicksum(A_SH[r] for r in range(len(FR_SH))) == 1)
    
    for r in range(len(FR_BH)):
        for j in range(len(passengerTime_BH)):
            m.addConstr(gp.quicksum(x_1_4[i,j,w]+x_1_5[i,j,w]+x_1_6[i,j,w]+x_2_4[i,j,w]+x_2_5[i,j,w]+x_2_6[i,j,w]+x_3_4[i,j,w]+x_3_5[i,j,w]+x_3_6[i,j,w] for w in range(1,3) for i in range(passengerTime_BH[j])) >= lBH[r] * A_BH[r])
        for j in range(len(passengerTime_BS)):
            m.addConstr(gp.quicksum(x_1_7[i,j,w]+x_1_8[i,j,w]+x_2_7[i,j,w]+x_2_8[i,j,w]+x_3_7[i,j,w]+x_3_8[i,j,w] for w in range(1,3) for i in range(passengerTime_BS[j])) >= lBS[r] * A_BS[r])
        for j in range(len(passengerTime_HB)):
            m.addConstr(gp.quicksum(x_4_1[i,j,w]+x_4_2[i,j,w]+x_4_3[i,j,w]+x_5_1[i,j,w]+x_5_2[i,j,w]+x_5_3[i,j,w]+x_6_1[i,j,w]+x_6_2[i,j,w]+x_6_3[i,j,w] for w in range(1,3) for i in range(passengerTime_HB[j])) >= lHB[r] * A_HB[r])
        for j in range(len(passengerTime_HS)):
            m.addConstr(gp.quicksum(x_4_7[i,j,w]+x_4_8[i,j,w]+x_5_7[i,j,w]+x_5_8[i,j,w]+x_6_7[i,j,w]+x_6_8[i,j,w] for w in range(1,3) for i in range(passengerTime_HS[j])) >= lHS[r] * A_HS[r])
        for j in range(len(passengerTime_SB)):
            m.addConstr(gp.quicksum(x_7_1[i,j,w]+x_7_2[i,j,w]+x_7_3[i,j,w]+x_8_1[i,j,w]+x_8_2[i,j,w]+x_8_3[i,j,w] for w in range(1,3) for i in range(passengerTime_SB[j])) >= lSB[r] * A_SB[r])
        for j in range(len(passengerTime_SH)):
            m.addConstr(gp.quicksum(x_7_4[i,j,w]+x_7_5[i,j,w]+x_7_6[i,j,w]+x_8_4[i,j,w]+x_8_5[i,j,w]+x_8_6[i,j,w] for w in range(1,3) for i in range(passengerTime_SH[j])) >= lSH[r] * A_SH[r])
        
    for r in range(len(FR_BH)):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                m.addConstr(zBH[i,j,r] <= A_BH[r] * forecast_BH_K[i])
                m.addConstr(zBH[i,j,r] <= (x_1_4[i,j,1]+x_1_5[i,j,1]+x_1_6[i,j,1]+x_2_4[i,j,1]+x_2_5[i,j,1]+x_2_6[i,j,1]+x_3_4[i,j,1]+x_3_5[i,j,1]+x_3_6[i,j,1]+x_1_4[i,j,2]+x_1_5[i,j,2]+x_1_6[i,j,2]+x_2_4[i,j,2]+x_2_5[i,j,2]+x_2_6[i,j,2]+x_3_4[i,j,2]+x_3_5[i,j,2]+x_3_6[i,j,2]))
                m.addConstr(zBH[i,j,r] >= (x_1_4[i,j,1]+x_1_5[i,j,1]+x_1_6[i,j,1]+x_2_4[i,j,1]+x_2_5[i,j,1]+x_2_6[i,j,1]+x_3_4[i,j,1]+x_3_5[i,j,1]+x_3_6[i,j,1]+x_1_4[i,j,2]+x_1_5[i,j,2]+x_1_6[i,j,2]+x_2_4[i,j,2]+x_2_5[i,j,2]+x_2_6[i,j,2]+x_3_4[i,j,2]+x_3_5[i,j,2]+x_3_6[i,j,2] - forecast_BH_K[i] * (1 - A_BH[r])))
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                m.addConstr(zBS[i,j,r] <= A_BS[r] * forecast_BS_K[i])
                m.addConstr(zBS[i,j,r] <= (x_1_7[i,j,1]+x_1_8[i,j,1]+x_2_7[i,j,1]+x_2_8[i,j,1]+x_3_7[i,j,1]+x_3_8[i,j,1]+x_1_7[i,j,2]+x_1_8[i,j,2]+x_2_7[i,j,2]+x_2_8[i,j,2]+x_3_7[i,j,2]+x_3_8[i,j,2]))
                m.addConstr(zBS[i,j,r] >= (x_1_7[i,j,1]+x_1_8[i,j,1]+x_2_7[i,j,1]+x_2_8[i,j,1]+x_3_7[i,j,1]+x_3_8[i,j,1]+x_1_7[i,j,2]+x_1_8[i,j,2]+x_2_7[i,j,2]+x_2_8[i,j,2]+x_3_7[i,j,2]+x_3_8[i,j,2] - forecast_BS_K[i] * (1 - A_BS[r])))
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                m.addConstr(zHB[i,j,r] <= A_HB[r] * forecast_HB_K[i])
                m.addConstr(zHB[i,j,r] <= (x_4_1[i,j,1]+x_4_2[i,j,1]+x_4_3[i,j,1]+x_5_1[i,j,1]+x_5_2[i,j,1]+x_5_3[i,j,1]+x_6_1[i,j,1]+x_6_2[i,j,1]+x_6_3[i,j,1]+x_4_1[i,j,2]+x_4_2[i,j,2]+x_4_3[i,j,2]+x_5_1[i,j,2]+x_5_2[i,j,2]+x_5_3[i,j,2]+x_6_1[i,j,2]+x_6_2[i,j,2]+x_6_3[i,j,2]))
                m.addConstr(zHB[i,j,r] >= (x_4_1[i,j,1]+x_4_2[i,j,1]+x_4_3[i,j,1]+x_5_1[i,j,1]+x_5_2[i,j,1]+x_5_3[i,j,1]+x_6_1[i,j,1]+x_6_2[i,j,1]+x_6_3[i,j,1]+x_4_1[i,j,2]+x_4_2[i,j,2]+x_4_3[i,j,2]+x_5_1[i,j,2]+x_5_2[i,j,2]+x_5_3[i,j,2]+x_6_1[i,j,2]+x_6_2[i,j,2]+x_6_3[i,j,2] - forecast_HB_K[i] * (1 - A_HB[r])))
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                m.addConstr(zHS[i,j,r] <= A_HS[r] * forecast_HS_K[i])
                m.addConstr(zHS[i,j,r] <= (x_4_7[i,j,1]+x_4_8[i,j,1]+x_5_7[i,j,1]+x_5_8[i,j,1]+x_6_7[i,j,1]+x_6_8[i,j,1]+x_4_7[i,j,2]+x_4_8[i,j,2]+x_5_7[i,j,2]+x_5_8[i,j,2]+x_6_7[i,j,2]+x_6_8[i,j,2]))
                m.addConstr(zHS[i,j,r] >= (x_4_7[i,j,1]+x_4_8[i,j,1]+x_5_7[i,j,1]+x_5_8[i,j,1]+x_6_7[i,j,1]+x_6_8[i,j,1]+x_4_7[i,j,2]+x_4_8[i,j,2]+x_5_7[i,j,2]+x_5_8[i,j,2]+x_6_7[i,j,2]+x_6_8[i,j,2] - forecast_HS_K[i] * (1 - A_HS[r])))
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                m.addConstr(zSB[i,j,r] <= A_BH[r] * forecast_SB_K[i])
                m.addConstr(zSB[i,j,r] <= (x_7_1[i,j,1]+x_7_2[i,j,1]+x_7_3[i,j,1]+x_8_1[i,j,1]+x_8_2[i,j,1]+x_8_3[i,j,1]+x_7_1[i,j,2]+x_7_2[i,j,2]+x_7_3[i,j,2]+x_8_1[i,j,2]+x_8_2[i,j,2]+x_8_3[i,j,2]))
                m.addConstr(zSB[i,j,r] >= (x_7_1[i,j,1]+x_7_2[i,j,1]+x_7_3[i,j,1]+x_8_1[i,j,1]+x_8_2[i,j,1]+x_8_3[i,j,1]+x_7_1[i,j,2]+x_7_2[i,j,2]+x_7_3[i,j,2]+x_8_1[i,j,2]+x_8_2[i,j,2]+x_8_3[i,j,2] - forecast_SB_K[i] * (1 - A_SB[r])))
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                m.addConstr(zSH[i,j,r] <= A_SH[r] * forecast_SH_K[i])
                m.addConstr(zSH[i,j,r] <= (x_7_4[i,j,1]+x_7_5[i,j,1]+x_7_6[i,j,1]+x_8_4[i,j,1]+x_8_5[i,j,1]+x_8_6[i,j,1]+x_7_4[i,j,2]+x_7_5[i,j,2]+x_7_6[i,j,2]+x_8_4[i,j,2]+x_8_5[i,j,2]+x_8_6[i,j,2]))
                m.addConstr(zSH[i,j,r] >= (x_7_4[i,j,1]+x_7_5[i,j,1]+x_7_6[i,j,1]+x_8_4[i,j,1]+x_8_5[i,j,1]+x_8_6[i,j,1]+x_7_4[i,j,2]+x_7_5[i,j,2]+x_7_6[i,j,2]+x_8_4[i,j,2]+x_8_5[i,j,2]+x_8_6[i,j,2] - forecast_SH_K[i] * (1 - A_SH[r])))
                
    for r in range(len(FR_BH)):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                C5 += FR_BH[r] * zBH[i,j,r]
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                C5 += FR_BS[r] * zBS[i,j,r]
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                C5 += FR_HB[r] * zHB[i,j,r]
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                C5 += FR_HS[r] * zHS[i,j,r]
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                C5 += FR_SB[r] * zSB[i,j,r]
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                C5 += FR_SH[r] * zSH[i,j,r]
    
    cargo_operating_perHour = cargo_per + L * OilPrice
    
    nBH = {}
    nHS = {}
    nSB = {}
    M = 0.0001
    for j in range(N*K):
        nBH[j] = m.addVar(vtype=GRB.BINARY)
        nHS[j] = m.addVar(vtype=GRB.BINARY)
        nSB[j] = m.addVar(vtype=GRB.BINARY)
        
    for j in range(N*K):
        m.addConstr(nBH[j] >= M * gp.quicksum((y_1_4[i,j,w]+y_1_5[i,j,w]+y_1_6[i,j,w]+y_2_4[i,j,w]+y_2_5[i,j,w]+y_2_6[i,j,w]+y_3_4[i,j,w]+y_3_5[i,j,w]+y_3_6[i,j,w]+y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w]) for i in range(cargo_BH[j]) for w in range(1,3)) + M * gp.quicksum(y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w] for i in range(cargo_SB[j]) for w in range(1,3)))
        m.addConstr(nHS[j] >= M * gp.quicksum((y_4_7[i,j,w]+y_4_8[i,j,w]+y_5_7[i,j,w]+y_5_8[i,j,w]+y_6_7[i,j,w]+y_6_8[i,j,w]+y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w]) for i in range(cargo_HS[j]) for w in range(1,3)) + M * gp.quicksum(y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w] for i in range(cargo_BH[j]) for w in range(1,3)))
        m.addConstr(nSB[j] >= M * gp.quicksum((y_7_1[i,j,w]+y_7_2[i,j,w]+y_7_3[i,j,w]+y_8_1[i,j,w]+y_8_2[i,j,w]+y_8_3[i,j,w]+y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w]) for i in range(cargo_SB[j]) for w in range(1,3)) + M * gp.quicksum(y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w] for i in range(cargo_HS[j]) for w in range(1,3)))
        
    cargoUsed_BH = 0
    cargoUsed_HS = 0
    cargoUsed_SB = 0
    for j in range(N*K):
        cargoUsed_BH += nBH[j]
        cargoUsed_HS += nHS[j]
        cargoUsed_SB += nSB[j]
        C7 += cargo_operating_perHour * (Tcargo_1*nBH[j]+Tcargo_2*nHS[j]+Tcargo_3*nSB[j])
    
    requi = sum(forecast_BH_K)+sum(forecast_BS_K)+sum(forecast_HB_K)+sum(forecast_HS_K)+sum(forecast_SB_K)+sum(forecast_SH_K)
    unTrans = requi - transported_1 - transported_2
    untransprop = unTrans / requi
    
    m.setObjective(theta1 * (C1 + C2 + C3 + C4 + C5 + C6 + C7) + theta2 * untransprop, GRB.MINIMIZE)
    m.optimize()
    
    cargo_operating = cargo_operating_perHour * (Tcargo_1+Tcargo_2+Tcargo_3) * max(cargoUsed_BH.getValue(),cargoUsed_HS.getValue(),cargoUsed_SB.getValue())
    
    
    
    result1 = C1+C2+C3.getValue()+C4.getValue()+C5.getValue()+C6.getValue()+cargo_operating
    result2 = C3.getValue()+C2
    result3 = C4.getValue()+C1
    result4 = C5.getValue()
    result5 = cargo_operating
    result6 = transported_1.getValue()
    result7 = transported_2.getValue()
    result8 = unTrans.getValue()
    result9 = requi
    result10 = passengerTrans.getValue()
    result11 = cargoTrans.getValue()
    result12 = C6.getValue()
    result13 = passengerTrans_BH.getValue()
    result14 = passengerTrans_BS.getValue()
    result15 = passengerTrans_HB.getValue()
    result16 = passengerTrans_HS.getValue()
    result17 = passengerTrans_SB.getValue()
    result18 = passengerTrans_SH.getValue()
    result19 = cargoTrans_BH.getValue()
    result20 = cargoTrans_HS.getValue()
    result21 = cargoTrans_SB.getValue()
    result22 = max(cargoUsed_BH.getValue(),cargoUsed_HS.getValue(),cargoUsed_SB.getValue())
    output1 = passengerTotalBH.getValue()
    output2 = passengerTotalBS.getValue()
    output3 = passengerTotalHB.getValue()
    output4 = passengerTotalHS.getValue()
    output5 = passengerTotalSB.getValue()
    output6 = passengerTotalSH.getValue()
    output7 = cargoTotalBH.getValue()
    output8 = cargoTotalBS.getValue()
    output9 = cargoTotalHB.getValue()
    output10 = cargoTotalHS.getValue()
    output11 = cargoTotalSB.getValue()
    output12 = cargoTotalSH.getValue()
    output13 = desertTotalBH.getValue()
    output14 = desertTotalBS.getValue()
    output15 = desertTotalHB.getValue()
    output16 = desertTotalHS.getValue()
    output17 = desertTotalSB.getValue()
    output18 = desertTotalSH.getValue()
    
    return result1,result2,result3,result4,result5,result6,result7,result8,result9,result10,result11,result12,result13,result14,result15,result16,result17,result18,result19,result20,result21,result22,output1,output2,output3,output4,output5,output6,output7,output8,output9,output10,output11,output12,output13,output14,output15,output16,output17,output18

def leftFunctionACTUAL(K):
    cargo_BH = []
    cargo_HS = []
    cargo_SB = []
        
    for i in range(K):
        cargo_BH_add = [x + 24 * i for x in cargo_BH_unit]
        cargo_HS_add = [x + 24 * i for x in cargo_HS_unit]
        cargo_SB_add = [x + 24 * i for x in cargo_SB_unit]
        for j in range(N):
            cargo_BH.append(cargo_BH_add[j])
            cargo_HS.append(cargo_HS_add[j])
            cargo_SB.append(cargo_SB_add[j])
    del cargo_BH_add,cargo_HS_add,cargo_SB_add
    BH_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_BH)
    BS_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_BS)
    HB_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_HB)
    HS_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_HS)
    SB_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_SB)
    SH_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_SH)
    flightTime_BH = passenger_flight_times_BH * K
    flightTime_BS = passenger_flight_times_BS * K
    flightTime_HB = passenger_flight_times_HB * K
    flightTime_HS = passenger_flight_times_HS * K
    flightTime_SB = passenger_flight_times_SB * K
    flightTime_SH = passenger_flight_times_SH * K
    first_flight_BH = min(min(BH_passengerTimeTable),min(cargo_BH))
    last_flight_BH = max(max(BH_passengerTimeTable),max(cargo_BH))
    first_flight_HS = min(min(HS_passengerTimeTable),min(cargo_HS))
    last_flight_HS = max(max(HS_passengerTimeTable),max(cargo_HS))
    first_flight_SB = min(min(SB_passengerTimeTable),min(cargo_SB))
    last_flight_SB = max(max(SB_passengerTimeTable),max(cargo_SB))
    first_flight_BS = min(BS_passengerTimeTable)
    last_flight_BS = max(BS_passengerTimeTable)
    first_flight_SH = min(SH_passengerTimeTable)
    last_flight_SH = max(SH_passengerTimeTable)
    first_flight_HB = min(HB_passengerTimeTable)
    last_flight_HB = max(HB_passengerTimeTable)
    BHcant_transport_passenger = passCantTransCal(BH_passengerTimeTable)
    BScant_transport_passenger = passCantTransCal(BS_passengerTimeTable)
    HBcant_transport_passenger = passCantTransCal(HB_passengerTimeTable)
    HScant_transport_passenger = passCantTransCal(HS_passengerTimeTable)
    SBcant_transport_passenger = passCantTransCal(SB_passengerTimeTable)
    SHcant_transport_passenger = passCantTransCal(SH_passengerTimeTable)
    BHcant_transport_cargo = max(cargo_BH) + 1
    HScant_transport_cargo = max(cargo_HS) + 1
    SBcant_transport_cargo = max(cargo_SB) + 1
    first_BH = process_value(first_flight_BH)
    first_BS = process_value(first_flight_BS)
    first_HB = process_value(first_flight_HB)
    first_HS = process_value(first_flight_HS)
    first_SB = process_value(first_flight_SB)
    first_SH = process_value(first_flight_SH)
    last_BH = process_value(last_flight_BH)
    last_BS = process_value(last_flight_BS)
    last_HB = process_value(last_flight_HB)
    last_HS = process_value(last_flight_HS)
    last_SB = process_value(last_flight_SB)
    last_SH = process_value(last_flight_SH)
    passengerTime_BH = passengerTimeCal(BH_passengerTimeTable)
    passengerTime_BS = passengerTimeCal(BS_passengerTimeTable)
    passengerTime_HB = passengerTimeCal(HB_passengerTimeTable)
    passengerTime_HS = passengerTimeCal(HS_passengerTimeTable)
    passengerTime_SB = passengerTimeCal(SB_passengerTimeTable)
    passengerTime_SH = passengerTimeCal(SH_passengerTimeTable)

    C1 = 0 # C1为未运完的仓储成本，初始值为0
    C2 = 0 # C2为未运完的逾期延迟成本，初始值为0
    C3 = 0 # C3为能运完的逾期延迟成本，初始值为0
    C4 = 0 # C4为能运完的仓储成本，初始值为0
    C5 = 0 # C5为运输成本，初始值为0
    C6 = 0 # C6为丢弃成本，初始值为0
    C7 = 0
    transported_1 = 0
    transported_2 = 0
    cargoUsed = 0
    
    forecast_1_4_K = TimeSplit(forecast_1_4)
    forecast_1_5_K = TimeSplit(forecast_1_5)
    forecast_1_6_K = TimeSplit(forecast_1_6)
    forecast_1_7_K = TimeSplit(forecast_1_7)
    forecast_1_8_K = TimeSplit(forecast_1_8)
    forecast_2_4_K = TimeSplit(forecast_2_4)
    forecast_2_5_K = TimeSplit(forecast_2_5)
    forecast_2_6_K = TimeSplit(forecast_2_6)
    forecast_2_7_K = TimeSplit(forecast_2_7)
    forecast_2_8_K = TimeSplit(forecast_2_8)
    forecast_3_4_K = TimeSplit(forecast_3_4)
    forecast_3_5_K = TimeSplit(forecast_3_5)
    forecast_3_6_K = TimeSplit(forecast_3_6)
    forecast_3_7_K = TimeSplit(forecast_3_7)
    forecast_3_8_K = TimeSplit(forecast_3_8)
    forecast_4_1_K = TimeSplit(forecast_4_1)
    forecast_4_2_K = TimeSplit(forecast_4_2)
    forecast_4_3_K = TimeSplit(forecast_4_3)
    forecast_4_7_K = TimeSplit(forecast_4_7)
    forecast_4_8_K = TimeSplit(forecast_4_8)
    forecast_5_1_K = TimeSplit(forecast_5_1)
    forecast_5_2_K = TimeSplit(forecast_5_2)
    forecast_5_3_K = TimeSplit(forecast_5_3)
    forecast_5_7_K = TimeSplit(forecast_5_7)
    forecast_5_8_K = TimeSplit(forecast_5_8)
    forecast_6_1_K = TimeSplit(forecast_6_1)
    forecast_6_2_K = TimeSplit(forecast_6_2)
    forecast_6_3_K = TimeSplit(forecast_6_3)
    forecast_6_7_K = TimeSplit(forecast_6_7)
    forecast_6_8_K = TimeSplit(forecast_6_8)
    forecast_7_1_K = TimeSplit(forecast_7_1)
    forecast_7_2_K = TimeSplit(forecast_7_2)
    forecast_7_3_K = TimeSplit(forecast_7_3)
    forecast_7_4_K = TimeSplit(forecast_7_4)
    forecast_7_5_K = TimeSplit(forecast_7_5)
    forecast_7_6_K = TimeSplit(forecast_7_6)
    forecast_8_1_K = TimeSplit(forecast_8_1)
    forecast_8_2_K = TimeSplit(forecast_8_2)
    forecast_8_3_K = TimeSplit(forecast_8_3)
    forecast_8_4_K = TimeSplit(forecast_8_4)
    forecast_8_5_K = TimeSplit(forecast_8_5)
    forecast_8_6_K = TimeSplit(forecast_8_6)
    
    forecast_1_4_K[0] += left_to_leave_1_4[-1]
    forecast_1_5_K[0] += left_to_leave_1_5[-1]
    forecast_1_6_K[0] += left_to_leave_1_6[-1]
    forecast_1_7_K[0] += left_to_leave_1_7[-1]
    forecast_1_8_K[0] += left_to_leave_1_8[-1]
    forecast_2_4_K[0] += left_to_leave_2_4[-1]
    forecast_2_5_K[0] += left_to_leave_2_5[-1]
    forecast_2_6_K[0] += left_to_leave_2_6[-1]
    forecast_2_7_K[0] += left_to_leave_2_7[-1]
    forecast_2_8_K[0] += left_to_leave_2_8[-1]
    forecast_3_4_K[0] += left_to_leave_3_4[-1]
    forecast_3_5_K[0] += left_to_leave_3_5[-1]
    forecast_3_6_K[0] += left_to_leave_3_6[-1]
    forecast_3_7_K[0] += left_to_leave_3_7[-1]
    forecast_3_8_K[0] += left_to_leave_3_8[-1]
    forecast_4_1_K[0] += left_to_leave_4_1[-1]
    forecast_4_2_K[0] += left_to_leave_4_2[-1]
    forecast_4_3_K[0] += left_to_leave_4_3[-1]
    forecast_4_7_K[0] += left_to_leave_4_7[-1]
    forecast_4_8_K[0] += left_to_leave_4_8[-1]
    forecast_5_1_K[0] += left_to_leave_5_1[-1]
    forecast_5_2_K[0] += left_to_leave_5_2[-1]
    forecast_5_3_K[0] += left_to_leave_5_3[-1]
    forecast_5_7_K[0] += left_to_leave_5_7[-1]
    forecast_5_8_K[0] += left_to_leave_5_8[-1]
    forecast_6_1_K[0] += left_to_leave_6_1[-1]
    forecast_6_2_K[0] += left_to_leave_6_2[-1]
    forecast_6_3_K[0] += left_to_leave_6_3[-1]
    forecast_6_7_K[0] += left_to_leave_6_7[-1]
    forecast_6_8_K[0] += left_to_leave_6_8[-1]
    forecast_7_1_K[0] += left_to_leave_7_1[-1]
    forecast_7_2_K[0] += left_to_leave_7_2[-1]
    forecast_7_3_K[0] += left_to_leave_7_3[-1]
    forecast_7_4_K[0] += left_to_leave_7_4[-1]
    forecast_7_5_K[0] += left_to_leave_7_5[-1]
    forecast_7_6_K[0] += left_to_leave_7_6[-1]
    forecast_8_1_K[0] += left_to_leave_8_1[-1]
    forecast_8_2_K[0] += left_to_leave_8_2[-1]
    forecast_8_3_K[0] += left_to_leave_8_3[-1]
    forecast_8_4_K[0] += left_to_leave_8_4[-1]
    forecast_8_5_K[0] += left_to_leave_8_5[-1]
    forecast_8_6_K[0] += left_to_leave_8_6[-1]
    
    # 计算时效快递的需求
    TimeSensitive_Req_1_4 = [x * perc1 for x in forecast_1_4_K]
    TimeSensitive_Req_1_5 = [x * perc1 for x in forecast_1_5_K]
    TimeSensitive_Req_1_6 = [x * perc1 for x in forecast_1_6_K]
    TimeSensitive_Req_1_7 = [x * perc1 for x in forecast_1_7_K]
    TimeSensitive_Req_1_8 = [x * perc1 for x in forecast_1_8_K]
    TimeSensitive_Req_2_4 = [x * perc1 for x in forecast_2_4_K]
    TimeSensitive_Req_2_5 = [x * perc1 for x in forecast_2_5_K]
    TimeSensitive_Req_2_6 = [x * perc1 for x in forecast_2_6_K]
    TimeSensitive_Req_2_7 = [x * perc1 for x in forecast_2_7_K]
    TimeSensitive_Req_2_8 = [x * perc1 for x in forecast_2_8_K]
    TimeSensitive_Req_3_4 = [x * perc1 for x in forecast_3_4_K]
    TimeSensitive_Req_3_5 = [x * perc1 for x in forecast_3_5_K]
    TimeSensitive_Req_3_6 = [x * perc1 for x in forecast_3_6_K]
    TimeSensitive_Req_3_7 = [x * perc1 for x in forecast_3_7_K]
    TimeSensitive_Req_3_8 = [x * perc1 for x in forecast_3_8_K]
    TimeSensitive_Req_4_1 = [x * perc1 for x in forecast_4_1_K]
    TimeSensitive_Req_4_2 = [x * perc1 for x in forecast_4_2_K]
    TimeSensitive_Req_4_3 = [x * perc1 for x in forecast_4_3_K]
    TimeSensitive_Req_4_7 = [x * perc1 for x in forecast_4_7_K]
    TimeSensitive_Req_4_8 = [x * perc1 for x in forecast_4_8_K]
    TimeSensitive_Req_5_1 = [x * perc1 for x in forecast_5_1_K]
    TimeSensitive_Req_5_2 = [x * perc1 for x in forecast_5_2_K]
    TimeSensitive_Req_5_3 = [x * perc1 for x in forecast_5_3_K]
    TimeSensitive_Req_5_7 = [x * perc1 for x in forecast_5_7_K]
    TimeSensitive_Req_5_8 = [x * perc1 for x in forecast_5_8_K]
    TimeSensitive_Req_6_1 = [x * perc1 for x in forecast_6_1_K]
    TimeSensitive_Req_6_2 = [x * perc1 for x in forecast_6_2_K]
    TimeSensitive_Req_6_3 = [x * perc1 for x in forecast_6_3_K]
    TimeSensitive_Req_6_7 = [x * perc1 for x in forecast_6_7_K]
    TimeSensitive_Req_6_8 = [x * perc1 for x in forecast_6_8_K]
    TimeSensitive_Req_7_1 = [x * perc1 for x in forecast_7_1_K]
    TimeSensitive_Req_7_2 = [x * perc1 for x in forecast_7_2_K]
    TimeSensitive_Req_7_3 = [x * perc1 for x in forecast_7_3_K]
    TimeSensitive_Req_7_4 = [x * perc1 for x in forecast_7_4_K]
    TimeSensitive_Req_7_5 = [x * perc1 for x in forecast_7_5_K]
    TimeSensitive_Req_7_6 = [x * perc1 for x in forecast_7_6_K]
    TimeSensitive_Req_8_1 = [x * perc1 for x in forecast_8_1_K]
    TimeSensitive_Req_8_2 = [x * perc1 for x in forecast_8_2_K]
    TimeSensitive_Req_8_3 = [x * perc1 for x in forecast_8_3_K]
    TimeSensitive_Req_8_4 = [x * perc1 for x in forecast_8_4_K]
    TimeSensitive_Req_8_5 = [x * perc1 for x in forecast_8_5_K]
    TimeSensitive_Req_8_6 = [x * perc1 for x in forecast_8_6_K]
    
    # 计算经济快递的需求
    Economy_Req_1_4 = [x * perc2 for x in forecast_1_4_K]
    Economy_Req_1_5 = [x * perc2 for x in forecast_1_5_K]
    Economy_Req_1_6 = [x * perc2 for x in forecast_1_6_K]
    Economy_Req_1_7 = [x * perc2 for x in forecast_1_7_K]
    Economy_Req_1_8 = [x * perc2 for x in forecast_1_8_K]
    Economy_Req_2_4 = [x * perc2 for x in forecast_2_4_K]
    Economy_Req_2_5 = [x * perc2 for x in forecast_2_5_K]
    Economy_Req_2_6 = [x * perc2 for x in forecast_2_6_K]
    Economy_Req_2_7 = [x * perc2 for x in forecast_2_7_K]
    Economy_Req_2_8 = [x * perc2 for x in forecast_2_8_K]
    Economy_Req_3_4 = [x * perc2 for x in forecast_3_4_K]
    Economy_Req_3_5 = [x * perc2 for x in forecast_3_5_K]
    Economy_Req_3_6 = [x * perc2 for x in forecast_3_6_K]
    Economy_Req_3_7 = [x * perc2 for x in forecast_3_7_K]
    Economy_Req_3_8 = [x * perc2 for x in forecast_3_8_K]
    Economy_Req_4_1 = [x * perc2 for x in forecast_4_1_K]
    Economy_Req_4_2 = [x * perc2 for x in forecast_4_2_K]
    Economy_Req_4_3 = [x * perc2 for x in forecast_4_3_K]
    Economy_Req_4_7 = [x * perc2 for x in forecast_4_7_K]
    Economy_Req_4_8 = [x * perc2 for x in forecast_4_8_K]
    Economy_Req_5_1 = [x * perc2 for x in forecast_5_1_K]
    Economy_Req_5_2 = [x * perc2 for x in forecast_5_2_K]
    Economy_Req_5_3 = [x * perc2 for x in forecast_5_3_K]
    Economy_Req_5_7 = [x * perc2 for x in forecast_5_7_K]
    Economy_Req_5_8 = [x * perc2 for x in forecast_5_8_K]
    Economy_Req_6_1 = [x * perc2 for x in forecast_6_1_K]
    Economy_Req_6_2 = [x * perc2 for x in forecast_6_2_K]
    Economy_Req_6_3 = [x * perc2 for x in forecast_6_3_K]
    Economy_Req_6_7 = [x * perc2 for x in forecast_6_7_K]
    Economy_Req_6_8 = [x * perc2 for x in forecast_6_8_K]
    Economy_Req_7_1 = [x * perc2 for x in forecast_7_1_K]
    Economy_Req_7_2 = [x * perc2 for x in forecast_7_2_K]
    Economy_Req_7_3 = [x * perc2 for x in forecast_7_3_K]
    Economy_Req_7_4 = [x * perc2 for x in forecast_7_4_K]
    Economy_Req_7_5 = [x * perc2 for x in forecast_7_5_K]
    Economy_Req_7_6 = [x * perc2 for x in forecast_7_6_K]
    Economy_Req_8_1 = [x * perc2 for x in forecast_8_1_K]
    Economy_Req_8_2 = [x * perc2 for x in forecast_8_2_K]
    Economy_Req_8_3 = [x * perc2 for x in forecast_8_3_K]
    Economy_Req_8_4 = [x * perc2 for x in forecast_8_4_K]
    Economy_Req_8_5 = [x * perc2 for x in forecast_8_5_K]
    Economy_Req_8_6 = [x * perc2 for x in forecast_8_6_K]
    
    # 主要计算模型
    m = gp.Model()
    m.Params.OutputFlag = 0
    m.Params.MIPGap = 0.005
    
    x_1_4 = {}
    x_1_5 = {}
    x_1_6 = {}
    x_1_7 = {}
    x_1_8 = {}
    x_2_4 = {}
    x_2_5 = {}
    x_2_6 = {}
    x_2_7 = {}
    x_2_8 = {}
    x_3_4 = {}
    x_3_5 = {}
    x_3_6 = {}
    x_3_7 = {}
    x_3_8 = {}
    x_4_1 = {}
    x_4_2 = {}
    x_4_3 = {}
    x_4_7 = {}
    x_4_8 = {}
    x_5_1 = {}
    x_5_2 = {}
    x_5_3 = {}
    x_5_7 = {}
    x_5_8 = {}
    x_6_1 = {}
    x_6_2 = {}
    x_6_3 = {}
    x_6_7 = {}
    x_6_8 = {}
    x_7_1 = {}
    x_7_2 = {}
    x_7_3 = {}
    x_7_4 = {}
    x_7_5 = {}
    x_7_6 = {}
    x_8_1 = {}
    x_8_2 = {}
    x_8_3 = {}
    x_8_4 = {}
    x_8_5 = {}
    x_8_6 = {}
    
    y_1_4 = {}
    y_1_5 = {}
    y_1_6 = {}
    y_1_7 = {}
    y_1_8 = {}
    y_2_4 = {}
    y_2_5 = {}
    y_2_6 = {}
    y_2_7 = {}
    y_2_8 = {}
    y_3_4 = {}
    y_3_5 = {}
    y_3_6 = {}
    y_3_7 = {}
    y_3_8 = {}
    y_4_1 = {}
    y_4_2 = {}
    y_4_3 = {}
    y_4_7 = {}
    y_4_8 = {}
    y_5_1 = {}
    y_5_2 = {}
    y_5_3 = {}
    y_5_7 = {}
    y_5_8 = {}
    y_6_1 = {}
    y_6_2 = {}
    y_6_3 = {}
    y_6_7 = {}
    y_6_8 = {}
    y_7_1 = {}
    y_7_2 = {}
    y_7_3 = {}
    y_7_4 = {}
    y_7_5 = {}
    y_7_6 = {}
    y_8_1 = {}
    y_8_2 = {}
    y_8_3 = {}
    y_8_4 = {}
    y_8_5 = {}
    y_8_6 = {}
    
    for w in range(1,3):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                x_1_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_1_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_1_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_2_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_2_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_2_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_3_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_3_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_3_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                x_1_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_1_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_2_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_2_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_3_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_3_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                x_4_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_4_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_4_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_5_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_5_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_5_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_6_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_6_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_6_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                x_4_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_4_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_5_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_5_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_6_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_6_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                x_7_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_7_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_7_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                x_7_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_7_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_7_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                
    for w in range(1,3):
        for j in range(N*K):
            for i in range(cargo_BH[j]):
                y_1_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_1_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_1_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_1_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_1_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_2_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_2_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_2_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_2_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_2_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_3_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_3_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_3_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_3_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_3_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
            for i in range(cargo_HS[j]):
                y_4_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_4_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_4_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_5_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_5_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_5_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_6_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_6_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_6_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_4_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_4_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_5_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_5_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_6_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_6_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
            for i in range(cargo_SB[j]):
                y_7_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_7_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_7_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_7_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_7_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_7_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                
    # 客机容量限制约束
    for j in range(len(passengerTime_BH)):
        cal1_BH = 0
        cal1_BH += gp.quicksum(x_1_4[i,j,w]+x_1_5[i,j,w]+x_1_6[i,j,w]+x_2_4[i,j,w]+x_2_5[i,j,w]+x_2_6[i,j,w]+x_3_4[i,j,w]+x_3_5[i,j,w]+x_3_6[i,j,w] for w in range(1,3) for i in range(passengerTime_BH[j]))
        m.addConstr(cal1_BH <= q)
    for j in range(len(passengerTime_BS)):
        cal1_BS = 0
        cal1_BS += gp.quicksum(x_1_7[i,j,w]+x_1_8[i,j,w]+x_2_7[i,j,w]+x_2_8[i,j,w]+x_3_7[i,j,w]+x_3_8[i,j,w] for w in range(1,3) for i in range(passengerTime_BS[j]))
        m.addConstr(cal1_BS <= q)
    for j in range(len(passengerTime_HB)):
        cal1_HB = 0
        cal1_HB += gp.quicksum(x_4_1[i,j,w]+x_4_2[i,j,w]+x_4_3[i,j,w]+x_5_1[i,j,w]+x_5_2[i,j,w]+x_5_3[i,j,w]+x_6_1[i,j,w]+x_6_2[i,j,w]+x_6_3[i,j,w] for w in range(1,3) for i in range(passengerTime_HB[j]))
        m.addConstr(cal1_HB <= q)
    for j in range(len(passengerTime_HS)):
        cal1_HS = 0
        cal1_HS += gp.quicksum(x_4_7[i,j,w]+x_4_8[i,j,w]+x_5_7[i,j,w]+x_5_8[i,j,w]+x_6_7[i,j,w]+x_6_8[i,j,w] for w in range(1,3) for i in range(passengerTime_HS[j]))
        m.addConstr(cal1_HS <= q)
    for j in range(len(passengerTime_SB)):
        cal1_SB = 0
        cal1_SB += gp.quicksum(x_7_1[i,j,w]+x_7_2[i,j,w]+x_7_3[i,j,w]+x_8_1[i,j,w]+x_8_2[i,j,w]+x_8_3[i,j,w] for w in range(1,3) for i in range(passengerTime_SB[j]))
        m.addConstr(cal1_SB <= q)
    for j in range(len(passengerTime_SH)):
        cal1_SH = 0
        cal1_SH += gp.quicksum(x_7_4[i,j,w]+x_7_5[i,j,w]+x_7_6[i,j,w]+x_8_4[i,j,w]+x_8_5[i,j,w]+x_8_6[i,j,w] for w in range(1,3) for i in range(passengerTime_SH[j]))
        m.addConstr(cal1_SH <= q)
        
    # 货机容量约束
    for j in range(N*K):
        cal2_BH = 0
        cal2_BH += (gp.quicksum((y_1_4[i,j,w]+y_1_5[i,j,w]+y_1_6[i,j,w]+y_2_4[i,j,w]+y_2_5[i,j,w]+y_2_6[i,j,w]+y_3_4[i,j,w]+y_3_5[i,j,w]+y_3_6[i,j,w]+y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w]) for w in range(1,3) for i in range(cargo_BH[j]))+gp.quicksum(y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w] for w in range(1,3) for i in range(cargo_SB[j])))
        m.addConstr(cal2_BH <= Q)
    for j in range(N*K):
        cal2_HS = 0
        cal2_HS += (gp.quicksum((y_4_7[i,j,w]+y_4_8[i,j,w]+y_5_7[i,j,w]+y_5_8[i,j,w]+y_6_7[i,j,w]+y_6_8[i,j,w]+y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w]) for w in range(1,3) for i in range(cargo_HS[j]))+gp.quicksum(y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w] for w in range(1,3) for i in range(cargo_BH[j])))
        m.addConstr(cal2_HS <= Q)
    for j in range(N*K):
        cal2_SB = 0
        cal2_SB += (gp.quicksum((y_7_1[i,j,w]+y_7_2[i,j,w]+y_7_3[i,j,w]+y_8_1[i,j,w]+y_8_2[i,j,w]+y_8_3[i,j,w]+y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w]) for w in range(1,3) for i in range(cargo_SB[j]))+gp.quicksum(y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w] for w in range(1,3) for i in range(cargo_HS[j])))
        m.addConstr(cal2_SB <= Q)
        
    # 在能运完的货物中，被运走的货物量最多达到这个时间段的订单需求量
    # 能运完的货物的仓储成本和逾期成本及被丢弃货物的成本计算
    for w in range(1,3):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                C3 += C2per[w] * (x_1_4[i,j,w]*max(BH_passengerTimeTable[j]+t1+t4-i-T_1[w]+flightTime_BH[j],0)+x_1_5[i,j,w]*max(BH_passengerTimeTable[j]+t1+t5-i-T_1[w]+flightTime_BH[j],0)+x_1_6[i,j,w]*max(BH_passengerTimeTable[j]+t1+t6-i-T_1[w]+flightTime_BH[j],0)+x_2_4[i,j,w]*max(BH_passengerTimeTable[j]+t2+t4-i-T_1[w]+flightTime_BH[j],0)+x_2_5[i,j,w]*max(BH_passengerTimeTable[j]+t2+t5-i-T_1[w]+flightTime_BH[j],0)+x_2_6[i,j,w]*max(BH_passengerTimeTable[j]+t2+t6-i-T_1[w]+flightTime_BH[j],0)+x_3_4[i,j,w]*max(BH_passengerTimeTable[j]+t3+t4-i-T_1[w]+flightTime_BH[j],0)+x_3_5[i,j,w]*max(BH_passengerTimeTable[j]+t3+t5-i-T_1[w]+flightTime_BH[j],0)+x_3_6[i,j,w]*max(BH_passengerTimeTable[j]+t3+t6-i-T_1[w]+flightTime_BH[j],0))
                C4 += c1 * ((x_1_4[i,j,w]+x_1_5[i,j,w]+x_1_6[i,j,w]+x_2_4[i,j,w]+x_2_5[i,j,w]+x_2_6[i,j,w]+x_3_4[i,j,w]+x_3_5[i,j,w]+x_3_6[i,j,w]) * (BH_passengerTimeTable[j] - i))
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                C3 += C2per[w] * (x_1_7[i,j,w]*max(BS_passengerTimeTable[j]+t1+t7-i-T_1[w]+flightTime_BS[j],0)+x_1_8[i,j,w]*max(BS_passengerTimeTable[j]+t1+t8-i-T_1[w]+flightTime_BS[j],0)+x_2_7[i,j,w]*max(BS_passengerTimeTable[j]+t2+t7-i-T_1[w]+flightTime_BS[j],0)+x_2_8[i,j,w]*max(BS_passengerTimeTable[j]+t2+t8-i-T_1[w]+flightTime_BS[j],0)+x_3_7[i,j,w]*max(BS_passengerTimeTable[j]+t3+t7-i-T_1[w]+flightTime_BS[j],0)+x_3_8[i,j,w]*max(BS_passengerTimeTable[j]+t3+t8-i-T_1[w]+flightTime_BS[j],0))
                C4 += c1 * ((x_1_7[i,j,w]+x_1_8[i,j,w]+x_2_7[i,j,w]+x_2_8[i,j,w]+x_3_7[i,j,w]+x_3_8[i,j,w]) * (BS_passengerTimeTable[j] - i))
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                C3 += C2per[w] * (x_4_1[i,j,w]*max(HB_passengerTimeTable[j]+t4+t1-i-T_1[w]+flightTime_HB[j],0)+x_4_2[i,j,w]*max(HB_passengerTimeTable[j]+t4+t2-i-T_1[w]+flightTime_HB[j],0)+x_4_3[i,j,w]*max(HB_passengerTimeTable[j]+t4+t3-i-T_1[w]+flightTime_HB[j],0)+x_5_1[i,j,w]*max(HB_passengerTimeTable[j]+t5+t1-i-T_1[w]+flightTime_HB[j],0)+x_5_2[i,j,w]*max(HB_passengerTimeTable[j]+t5+t2-i-T_1[w]+flightTime_HB[j],0)+x_5_3[i,j,w]*max(HB_passengerTimeTable[j]+t5+t3-i-T_1[w]+flightTime_HB[j],0)+x_6_1[i,j,w]*max(HB_passengerTimeTable[j]+t6+t1-i-T_1[w]+flightTime_HB[j],0)+x_6_2[i,j,w]*max(HB_passengerTimeTable[j]+t6+t2-i-T_1[w]+flightTime_HB[j],0)+x_6_3[i,j,w]*max(HB_passengerTimeTable[j]+t6+t3-i-T_1[w]+flightTime_HB[j],0))
                C4 += c1 * ((x_4_1[i,j,w]+x_4_2[i,j,w]+x_4_3[i,j,w]+x_5_1[i,j,w]+x_5_2[i,j,w]+x_5_3[i,j,w]+x_6_1[i,j,w]+x_6_2[i,j,w]+x_6_3[i,j,w]) * (HB_passengerTimeTable[j] - i))
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                C3 += C2per[w] * (x_4_7[i,j,w]*max(HS_passengerTimeTable[j]+t4+t7-i-T_1[w]+flightTime_HS[j],0)+x_4_8[i,j,w]*max(HS_passengerTimeTable[j]+t4+t8-i-T_1[w]+flightTime_HS[j],0)+x_5_7[i,j,w]*max(HS_passengerTimeTable[j]+t5+t7-i-T_1[w]+flightTime_HS[j],0)+x_5_8[i,j,w]*max(HS_passengerTimeTable[j]+t5+t8-i-T_1[w]+flightTime_HS[j],0)+x_6_7[i,j,w]*max(HS_passengerTimeTable[j]+t6+t7-i-T_1[w]+flightTime_HS[j],0)+x_6_8[i,j,w]*max(HS_passengerTimeTable[j]+t6+t8-i-T_1[w]+flightTime_HS[j],0))
                C4 += c1 * ((x_4_7[i,j,w]+x_4_8[i,j,w]+x_5_7[i,j,w]+x_5_8[i,j,w]+x_6_7[i,j,w]+x_6_8[i,j,w]) * (HS_passengerTimeTable[j] - i))
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                C3 += C2per[w] * (x_7_1[i,j,w]*max(SB_passengerTimeTable[j]+t7+t1-i-T_1[w]+flightTime_SB[j],0)+x_7_2[i,j,w]*max(SB_passengerTimeTable[j]+t7+t2-i-T_1[w]+flightTime_SB[j],0)+x_7_3[i,j,w]*max(SB_passengerTimeTable[j]+t7+t3-i-T_1[w]+flightTime_SB[j],0)+x_8_1[i,j,w]*max(SB_passengerTimeTable[j]+t8+t1-i-T_1[w]+flightTime_SB[j],0)+x_8_2[i,j,w]*max(SB_passengerTimeTable[j]+t8+t2-i-T_1[w]+flightTime_SB[j],0)+x_8_3[i,j,w]*max(SB_passengerTimeTable[j]+t8+t3-i-T_1[w]+flightTime_SB[j],0))
                C4 += c1 * ((x_7_1[i,j,w]+x_7_2[i,j,w]+x_7_3[i,j,w]+x_8_1[i,j,w]+x_8_2[i,j,w]+x_8_3[i,j,w]) * (SB_passengerTimeTable[j] - i))
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                C3 += C2per[w] * (x_7_4[i,j,w]*max(SH_passengerTimeTable[j]+t7+t4-i-T_1[w]+flightTime_SH[j],0)+x_7_5[i,j,w]*max(SH_passengerTimeTable[j]+t7+t5-i-T_1[w]+flightTime_SH[j],0)+x_7_6[i,j,w]*max(SH_passengerTimeTable[j]+t7+t6-i-T_1[w]+flightTime_SH[j],0)+x_8_4[i,j,w]*max(SH_passengerTimeTable[j]+t8+t4-i-T_1[w]+flightTime_SH[j],0)+x_8_5[i,j,w]*max(SH_passengerTimeTable[j]+t8+t5-i-T_1[w]+flightTime_SH[j],0)+x_8_6[i,j,w]*max(SH_passengerTimeTable[j]+t8+t6-i-T_1[w]+flightTime_SH[j],0))
                C4 += c1 * ((x_7_4[i,j,w]+x_7_5[i,j,w]+x_7_6[i,j,w]+x_8_4[i,j,w]+x_8_5[i,j,w]+x_8_6[i,j,w]) * (SH_passengerTimeTable[j] - i))
        for j in range(N*K):
            for i in range(cargo_BH[j]):
                C3 += C2per[w] * (y_1_4[i,j,w]*max(cargo_BH[j]+t1+t4-i-T_1[w]+Tcargo_1,0)+y_1_5[i,j,w]*max(cargo_BH[j]+t1+t5-i-T_1[w]+Tcargo_1,0)+y_1_6[i,j,w]*max(cargo_BH[j]+t1+t6-i-T_1[w]+Tcargo_1,0)+y_2_4[i,j,w]*max(cargo_BH[j]+t2+t4-i-T_1[w]+Tcargo_1,0)+y_2_5[i,j,w]*max(cargo_BH[j]+t2+t5-i-T_1[w]+Tcargo_1,0)+y_2_6[i,j,w]*max(cargo_BH[j]+t2+t6-i-T_1[w]+Tcargo_1,0))
                C3 += C2per[w] * (y_1_7[i,j,w]*max(cargo_HS[j]+t1+t7-i-T_1[w]+Tcargo_2,0)+y_1_8[i,j,w]*max(cargo_HS[j]+t1+t8-i-T_1[w]+Tcargo_2,0)+y_2_7[i,j,w]*max(cargo_HS[j]+t2+t7-i-T_1[w]+Tcargo_2,0)+y_2_8[i,j,w]*max(cargo_HS[j]+t2+t8-i-T_1[w]+Tcargo_2,0)+y_3_7[i,j,w]*max(cargo_HS[j]+t3+t7-i-T_1[w]+Tcargo_2,0)+y_3_8[i,j,w]*max(cargo_HS[j]+t3+t8-i-T_1[w]+Tcargo_2,0))
                C4 += c1 * ((y_1_4[i,j,w]+y_1_5[i,j,w]+y_1_6[i,j,w]+y_2_4[i,j,w]+y_2_5[i,j,w]+y_2_6[i,j,w]+y_3_4[i,j,w]+y_3_5[i,j,w]+y_3_6[i,j,w]+y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w]) * (cargo_BH[j] - i))
            for i in range(cargo_HS[j]):
                C3 += C2per[w] * (y_4_1[i,j,w]*max(cargo_SB[j]+t4+t1-i-T_1[w]+Tcargo_3,0)+y_4_2[i,j,w]*max(cargo_SB[j]+t4+t2-i-T_1[w]+Tcargo_3,0)+y_4_3[i,j,w]*max(cargo_SB[j]+t4+t3-i-T_1[w]+Tcargo_3,0)+y_5_1[i,j,w]*max(cargo_HS[j]+t5+t1-i-T_1[w]+Tcargo_3,0)+y_5_2[i,j,w]*max(cargo_SB[j]+t5+t2-i-T_1[w]+Tcargo_3,0)+y_5_3[i,j,w]*max(cargo_SB[j]+t5+t3-i-T_1[w]+Tcargo_3,0))
                C3 += C2per[w] * (y_4_7[i,j,w]*max(cargo_HS[j]+t4+t7-i-T_1[w]+Tcargo_2,0)+y_4_8[i,j,w]*max(cargo_HS[j]+t4+t8-i-T_1[w]+Tcargo_2,0)+y_5_7[i,j,w]*max(cargo_HS[j]+t5+t7-i-T_1[w]+Tcargo_2,0)+y_5_8[i,j,w]*max(cargo_HS[j]+t5+t8-i-T_1[w]+Tcargo_2,0))
                C4 += c1 * ((y_4_7[i,j,w]+y_4_8[i,j,w]+y_5_7[i,j,w]+y_5_8[i,j,w]+y_6_7[i,j,w]+y_6_8[i,j,w]+y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w]) * (cargo_HS[j] - i))
            for i in range(cargo_SB[j]):
                C3 += C2per[w] * (y_7_1[i,j,w]*max(cargo_SB[j]+t7+t1-i-T_1[w]+Tcargo_3,0)+y_7_2[i,j,w]*max(cargo_SB[j]+t7+t2-i-T_1[w]+Tcargo_3,0)+y_7_3[i,j,w]*max(cargo_SB[j]+t7+t3-i-T_1[w]+Tcargo_3,0)+y_8_1[i,j,w]*max(cargo_SB[j]+t8+t1-i-T_1[w]+Tcargo_3,0)+y_8_2[i,j,w]*max(cargo_SB[j]+t8+t2-i-T_1[w]+Tcargo_3,0)+y_8_3[i,j,w]*max(cargo_SB[j]+t8+t3-i-T_1[w]+Tcargo_3,0))
                C3 += C2per[w] * (y_7_4[i,j,w]*max(cargo_BH[j]+t7+t4-i-T_1[w]+Tcargo_1,0)+y_7_5[i,j,w]*max(cargo_BH[j]+t7+t5-i-T_1[w]+Tcargo_1,0)+y_7_6[i,j,w]*max(cargo_BH[j]+t7+t6-i-T_1[w]+Tcargo_1,0)+y_8_4[i,j,w]*max(cargo_BH[j]+t8+t4-i-T_1[w]+Tcargo_1,0)+y_8_5[i,j,w]*max(cargo_BH[j]+t8+t5-i-T_1[w]+Tcargo_1,0)+y_8_6[i,j,w]*max(cargo_BH[j]+t8+t6-i-T_1[w]+Tcargo_1,0))
                C4 += c1 * ((y_7_1[i,j,w]+y_7_2[i,j,w]+y_7_3[i,j,w]+y_8_1[i,j,w]+y_8_2[i,j,w]+y_8_3[i,j,w]+y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w]) * (cargo_SB[j] - i))
                
    TimeSensitive_Req_BH = [x1+x2+x3+x4+x5+x6+x7+x8+x9 for x1,x2,x3,x4,x5,x6,x7,x8,x9 in zip(TimeSensitive_Req_1_4,TimeSensitive_Req_1_5,TimeSensitive_Req_1_6,TimeSensitive_Req_2_4,TimeSensitive_Req_2_5,TimeSensitive_Req_2_6,TimeSensitive_Req_3_4,TimeSensitive_Req_3_5,TimeSensitive_Req_3_6)]
    TimeSensitive_Req_BS = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(TimeSensitive_Req_1_7,TimeSensitive_Req_1_8,TimeSensitive_Req_2_7,TimeSensitive_Req_2_8,TimeSensitive_Req_3_7,TimeSensitive_Req_3_8)]
    TimeSensitive_Req_HB = [x1+x2+x3+x4+x5+x6+x7+x8+x9 for x1,x2,x3,x4,x5,x6,x7,x8,x9 in zip(TimeSensitive_Req_4_1,TimeSensitive_Req_4_2,TimeSensitive_Req_4_3,TimeSensitive_Req_5_1,TimeSensitive_Req_5_2,TimeSensitive_Req_5_3,TimeSensitive_Req_6_1,TimeSensitive_Req_6_2,TimeSensitive_Req_6_3)]
    TimeSensitive_Req_HS = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(TimeSensitive_Req_4_7,TimeSensitive_Req_4_8,TimeSensitive_Req_5_7,TimeSensitive_Req_5_8,TimeSensitive_Req_6_7,TimeSensitive_Req_6_8)]
    TimeSensitive_Req_SB = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(TimeSensitive_Req_7_1,TimeSensitive_Req_7_2,TimeSensitive_Req_7_3,TimeSensitive_Req_8_1,TimeSensitive_Req_8_2,TimeSensitive_Req_8_3)]
    TimeSensitive_Req_SH = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(TimeSensitive_Req_7_4,TimeSensitive_Req_7_5,TimeSensitive_Req_7_6,TimeSensitive_Req_8_4,TimeSensitive_Req_8_5,TimeSensitive_Req_8_6)]
    Economy_Req_BH = [x1+x2+x3+x4+x5+x6+x7+x8+x9 for x1,x2,x3,x4,x5,x6,x7,x8,x9 in zip(Economy_Req_1_4,Economy_Req_1_5,Economy_Req_1_6,Economy_Req_2_4,Economy_Req_2_5,Economy_Req_2_6,Economy_Req_3_4,Economy_Req_3_5,Economy_Req_3_6)]
    Economy_Req_BS = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(Economy_Req_1_7,Economy_Req_1_8,Economy_Req_2_7,Economy_Req_2_8,Economy_Req_3_7,Economy_Req_3_8)]
    Economy_Req_HB = [x1+x2+x3+x4+x5+x6+x7+x8+x9 for x1,x2,x3,x4,x5,x6,x7,x8,x9 in zip(Economy_Req_4_1,Economy_Req_4_2,Economy_Req_4_3,Economy_Req_5_1,Economy_Req_5_2,Economy_Req_5_3,Economy_Req_6_1,Economy_Req_6_2,Economy_Req_6_3)]
    Economy_Req_HS = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(Economy_Req_4_7,Economy_Req_4_8,Economy_Req_5_7,Economy_Req_5_8,Economy_Req_6_7,Economy_Req_6_8)]
    Economy_Req_SB = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(Economy_Req_7_1,Economy_Req_7_2,Economy_Req_7_3,Economy_Req_8_1,Economy_Req_8_2,Economy_Req_8_3)]
    Economy_Req_SH = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(Economy_Req_7_4,Economy_Req_7_5,Economy_Req_7_6,Economy_Req_8_4,Economy_Req_8_5,Economy_Req_8_6)]
    forecast_BH_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_BH,Economy_Req_BH)]
    forecast_BS_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_BS,Economy_Req_BS)]
    forecast_HB_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_HB,Economy_Req_HB)]
    forecast_HS_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_HS,Economy_Req_HS)]
    forecast_SB_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_SB,Economy_Req_SB)]
    forecast_SH_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_SH,Economy_Req_SH)]
    passengerTotalBH = 0
    cargoTotalBH = 0
    passengerTotalBS = 0
    cargoTotalBS = 0
    passengerTotalHB = 0
    cargoTotalHB = 0
    passengerTotalHS = 0
    cargoTotalHS = 0
    passengerTotalSB = 0
    cargoTotalSB = 0
    passengerTotalSH = 0
    cargoTotalSH = 0
    
    for k in range(last_BH):
        transOut1 = 0
        transOut2 = 0
        transOut1_1_4 = 0
        transOut1_1_5 = 0
        transOut1_1_6 = 0
        transOut2_1_4 = 0
        transOut2_1_5 = 0
        transOut2_1_6 = 0
        transOut1_2_4 = 0
        transOut1_2_5 = 0
        transOut1_2_6 = 0
        transOut2_2_4 = 0
        transOut2_2_5 = 0
        transOut2_2_6 = 0
        transOut1_3_4 = 0
        transOut1_3_5 = 0
        transOut1_3_6 = 0
        transOut2_3_4 = 0
        transOut2_3_5 = 0
        transOut2_3_6 = 0
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                if i == k:
                    transOut1_1_4 += x_1_4[i,j,1]
                    transOut2_1_4 += x_1_4[i,j,2]
                    transOut1_1_5 += x_1_5[i,j,1]
                    transOut2_1_5 += x_1_5[i,j,2]
                    transOut1_1_6 += x_1_6[i,j,1]
                    transOut2_1_6 += x_1_6[i,j,2]
                    transOut1_2_4 += x_2_4[i,j,1]
                    transOut2_2_4 += x_2_4[i,j,2]
                    transOut1_2_5 += x_2_5[i,j,1]
                    transOut2_2_5 += x_2_5[i,j,2]
                    transOut1_2_6 += x_2_6[i,j,1]
                    transOut2_2_6 += x_2_6[i,j,2]
                    transOut1_3_4 += x_3_4[i,j,1]
                    transOut2_3_4 += x_3_4[i,j,2]
                    transOut1_3_5 += x_3_5[i,j,1]
                    transOut2_3_5 += x_3_5[i,j,2]
                    transOut1_3_6 += x_3_6[i,j,1]
                    transOut2_3_6 += x_3_6[i,j,2]
                    transOut1 += (x_1_4[i,j,1]+x_1_5[i,j,1]+x_1_6[i,j,1]+x_2_4[i,j,1]+x_2_5[i,j,1]+x_2_6[i,j,1]+x_3_4[i,j,1]+x_3_5[i,j,1]+x_3_6[i,j,1])
                    transOut2 += (x_1_4[i,j,2]+x_1_5[i,j,2]+x_1_6[i,j,2]+x_2_4[i,j,2]+x_2_5[i,j,2]+x_2_6[i,j,2]+x_3_4[i,j,2]+x_3_5[i,j,2]+x_3_6[i,j,2])
                    passengerTotalBH += (x_1_4[i,j,1]+x_1_5[i,j,1]+x_1_6[i,j,1]+x_2_4[i,j,1]+x_2_5[i,j,1]+x_2_6[i,j,1]+x_3_4[i,j,1]+x_3_5[i,j,1]+x_3_6[i,j,1]+x_1_4[i,j,2]+x_1_5[i,j,2]+x_1_6[i,j,2]+x_2_4[i,j,2]+x_2_5[i,j,2]+x_2_6[i,j,2]+x_3_4[i,j,2]+x_3_5[i,j,2]+x_3_6[i,j,2])          
        for j in range(N*K):
            for i in range(cargo_BH[j]):
                if i == k:
                    transOut1_1_4 += y_1_4[i,j,1]
                    transOut2_1_4 += y_1_4[i,j,2]
                    transOut1_1_5 += y_1_5[i,j,1]
                    transOut2_1_5 += y_1_5[i,j,2]
                    transOut1_1_6 += y_1_6[i,j,1]
                    transOut2_1_6 += y_1_6[i,j,2]
                    transOut1_2_4 += y_2_4[i,j,1]
                    transOut2_2_4 += y_2_4[i,j,2]
                    transOut1_2_5 += y_2_5[i,j,1]
                    transOut2_2_5 += y_2_5[i,j,2]
                    transOut1_2_6 += y_2_6[i,j,1]
                    transOut2_2_6 += y_2_6[i,j,2]
                    transOut1_3_4 += y_3_4[i,j,1]
                    transOut2_3_4 += y_3_4[i,j,2]
                    transOut1_3_5 += y_3_5[i,j,1]
                    transOut2_3_5 += y_3_5[i,j,2]
                    transOut1_3_6 += y_3_6[i,j,1]
                    transOut2_3_6 += y_3_6[i,j,2]
                    transOut1 += (y_1_4[i,j,1]+y_1_5[i,j,1]+y_1_6[i,j,1]+y_2_4[i,j,1]+y_2_5[i,j,1]+y_2_6[i,j,1]+y_3_4[i,j,1]+y_3_5[i,j,1]+y_3_6[i,j,1])
                    transOut2 += (y_1_4[i,j,2]+y_1_5[i,j,2]+y_1_6[i,j,2]+y_2_4[i,j,2]+y_2_5[i,j,2]+y_2_6[i,j,2]+y_3_4[i,j,2]+y_3_5[i,j,2]+y_3_6[i,j,2])
                    cargoTotalBH += (y_1_4[i,j,1]+y_1_5[i,j,1]+y_1_6[i,j,1]+y_2_4[i,j,1]+y_2_5[i,j,1]+y_2_6[i,j,1]+y_3_4[i,j,1]+y_3_5[i,j,1]+y_3_6[i,j,1]+y_1_4[i,j,2]+y_1_5[i,j,2]+y_1_6[i,j,2]+y_2_4[i,j,2]+y_2_5[i,j,2]+y_2_6[i,j,2]+y_3_4[i,j,2]+y_3_5[i,j,2]+y_3_6[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_1_4 <= TimeSensitive_Req_1_4[k])
        m.addConstr(transOut2_1_4 <= Economy_Req_1_4[k])
        m.addConstr(transOut1_1_5 <= TimeSensitive_Req_1_5[k])
        m.addConstr(transOut2_1_5 <= Economy_Req_1_5[k])
        m.addConstr(transOut1_1_6 <= TimeSensitive_Req_1_6[k])
        m.addConstr(transOut2_1_6 <= Economy_Req_1_6[k])
        m.addConstr(transOut1_2_4 <= TimeSensitive_Req_2_4[k])
        m.addConstr(transOut2_2_4 <= Economy_Req_2_4[k])
        m.addConstr(transOut1_2_5 <= TimeSensitive_Req_2_5[k])
        m.addConstr(transOut2_2_5 <= Economy_Req_2_5[k])
        m.addConstr(transOut1_2_6 <= TimeSensitive_Req_2_6[k])
        m.addConstr(transOut2_2_6 <= Economy_Req_2_6[k])
        m.addConstr(transOut1_3_4 <= TimeSensitive_Req_3_4[k])
        m.addConstr(transOut2_3_4 <= Economy_Req_3_4[k])
        m.addConstr(transOut1_3_5 <= TimeSensitive_Req_3_5[k])
        m.addConstr(transOut2_3_5 <= Economy_Req_3_5[k])
        m.addConstr(transOut1_3_6 <= TimeSensitive_Req_3_6[k])
        m.addConstr(transOut2_3_6 <= Economy_Req_3_6[k])
        trash = c3_1 * (TimeSensitive_Req_BH[k]-transOut1) + c3_2 * (Economy_Req_BH[k]-transOut2)
        C6 += trash
    for k in range(last_BS):
        transOut1 = 0
        transOut2 = 0
        transOut1_1_7 = 0
        transOut2_1_7 = 0
        transOut1_1_8 = 0
        transOut2_1_8 = 0
        transOut1_2_7 = 0
        transOut2_2_7 = 0
        transOut1_2_8 = 0
        transOut2_2_8 = 0
        transOut1_3_7 = 0
        transOut2_3_7 = 0
        transOut1_3_8 = 0
        transOut2_3_8 = 0
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                if i == k:
                    transOut1_1_7 += x_1_7[i,j,1]
                    transOut2_1_7 += x_1_7[i,j,2]
                    transOut1_1_8 += x_1_8[i,j,1]
                    transOut2_1_8 += x_1_8[i,j,2]
                    transOut1_2_7 += x_2_7[i,j,1]
                    transOut2_2_7 += x_2_7[i,j,2]
                    transOut1_2_8 += x_2_8[i,j,1]
                    transOut2_2_8 += x_2_8[i,j,2]
                    transOut1_3_7 += x_3_7[i,j,1]
                    transOut2_3_7 += x_3_7[i,j,2]
                    transOut1_3_8 += x_3_8[i,j,1]
                    transOut2_3_8 += x_3_8[i,j,2]
                    transOut1 += (x_1_7[i,j,1]+x_1_8[i,j,1]+x_2_7[i,j,1]+x_2_8[i,j,1]+x_3_7[i,j,1]+x_3_8[i,j,1])
                    transOut2 += (x_1_7[i,j,2]+x_1_8[i,j,2]+x_2_7[i,j,2]+x_2_8[i,j,2]+x_3_7[i,j,2]+x_3_8[i,j,2])
                    passengerTotalBS += (x_1_7[i,j,1]+x_1_8[i,j,1]+x_2_7[i,j,1]+x_2_8[i,j,1]+x_3_7[i,j,1]+x_3_8[i,j,1]+x_1_7[i,j,2]+x_1_8[i,j,2]+x_2_7[i,j,2]+x_2_8[i,j,2]+x_3_7[i,j,2]+x_3_8[i,j,2])
        for j in range(N*K):
            for i in range(cargo_BH[j]):
                if i == k:
                    transOut1_1_7 += y_1_7[i,j,1]
                    transOut2_1_7 += y_1_7[i,j,2]
                    transOut1_1_8 += y_1_8[i,j,1]
                    transOut2_1_8 += y_1_8[i,j,2]
                    transOut1_2_7 += y_2_7[i,j,1]
                    transOut2_2_7 += y_2_7[i,j,2]
                    transOut1_2_8 += y_2_8[i,j,1]
                    transOut2_2_8 += y_2_8[i,j,2]
                    transOut1_3_7 += y_3_7[i,j,1]
                    transOut2_3_7 += y_3_7[i,j,2]
                    transOut1_3_8 += y_3_8[i,j,1]
                    transOut2_3_8 += y_3_8[i,j,2]
                    transOut1 += (y_1_7[i,j,1]+y_1_8[i,j,1]+y_2_7[i,j,1]+y_2_8[i,j,1]+y_3_7[i,j,1]+y_3_8[i,j,1])
                    transOut2 += (y_1_7[i,j,2]+y_1_8[i,j,2]+y_2_7[i,j,2]+y_2_8[i,j,2]+y_3_7[i,j,2]+y_3_8[i,j,2])
                    cargoTotalBS += (y_1_7[i,j,1]+y_1_8[i,j,1]+y_2_7[i,j,1]+y_2_8[i,j,1]+y_3_7[i,j,1]+y_3_8[i,j,1]+y_1_7[i,j,2]+y_1_8[i,j,2]+y_2_7[i,j,2]+y_2_8[i,j,2]+y_3_7[i,j,2]+y_3_8[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_1_7 <= TimeSensitive_Req_1_7[k])
        m.addConstr(transOut2_1_7 <= Economy_Req_1_7[k])
        m.addConstr(transOut1_1_8 <= TimeSensitive_Req_1_8[k])
        m.addConstr(transOut2_1_8 <= Economy_Req_1_8[k])
        m.addConstr(transOut1_2_7 <= TimeSensitive_Req_2_7[k])
        m.addConstr(transOut2_2_7 <= Economy_Req_2_7[k])
        m.addConstr(transOut1_2_8 <= TimeSensitive_Req_2_8[k])
        m.addConstr(transOut2_2_8 <= Economy_Req_2_8[k])
        m.addConstr(transOut1_3_7 <= TimeSensitive_Req_3_7[k])
        m.addConstr(transOut2_3_7 <= Economy_Req_3_7[k])
        m.addConstr(transOut1_3_8 <= TimeSensitive_Req_3_8[k])
        m.addConstr(transOut2_3_8 <= Economy_Req_3_8[k])
        trash = c3_1 * (TimeSensitive_Req_BS[k]-transOut1) + c3_2 * (Economy_Req_BS[k]-transOut2)
        C6 += trash
    for k in range(last_HB):
        transOut1 = 0
        transOut2 = 0
        transOut1_4_1 = 0
        transOut2_4_1 = 0
        transOut1_4_2 = 0
        transOut2_4_2 = 0
        transOut1_4_3 = 0
        transOut2_4_3 = 0
        transOut1_5_1 = 0
        transOut2_5_1 = 0
        transOut1_5_2 = 0
        transOut2_5_2 = 0
        transOut1_5_3 = 0
        transOut2_5_3 = 0
        transOut1_6_1 = 0
        transOut2_6_1 = 0
        transOut1_6_2 = 0
        transOut2_6_2 = 0
        transOut1_6_3 = 0
        transOut2_6_3 = 0
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                if i == k:
                    transOut1_4_1 += x_4_1[i,j,1]
                    transOut2_4_1 += x_4_1[i,j,2]
                    transOut1_4_2 += x_4_2[i,j,1]
                    transOut2_4_2 += x_4_2[i,j,2]
                    transOut1_4_3 += x_4_3[i,j,1]
                    transOut2_4_3 += x_4_3[i,j,2]
                    transOut1_5_1 += x_5_1[i,j,1]
                    transOut2_5_1 += x_5_1[i,j,2]
                    transOut1_5_2 += x_5_2[i,j,1]
                    transOut2_5_2 += x_5_2[i,j,2]
                    transOut1_5_3 += x_5_3[i,j,1]
                    transOut2_5_3 += x_5_3[i,j,2]
                    transOut1_6_1 += x_6_1[i,j,1]
                    transOut2_6_1 += x_6_1[i,j,2]
                    transOut1_6_2 += x_6_2[i,j,1]
                    transOut2_6_2 += x_6_2[i,j,2]
                    transOut1_6_3 += x_6_3[i,j,1]
                    transOut2_6_3 += x_6_3[i,j,2]
                    transOut1 += x_4_1[i,j,1]+x_4_2[i,j,1]+x_4_3[i,j,1]+x_5_1[i,j,1]+x_5_2[i,j,1]+x_5_3[i,j,1]+x_6_1[i,j,1]+x_6_2[i,j,1]+x_6_3[i,j,1]
                    transOut2 += x_4_1[i,j,2]+x_4_2[i,j,2]+x_4_3[i,j,2]+x_5_1[i,j,2]+x_5_2[i,j,2]+x_5_3[i,j,2]+x_6_1[i,j,2]+x_6_2[i,j,2]+x_6_3[i,j,2]
                    passengerTotalHB += (x_4_1[i,j,1]+x_4_2[i,j,1]+x_4_3[i,j,1]+x_5_1[i,j,1]+x_5_2[i,j,1]+x_5_3[i,j,1]+x_6_1[i,j,1]+x_6_2[i,j,1]+x_6_3[i,j,1]+x_4_1[i,j,2]+x_4_2[i,j,2]+x_4_3[i,j,2]+x_5_1[i,j,2]+x_5_2[i,j,2]+x_5_3[i,j,2]+x_6_1[i,j,2]+x_6_2[i,j,2]+x_6_3[i,j,2])
        for j in range(N*K):
            for i in range(cargo_HS[j]):
                if i == k:
                    transOut1_4_1 += y_4_1[i,j,1]
                    transOut2_4_1 += y_4_1[i,j,2]
                    transOut1_4_2 += y_4_2[i,j,1]
                    transOut2_4_2 += y_4_2[i,j,2]
                    transOut1_4_3 += y_4_3[i,j,1]
                    transOut2_4_3 += y_4_3[i,j,2]
                    transOut1_5_1 += y_5_1[i,j,1]
                    transOut2_5_1 += y_5_1[i,j,2]
                    transOut1_5_2 += y_5_2[i,j,1]
                    transOut2_5_2 += y_5_2[i,j,2]
                    transOut1_5_3 += y_5_3[i,j,1]
                    transOut2_5_3 += y_5_3[i,j,2]
                    transOut1_6_1 += y_6_1[i,j,1]
                    transOut2_6_1 += y_6_1[i,j,2]
                    transOut1_6_2 += y_6_2[i,j,1]
                    transOut2_6_2 += y_6_2[i,j,2]
                    transOut1_6_3 += y_6_3[i,j,1]
                    transOut2_6_3 += y_6_3[i,j,2]
                    transOut1 += y_4_1[i,j,1]+y_4_2[i,j,1]+y_4_3[i,j,1]+y_5_1[i,j,1]+y_5_2[i,j,1]+y_5_3[i,j,1]+y_6_1[i,j,1]+y_6_2[i,j,1]+y_6_3[i,j,1]
                    transOut2 += y_4_1[i,j,2]+y_4_2[i,j,2]+y_4_3[i,j,2]+y_5_1[i,j,2]+y_5_2[i,j,2]+y_5_3[i,j,2]+y_6_1[i,j,2]+y_6_2[i,j,2]+y_6_3[i,j,2]
                    cargoTotalHB += (y_4_1[i,j,1]+y_4_2[i,j,1]+y_4_3[i,j,1]+y_5_1[i,j,1]+y_5_2[i,j,1]+y_5_3[i,j,1]+y_6_1[i,j,1]+y_6_2[i,j,1]+y_6_3[i,j,1]+y_4_1[i,j,2]+y_4_2[i,j,2]+y_4_3[i,j,2]+y_5_1[i,j,2]+y_5_2[i,j,2]+y_5_3[i,j,2]+y_6_1[i,j,2]+y_6_2[i,j,2]+y_6_3[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_4_1 <= TimeSensitive_Req_4_1[k])
        m.addConstr(transOut2_4_1 <= Economy_Req_4_1[k])
        m.addConstr(transOut1_4_2 <= TimeSensitive_Req_4_2[k])
        m.addConstr(transOut2_4_2 <= Economy_Req_4_2[k])
        m.addConstr(transOut1_4_3 <= TimeSensitive_Req_4_3[k])
        m.addConstr(transOut2_4_3 <= Economy_Req_4_3[k])
        m.addConstr(transOut1_5_1 <= TimeSensitive_Req_5_1[k])
        m.addConstr(transOut2_5_1 <= Economy_Req_5_1[k])
        m.addConstr(transOut1_5_2 <= TimeSensitive_Req_5_2[k])
        m.addConstr(transOut2_5_2 <= Economy_Req_5_2[k])
        m.addConstr(transOut1_5_3 <= TimeSensitive_Req_5_3[k])
        m.addConstr(transOut2_5_3 <= Economy_Req_5_3[k])
        m.addConstr(transOut1_6_1 <= TimeSensitive_Req_6_1[k])
        m.addConstr(transOut2_6_1 <= Economy_Req_6_1[k])
        m.addConstr(transOut1_6_2 <= TimeSensitive_Req_6_2[k])
        m.addConstr(transOut2_6_2 <= Economy_Req_6_2[k])
        m.addConstr(transOut1_6_3 <= TimeSensitive_Req_6_3[k])
        m.addConstr(transOut2_6_3 <= Economy_Req_6_3[k])
        trash = c3_1 * (TimeSensitive_Req_HB[k]-transOut1) + c3_2 * (Economy_Req_HB[k]-transOut2)
        C6 += trash
    for k in range(last_HS):
        transOut1 = 0
        transOut2 = 0
        transOut1_4_7 = 0
        transOut2_4_7 = 0
        transOut1_4_8 = 0
        transOut2_4_8 = 0
        transOut1_5_7 = 0
        transOut2_5_7 = 0
        transOut1_5_8 = 0
        transOut2_5_8 = 0
        transOut1_6_7 = 0
        transOut2_6_7 = 0
        transOut1_6_8 = 0
        transOut2_6_8 = 0
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                if i == k:
                    transOut1_4_7 += x_4_7[i,j,1]
                    transOut2_4_7 += x_4_7[i,j,2]
                    transOut1_4_8 += x_4_8[i,j,1]
                    transOut2_4_8 += x_4_8[i,j,2]
                    transOut1_5_7 += x_5_7[i,j,1]
                    transOut2_5_7 += x_5_7[i,j,2]
                    transOut1_5_8 += x_5_8[i,j,1]
                    transOut2_5_8 += x_5_8[i,j,2]
                    transOut1_6_7 += x_6_7[i,j,1]
                    transOut2_6_7 += x_6_7[i,j,2]
                    transOut1_6_8 += x_6_8[i,j,1]
                    transOut2_6_8 += x_6_8[i,j,2]
                    transOut1 += x_4_7[i,j,1]+x_4_8[i,j,1]+x_5_7[i,j,1]+x_5_8[i,j,1]+x_6_7[i,j,1]+x_6_8[i,j,1]
                    transOut2 += x_4_7[i,j,2]+x_4_8[i,j,2]+x_5_7[i,j,2]+x_5_8[i,j,2]+x_6_7[i,j,2]+x_6_8[i,j,2]
                    passengerTotalHS += (x_4_7[i,j,1]+x_4_8[i,j,1]+x_5_7[i,j,1]+x_5_8[i,j,1]+x_6_7[i,j,1]+x_6_8[i,j,1]+x_4_7[i,j,2]+x_4_8[i,j,2]+x_5_7[i,j,2]+x_5_8[i,j,2]+x_6_7[i,j,2]+x_6_8[i,j,2])
        for j in range(N*K):
            for i in range(cargo_HS[j]):
                if i == k:
                    transOut1_4_7 += y_4_7[i,j,1]
                    transOut2_4_7 += y_4_7[i,j,2]
                    transOut1_4_8 += y_4_8[i,j,1]
                    transOut2_4_8 += y_4_8[i,j,2]
                    transOut1_5_7 += y_5_7[i,j,1]
                    transOut2_5_7 += y_5_7[i,j,2]
                    transOut1_5_8 += y_5_8[i,j,1]
                    transOut2_5_8 += y_5_8[i,j,2]
                    transOut1_6_7 += y_6_7[i,j,1]
                    transOut2_6_7 += y_6_7[i,j,2]
                    transOut1_6_8 += y_6_8[i,j,1]
                    transOut2_6_8 += y_6_8[i,j,2]
                    transOut1 += y_4_7[i,j,1]+y_4_8[i,j,1]+y_5_7[i,j,1]+y_5_8[i,j,1]+y_6_7[i,j,1]+y_6_8[i,j,1]
                    transOut2 += y_4_7[i,j,2]+y_4_8[i,j,2]+y_5_7[i,j,2]+y_5_8[i,j,2]+y_6_7[i,j,2]+y_6_8[i,j,2]
                    cargoTotalHS += (y_4_7[i,j,1]+y_4_8[i,j,1]+y_5_7[i,j,1]+y_5_8[i,j,1]+y_6_7[i,j,1]+y_6_8[i,j,1]+y_4_7[i,j,2]+y_4_8[i,j,2]+y_5_7[i,j,2]+y_5_8[i,j,2]+y_6_7[i,j,2]+y_6_8[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_4_7 <= TimeSensitive_Req_4_7[k])
        m.addConstr(transOut2_4_7 <= Economy_Req_4_7[k])
        m.addConstr(transOut1_4_8 <= TimeSensitive_Req_4_8[k])
        m.addConstr(transOut2_4_8 <= Economy_Req_4_8[k])
        m.addConstr(transOut1_5_7 <= TimeSensitive_Req_5_7[k])
        m.addConstr(transOut2_5_7 <= Economy_Req_5_7[k])
        m.addConstr(transOut1_5_8 <= TimeSensitive_Req_5_8[k])
        m.addConstr(transOut2_5_8 <= Economy_Req_5_8[k])
        m.addConstr(transOut1_6_7 <= TimeSensitive_Req_6_7[k])
        m.addConstr(transOut2_6_7 <= Economy_Req_6_7[k])
        m.addConstr(transOut1_6_8 <= TimeSensitive_Req_6_8[k])
        m.addConstr(transOut2_6_8 <= Economy_Req_6_8[k])
        trash = c3_1 * (TimeSensitive_Req_HS[k]-transOut1) + c3_2 * (Economy_Req_HS[k]-transOut2)
        C6 += trash
    for k in range(last_SB):
        transOut1 = 0
        transOut2 = 0
        transOut1_7_1 = 0
        transOut2_7_1 = 0
        transOut1_7_2 = 0
        transOut2_7_2 = 0
        transOut1_7_3 = 0
        transOut2_7_3 = 0
        transOut1_8_1 = 0
        transOut2_8_1 = 0
        transOut1_8_2 = 0
        transOut2_8_2 = 0
        transOut1_8_3 = 0
        transOut2_8_3 = 0
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                if i == k:
                    transOut1_7_1 += x_7_1[i,j,1]
                    transOut2_7_1 += x_7_1[i,j,2]
                    transOut1_7_2 += x_7_2[i,j,1]
                    transOut2_7_2 += x_7_2[i,j,2]
                    transOut1_7_3 += x_7_3[i,j,1]
                    transOut2_7_3 += x_7_3[i,j,2]
                    transOut1_8_1 += x_8_1[i,j,1]
                    transOut2_8_1 += x_8_1[i,j,2]
                    transOut1_8_2 += x_8_2[i,j,1]
                    transOut2_8_2 += x_8_2[i,j,2]
                    transOut1_8_3 += x_8_3[i,j,1]
                    transOut2_8_3 += x_8_3[i,j,2]
                    transOut1 += x_7_1[i,j,1]+x_7_2[i,j,1]+x_7_3[i,j,1]+x_8_1[i,j,1]+x_8_2[i,j,1]+x_8_3[i,j,1]
                    transOut2 += x_7_1[i,j,2]+x_7_2[i,j,2]+x_7_3[i,j,2]+x_8_1[i,j,2]+x_8_2[i,j,2]+x_8_3[i,j,2]
                    passengerTotalSB += (x_7_1[i,j,1]+x_7_2[i,j,1]+x_7_3[i,j,1]+x_8_1[i,j,1]+x_8_2[i,j,1]+x_8_3[i,j,1]+x_7_1[i,j,2]+x_7_2[i,j,2]+x_7_3[i,j,2]+x_8_1[i,j,2]+x_8_2[i,j,2]+x_8_3[i,j,2])
        for j in range(N*K):
            for i in range(cargo_SB[j]):
                if i == k:
                    transOut1_7_1 += y_7_1[i,j,1]
                    transOut2_7_1 += y_7_1[i,j,2]
                    transOut1_7_2 += y_7_2[i,j,1]
                    transOut2_7_2 += y_7_2[i,j,2]
                    transOut1_7_3 += y_7_3[i,j,1]
                    transOut2_7_3 += y_7_3[i,j,2]
                    transOut1_8_1 += y_8_1[i,j,1]
                    transOut2_8_1 += y_8_1[i,j,2]
                    transOut1_8_2 += y_8_2[i,j,1]
                    transOut2_8_2 += y_8_2[i,j,2]
                    transOut1_8_3 += y_8_3[i,j,1]
                    transOut2_8_3 += y_8_3[i,j,2]
                    transOut1 += y_7_1[i,j,1]+y_7_2[i,j,1]+y_7_3[i,j,1]+y_8_1[i,j,1]+y_8_2[i,j,1]+y_8_3[i,j,1]
                    transOut2 += y_7_1[i,j,2]+y_7_2[i,j,2]+y_7_3[i,j,2]+y_8_1[i,j,2]+y_8_2[i,j,2]+y_8_3[i,j,2]
                    cargoTotalSB += (y_7_1[i,j,1]+y_7_2[i,j,1]+y_7_3[i,j,1]+y_8_1[i,j,1]+y_8_2[i,j,1]+y_8_3[i,j,1]+y_7_1[i,j,2]+y_7_2[i,j,2]+y_7_3[i,j,2]+y_8_1[i,j,2]+y_8_2[i,j,2]+y_8_3[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_7_1 <= TimeSensitive_Req_7_1[k])
        m.addConstr(transOut2_7_1 <= Economy_Req_7_1[k])
        m.addConstr(transOut1_7_2 <= TimeSensitive_Req_7_2[k])
        m.addConstr(transOut2_7_2 <= Economy_Req_7_2[k])
        m.addConstr(transOut1_7_3 <= TimeSensitive_Req_7_3[k])
        m.addConstr(transOut2_7_3 <= Economy_Req_7_3[k])
        m.addConstr(transOut1_8_1 <= TimeSensitive_Req_8_1[k])
        m.addConstr(transOut2_8_1 <= Economy_Req_8_1[k])
        m.addConstr(transOut1_8_2 <= TimeSensitive_Req_8_2[k])
        m.addConstr(transOut2_8_2 <= Economy_Req_8_2[k])
        m.addConstr(transOut1_8_3 <= TimeSensitive_Req_8_3[k])
        m.addConstr(transOut2_8_3 <= Economy_Req_8_3[k])
        trash = c3_1 * (TimeSensitive_Req_SB[k]-transOut1) + c3_2 * (Economy_Req_SB[k]-transOut2)
        C6 += trash
    for k in range(last_SH):
        transOut1 = 0
        transOut2 = 0
        transOut1_7_4 = 0
        transOut2_7_4 = 0
        transOut1_7_5 = 0
        transOut2_7_5 = 0
        transOut1_7_6 = 0
        transOut2_7_6 = 0
        transOut1_8_4 = 0
        transOut2_8_4 = 0
        transOut1_8_5 = 0
        transOut2_8_5 = 0
        transOut1_8_6 = 0
        transOut2_8_6 = 0
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                if i == k:
                    transOut1_7_4 += x_7_4[i,j,1]
                    transOut2_7_4 += x_7_4[i,j,2]
                    transOut1_7_5 += x_7_5[i,j,1]
                    transOut2_7_5 += x_7_5[i,j,2]
                    transOut1_7_6 += x_7_6[i,j,1]
                    transOut2_7_6 += x_7_6[i,j,2]
                    transOut1_8_4 += x_8_4[i,j,1]
                    transOut2_8_4 += x_8_4[i,j,2]
                    transOut1_8_5 += x_8_5[i,j,1]
                    transOut2_8_5 += x_8_5[i,j,2]
                    transOut1_8_6 += x_8_6[i,j,1]
                    transOut2_8_6 += x_8_6[i,j,2]
                    transOut1 += x_7_4[i,j,1]+x_7_5[i,j,1]+x_7_6[i,j,1]+x_8_4[i,j,1]+x_8_5[i,j,1]+x_8_6[i,j,1]
                    transOut2 += x_7_4[i,j,2]+x_7_5[i,j,2]+x_7_6[i,j,2]+x_8_4[i,j,2]+x_8_5[i,j,2]+x_8_6[i,j,2]
                    passengerTotalSH += (x_7_4[i,j,1]+x_7_5[i,j,1]+x_7_6[i,j,1]+x_8_4[i,j,1]+x_8_5[i,j,1]+x_8_6[i,j,1]+x_7_4[i,j,2]+x_7_5[i,j,2]+x_7_6[i,j,2]+x_8_4[i,j,2]+x_8_5[i,j,2]+x_8_6[i,j,2])
        for j in range(N*K):
            for i in range(cargo_SB[j]):
                if i == k:
                    transOut1_7_4 += y_7_4[i,j,1]
                    transOut2_7_4 += y_7_4[i,j,2]
                    transOut1_7_5 += y_7_5[i,j,1]
                    transOut2_7_5 += y_7_5[i,j,2]
                    transOut1_7_6 += y_7_6[i,j,1]
                    transOut2_7_6 += y_7_6[i,j,2]
                    transOut1_8_4 += y_8_4[i,j,1]
                    transOut2_8_4 += y_8_4[i,j,2]
                    transOut1_8_5 += y_8_5[i,j,1]
                    transOut2_8_5 += y_8_5[i,j,2]
                    transOut1_8_6 += y_8_6[i,j,1]
                    transOut2_8_6 += y_8_6[i,j,2]
                    transOut1 += y_7_4[i,j,1]+y_7_5[i,j,1]+y_7_6[i,j,1]+y_8_4[i,j,1]+y_8_5[i,j,1]+y_8_6[i,j,1]
                    transOut2 += y_7_4[i,j,2]+y_7_5[i,j,2]+y_7_6[i,j,2]+y_8_4[i,j,2]+y_8_5[i,j,2]+y_8_6[i,j,2]
                    cargoTotalSH += (y_7_4[i,j,1]+y_7_5[i,j,1]+y_7_6[i,j,1]+y_8_4[i,j,1]+y_8_5[i,j,1]+y_8_6[i,j,1]+y_7_4[i,j,2]+y_7_5[i,j,2]+y_7_6[i,j,2]+y_8_4[i,j,2]+y_8_5[i,j,2]+y_8_6[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_7_4 <= TimeSensitive_Req_7_4[k])
        m.addConstr(transOut2_7_4 <= Economy_Req_7_4[k])
        m.addConstr(transOut1_7_5 <= TimeSensitive_Req_7_5[k])
        m.addConstr(transOut2_7_5 <= Economy_Req_7_5[k])
        m.addConstr(transOut1_7_6 <= TimeSensitive_Req_7_6[k])
        m.addConstr(transOut2_7_6 <= Economy_Req_7_6[k])
        m.addConstr(transOut1_8_4 <= TimeSensitive_Req_8_4[k])
        m.addConstr(transOut2_8_4 <= Economy_Req_8_4[k])
        m.addConstr(transOut1_8_5 <= TimeSensitive_Req_8_5[k])
        m.addConstr(transOut2_8_5 <= Economy_Req_8_5[k])
        m.addConstr(transOut1_8_6 <= TimeSensitive_Req_8_6[k])
        m.addConstr(transOut2_8_6 <= Economy_Req_8_6[k])
        trash = c3_1 * (TimeSensitive_Req_SH[k]-transOut1) + c3_2 * (Economy_Req_SH[k]-transOut2)
        C6 += trash
    
    desertTotalBH = sum(forecast_1_4_K)+sum(forecast_1_5_K)+sum(forecast_1_6_K)+sum(forecast_2_4_K)+sum(forecast_2_5_K)+sum(forecast_2_6_K)+sum(forecast_3_4_K)+sum(forecast_3_5_K)+sum(forecast_3_6_K)-passengerTotalBH-cargoTotalBH
    desertTotalBS = sum(forecast_1_7_K)+sum(forecast_1_8_K)+sum(forecast_2_7_K)+sum(forecast_2_8_K)+sum(forecast_3_7_K)+sum(forecast_3_8_K)-passengerTotalBS-cargoTotalBS
    desertTotalHB = sum(forecast_4_1_K)+sum(forecast_4_2_K)+sum(forecast_4_3_K)+sum(forecast_5_1_K)+sum(forecast_5_2_K)+sum(forecast_5_3_K)+sum(forecast_6_1_K)+sum(forecast_6_2_K)+sum(forecast_6_3_K)-passengerTotalHB-cargoTotalHB
    desertTotalHS = sum(forecast_4_7_K)+sum(forecast_4_8_K)+sum(forecast_5_7_K)+sum(forecast_5_8_K)+sum(forecast_6_7_K)+sum(forecast_6_8_K)-passengerTotalHS-cargoTotalHS
    desertTotalSB = sum(forecast_7_1_K)+sum(forecast_7_2_K)+sum(forecast_7_3_K)+sum(forecast_8_1_K)+sum(forecast_8_2_K)+sum(forecast_8_3_K)-passengerTotalSB-cargoTotalSB
    desertTotalSH = sum(forecast_7_4_K)+sum(forecast_7_5_K)+sum(forecast_7_6_K)+sum(forecast_8_4_K)+sum(forecast_8_5_K)+sum(forecast_8_6_K)-passengerTotalSH-cargoTotalSH
                      
    # 本周期内无法运完的货物的仓储成本和预期逾期成本
    left_1_4 = 0
    left_1_5 = 0
    left_1_6 = 0
    left_1_7 = 0
    left_1_8 = 0
    left_2_4 = 0
    left_2_5 = 0
    left_2_6 = 0
    left_2_7 = 0
    left_2_8 = 0
    left_3_4 = 0
    left_3_5 = 0
    left_3_6 = 0
    left_3_7 = 0
    left_3_8 = 0
    left_4_1 = 0
    left_4_2 = 0
    left_4_3 = 0
    left_4_7 = 0
    left_4_8 = 0
    left_5_1 = 0
    left_5_2 = 0
    left_5_3 = 0
    left_5_7 = 0
    left_5_8 = 0
    left_6_1 = 0
    left_6_2 = 0
    left_6_3 = 0
    left_6_7 = 0
    left_6_8 = 0
    left_7_1 = 0
    left_7_2 = 0
    left_7_3 = 0
    left_7_4 = 0
    left_7_5 = 0
    left_7_6 = 0
    left_8_1 = 0
    left_8_2 = 0
    left_8_3 = 0
    left_8_4 = 0
    left_8_5 = 0
    left_8_6 = 0                 
    for i in range(last_BH, 24 * K):
        left_1_4 += forecast_1_4_K[i]
        left_1_5 += forecast_1_5_K[i]
        left_1_6 += forecast_1_6_K[i]
        left_2_4 += forecast_2_4_K[i]
        left_2_5 += forecast_2_5_K[i]
        left_2_6 += forecast_2_6_K[i]
        left_3_4 += forecast_3_4_K[i]
        left_3_5 += forecast_3_5_K[i]
        left_3_6 += forecast_3_6_K[i]      
        C1 += c1 * (forecast_1_4_K[i]+forecast_1_5_K[i]+forecast_1_6_K[i]+forecast_2_4_K[i]+forecast_2_5_K[i]+forecast_2_6_K[i]+forecast_3_4_K[i]+forecast_3_5_K[i]+forecast_3_6_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_BH[i] + c2_2 * Economy_Req_BH[i]) * (24 * K - i + first_BH - 1) * (1 - (i + 1) / (24 * K))
    for i in range(last_BS, 24 * K):
        left_1_7 += forecast_1_7_K[i]
        left_1_8 += forecast_1_8_K[i]
        left_2_7 += forecast_2_7_K[i]
        left_2_8 += forecast_2_8_K[i]
        left_3_7 += forecast_3_7_K[i]
        left_3_8 += forecast_3_8_K[i]
        C1 += c1 * (forecast_1_7_K[i]+forecast_1_8_K[i]+forecast_2_7_K[i]+forecast_2_8_K[i]+forecast_3_7_K[i]+forecast_3_8_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_BS[i] + c2_2 * Economy_Req_BS[i]) * (24 * K - i + first_BS - 1) * (1 - (i + 1) / (24 * K))  
    for i in range(last_HB, 24 * K):
        left_4_1 += forecast_4_1_K[i]
        left_4_2 += forecast_4_2_K[i]
        left_4_3 += forecast_4_3_K[i]
        left_5_1 += forecast_5_1_K[i]
        left_5_2 += forecast_5_2_K[i]
        left_5_3 += forecast_5_3_K[i]
        left_6_1 += forecast_6_1_K[i]
        left_6_2 += forecast_6_2_K[i]
        left_6_3 += forecast_6_3_K[i]
        C1 += c1 * (forecast_4_1_K[i]+forecast_4_2_K[i]+forecast_4_3_K[i]+forecast_5_1_K[i]+forecast_5_2_K[i]+forecast_5_3_K[i]+forecast_6_1_K[i]+forecast_6_2_K[i]+forecast_6_3_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_HB[i] + c2_2 * Economy_Req_HB[i]) * (24 * K - i + first_HB - 1) * (1 - (i + 1) / (24 * K))
    for i in range(last_HS, 24 * K):
        left_4_7 += forecast_4_7_K[i]
        left_4_8 += forecast_4_8_K[i]
        left_5_7 += forecast_5_7_K[i]
        left_5_8 += forecast_5_8_K[i]
        left_6_7 += forecast_6_7_K[i]
        left_6_8 += forecast_6_8_K[i]  
        C1 += c1 * (forecast_4_7_K[i]+forecast_4_8_K[i]+forecast_5_7_K[i]+forecast_5_8_K[i]+forecast_6_7_K[i]+forecast_6_8_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_HS[i] + c2_2 * Economy_Req_HS[i]) * (24 * K - i + first_HS - 1) * (1 - (i + 1) / (24 * K))
    for i in range(last_SB, 24 * K):
        left_7_1 += forecast_7_1_K[i]
        left_7_2 += forecast_7_2_K[i]
        left_7_3 += forecast_7_3_K[i]
        left_8_1 += forecast_8_1_K[i]
        left_8_2 += forecast_8_2_K[i]
        left_8_3 += forecast_8_3_K[i]   
        C1 += c1 * (forecast_7_1_K[i]+forecast_7_2_K[i]+forecast_7_3_K[i]+forecast_8_1_K[i]+forecast_8_2_K[i]+forecast_8_3_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_SB[i] + c2_2 * Economy_Req_SB[i]) * (24 * K - i + first_SB - 1) * (1 - (i + 1) / (24 * K))
    for i in range(last_SH, 24 * K):
        left_7_4 += forecast_7_4_K[i]
        left_7_5 += forecast_7_5_K[i]
        left_7_6 += forecast_7_6_K[i]
        left_8_4 += forecast_8_4_K[i]
        left_8_5 += forecast_8_5_K[i]
        left_8_6 += forecast_8_6_K[i]
        C1 += c1 * (forecast_7_4_K[i]+forecast_7_5_K[i]+forecast_7_6_K[i]+forecast_8_4_K[i]+forecast_8_5_K[i]+forecast_8_6_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_SH[i] + c2_2 * Economy_Req_SH[i]) * (24 * K - i + first_SH - 1) * (1 - (i + 1) / (24 * K))       
                
    left_to_leave_1_4.append(left_1_4)
    left_to_leave_1_5.append(left_1_5)
    left_to_leave_1_6.append(left_1_6)
    left_to_leave_1_7.append(left_1_7)
    left_to_leave_1_8.append(left_1_8)
    left_to_leave_2_4.append(left_2_4)
    left_to_leave_2_5.append(left_2_5)
    left_to_leave_2_6.append(left_2_6)
    left_to_leave_2_7.append(left_2_7)
    left_to_leave_2_8.append(left_2_8)
    left_to_leave_3_4.append(left_3_4)
    left_to_leave_3_5.append(left_3_5)
    left_to_leave_3_6.append(left_3_6)
    left_to_leave_3_7.append(left_3_7)
    left_to_leave_3_8.append(left_3_8)
    left_to_leave_4_1.append(left_4_1)
    left_to_leave_4_2.append(left_4_2)
    left_to_leave_4_3.append(left_4_3)
    left_to_leave_4_7.append(left_4_7)
    left_to_leave_4_8.append(left_4_8)
    left_to_leave_5_1.append(left_5_1)
    left_to_leave_5_2.append(left_5_2)
    left_to_leave_5_3.append(left_5_3)
    left_to_leave_5_7.append(left_5_7)
    left_to_leave_5_8.append(left_5_8)
    left_to_leave_6_1.append(left_6_1)
    left_to_leave_6_2.append(left_6_2)
    left_to_leave_6_3.append(left_6_3)
    left_to_leave_6_7.append(left_6_7)
    left_to_leave_6_8.append(left_6_8)
    left_to_leave_7_1.append(left_7_1)
    left_to_leave_7_2.append(left_7_2)
    left_to_leave_7_3.append(left_7_3)
    left_to_leave_7_4.append(left_7_4)
    left_to_leave_7_5.append(left_7_5)
    left_to_leave_7_6.append(left_7_6)
    left_to_leave_8_1.append(left_8_1)
    left_to_leave_8_2.append(left_8_2)
    left_to_leave_8_3.append(left_8_3)
    left_to_leave_8_4.append(left_8_4)
    left_to_leave_8_5.append(left_8_5)
    left_to_leave_8_6.append(left_8_6)
                      
    # 计算每个航段上客机和货机运输的量
    passengerTrans_BH = 0
    passengerTrans_BS = 0
    passengerTrans_HB = 0
    passengerTrans_HS = 0
    passengerTrans_SB = 0
    passengerTrans_SH = 0
    cargoTrans = 0
    cargoTrans_BH = 0
    cargoTrans_HS = 0
    cargoTrans_SB = 0
    for w in range(1,3):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                passengerTrans_BH += (x_1_4[i,j,w]+x_1_5[i,j,w]+x_1_6[i,j,w]+x_2_4[i,j,w]+x_2_5[i,j,w]+x_2_6[i,j,w]+x_3_4[i,j,w]+x_3_5[i,j,w]+x_3_6[i,j,w])
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                passengerTrans_BS += (x_1_7[i,j,w]+x_1_8[i,j,w]+x_2_7[i,j,w]+x_2_8[i,j,w]+x_3_7[i,j,w]+x_3_8[i,j,w])
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                passengerTrans_HB += (x_4_1[i,j,w]+x_4_2[i,j,w]+x_4_3[i,j,w]+x_5_1[i,j,w]+x_5_2[i,j,w]+x_5_3[i,j,w]+x_6_1[i,j,w]+x_6_2[i,j,w]+x_6_3[i,j,w])
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                passengerTrans_HS += (x_4_7[i,j,w]+x_4_8[i,j,w]+x_5_7[i,j,w]+x_5_8[i,j,w]+x_6_7[i,j,w]+x_6_8[i,j,w])
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                passengerTrans_SB += (x_7_1[i,j,w]+x_7_2[i,j,w]+x_7_3[i,j,w]+x_8_1[i,j,w]+x_8_2[i,j,w]+x_8_3[i,j,w])
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                passengerTrans_SH += (x_7_4[i,j,w]+x_7_5[i,j,w]+x_7_6[i,j,w]+x_8_4[i,j,w]+x_8_5[i,j,w]+x_8_6[i,j,w])
        for j in range(N*K):
            for i in range(cargo_BH[j]):
                cargoTrans += (y_1_4[i,j,w]+y_1_5[i,j,w]+y_1_6[i,j,w]+y_2_4[i,j,w]+y_2_5[i,j,w]+y_2_6[i,j,w]+y_3_4[i,j,w]+y_3_5[i,j,w]+y_3_6[i,j,w]+y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w])
                cargoTrans_BH += (y_1_4[i,j,w]+y_1_5[i,j,w]+y_1_6[i,j,w]+y_2_4[i,j,w]+y_2_5[i,j,w]+y_2_6[i,j,w]+y_3_4[i,j,w]+y_3_5[i,j,w]+y_3_6[i,j,w]+y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w])
                cargoTrans_HS += (y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w])
            for i in range(cargo_HS[j]):
                cargoTrans += (y_4_7[i,j,w]+y_4_8[i,j,w]+y_5_7[i,j,w]+y_5_8[i,j,w]+y_6_7[i,j,w]+y_6_8[i,j,w]+y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w])
                cargoTrans_HS += (y_4_7[i,j,w]+y_4_8[i,j,w]+y_5_7[i,j,w]+y_5_8[i,j,w]+y_6_7[i,j,w]+y_6_8[i,j,w]+y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w])
                cargoTrans_SB += (y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w])
            for i in range(cargo_SB[j]):
                cargoTrans += (y_7_1[i,j,w]+y_7_2[i,j,w]+y_7_3[i,j,w]+y_8_1[i,j,w]+y_8_2[i,j,w]+y_8_3[i,j,w]+y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w])
                cargoTrans_SB += (y_7_1[i,j,w]+y_7_2[i,j,w]+y_7_3[i,j,w]+y_8_1[i,j,w]+y_8_2[i,j,w]+y_8_3[i,j,w]+y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w])
                cargoTrans_BH += (y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w])
    passengerTrans = passengerTrans_BH+passengerTrans_BS+passengerTrans_HB+passengerTrans_HS+passengerTrans_SB+passengerTrans_SH
    
    # 只有客机运输成本是分段计价的
    zBH = {}
    zBS = {}
    zHB = {}
    zHS = {}
    zSB = {}
    zSH = {}
    A_BH = m.addVars(range(len(FR_BH)), vtype=GRB.BINARY)
    A_BS = m.addVars(range(len(FR_BS)), vtype=GRB.BINARY)
    A_HB = m.addVars(range(len(FR_HB)), vtype=GRB.BINARY)
    A_HS = m.addVars(range(len(FR_HS)), vtype=GRB.BINARY)
    A_SB = m.addVars(range(len(FR_SB)), vtype=GRB.BINARY)
    A_SH = m.addVars(range(len(FR_SH)), vtype=GRB.BINARY)
    
    for r in range(len(FR_BH)):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                zBH[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                zBS[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                zHB[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                zHS[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                zSB[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                zSH[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                
    m.addConstr(gp.quicksum(A_BH[r] for r in range(len(FR_BH))) == 1)
    m.addConstr(gp.quicksum(A_BS[r] for r in range(len(FR_BS))) == 1)
    m.addConstr(gp.quicksum(A_HB[r] for r in range(len(FR_HB))) == 1)
    m.addConstr(gp.quicksum(A_HS[r] for r in range(len(FR_HS))) == 1)
    m.addConstr(gp.quicksum(A_SB[r] for r in range(len(FR_SB))) == 1)
    m.addConstr(gp.quicksum(A_SH[r] for r in range(len(FR_SH))) == 1)
    
    for r in range(len(FR_BH)):
        for j in range(len(passengerTime_BH)):
            m.addConstr(gp.quicksum(x_1_4[i,j,w]+x_1_5[i,j,w]+x_1_6[i,j,w]+x_2_4[i,j,w]+x_2_5[i,j,w]+x_2_6[i,j,w]+x_3_4[i,j,w]+x_3_5[i,j,w]+x_3_6[i,j,w] for w in range(1,3) for i in range(passengerTime_BH[j])) >= lBH[r] * A_BH[r])
        for j in range(len(passengerTime_BS)):
            m.addConstr(gp.quicksum(x_1_7[i,j,w]+x_1_8[i,j,w]+x_2_7[i,j,w]+x_2_8[i,j,w]+x_3_7[i,j,w]+x_3_8[i,j,w] for w in range(1,3) for i in range(passengerTime_BS[j])) >= lBS[r] * A_BS[r])
        for j in range(len(passengerTime_HB)):
            m.addConstr(gp.quicksum(x_4_1[i,j,w]+x_4_2[i,j,w]+x_4_3[i,j,w]+x_5_1[i,j,w]+x_5_2[i,j,w]+x_5_3[i,j,w]+x_6_1[i,j,w]+x_6_2[i,j,w]+x_6_3[i,j,w] for w in range(1,3) for i in range(passengerTime_HB[j])) >= lHB[r] * A_HB[r])
        for j in range(len(passengerTime_HS)):
            m.addConstr(gp.quicksum(x_4_7[i,j,w]+x_4_8[i,j,w]+x_5_7[i,j,w]+x_5_8[i,j,w]+x_6_7[i,j,w]+x_6_8[i,j,w] for w in range(1,3) for i in range(passengerTime_HS[j])) >= lHS[r] * A_HS[r])
        for j in range(len(passengerTime_SB)):
            m.addConstr(gp.quicksum(x_7_1[i,j,w]+x_7_2[i,j,w]+x_7_3[i,j,w]+x_8_1[i,j,w]+x_8_2[i,j,w]+x_8_3[i,j,w] for w in range(1,3) for i in range(passengerTime_SB[j])) >= lSB[r] * A_SB[r])
        for j in range(len(passengerTime_SH)):
            m.addConstr(gp.quicksum(x_7_4[i,j,w]+x_7_5[i,j,w]+x_7_6[i,j,w]+x_8_4[i,j,w]+x_8_5[i,j,w]+x_8_6[i,j,w] for w in range(1,3) for i in range(passengerTime_SH[j])) >= lSH[r] * A_SH[r])
        
    for r in range(len(FR_BH)):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                m.addConstr(zBH[i,j,r] <= A_BH[r] * forecast_BH_K[i])
                m.addConstr(zBH[i,j,r] <= (x_1_4[i,j,1]+x_1_5[i,j,1]+x_1_6[i,j,1]+x_2_4[i,j,1]+x_2_5[i,j,1]+x_2_6[i,j,1]+x_3_4[i,j,1]+x_3_5[i,j,1]+x_3_6[i,j,1]+x_1_4[i,j,2]+x_1_5[i,j,2]+x_1_6[i,j,2]+x_2_4[i,j,2]+x_2_5[i,j,2]+x_2_6[i,j,2]+x_3_4[i,j,2]+x_3_5[i,j,2]+x_3_6[i,j,2]))
                m.addConstr(zBH[i,j,r] >= (x_1_4[i,j,1]+x_1_5[i,j,1]+x_1_6[i,j,1]+x_2_4[i,j,1]+x_2_5[i,j,1]+x_2_6[i,j,1]+x_3_4[i,j,1]+x_3_5[i,j,1]+x_3_6[i,j,1]+x_1_4[i,j,2]+x_1_5[i,j,2]+x_1_6[i,j,2]+x_2_4[i,j,2]+x_2_5[i,j,2]+x_2_6[i,j,2]+x_3_4[i,j,2]+x_3_5[i,j,2]+x_3_6[i,j,2] - forecast_BH_K[i] * (1 - A_BH[r])))
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                m.addConstr(zBS[i,j,r] <= A_BS[r] * forecast_BS_K[i])
                m.addConstr(zBS[i,j,r] <= (x_1_7[i,j,1]+x_1_8[i,j,1]+x_2_7[i,j,1]+x_2_8[i,j,1]+x_3_7[i,j,1]+x_3_8[i,j,1]+x_1_7[i,j,2]+x_1_8[i,j,2]+x_2_7[i,j,2]+x_2_8[i,j,2]+x_3_7[i,j,2]+x_3_8[i,j,2]))
                m.addConstr(zBS[i,j,r] >= (x_1_7[i,j,1]+x_1_8[i,j,1]+x_2_7[i,j,1]+x_2_8[i,j,1]+x_3_7[i,j,1]+x_3_8[i,j,1]+x_1_7[i,j,2]+x_1_8[i,j,2]+x_2_7[i,j,2]+x_2_8[i,j,2]+x_3_7[i,j,2]+x_3_8[i,j,2] - forecast_BS_K[i] * (1 - A_BS[r])))
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                m.addConstr(zHB[i,j,r] <= A_HB[r] * forecast_HB_K[i])
                m.addConstr(zHB[i,j,r] <= (x_4_1[i,j,1]+x_4_2[i,j,1]+x_4_3[i,j,1]+x_5_1[i,j,1]+x_5_2[i,j,1]+x_5_3[i,j,1]+x_6_1[i,j,1]+x_6_2[i,j,1]+x_6_3[i,j,1]+x_4_1[i,j,2]+x_4_2[i,j,2]+x_4_3[i,j,2]+x_5_1[i,j,2]+x_5_2[i,j,2]+x_5_3[i,j,2]+x_6_1[i,j,2]+x_6_2[i,j,2]+x_6_3[i,j,2]))
                m.addConstr(zHB[i,j,r] >= (x_4_1[i,j,1]+x_4_2[i,j,1]+x_4_3[i,j,1]+x_5_1[i,j,1]+x_5_2[i,j,1]+x_5_3[i,j,1]+x_6_1[i,j,1]+x_6_2[i,j,1]+x_6_3[i,j,1]+x_4_1[i,j,2]+x_4_2[i,j,2]+x_4_3[i,j,2]+x_5_1[i,j,2]+x_5_2[i,j,2]+x_5_3[i,j,2]+x_6_1[i,j,2]+x_6_2[i,j,2]+x_6_3[i,j,2] - forecast_HB_K[i] * (1 - A_HB[r])))
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                m.addConstr(zHS[i,j,r] <= A_HS[r] * forecast_HS_K[i])
                m.addConstr(zHS[i,j,r] <= (x_4_7[i,j,1]+x_4_8[i,j,1]+x_5_7[i,j,1]+x_5_8[i,j,1]+x_6_7[i,j,1]+x_6_8[i,j,1]+x_4_7[i,j,2]+x_4_8[i,j,2]+x_5_7[i,j,2]+x_5_8[i,j,2]+x_6_7[i,j,2]+x_6_8[i,j,2]))
                m.addConstr(zHS[i,j,r] >= (x_4_7[i,j,1]+x_4_8[i,j,1]+x_5_7[i,j,1]+x_5_8[i,j,1]+x_6_7[i,j,1]+x_6_8[i,j,1]+x_4_7[i,j,2]+x_4_8[i,j,2]+x_5_7[i,j,2]+x_5_8[i,j,2]+x_6_7[i,j,2]+x_6_8[i,j,2] - forecast_HS_K[i] * (1 - A_HS[r])))
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                m.addConstr(zSB[i,j,r] <= A_BH[r] * forecast_SB_K[i])
                m.addConstr(zSB[i,j,r] <= (x_7_1[i,j,1]+x_7_2[i,j,1]+x_7_3[i,j,1]+x_8_1[i,j,1]+x_8_2[i,j,1]+x_8_3[i,j,1]+x_7_1[i,j,2]+x_7_2[i,j,2]+x_7_3[i,j,2]+x_8_1[i,j,2]+x_8_2[i,j,2]+x_8_3[i,j,2]))
                m.addConstr(zSB[i,j,r] >= (x_7_1[i,j,1]+x_7_2[i,j,1]+x_7_3[i,j,1]+x_8_1[i,j,1]+x_8_2[i,j,1]+x_8_3[i,j,1]+x_7_1[i,j,2]+x_7_2[i,j,2]+x_7_3[i,j,2]+x_8_1[i,j,2]+x_8_2[i,j,2]+x_8_3[i,j,2] - forecast_SB_K[i] * (1 - A_SB[r])))
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                m.addConstr(zSH[i,j,r] <= A_SH[r] * forecast_SH_K[i])
                m.addConstr(zSH[i,j,r] <= (x_7_4[i,j,1]+x_7_5[i,j,1]+x_7_6[i,j,1]+x_8_4[i,j,1]+x_8_5[i,j,1]+x_8_6[i,j,1]+x_7_4[i,j,2]+x_7_5[i,j,2]+x_7_6[i,j,2]+x_8_4[i,j,2]+x_8_5[i,j,2]+x_8_6[i,j,2]))
                m.addConstr(zSH[i,j,r] >= (x_7_4[i,j,1]+x_7_5[i,j,1]+x_7_6[i,j,1]+x_8_4[i,j,1]+x_8_5[i,j,1]+x_8_6[i,j,1]+x_7_4[i,j,2]+x_7_5[i,j,2]+x_7_6[i,j,2]+x_8_4[i,j,2]+x_8_5[i,j,2]+x_8_6[i,j,2] - forecast_SH_K[i] * (1 - A_SH[r])))
                
    for r in range(len(FR_BH)):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                C5 += FR_BH[r] * zBH[i,j,r]
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                C5 += FR_BS[r] * zBS[i,j,r]
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                C5 += FR_HB[r] * zHB[i,j,r]
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                C5 += FR_HS[r] * zHS[i,j,r]
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                C5 += FR_SB[r] * zSB[i,j,r]
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                C5 += FR_SH[r] * zSH[i,j,r]
    
    cargo_operating_perHour = cargo_per + L * OilPrice
    
    nBH = {}
    nHS = {}
    nSB = {}
    M = 0.0001
    for j in range(N*K):
        nBH[j] = m.addVar(vtype=GRB.BINARY)
        nHS[j] = m.addVar(vtype=GRB.BINARY)
        nSB[j] = m.addVar(vtype=GRB.BINARY)
        
    for j in range(N*K):
        m.addConstr(nBH[j] >= M * gp.quicksum((y_1_4[i,j,w]+y_1_5[i,j,w]+y_1_6[i,j,w]+y_2_4[i,j,w]+y_2_5[i,j,w]+y_2_6[i,j,w]+y_3_4[i,j,w]+y_3_5[i,j,w]+y_3_6[i,j,w]+y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w]) for i in range(cargo_BH[j]) for w in range(1,3)) + M * gp.quicksum(y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w] for i in range(cargo_SB[j]) for w in range(1,3)))
        m.addConstr(nHS[j] >= M * gp.quicksum((y_4_7[i,j,w]+y_4_8[i,j,w]+y_5_7[i,j,w]+y_5_8[i,j,w]+y_6_7[i,j,w]+y_6_8[i,j,w]+y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w]) for i in range(cargo_HS[j]) for w in range(1,3)) + M * gp.quicksum(y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w] for i in range(cargo_BH[j]) for w in range(1,3)))
        m.addConstr(nSB[j] >= M * gp.quicksum((y_7_1[i,j,w]+y_7_2[i,j,w]+y_7_3[i,j,w]+y_8_1[i,j,w]+y_8_2[i,j,w]+y_8_3[i,j,w]+y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w]) for i in range(cargo_SB[j]) for w in range(1,3)) + M * gp.quicksum(y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w] for i in range(cargo_HS[j]) for w in range(1,3)))
        
    cargoUsed_BH = 0
    cargoUsed_HS = 0
    cargoUsed_SB = 0
    for j in range(N*K):
        cargoUsed_BH += nBH[j]
        cargoUsed_HS += nHS[j]
        cargoUsed_SB += nSB[j]
        C7 += cargo_operating_perHour * (Tcargo_1*nBH[j]+Tcargo_2*nHS[j]+Tcargo_3*nSB[j])
    
    requi = sum(forecast_BH_K)+sum(forecast_BS_K)+sum(forecast_HB_K)+sum(forecast_HS_K)+sum(forecast_SB_K)+sum(forecast_SH_K)
    unTrans = requi - transported_1 - transported_2
    untransprop = unTrans / requi
    
    m.setObjective(theta1 * (C1 + C2 + C3 + C4 + C5 + C6 + C7) + theta2 * untransprop, GRB.MINIMIZE)
    m.optimize()
    
    cargo_operating = cargo_operating_perHour * (Tcargo_1+Tcargo_2+Tcargo_3) * max(cargoUsed_BH.getValue(),cargoUsed_HS.getValue(),cargoUsed_SB.getValue())
    
    
    
    result1 = C1+C2+C3.getValue()+C4.getValue()+C5.getValue()+C6.getValue()+cargo_operating
    result2 = C3.getValue()+C2
    result3 = C4.getValue()+C1
    result4 = C5.getValue()
    result5 = cargo_operating
    result6 = transported_1.getValue()
    result7 = transported_2.getValue()
    result8 = unTrans.getValue()
    result9 = requi
    result10 = passengerTrans.getValue()
    result11 = cargoTrans.getValue()
    result12 = C6.getValue()
    result13 = passengerTrans_BH.getValue()
    result14 = passengerTrans_BS.getValue()
    result15 = passengerTrans_HB.getValue()
    result16 = passengerTrans_HS.getValue()
    result17 = passengerTrans_SB.getValue()
    result18 = passengerTrans_SH.getValue()
    result19 = cargoTrans_BH.getValue()
    result20 = cargoTrans_HS.getValue()
    result21 = cargoTrans_SB.getValue()
    result22 = max(cargoUsed_BH.getValue(),cargoUsed_HS.getValue(),cargoUsed_SB.getValue())
    output1 = passengerTotalBH.getValue()
    output2 = passengerTotalBS.getValue()
    output3 = passengerTotalHB.getValue()
    output4 = passengerTotalHS.getValue()
    output5 = passengerTotalSB.getValue()
    output6 = passengerTotalSH.getValue()
    output7 = cargoTotalBH.getValue()
    output8 = cargoTotalBS.getValue()
    output9 = cargoTotalHB.getValue()
    output10 = cargoTotalHS.getValue()
    output11 = cargoTotalSB.getValue()
    output12 = cargoTotalSH.getValue()
    output13 = desertTotalBH.getValue()
    output14 = desertTotalBS.getValue()
    output15 = desertTotalHB.getValue()
    output16 = desertTotalHS.getValue()
    output17 = desertTotalSB.getValue()
    output18 = desertTotalSH.getValue()
    
    return result1,result2,result3,result4,result5,result6,result7,result8,result9,result10,result11,result12,result13,result14,result15,result16,result17,result18,result19,result20,result21,result22,output1,output2,output3,output4,output5,output6,output7,output8,output9,output10,output11,output12,output13,output14,output15,output16,output17,output18

# ARIMA模型下的结果

print("----------------------------------ARIMA模型下的预测----------------------------------\n")
pred_num = 12 # 假设预测的周期总长度
for s in range(1,pred_num+1):
    start_time = time.time()
    ave1 = 0
    ave2 = 0
    ave3 = 0
    ave4 = 0
    ave5 = 0
    ave6 = 0
    ave7 = 0
    ave8 = 0
    ave9 = 0
    ave10 = 0
    ave11 = 0
    ave12 = 0
    ave13 = 0
    ave14 = 0
    ave15 = 0
    ave16 = 0
    ave17 = 0
    ave18 = 0
    ave19 = 0
    ave20 = 0
    ave21 = 0
    ave22 = 0
    ave23 = 0
    ave24 = 0
    ave25 = 0
    ave26 = 0
    ave27 = 0
    TotalCargoUsed = 0
    ave28 = 0
    ave29 = 0
    ave30 = 0
    ave31 = 0
    ave32 = 0
    ave33 = 0
    ave34 = 0
    ave35 = 0
    ave36 = 0
    ave37 = 0
    ave38 = 0
    ave39 = 0
    ave40 = 0
    ave41 = 0
    ave42 = 0
    ave43 = 0
    ave44 = 0
    ave45 = 0
    
    K = s # 假设周期长度
    total_days = K
    predict = 0
    count = 0
    while total_days < pred_num:
        train = Original_Requirements.iloc[0:(60 + predict)] # 训练集数据
        test = Original_Requirements.iloc[(60 + predict):90] # 测试集数据（真实数据）
        predict += K
        total_days += K
        count += 1
        ADF_BH = adfuller(train['北京→杭州'].dropna())
        if (ADF_BH[1] > 0.05):
            train_diff1 = train.copy()
            train_diff1.iloc[:, 1:] = train_diff1.iloc[:, 1:].diff(1)
            train_diff1.dropna(inplace=True)
            ADF_BH_1 = adfuller(train_diff1['北京→杭州'].dropna())
        left_days = pred_num - total_days
        train = Original_Requirements.iloc[0:(60 + predict)] # 训练集数据
        test = Original_Requirements.iloc[(60 + predict):(60 + pred_num)] # 测试集数据（真实数据）
        ADF_BH = adfuller(train['北京→杭州'].dropna())
    if (ADF_BH[1] > 0.05):
        train_diff1 = train.copy()
        train_diff1.iloc[:, 1:] = train_diff1.iloc[:, 1:].diff(1)
        train_diff1.dropna(inplace=True)
        ADF_BH_1 = adfuller(train_diff1['北京→杭州'].dropna())
        
    total_days = 0
    predict = 0
    count = 0
    total_cost = 0
    delay_cost = 0
    storage_cost = 0
    transport_cost = 0
    cargoOperating_cost = 0
    type1 = 0
    type2 = 0
    passengerFlight = 0
    cargoFlight = 0
    desert = 0
    total_requirement = 0
    desert_cost = 0
    passengerFreight_BH = 0
    passengerFreight_BS = 0
    passengerFreight_HB = 0
    passengerFreight_HS = 0
    passengerFreight_SB = 0
    passengerFreight_SH = 0
    cargoFreight_BH = 0
    cargoFreight_HS = 0
    cargoFreight_SB = 0
    TotalCargo = 0
    TotalTra_BH_pass = 0
    TotalTra_BS_pass = 0
    TotalTra_HB_pass = 0
    TotalTra_HS_pass = 0
    TotalTra_SB_pass = 0
    TotalTra_SH_pass = 0
    TotalTra_BH_carg = 0
    TotalTra_BS_carg = 0
    TotalTra_HB_carg = 0
    TotalTra_HS_carg = 0
    TotalTra_SB_carg = 0
    TotalTra_SH_carg = 0
    Totaldesr_BH = 0
    Totaldesr_BS = 0
    Totaldesr_HB = 0
    Totaldesr_HS = 0
    Totaldesr_SB = 0
    Totaldesr_SH = 0
        
    left_to_leave_1_4 = [0]
    left_to_leave_1_5 = [0]
    left_to_leave_1_6 = [0]
    left_to_leave_1_7 = [0]
    left_to_leave_1_8 = [0]
    left_to_leave_2_4 = [0]
    left_to_leave_2_5 = [0]
    left_to_leave_2_6 = [0]
    left_to_leave_2_7 = [0]
    left_to_leave_2_8 = [0]
    left_to_leave_3_4 = [0]
    left_to_leave_3_5 = [0]
    left_to_leave_3_6 = [0]
    left_to_leave_3_7 = [0]
    left_to_leave_3_8 = [0]
    left_to_leave_4_1 = [0]
    left_to_leave_4_2 = [0]
    left_to_leave_4_3 = [0]
    left_to_leave_4_7 = [0]
    left_to_leave_4_8 = [0]
    left_to_leave_5_1 = [0]
    left_to_leave_5_2 = [0]
    left_to_leave_5_3 = [0]
    left_to_leave_5_7 = [0]
    left_to_leave_5_8 = [0]
    left_to_leave_6_1 = [0]
    left_to_leave_6_2 = [0]
    left_to_leave_6_3 = [0]
    left_to_leave_6_7 = [0]
    left_to_leave_6_8 = [0]
    left_to_leave_7_1 = [0]
    left_to_leave_7_2 = [0]
    left_to_leave_7_3 = [0]
    left_to_leave_7_4 = [0]
    left_to_leave_7_5 = [0]
    left_to_leave_7_6 = [0]
    left_to_leave_8_1 = [0]
    left_to_leave_8_2 = [0]
    left_to_leave_8_3 = [0]
    left_to_leave_8_4 = [0]
    left_to_leave_8_5 = [0]
    left_to_leave_8_6 = [0]
            
    theta1 = 1 # 成本权重
    theta2 = 0 # 丢弃比例权重
    
    while total_days < (pred_num - K):
        train = Original_Requirements.iloc[0:(60 + predict)] # 训练集数据
        test = Original_Requirements.iloc[(60 + predict):(60 + pred_num)] # 测试集数据（真实数据）
        # p、q值选择
        train_results = sm.tsa.arma_order_select_ic(train_diff1['北京→杭州'], ic=['aic', 'bic'], max_ar=5, max_ma=5)
        pARIMA = train_results.aic_min_order[0]
        dARIMA = 1
        qARIMA = train_results.aic_min_order[1]
        del train_results.aic_min_order
        predict += K
        total_days += K
        count += 1
        Cost_add,delayCost_add,storageCost_add,transportCost_add,cargo_add,type1_add,type2_add,desert_add,req_add,passengerFlight_add,cargoFlight_add,desertCost_add,passFreightBH,passFreightBS,passFreightHB,passFreightHS,passFreightSB,passFreightSH,cargFreightBH,cargFreightHS,cargFreightSB,TotalCargo_add,Tra_BH_pass,Tra_BS_pass,Tra_HB_pass,Tra_HS_pass,Tra_SB_pass,Tra_SH_pass,Tra_BH_carg,Tra_BS_carg,Tra_HB_carg,Tra_HS_carg,Tra_SB_carg,Tra_SH_carg,desr_BH,desr_BS,desr_HB,desr_HS,desr_SB,desr_SH = mainFunctionARIMA(K)
        total_cost += Cost_add
        delay_cost += delayCost_add
        storage_cost += storageCost_add
        transport_cost += transportCost_add
        cargoOperating_cost += cargo_add
        type1 += type1_add
        type2 += type2_add
        desert += desert_add
        total_requirement += req_add
        passengerFlight += passengerFlight_add
        cargoFlight += cargoFlight_add
        desert_cost += desertCost_add
        passengerFreight_BH += passFreightBH
        passengerFreight_BS += passFreightBS
        passengerFreight_HB += passFreightHB
        passengerFreight_HS += passFreightHS
        passengerFreight_SB += passFreightSB
        passengerFreight_SH += passFreightSH
        cargoFreight_BH += cargFreightBH
        cargoFreight_HS += cargFreightHS
        cargoFreight_SB += cargFreightSB
        TotalCargo += TotalCargo_add
        TotalTra_BH_pass += Tra_BH_pass
        TotalTra_BS_pass += Tra_BS_pass
        TotalTra_HB_pass += Tra_HB_pass
        TotalTra_HS_pass += Tra_HS_pass
        TotalTra_SB_pass += Tra_SB_pass
        TotalTra_SH_pass += Tra_SH_pass
        TotalTra_BH_carg += Tra_BH_carg
        TotalTra_BS_carg += Tra_BS_carg
        TotalTra_HB_carg += Tra_HB_carg
        TotalTra_HS_carg += Tra_HS_carg
        TotalTra_SB_carg += Tra_SB_carg
        TotalTra_SH_carg += Tra_SH_carg
        Totaldesr_BH += desr_BH
        Totaldesr_BS += desr_BS
        Totaldesr_HB += desr_HB
        Totaldesr_HS += desr_HS
        Totaldesr_SB += desr_SB
        Totaldesr_SH += desr_SH
        
    train = Original_Requirements.iloc[0:(60 + predict)] # 训练集数据
    test = Original_Requirements.iloc[(60 + predict):(60 + pred_num)] # 测试集数据（真实数据）
    # p、q值选择
    train_results = sm.tsa.arma_order_select_ic(train_diff1['北京→杭州'], ic=['aic', 'bic'], max_ar=5, max_ma=5)
    pARIMA = train_results.aic_min_order[0]
    dARIMA = 1
    qARIMA = train_results.aic_min_order[1]
    del train_results.aic_min_order
    
    K = pred_num - total_days
    Cost_add,delayCost_add,storageCost_add,transportCost_add,cargo_add,type1_add,type2_add,desert_add,req_add,passengerFlight_add,cargoFlight_add,desertCost_add,passFreightBH,passFreightBS,passFreightHB,passFreightHS,passFreightSB,passFreightSH,cargFreightBH,cargFreightHS,cargFreightSB,TotalCargo_add,Tra_BH_pass,Tra_BS_pass,Tra_HB_pass,Tra_HS_pass,Tra_SB_pass,Tra_SH_pass,Tra_BH_carg,Tra_BS_carg,Tra_HB_carg,Tra_HS_carg,Tra_SB_carg,Tra_SH_carg,desr_BH,desr_BS,desr_HB,desr_HS,desr_SB,desr_SH = mainFunctionARIMA(K)
    total_cost += Cost_add
    delay_cost += delayCost_add
    storage_cost += storageCost_add
    transport_cost += transportCost_add
    cargoOperating_cost += cargo_add
    type1 += type1_add
    type2 += type2_add
    desert += desert_add
    total_requirement += req_add
    passengerFlight += passengerFlight_add
    cargoFlight += cargoFlight_add
    desert_cost += desertCost_add
    passengerFreight_BH += passFreightBH
    passengerFreight_BS += passFreightBS
    passengerFreight_HB += passFreightHB
    passengerFreight_HS += passFreightHS
    passengerFreight_SB += passFreightSB
    passengerFreight_SH += passFreightSH
    cargoFreight_BH += cargFreightBH
    cargoFreight_HS += cargFreightHS
    cargoFreight_SB += cargFreightSB
    TotalCargo += TotalCargo_add
    TotalTra_BH_pass += Tra_BH_pass
    TotalTra_BS_pass += Tra_BS_pass
    TotalTra_HB_pass += Tra_HB_pass
    TotalTra_HS_pass += Tra_HS_pass
    TotalTra_SB_pass += Tra_SB_pass
    TotalTra_SH_pass += Tra_SH_pass
    TotalTra_BH_carg += Tra_BH_carg
    TotalTra_BS_carg += Tra_BS_carg
    TotalTra_HB_carg += Tra_HB_carg
    TotalTra_HS_carg += Tra_HS_carg
    TotalTra_SB_carg += Tra_SB_carg
    TotalTra_SH_carg += Tra_SH_carg
    Totaldesr_BH += desr_BH
    Totaldesr_BS += desr_BS
    Totaldesr_HB += desr_HB
    Totaldesr_HS += desr_HS
    Totaldesr_SB += desr_SB
    Totaldesr_SH += desr_SH
        
    ave1 += total_cost
    ave2 += delay_cost
    ave3 += storage_cost
    ave4 += transport_cost
    ave5 += cargoOperating_cost
    ave6 += desert_cost
    ave7 += total_requirement
    ave8 += type1
    ave9 += type2
    ave10 += passengerFlight
    ave11 += cargoFlight
    ave12 += desert
    ave13 += passengerFlight/(passengerCapacity*pred_num)
    ave14 += cargoFlight/(3*Q*TotalCargo)
    ave15 += passengerFreight_BH/(passengerCapacity_BH*pred_num)
    ave16 += passengerFreight_BS/(passengerCapacity_BS*pred_num)
    ave17 += passengerFreight_HB/(passengerCapacity_HB*pred_num)
    ave18 += passengerFreight_HS/(passengerCapacity_HS*pred_num)
    ave19 += passengerFreight_SB/(passengerCapacity_SB*pred_num)
    ave20 += passengerFreight_SH/(passengerCapacity_SH*pred_num)
    ave21 += cargoFreight_BH/(Q*TotalCargo)
    ave22 += cargoFreight_HS/(Q*TotalCargo)
    ave23 += cargoFreight_SB/(Q*TotalCargo)
    ave24 += cargoFreight_BH/(Q*pred_num*N)
    ave25 += cargoFreight_HS/(Q*pred_num*N)
    ave26 += cargoFreight_SB/(Q*pred_num*N)
    ave27 += (cargoFreight_BH+cargoFreight_HS+cargoFreight_SB)/(3*Q*pred_num*N)
    TotalCargoUsed += TotalCargo/pred_num
    ave28 += TotalTra_BH_pass
    ave29 += TotalTra_BS_pass
    ave30 += TotalTra_HB_pass
    ave31 += TotalTra_HS_pass
    ave32 += TotalTra_SB_pass
    ave33 += TotalTra_SH_pass
    ave34 += TotalTra_BH_carg
    ave35 += TotalTra_BS_carg
    ave36 += TotalTra_HB_carg
    ave37 += TotalTra_HS_carg
    ave38 += TotalTra_SB_carg
    ave39 += TotalTra_SH_carg
    ave40 += Totaldesr_BH
    ave41 += Totaldesr_BS
    ave42 += Totaldesr_HB
    ave43 += Totaldesr_HS
    ave44 += Totaldesr_SB
    ave45 += Totaldesr_SH
    
    print(f"\n\n---------------------------------K = {s}时的结果-----------------------------------------------------------")
    end_time = time.time()
    execution_time = end_time - start_time
    print(f"平均总成本为{ave1}")
    print(f"平均逾期成本为{ave2}")
    print(f"平均仓储成本为{ave3}")
    print(f"平均客机成本为{ave4}")
    print(f"平均货机成本为{ave5}")
    print(f"平均丢弃成本为{ave6}")
    print(f"平均预测总需求为{ave7}")
    print(f"平均货物1为{ave8}")
    print(f"平均货物2为{ave9}")
    print(f"平均客机运载量为{ave10}")
    print(f"平均货机运载量为{ave11}")
    print(f"平均丢弃量为{ave12}")
    print(f"平均客机总效率为{ave13}")
    print(f"平均货机总效率为{ave14}")
    print(f"平均每天调用货机航班数量为{TotalCargoUsed}")
    print(f"平均货机机队运力总效率为{ave27}")
    print(f"平均BH客机效率为{ave15}")
    print(f"平均BS客机效率为{ave16}")
    print(f"平均HB客机效率为{ave17}")
    print(f"平均HS客机效率为{ave18}")
    print(f"平均SB客机效率为{ave19}")
    print(f"平均SH客机效率为{ave20}")
    print(f"平均BH货机效率为{ave21}")
    print(f"平均HS货机效率为{ave22}")
    print(f"平均SB货机效率为{ave23}")
    print(f"平均BH货机机队运力使用效率为{ave24}")
    print(f"平均BH货机机队运力使用效率为{ave25}")
    print(f"平均BH货机机队运力使用效率为{ave26}")
    
    print(f"北京到杭州的货物使用客机运输重量{ave28}，使用货机运输重量{ave34}，丢弃重量{ave40}")
    print(f"北京到深圳的货物使用客机运输重量{ave29}，使用货机运输重量{ave35}，丢弃重量{ave41}")
    print(f"杭州到北京的货物使用客机运输重量{ave30}，使用货机运输重量{ave36}，丢弃重量{ave42}")
    print(f"杭州到深圳的货物使用客机运输重量{ave31}，使用货机运输重量{ave37}，丢弃重量{ave43}")
    print(f"深圳到北京的货物使用客机运输重量{ave32}，使用货机运输重量{ave38}，丢弃重量{ave44}")
    print(f"深圳到杭州的货物使用客机运输重量{ave33}，使用货机运输重量{ave39}，丢弃重量{ave45}")   
    averagecost = ave1 / ave7
    print(f"单位重量的货物订单造成的成本为{averagecost}\n")
    print(f"程序运行时间为: {execution_time} 秒")

# 已知全部需求信息下的结果

print("----------------------------------实际结果----------------------------------\n")
ave1 = 0
ave2 = 0
ave3 = 0
ave4 = 0
ave5 = 0
ave6 = 0
ave7 = 0
ave8 = 0
ave9 = 0
ave10 = 0
ave11 = 0
ave12 = 0
ave13 = 0
ave14 = 0
ave15 = 0
ave16 = 0
ave17 = 0
ave18 = 0
ave19 = 0
ave20 = 0
ave21 = 0
ave22 = 0
ave23 = 0
ave24 = 0
ave25 = 0
ave26 = 0
ave27 = 0
TotalCargoUsed = 0
ave28 = 0
ave29 = 0
ave30 = 0
ave31 = 0
ave32 = 0
ave33 = 0
ave34 = 0
ave35 = 0
ave36 = 0
ave37 = 0
ave38 = 0
ave39 = 0
ave40 = 0
ave41 = 0
ave42 = 0
ave43 = 0
ave44 = 0
ave45 = 0
    
K = pred_num # 周期长度
total_days = K
predict = 0
count = 0
while total_days < pred_num:
    train = Original_Requirements.iloc[0:(60 + predict)] # 训练集数据
    test = Original_Requirements.iloc[(60 + predict):90] # 测试集数据（真实数据）
    predict += K
    total_days += K
    count += 1
    ADF_BH = adfuller(train['北京→杭州'].dropna())
    if (ADF_BH[1] > 0.05):
        train_diff1 = train.copy()
        train_diff1.iloc[:, 1:] = train_diff1.iloc[:, 1:].diff(1)
        train_diff1.dropna(inplace=True)
        ADF_BH_1 = adfuller(train_diff1['北京→杭州'].dropna())
    left_days = pred_num - total_days
    train = Original_Requirements.iloc[0:(60 + predict)] # 训练集数据
    test = Original_Requirements.iloc[(60 + predict):(60 + pred_num)] # 测试集数据（真实数据）
    ADF_BH = adfuller(train['北京→杭州'].dropna())
if (ADF_BH[1] > 0.05):
    train_diff1 = train.copy()
    train_diff1.iloc[:, 1:] = train_diff1.iloc[:, 1:].diff(1)
    train_diff1.dropna(inplace=True)
    ADF_BH_1 = adfuller(train_diff1['北京→杭州'].dropna())
        
total_days = 0
predict = 0
count = 0
total_cost = 0
delay_cost = 0
storage_cost = 0
transport_cost = 0
cargoOperating_cost = 0
type1 = 0
type2 = 0
passengerFlight = 0
cargoFlight = 0
desert = 0
total_requirement = 0
desert_cost = 0
passengerFreight_BH = 0
passengerFreight_BS = 0
passengerFreight_HB = 0
passengerFreight_HS = 0
passengerFreight_SB = 0
passengerFreight_SH = 0
cargoFreight_BH = 0
cargoFreight_HS = 0
cargoFreight_SB = 0
TotalCargo = 0
TotalTra_BH_pass = 0
TotalTra_BS_pass = 0
TotalTra_HB_pass = 0
TotalTra_HS_pass = 0
TotalTra_SB_pass = 0
TotalTra_SH_pass = 0
TotalTra_BH_carg = 0
TotalTra_BS_carg = 0
TotalTra_HB_carg = 0
TotalTra_HS_carg = 0
TotalTra_SB_carg = 0
TotalTra_SH_carg = 0
Totaldesr_BH = 0
Totaldesr_BS = 0
Totaldesr_HB = 0
Totaldesr_HS = 0
Totaldesr_SB = 0
Totaldesr_SH = 0
        
left_to_leave_1_4 = [0]
left_to_leave_1_5 = [0]
left_to_leave_1_6 = [0]
left_to_leave_1_7 = [0]
left_to_leave_1_8 = [0]
left_to_leave_2_4 = [0]
left_to_leave_2_5 = [0]
left_to_leave_2_6 = [0]
left_to_leave_2_7 = [0]
left_to_leave_2_8 = [0]
left_to_leave_3_4 = [0]
left_to_leave_3_5 = [0]
left_to_leave_3_6 = [0]
left_to_leave_3_7 = [0]
left_to_leave_3_8 = [0]
left_to_leave_4_1 = [0]
left_to_leave_4_2 = [0]
left_to_leave_4_3 = [0]
left_to_leave_4_7 = [0]
left_to_leave_4_8 = [0]
left_to_leave_5_1 = [0]
left_to_leave_5_2 = [0]
left_to_leave_5_3 = [0]
left_to_leave_5_7 = [0]
left_to_leave_5_8 = [0]
left_to_leave_6_1 = [0]
left_to_leave_6_2 = [0]
left_to_leave_6_3 = [0]
left_to_leave_6_7 = [0]
left_to_leave_6_8 = [0]
left_to_leave_7_1 = [0]
left_to_leave_7_2 = [0]
left_to_leave_7_3 = [0]
left_to_leave_7_4 = [0]
left_to_leave_7_5 = [0]
left_to_leave_7_6 = [0]
left_to_leave_8_1 = [0]
left_to_leave_8_2 = [0]
left_to_leave_8_3 = [0]
left_to_leave_8_4 = [0]
left_to_leave_8_5 = [0]
left_to_leave_8_6 = [0]
    
while total_days < (pred_num - K):
    forecast_1_4 = Original_Requirements['北京→杭州'].iloc[(60 + predict):(60 + predict + K)]
    forecast_1_5 = Original_Requirements['北京→南京'].iloc[(60 + predict):(60 + predict + K)]
    forecast_1_6 = Original_Requirements['北京→上海'].iloc[(60 + predict):(60 + predict + K)]
    forecast_1_7 = Original_Requirements['北京→深圳'].iloc[(60 + predict):(60 + predict + K)]
    forecast_1_8 = Original_Requirements['北京→香港'].iloc[(60 + predict):(60 + predict + K)]
    forecast_2_4 = Original_Requirements['潍坊→杭州'].iloc[(60 + predict):(60 + predict + K)]
    forecast_2_5 = Original_Requirements['潍坊→南京'].iloc[(60 + predict):(60 + predict + K)]
    forecast_2_6 = Original_Requirements['潍坊→上海'].iloc[(60 + predict):(60 + predict + K)]
    forecast_2_7 = Original_Requirements['潍坊→深圳'].iloc[(60 + predict):(60 + predict + K)]
    forecast_2_8 = Original_Requirements['潍坊→香港'].iloc[(60 + predict):(60 + predict + K)]
    forecast_3_4 = Original_Requirements['沈阳→杭州'].iloc[(60 + predict):(60 + predict + K)]
    forecast_3_5 = Original_Requirements['沈阳→南京'].iloc[(60 + predict):(60 + predict + K)]
    forecast_3_6 = Original_Requirements['沈阳→上海'].iloc[(60 + predict):(60 + predict + K)]
    forecast_3_7 = Original_Requirements['沈阳→深圳'].iloc[(60 + predict):(60 + predict + K)]
    forecast_3_8 = Original_Requirements['沈阳→香港'].iloc[(60 + predict):(60 + predict + K)]
    forecast_4_1 = Original_Requirements['杭州→北京'].iloc[(60 + predict):(60 + predict + K)]
    forecast_4_2 = Original_Requirements['杭州→潍坊'].iloc[(60 + predict):(60 + predict + K)]
    forecast_4_3 = Original_Requirements['杭州→沈阳'].iloc[(60 + predict):(60 + predict + K)]
    forecast_4_7 = Original_Requirements['杭州→深圳'].iloc[(60 + predict):(60 + predict + K)]
    forecast_4_8 = Original_Requirements['杭州→香港'].iloc[(60 + predict):(60 + predict + K)]
    forecast_5_1 = Original_Requirements['南京→北京'].iloc[(60 + predict):(60 + predict + K)]
    forecast_5_2 = Original_Requirements['南京→潍坊'].iloc[(60 + predict):(60 + predict + K)]
    forecast_5_3 = Original_Requirements['南京→沈阳'].iloc[(60 + predict):(60 + predict + K)]
    forecast_5_7 = Original_Requirements['南京→深圳'].iloc[(60 + predict):(60 + predict + K)]
    forecast_5_8 = Original_Requirements['南京→香港'].iloc[(60 + predict):(60 + predict + K)]
    forecast_6_1 = Original_Requirements['上海→北京'].iloc[(60 + predict):(60 + predict + K)]
    forecast_6_2 = Original_Requirements['上海→潍坊'].iloc[(60 + predict):(60 + predict + K)]
    forecast_6_3 = Original_Requirements['上海→沈阳'].iloc[(60 + predict):(60 + predict + K)]
    forecast_6_7 = Original_Requirements['上海→深圳'].iloc[(60 + predict):(60 + predict + K)]
    forecast_6_8 = Original_Requirements['上海→香港'].iloc[(60 + predict):(60 + predict + K)]
    forecast_7_1 = Original_Requirements['深圳→北京'].iloc[(60 + predict):(60 + predict + K)]
    forecast_7_2 = Original_Requirements['深圳→潍坊'].iloc[(60 + predict):(60 + predict + K)]
    forecast_7_3 = Original_Requirements['深圳→沈阳'].iloc[(60 + predict):(60 + predict + K)]
    forecast_7_4 = Original_Requirements['深圳→杭州'].iloc[(60 + predict):(60 + predict + K)]
    forecast_7_5 = Original_Requirements['深圳→南京'].iloc[(60 + predict):(60 + predict + K)]
    forecast_7_6 = Original_Requirements['深圳→上海'].iloc[(60 + predict):(60 + predict + K)]
    forecast_8_1 = Original_Requirements['香港→北京'].iloc[(60 + predict):(60 + predict + K)]
    forecast_8_2 = Original_Requirements['香港→潍坊'].iloc[(60 + predict):(60 + predict + K)]
    forecast_8_3 = Original_Requirements['香港→沈阳'].iloc[(60 + predict):(60 + predict + K)]
    forecast_8_4 = Original_Requirements['香港→杭州'].iloc[(60 + predict):(60 + predict + K)]
    forecast_8_5 = Original_Requirements['香港→南京'].iloc[(60 + predict):(60 + predict + K)]
    forecast_8_6 = Original_Requirements['香港→上海'].iloc[(60 + predict):(60 + predict + K)]
            
    predict += K
    total_days += K
    count += 1
    Cost_add,delayCost_add,storageCost_add,transportCost_add,cargo_add,type1_add,type2_add,desert_add,req_add,passengerFlight_add,cargoFlight_add,desertCost_add,passFreightBH,passFreightBS,passFreightHB,passFreightHS,passFreightSB,passFreightSH,cargFreightBH,cargFreightHS,cargFreightSB,TotalCargo_add,Tra_BH_pass,Tra_BS_pass,Tra_HB_pass,Tra_HS_pass,Tra_SB_pass,Tra_SH_pass,Tra_BH_carg,Tra_BS_carg,Tra_HB_carg,Tra_HS_carg,Tra_SB_carg,Tra_SH_carg,desr_BH,desr_BS,desr_HB,desr_HS,desr_SB,desr_SH = mainFunctionACTUAL(K)
    total_cost += Cost_add
    delay_cost += delayCost_add
    storage_cost += storageCost_add
    transport_cost += transportCost_add
    cargoOperating_cost += cargo_add
    type1 += type1_add
    type2 += type2_add
    desert += desert_add
    total_requirement += req_add
    passengerFlight += passengerFlight_add
    cargoFlight += cargoFlight_add
    desert_cost += desertCost_add
    passengerFreight_BH += passFreightBH
    passengerFreight_BS += passFreightBS
    passengerFreight_HB += passFreightHB
    passengerFreight_HS += passFreightHS
    passengerFreight_SB += passFreightSB
    passengerFreight_SH += passFreightSH
    cargoFreight_BH += cargFreightBH
    cargoFreight_HS += cargFreightHS
    cargoFreight_SB += cargFreightSB
    TotalCargo += TotalCargo_add
    TotalTra_BH_pass += Tra_BH_pass
    TotalTra_BS_pass += Tra_BS_pass
    TotalTra_HB_pass += Tra_HB_pass
    TotalTra_HS_pass += Tra_HS_pass
    TotalTra_SB_pass += Tra_SB_pass
    TotalTra_SH_pass += Tra_SH_pass
    TotalTra_BH_carg += Tra_BH_carg
    TotalTra_BS_carg += Tra_BS_carg
    TotalTra_HB_carg += Tra_HB_carg
    TotalTra_HS_carg += Tra_HS_carg
    TotalTra_SB_carg += Tra_SB_carg
    TotalTra_SH_carg += Tra_SH_carg
    Totaldesr_BH += desr_BH
    Totaldesr_BS += desr_BS
    Totaldesr_HB += desr_HB
    Totaldesr_HS += desr_HS
    Totaldesr_SB += desr_SB
    Totaldesr_SH += desr_SH
        
forecast_1_4 = Original_Requirements['北京→杭州'].iloc[(60 + predict):(60 + pred_num)]
forecast_1_5 = Original_Requirements['北京→南京'].iloc[(60 + predict):(60 + pred_num)]
forecast_1_6 = Original_Requirements['北京→上海'].iloc[(60 + predict):(60 + pred_num)]
forecast_1_7 = Original_Requirements['北京→深圳'].iloc[(60 + predict):(60 + pred_num)]
forecast_1_8 = Original_Requirements['北京→香港'].iloc[(60 + predict):(60 + pred_num)]
forecast_2_4 = Original_Requirements['潍坊→杭州'].iloc[(60 + predict):(60 + pred_num)]
forecast_2_5 = Original_Requirements['潍坊→南京'].iloc[(60 + predict):(60 + pred_num)]
forecast_2_6 = Original_Requirements['潍坊→上海'].iloc[(60 + predict):(60 + pred_num)]
forecast_2_7 = Original_Requirements['潍坊→深圳'].iloc[(60 + predict):(60 + pred_num)]
forecast_2_8 = Original_Requirements['潍坊→香港'].iloc[(60 + predict):(60 + pred_num)]
forecast_3_4 = Original_Requirements['沈阳→杭州'].iloc[(60 + predict):(60 + pred_num)]
forecast_3_5 = Original_Requirements['沈阳→南京'].iloc[(60 + predict):(60 + pred_num)]
forecast_3_6 = Original_Requirements['沈阳→上海'].iloc[(60 + predict):(60 + pred_num)]
forecast_3_7 = Original_Requirements['沈阳→深圳'].iloc[(60 + predict):(60 + pred_num)]
forecast_3_8 = Original_Requirements['沈阳→香港'].iloc[(60 + predict):(60 + pred_num)]
forecast_4_1 = Original_Requirements['杭州→北京'].iloc[(60 + predict):(60 + pred_num)]
forecast_4_2 = Original_Requirements['杭州→潍坊'].iloc[(60 + predict):(60 + pred_num)]
forecast_4_3 = Original_Requirements['杭州→沈阳'].iloc[(60 + predict):(60 + pred_num)]
forecast_4_7 = Original_Requirements['杭州→深圳'].iloc[(60 + predict):(60 + pred_num)]
forecast_4_8 = Original_Requirements['杭州→香港'].iloc[(60 + predict):(60 + pred_num)]
forecast_5_1 = Original_Requirements['南京→北京'].iloc[(60 + predict):(60 + pred_num)]
forecast_5_2 = Original_Requirements['南京→潍坊'].iloc[(60 + predict):(60 + pred_num)]
forecast_5_3 = Original_Requirements['南京→沈阳'].iloc[(60 + predict):(60 + pred_num)]
forecast_5_7 = Original_Requirements['南京→深圳'].iloc[(60 + predict):(60 + pred_num)]
forecast_5_8 = Original_Requirements['南京→香港'].iloc[(60 + predict):(60 + pred_num)]
forecast_6_1 = Original_Requirements['上海→北京'].iloc[(60 + predict):(60 + pred_num)]
forecast_6_2 = Original_Requirements['上海→潍坊'].iloc[(60 + predict):(60 + pred_num)]
forecast_6_3 = Original_Requirements['上海→沈阳'].iloc[(60 + predict):(60 + pred_num)]
forecast_6_7 = Original_Requirements['上海→深圳'].iloc[(60 + predict):(60 + pred_num)]
forecast_6_8 = Original_Requirements['上海→香港'].iloc[(60 + predict):(60 + pred_num)]
forecast_7_1 = Original_Requirements['深圳→北京'].iloc[(60 + predict):(60 + pred_num)]
forecast_7_2 = Original_Requirements['深圳→潍坊'].iloc[(60 + predict):(60 + pred_num)]
forecast_7_3 = Original_Requirements['深圳→沈阳'].iloc[(60 + predict):(60 + pred_num)]
forecast_7_4 = Original_Requirements['深圳→杭州'].iloc[(60 + predict):(60 + pred_num)]
forecast_7_5 = Original_Requirements['深圳→南京'].iloc[(60 + predict):(60 + pred_num)]
forecast_7_6 = Original_Requirements['深圳→上海'].iloc[(60 + predict):(60 + pred_num)]
forecast_8_1 = Original_Requirements['香港→北京'].iloc[(60 + predict):(60 + pred_num)]
forecast_8_2 = Original_Requirements['香港→潍坊'].iloc[(60 + predict):(60 + pred_num)]
forecast_8_3 = Original_Requirements['香港→沈阳'].iloc[(60 + predict):(60 + pred_num)]
forecast_8_4 = Original_Requirements['香港→杭州'].iloc[(60 + predict):(60 + pred_num)]
forecast_8_5 = Original_Requirements['香港→南京'].iloc[(60 + predict):(60 + pred_num)]
forecast_8_6 = Original_Requirements['香港→上海'].iloc[(60 + predict):(60 + pred_num)]
    
K = pred_num - total_days
Cost_add,delayCost_add,storageCost_add,transportCost_add,cargo_add,type1_add,type2_add,desert_add,req_add,passengerFlight_add,cargoFlight_add,desertCost_add,passFreightBH,passFreightBS,passFreightHB,passFreightHS,passFreightSB,passFreightSH,cargFreightBH,cargFreightHS,cargFreightSB,TotalCargo_add,Tra_BH_pass,Tra_BS_pass,Tra_HB_pass,Tra_HS_pass,Tra_SB_pass,Tra_SH_pass,Tra_BH_carg,Tra_BS_carg,Tra_HB_carg,Tra_HS_carg,Tra_SB_carg,Tra_SH_carg,desr_BH,desr_BS,desr_HB,desr_HS,desr_SB,desr_SH = mainFunctionACTUAL(K)
total_cost += Cost_add
delay_cost += delayCost_add
storage_cost += storageCost_add
transport_cost += transportCost_add
cargoOperating_cost += cargo_add
type1 += type1_add
type2 += type2_add
desert += desert_add
total_requirement += req_add
passengerFlight += passengerFlight_add
cargoFlight += cargoFlight_add
desert_cost += desertCost_add
passengerFreight_BH += passFreightBH
passengerFreight_BS += passFreightBS
passengerFreight_HB += passFreightHB
passengerFreight_HS += passFreightHS
passengerFreight_SB += passFreightSB
passengerFreight_SH += passFreightSH
cargoFreight_BH += cargFreightBH
cargoFreight_HS += cargFreightHS
cargoFreight_SB += cargFreightSB
TotalCargo += TotalCargo_add
TotalTra_BH_pass += Tra_BH_pass
TotalTra_BS_pass += Tra_BS_pass
TotalTra_HB_pass += Tra_HB_pass
TotalTra_HS_pass += Tra_HS_pass
TotalTra_SB_pass += Tra_SB_pass
TotalTra_SH_pass += Tra_SH_pass
TotalTra_BH_carg += Tra_BH_carg
TotalTra_BS_carg += Tra_BS_carg
TotalTra_HB_carg += Tra_HB_carg
TotalTra_HS_carg += Tra_HS_carg
TotalTra_SB_carg += Tra_SB_carg
TotalTra_SH_carg += Tra_SH_carg
Totaldesr_BH += desr_BH
Totaldesr_BS += desr_BS
Totaldesr_HB += desr_HB
Totaldesr_HS += desr_HS
Totaldesr_SB += desr_SB
Totaldesr_SH += desr_SH
        
ave1 += total_cost
ave2 += delay_cost
ave3 += storage_cost
ave4 += transport_cost
ave5 += cargoOperating_cost
ave6 += desert_cost
ave7 += total_requirement
ave8 += type1
ave9 += type2
ave10 += passengerFlight
ave11 += cargoFlight
ave12 += desert
ave13 += passengerFlight/(passengerCapacity*pred_num)
ave14 += cargoFlight/(3*Q*TotalCargo)
ave15 += passengerFreight_BH/(passengerCapacity_BH*pred_num)
ave16 += passengerFreight_BS/(passengerCapacity_BS*pred_num)
ave17 += passengerFreight_HB/(passengerCapacity_HB*pred_num)
ave18 += passengerFreight_HS/(passengerCapacity_HS*pred_num)
ave19 += passengerFreight_SB/(passengerCapacity_SB*pred_num)
ave20 += passengerFreight_SH/(passengerCapacity_SH*pred_num)
ave21 += cargoFreight_BH/(Q*TotalCargo)
ave22 += cargoFreight_HS/(Q*TotalCargo)
ave23 += cargoFreight_SB/(Q*TotalCargo)
ave24 += cargoFreight_BH/(Q*pred_num*N)
ave25 += cargoFreight_HS/(Q*pred_num*N)
ave26 += cargoFreight_SB/(Q*pred_num*N)
ave27 += (cargoFreight_BH+cargoFreight_HS+cargoFreight_SB)/(3*Q*pred_num*N)
TotalCargoUsed += TotalCargo/pred_num
ave28 += TotalTra_BH_pass
ave29 += TotalTra_BS_pass
ave30 += TotalTra_HB_pass
ave31 += TotalTra_HS_pass
ave32 += TotalTra_SB_pass
ave33 += TotalTra_SH_pass
ave34 += TotalTra_BH_carg
ave35 += TotalTra_BS_carg
ave36 += TotalTra_HB_carg
ave37 += TotalTra_HS_carg
ave38 += TotalTra_SB_carg
ave39 += TotalTra_SH_carg
ave40 += Totaldesr_BH
ave41 += Totaldesr_BS
ave42 += Totaldesr_HB
ave43 += Totaldesr_HS
ave44 += Totaldesr_SB
ave45 += Totaldesr_SH

print(f"平均总成本为{ave1}")
print(f"平均逾期成本为{ave2}")
print(f"平均仓储成本为{ave3}")
print(f"平均客机成本为{ave4}")
print(f"平均货机成本为{ave5}")
print(f"平均丢弃成本为{ave6}")
print(f"平均预测总需求为{ave7}")
print(f"平均货物1为{ave8}")
print(f"平均货物2为{ave9}")
print(f"平均客机运载量为{ave10}")
print(f"平均货机运载量为{ave11}")
print(f"平均丢弃量为{ave12}")
print(f"平均客机总效率为{ave13}")
print(f"平均货机总效率为{ave14}")
print(f"平均每天调用货机航班数量为{TotalCargoUsed}")
print(f"平均货机机队运力总效率为{ave27}")
print(f"平均BH客机效率为{ave15}")
print(f"平均BS客机效率为{ave16}")
print(f"平均HB客机效率为{ave17}")
print(f"平均HS客机效率为{ave18}")
print(f"平均SB客机效率为{ave19}")
print(f"平均SH客机效率为{ave20}")
print(f"平均BH货机效率为{ave21}")
print(f"平均HS货机效率为{ave22}")
print(f"平均SB货机效率为{ave23}")
print(f"平均BH货机机队运力使用效率为{ave24}")
print(f"平均BH货机机队运力使用效率为{ave25}")
print(f"平均BH货机机队运力使用效率为{ave26}")
    
print(f"北京到杭州的货物使用客机运输重量{ave28}，使用货机运输重量{ave34}，丢弃重量{ave40}")
print(f"北京到深圳的货物使用客机运输重量{ave29}，使用货机运输重量{ave35}，丢弃重量{ave41}")
print(f"杭州到北京的货物使用客机运输重量{ave30}，使用货机运输重量{ave36}，丢弃重量{ave42}")
print(f"杭州到深圳的货物使用客机运输重量{ave31}，使用货机运输重量{ave37}，丢弃重量{ave43}")
print(f"深圳到北京的货物使用客机运输重量{ave32}，使用货机运输重量{ave38}，丢弃重量{ave44}")
print(f"深圳到杭州的货物使用客机运输重量{ave33}，使用货机运输重量{ave39}，丢弃重量{ave45}")   
averagecost = ave1 / ave7
print(f"单位重量的货物订单造成的成本为{averagecost}\n")



# 规模效应代码
import gurobipy as gp
from gurobipy import GRB
import openpyxl               
from datashape import string
from openpyxl import load_workbook
import numpy as np
import pandas as pd
import random
import re
import matplotlib.pyplot as plt
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.graphics.tsaplots import plot_pacf, plot_acf
from statsmodels.tsa.arima.model import ARIMA
import statsmodels.api as sm
from statsmodels.stats.diagnostic import acorr_ljungbox
from scipy import stats
from matplotlib.font_manager import FontProperties
import warnings
from arch.unitroot import ADF
import statsmodels.api as sm
import statsmodels.formula.api as smf
import statsmodels.tsa.api as smt
from statsmodels.tsa.stattools import adfuller
from statsmodels.stats.diagnostic import acorr_ljungbox
from statsmodels.graphics.api import qqplot
warnings.filterwarnings("ignore")
from datetime import datetime, timedelta
import math
import tracemalloc
df = pd.read_excel('C:/Users/net2/Downloads/客机航班.xlsx')
Original_Requirements = pd.read_excel('C:/Users/net2/Downloads/需求.xlsx',sheet_name='需求')

print("---------------------------------------------客机航班数据---------------------------------------------")
print(df)
print("\n---------------------------------------------需求数据---------------------------------------------")
print(Original_Requirements)

# 提取客机航班起飞时间段表与抵达时间段表
passengerStartTime_BH = [element.strftime("%Y-%m-%d %H:%M") for element in df['起飞时刻BH'].dropna()]
passengerEndTime_BH = [element.strftime("%Y-%m-%d %H:%M") for element in df['到达时刻BH'].dropna()]
passengerStartTime_BS = [element.strftime("%Y-%m-%d %H:%M") for element in df['起飞时刻BS'].dropna()]
passengerEndTime_BS = [element.strftime("%Y-%m-%d %H:%M") for element in df['到达时刻BS'].dropna()]
passengerStartTime_HB = [element.strftime("%Y-%m-%d %H:%M") for element in df['起飞时刻HB'].dropna()]
passengerEndTime_HB = [element.strftime("%Y-%m-%d %H:%M") for element in df['到达时刻HB'].dropna()]
passengerStartTime_HS = [element.strftime("%Y-%m-%d %H:%M") for element in df['起飞时刻HS'].dropna()]
passengerEndTime_HS = [element.strftime("%Y-%m-%d %H:%M") for element in df['到达时刻HS'].dropna()]
passengerStartTime_SB = [element.strftime("%Y-%m-%d %H:%M") for element in df['起飞时刻SB'].dropna()]
passengerEndTime_SB = [element.strftime("%Y-%m-%d %H:%M") for element in df['到达时刻SB'].dropna()]
passengerStartTime_SH = [element.strftime("%Y-%m-%d %H:%M") for element in df['起飞时刻SH'].dropna()]
passengerEndTime_SH = [element.strftime("%Y-%m-%d %H:%M") for element in df['到达时刻SH'].dropna()]

# 计算客机航班的飞行时间
passenger_flight_times_BH = []
passenger_flight_times_BS = []
passenger_flight_times_HB = []
passenger_flight_times_HS = []
passenger_flight_times_SB = []
passenger_flight_times_SH = []

def freightIdentify(lst1,lst2):
    passengerStartTime = [element.strftime("%Y-%m-%d %H:%M") for element in lst1.dropna()]
    passengerEndTime = [element.strftime("%Y-%m-%d %H:%M") for element in lst2.dropna()]
    passenger_flight_times = []
    
    for departure_time, arrival_time in zip(passengerStartTime, passengerEndTime):
        departure_datetime = datetime.strptime(departure_time, "%Y-%m-%d %H:%M")
        arrival_datetime = datetime.strptime(arrival_time, "%Y-%m-%d %H:%M")
        if arrival_datetime < departure_datetime:
            arrival_datetime += timedelta(days=1)
        flight_time = arrival_datetime - departure_datetime
        flight_hours = flight_time.total_seconds() / 3600
        passenger_flight_times.append(flight_hours)
        
    return passenger_flight_times

def departureTimeIdentify(lst):
    passengerStartTime = [element.strftime("%Y-%m-%d %H:%M") for element in lst.dropna()]
    departure_times = [datetime.strptime(time, "%Y-%m-%d %H:%M") for time in passengerStartTime]
    hours_from_midnight = [(departure_time - departure_time.replace(hour=0, minute=0)).total_seconds() / 3600 for departure_time in departure_times]
    return hours_from_midnight

def TimeTableOfPassenger(lst):
    TimeTable0 = []
    for i in range(K):
        passenger_flight_time_add = [x + 24 * i for x in lst]
        
        for j in range(len(passenger_flight_time_add)):
            TimeTable0.append(passenger_flight_time_add[j])
    arrPassenger = np.array(TimeTable0)
    passengerTimeTable = arrPassenger.reshape((1, -1)).tolist()[0]
    return passengerTimeTable

def process_value(value):
    if isinstance(value, int):
        return value
    elif isinstance(value, float):
        return math.floor(value)
    else:
        raise ValueError("Unsupported value type")

def passCantTransCal(lst):
    passCantTrans = []
    for a in lst:
        if a.is_integer():
            passCantTrans.append(int(a) + 1)
        else:
            next_int = math.ceil(a)
            passCantTrans.append(next_int)
    return max(passCantTrans)

def passengerTimeCal(lst):
    passengerTime = []
    for a in lst:
        if a.is_integer():
            passengerTime.append(int(a))
        else:
            prev_int = math.floor(a)
            passengerTime.append(prev_int)
    return passengerTime

# 每天的时间段系数
Time_Table = [0.008,0.008,0.008,0.008,0.008,0.008,0.008,0.008,0.008,0.008,0.662,0.037,0.128,0.004,0.011,0.02,0.01,0.007,0,0.009,0.008,0.008,0.008,0.008]

passenger_flight_times_BH = freightIdentify(df['起飞时刻BH'],df['到达时刻BH'])
passenger_flight_times_BS = freightIdentify(df['起飞时刻BS'],df['到达时刻BS'])
passenger_flight_times_HB = freightIdentify(df['起飞时刻HB'],df['到达时刻HB'])
passenger_flight_times_HS = freightIdentify(df['起飞时刻HS'],df['到达时刻HS'])
passenger_flight_times_SB = freightIdentify(df['起飞时刻SB'],df['到达时刻SB'])
passenger_flight_times_SH = freightIdentify(df['起飞时刻SH'],df['到达时刻SH'])
hours_from_midnight_BH = departureTimeIdentify(df['起飞时刻BH'])
hours_from_midnight_BS = departureTimeIdentify(df['起飞时刻BS'])
hours_from_midnight_HB = departureTimeIdentify(df['起飞时刻HB'])
hours_from_midnight_HS = departureTimeIdentify(df['起飞时刻HS'])
hours_from_midnight_SB = departureTimeIdentify(df['起飞时刻SB'])
hours_from_midnight_SH = departureTimeIdentify(df['起飞时刻SH'])

print("-----------------------三地两两之间客机航班飞行时间-----------------------")
print("北京→杭州：\n",passenger_flight_times_BH)
print("\n")
print("北京→深圳：\n",passenger_flight_times_BS)
print("\n")
print("杭州→北京：\n",passenger_flight_times_HB)
print("\n")
print("杭州→深圳：\n",passenger_flight_times_HS)
print("\n")
print("深圳→北京：\n",passenger_flight_times_SB)
print("\n")
print("深圳→杭州：\n",passenger_flight_times_SH)


departure_times_BH = [datetime.strptime(time, "%Y-%m-%d %H:%M") for time in passengerStartTime_BH]
departure_times_BS = [datetime.strptime(time, "%Y-%m-%d %H:%M") for time in passengerStartTime_BS]
departure_times_HB = [datetime.strptime(time, "%Y-%m-%d %H:%M") for time in passengerStartTime_HB]
departure_times_HS = [datetime.strptime(time, "%Y-%m-%d %H:%M") for time in passengerStartTime_HS]
departure_times_SB = [datetime.strptime(time, "%Y-%m-%d %H:%M") for time in passengerStartTime_SB]
departure_times_SH = [datetime.strptime(time, "%Y-%m-%d %H:%M") for time in passengerStartTime_SH]

hours_from_midnight_BH = [(departure_time - departure_time.replace(hour=0, minute=0)).total_seconds() / 3600 for departure_time in departure_times_BH]
hours_from_midnight_BS = [(departure_time - departure_time.replace(hour=0, minute=0)).total_seconds() / 3600 for departure_time in departure_times_BS]
hours_from_midnight_HB = [(departure_time - departure_time.replace(hour=0, minute=0)).total_seconds() / 3600 for departure_time in departure_times_HB]
hours_from_midnight_HS = [(departure_time - departure_time.replace(hour=0, minute=0)).total_seconds() / 3600 for departure_time in departure_times_HS]
hours_from_midnight_SB = [(departure_time - departure_time.replace(hour=0, minute=0)).total_seconds() / 3600 for departure_time in departure_times_SB]
hours_from_midnight_SH = [(departure_time - departure_time.replace(hour=0, minute=0)).total_seconds() / 3600 for departure_time in departure_times_SH]

print("\n\n\n------------------------三地两两之间起飞时刻表------------------------\n")
print("北京→杭州起飞时刻:\n", hours_from_midnight_BH)
print("\n")
print("北京→深圳起飞时刻:\n", hours_from_midnight_BS)
print("\n")
print("杭州→北京起飞时刻:\n", hours_from_midnight_HB)
print("\n")
print("杭州→深圳起飞时刻:\n", hours_from_midnight_HS)
print("\n")
print("深圳→北京起飞时刻:\n", hours_from_midnight_SB)
print("\n")
print("深圳→杭州起飞时刻:\n", hours_from_midnight_SH)

del departure_times_BH
del departure_times_BS
del departure_times_HB
del departure_times_HS
del departure_times_SB
del departure_times_SH

del passengerStartTime_BH
del passengerEndTime_BH
del passengerStartTime_BS
del passengerEndTime_BS
del passengerStartTime_HB
del passengerEndTime_HB
del passengerStartTime_HS
del passengerEndTime_HS
del passengerStartTime_SB
del passengerEndTime_SB
del passengerStartTime_SH
del passengerEndTime_SH

t1 = 0.5  # 北京-北京
t2 = 1.5  # 北京-潍坊
t3 = 2    # 北京-沈阳
t4 = 0.5  # 杭州-杭州
t5 = 1    # 杭州-南京
t6 = 1.5  # 杭州-上海
t7 = 0.5  # 深圳-深圳
t8 = 1.5  # 深圳-香港

def TimeSplit(lst):
    lstu = []
    for pred in lst:
        temp = []
        for a in Time_Table:
            temp.append(pred * a * Perc)
        lstu.extend(temp)
    return lstu

def mainFunctionARIMA(K):
    cargo_BH = []
    cargo_HS = []
    cargo_SB = []
        
    for i in range(K):
        cargo_BH_add = [x + 24 * i for x in cargo_BH_unit]
        cargo_HS_add = [x + 24 * i for x in cargo_HS_unit]
        cargo_SB_add = [x + 24 * i for x in cargo_SB_unit]
        for j in range(N):
            cargo_BH.append(cargo_BH_add[j])
            cargo_HS.append(cargo_HS_add[j])
            cargo_SB.append(cargo_SB_add[j])
    del cargo_BH_add,cargo_HS_add,cargo_SB_add
    BH_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_BH)
    BS_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_BS)
    HB_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_HB)
    HS_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_HS)
    SB_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_SB)
    SH_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_SH)
    flightTime_BH = passenger_flight_times_BH * K
    flightTime_BS = passenger_flight_times_BS * K
    flightTime_HB = passenger_flight_times_HB * K
    flightTime_HS = passenger_flight_times_HS * K
    flightTime_SB = passenger_flight_times_SB * K
    flightTime_SH = passenger_flight_times_SH * K
    first_flight_BH = min(min(BH_passengerTimeTable),min(cargo_BH))
    last_flight_BH = max(max(BH_passengerTimeTable),max(cargo_BH))
    first_flight_HS = min(min(HS_passengerTimeTable),min(cargo_HS))
    last_flight_HS = max(max(HS_passengerTimeTable),max(cargo_HS))
    first_flight_SB = min(min(SB_passengerTimeTable),min(cargo_SB))
    last_flight_SB = max(max(SB_passengerTimeTable),max(cargo_SB))
    first_flight_BS = min(BS_passengerTimeTable)
    last_flight_BS = max(BS_passengerTimeTable)
    first_flight_SH = min(SH_passengerTimeTable)
    last_flight_SH = max(SH_passengerTimeTable)
    first_flight_HB = min(HB_passengerTimeTable)
    last_flight_HB = max(HB_passengerTimeTable)
    BHcant_transport_passenger = passCantTransCal(BH_passengerTimeTable)
    BScant_transport_passenger = passCantTransCal(BS_passengerTimeTable)
    HBcant_transport_passenger = passCantTransCal(HB_passengerTimeTable)
    HScant_transport_passenger = passCantTransCal(HS_passengerTimeTable)
    SBcant_transport_passenger = passCantTransCal(SB_passengerTimeTable)
    SHcant_transport_passenger = passCantTransCal(SH_passengerTimeTable)
    BHcant_transport_cargo = max(cargo_BH) + 1
    HScant_transport_cargo = max(cargo_HS) + 1
    SBcant_transport_cargo = max(cargo_SB) + 1
    first_BH = process_value(first_flight_BH)
    first_BS = process_value(first_flight_BS)
    first_HB = process_value(first_flight_HB)
    first_HS = process_value(first_flight_HS)
    first_SB = process_value(first_flight_SB)
    first_SH = process_value(first_flight_SH)
    last_BH = process_value(last_flight_BH)
    last_BS = process_value(last_flight_BS)
    last_HB = process_value(last_flight_HB)
    last_HS = process_value(last_flight_HS)
    last_SB = process_value(last_flight_SB)
    last_SH = process_value(last_flight_SH)
    passengerTime_BH = passengerTimeCal(BH_passengerTimeTable)
    passengerTime_BS = passengerTimeCal(BS_passengerTimeTable)
    passengerTime_HB = passengerTimeCal(HB_passengerTimeTable)
    passengerTime_HS = passengerTimeCal(HS_passengerTimeTable)
    passengerTime_SB = passengerTimeCal(SB_passengerTimeTable)
    passengerTime_SH = passengerTimeCal(SH_passengerTimeTable)

    C1 = 0 # C1为未运完的仓储成本，初始值为0
    C2 = 0 # C2为未运完的逾期延迟成本，初始值为0
    C3 = 0 # C3为能运完的逾期延迟成本，初始值为0
    C4 = 0 # C4为能运完的仓储成本，初始值为0
    C5 = 0 # C5为运输成本，初始值为0
    C6 = 0 # C6为丢弃成本，初始值为0
    C7 = 0
    transported_1 = 0
    transported_2 = 0
    cargoUsed = 0
    
    # 进行模型拟合和预测
    model_1_4 = ARIMA(train['北京→杭州'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_1_4 = model_1_4.fit()
    model_1_5 = ARIMA(train['北京→南京'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_1_5 = model_1_5.fit()
    model_1_6 = ARIMA(train['北京→上海'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_1_6 = model_1_6.fit()
    model_1_7 = ARIMA(train['北京→深圳'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_1_7 = model_1_7.fit()
    model_1_8 = ARIMA(train['北京→香港'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_1_8 = model_1_8.fit()
    model_2_4 = ARIMA(train['潍坊→杭州'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_2_4 = model_2_4.fit()
    model_2_5 = ARIMA(train['潍坊→南京'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_2_5 = model_2_5.fit()
    model_2_6 = ARIMA(train['潍坊→上海'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_2_6 = model_2_6.fit()
    model_2_7 = ARIMA(train['潍坊→深圳'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_2_7 = model_2_7.fit()
    model_2_8 = ARIMA(train['潍坊→香港'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_2_8 = model_2_8.fit()
    model_3_4 = ARIMA(train['沈阳→杭州'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_3_4 = model_3_4.fit()
    model_3_5 = ARIMA(train['沈阳→南京'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_3_5 = model_3_5.fit()
    model_3_6 = ARIMA(train['沈阳→上海'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_3_6 = model_3_6.fit()
    model_3_7 = ARIMA(train['沈阳→深圳'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_3_7 = model_3_7.fit()
    model_3_8 = ARIMA(train['沈阳→香港'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_3_8 = model_3_8.fit()
    model_4_1 = ARIMA(train['杭州→北京'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_4_1 = model_4_1.fit()
    model_4_2 = ARIMA(train['杭州→潍坊'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_4_2 = model_4_2.fit()
    model_4_3 = ARIMA(train['杭州→沈阳'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_4_3 = model_4_3.fit()
    model_4_7 = ARIMA(train['杭州→深圳'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_4_7 = model_4_7.fit()
    model_4_8 = ARIMA(train['杭州→香港'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_4_8 = model_4_8.fit()
    model_5_1 = ARIMA(train['南京→北京'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_5_1 = model_5_1.fit()
    model_5_2 = ARIMA(train['南京→潍坊'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_5_2 = model_5_2.fit()
    model_5_3 = ARIMA(train['南京→沈阳'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_5_3 = model_5_3.fit()
    model_5_7 = ARIMA(train['南京→深圳'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_5_7 = model_5_7.fit()
    model_5_8 = ARIMA(train['南京→香港'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_5_8 = model_5_8.fit()
    model_6_1 = ARIMA(train['上海→北京'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_6_1 = model_6_1.fit()
    model_6_2 = ARIMA(train['上海→潍坊'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_6_2 = model_6_2.fit()
    model_6_3 = ARIMA(train['上海→沈阳'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_6_3 = model_6_3.fit()
    model_6_7 = ARIMA(train['上海→深圳'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_6_7 = model_6_7.fit()
    model_6_8 = ARIMA(train['上海→香港'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_6_8 = model_6_8.fit()
    model_7_1 = ARIMA(train['深圳→北京'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_7_1 = model_7_1.fit()
    model_7_2 = ARIMA(train['深圳→潍坊'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_7_2 = model_7_2.fit()
    model_7_3 = ARIMA(train['深圳→沈阳'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_7_3 = model_7_3.fit()
    model_7_4 = ARIMA(train['深圳→杭州'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_7_4 = model_7_4.fit()
    model_7_5 = ARIMA(train['深圳→南京'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_7_5 = model_7_5.fit()
    model_7_6 = ARIMA(train['深圳→上海'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_7_6 = model_7_6.fit()
    model_8_1 = ARIMA(train['香港→北京'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_8_1 = model_8_1.fit()
    model_8_2 = ARIMA(train['香港→潍坊'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_8_2 = model_8_2.fit()
    model_8_3 = ARIMA(train['香港→沈阳'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_8_3 = model_8_3.fit()
    model_8_4 = ARIMA(train['香港→杭州'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_8_4 = model_8_4.fit()
    model_8_5 = ARIMA(train['香港→南京'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_8_5 = model_8_5.fit()
    model_8_6 = ARIMA(train['香港→上海'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_8_6 = model_8_6.fit()
    
    # 进行未来一步的预测
    forecast_1_4 = model_fit_1_4.forecast(steps=K)
    forecast_1_5 = model_fit_1_5.forecast(steps=K)
    forecast_1_6 = model_fit_1_6.forecast(steps=K)
    forecast_1_7 = model_fit_1_7.forecast(steps=K)
    forecast_1_8 = model_fit_1_8.forecast(steps=K)
    forecast_2_4 = model_fit_2_4.forecast(steps=K)
    forecast_2_5 = model_fit_2_5.forecast(steps=K)
    forecast_2_6 = model_fit_2_6.forecast(steps=K)
    forecast_2_7 = model_fit_2_7.forecast(steps=K)
    forecast_2_8 = model_fit_2_8.forecast(steps=K)
    forecast_3_4 = model_fit_3_4.forecast(steps=K)
    forecast_3_5 = model_fit_3_5.forecast(steps=K)
    forecast_3_6 = model_fit_3_6.forecast(steps=K)
    forecast_3_7 = model_fit_3_7.forecast(steps=K)
    forecast_3_8 = model_fit_3_8.forecast(steps=K)
    forecast_4_1 = model_fit_4_1.forecast(steps=K)
    forecast_4_2 = model_fit_4_2.forecast(steps=K)
    forecast_4_3 = model_fit_4_3.forecast(steps=K)
    forecast_4_7 = model_fit_4_7.forecast(steps=K)
    forecast_4_8 = model_fit_4_8.forecast(steps=K)
    forecast_5_1 = model_fit_5_1.forecast(steps=K)
    forecast_5_2 = model_fit_5_2.forecast(steps=K)
    forecast_5_3 = model_fit_5_3.forecast(steps=K)
    forecast_5_7 = model_fit_5_7.forecast(steps=K)
    forecast_5_8 = model_fit_5_8.forecast(steps=K)
    forecast_6_1 = model_fit_6_1.forecast(steps=K)
    forecast_6_2 = model_fit_6_2.forecast(steps=K)
    forecast_6_3 = model_fit_6_3.forecast(steps=K)
    forecast_6_7 = model_fit_6_7.forecast(steps=K)
    forecast_6_8 = model_fit_6_8.forecast(steps=K)
    forecast_7_1 = model_fit_7_1.forecast(steps=K)
    forecast_7_2 = model_fit_7_2.forecast(steps=K)
    forecast_7_3 = model_fit_7_3.forecast(steps=K)
    forecast_7_4 = model_fit_7_4.forecast(steps=K)
    forecast_7_5 = model_fit_7_5.forecast(steps=K)
    forecast_7_6 = model_fit_7_6.forecast(steps=K)
    forecast_8_1 = model_fit_8_1.forecast(steps=K)
    forecast_8_2 = model_fit_8_2.forecast(steps=K)
    forecast_8_3 = model_fit_8_3.forecast(steps=K)
    forecast_8_4 = model_fit_8_4.forecast(steps=K)
    forecast_8_5 = model_fit_8_5.forecast(steps=K)
    forecast_8_6 = model_fit_8_6.forecast(steps=K)
    
    forecast_1_4_K = TimeSplit(forecast_1_4)
    forecast_1_5_K = TimeSplit(forecast_1_5)
    forecast_1_6_K = TimeSplit(forecast_1_6)
    forecast_1_7_K = TimeSplit(forecast_1_7)
    forecast_1_8_K = TimeSplit(forecast_1_8)
    forecast_2_4_K = TimeSplit(forecast_2_4)
    forecast_2_5_K = TimeSplit(forecast_2_5)
    forecast_2_6_K = TimeSplit(forecast_2_6)
    forecast_2_7_K = TimeSplit(forecast_2_7)
    forecast_2_8_K = TimeSplit(forecast_2_8)
    forecast_3_4_K = TimeSplit(forecast_3_4)
    forecast_3_5_K = TimeSplit(forecast_3_5)
    forecast_3_6_K = TimeSplit(forecast_3_6)
    forecast_3_7_K = TimeSplit(forecast_3_7)
    forecast_3_8_K = TimeSplit(forecast_3_8)
    forecast_4_1_K = TimeSplit(forecast_4_1)
    forecast_4_2_K = TimeSplit(forecast_4_2)
    forecast_4_3_K = TimeSplit(forecast_4_3)
    forecast_4_7_K = TimeSplit(forecast_4_7)
    forecast_4_8_K = TimeSplit(forecast_4_8)
    forecast_5_1_K = TimeSplit(forecast_5_1)
    forecast_5_2_K = TimeSplit(forecast_5_2)
    forecast_5_3_K = TimeSplit(forecast_5_3)
    forecast_5_7_K = TimeSplit(forecast_5_7)
    forecast_5_8_K = TimeSplit(forecast_5_8)
    forecast_6_1_K = TimeSplit(forecast_6_1)
    forecast_6_2_K = TimeSplit(forecast_6_2)
    forecast_6_3_K = TimeSplit(forecast_6_3)
    forecast_6_7_K = TimeSplit(forecast_6_7)
    forecast_6_8_K = TimeSplit(forecast_6_8)
    forecast_7_1_K = TimeSplit(forecast_7_1)
    forecast_7_2_K = TimeSplit(forecast_7_2)
    forecast_7_3_K = TimeSplit(forecast_7_3)
    forecast_7_4_K = TimeSplit(forecast_7_4)
    forecast_7_5_K = TimeSplit(forecast_7_5)
    forecast_7_6_K = TimeSplit(forecast_7_6)
    forecast_8_1_K = TimeSplit(forecast_8_1)
    forecast_8_2_K = TimeSplit(forecast_8_2)
    forecast_8_3_K = TimeSplit(forecast_8_3)
    forecast_8_4_K = TimeSplit(forecast_8_4)
    forecast_8_5_K = TimeSplit(forecast_8_5)
    forecast_8_6_K = TimeSplit(forecast_8_6)
    
    forecast_1_4_K[0] += left_to_leave_1_4[-1]
    forecast_1_5_K[0] += left_to_leave_1_5[-1]
    forecast_1_6_K[0] += left_to_leave_1_6[-1]
    forecast_1_7_K[0] += left_to_leave_1_7[-1]
    forecast_1_8_K[0] += left_to_leave_1_8[-1]
    forecast_2_4_K[0] += left_to_leave_2_4[-1]
    forecast_2_5_K[0] += left_to_leave_2_5[-1]
    forecast_2_6_K[0] += left_to_leave_2_6[-1]
    forecast_2_7_K[0] += left_to_leave_2_7[-1]
    forecast_2_8_K[0] += left_to_leave_2_8[-1]
    forecast_3_4_K[0] += left_to_leave_3_4[-1]
    forecast_3_5_K[0] += left_to_leave_3_5[-1]
    forecast_3_6_K[0] += left_to_leave_3_6[-1]
    forecast_3_7_K[0] += left_to_leave_3_7[-1]
    forecast_3_8_K[0] += left_to_leave_3_8[-1]
    forecast_4_1_K[0] += left_to_leave_4_1[-1]
    forecast_4_2_K[0] += left_to_leave_4_2[-1]
    forecast_4_3_K[0] += left_to_leave_4_3[-1]
    forecast_4_7_K[0] += left_to_leave_4_7[-1]
    forecast_4_8_K[0] += left_to_leave_4_8[-1]
    forecast_5_1_K[0] += left_to_leave_5_1[-1]
    forecast_5_2_K[0] += left_to_leave_5_2[-1]
    forecast_5_3_K[0] += left_to_leave_5_3[-1]
    forecast_5_7_K[0] += left_to_leave_5_7[-1]
    forecast_5_8_K[0] += left_to_leave_5_8[-1]
    forecast_6_1_K[0] += left_to_leave_6_1[-1]
    forecast_6_2_K[0] += left_to_leave_6_2[-1]
    forecast_6_3_K[0] += left_to_leave_6_3[-1]
    forecast_6_7_K[0] += left_to_leave_6_7[-1]
    forecast_6_8_K[0] += left_to_leave_6_8[-1]
    forecast_7_1_K[0] += left_to_leave_7_1[-1]
    forecast_7_2_K[0] += left_to_leave_7_2[-1]
    forecast_7_3_K[0] += left_to_leave_7_3[-1]
    forecast_7_4_K[0] += left_to_leave_7_4[-1]
    forecast_7_5_K[0] += left_to_leave_7_5[-1]
    forecast_7_6_K[0] += left_to_leave_7_6[-1]
    forecast_8_1_K[0] += left_to_leave_8_1[-1]
    forecast_8_2_K[0] += left_to_leave_8_2[-1]
    forecast_8_3_K[0] += left_to_leave_8_3[-1]
    forecast_8_4_K[0] += left_to_leave_8_4[-1]
    forecast_8_5_K[0] += left_to_leave_8_5[-1]
    forecast_8_6_K[0] += left_to_leave_8_6[-1]
    
    # 计算时效快递的需求
    TimeSensitive_Req_1_4 = [x * perc1 for x in forecast_1_4_K]
    TimeSensitive_Req_1_5 = [x * perc1 for x in forecast_1_5_K]
    TimeSensitive_Req_1_6 = [x * perc1 for x in forecast_1_6_K]
    TimeSensitive_Req_1_7 = [x * perc1 for x in forecast_1_7_K]
    TimeSensitive_Req_1_8 = [x * perc1 for x in forecast_1_8_K]
    TimeSensitive_Req_2_4 = [x * perc1 for x in forecast_2_4_K]
    TimeSensitive_Req_2_5 = [x * perc1 for x in forecast_2_5_K]
    TimeSensitive_Req_2_6 = [x * perc1 for x in forecast_2_6_K]
    TimeSensitive_Req_2_7 = [x * perc1 for x in forecast_2_7_K]
    TimeSensitive_Req_2_8 = [x * perc1 for x in forecast_2_8_K]
    TimeSensitive_Req_3_4 = [x * perc1 for x in forecast_3_4_K]
    TimeSensitive_Req_3_5 = [x * perc1 for x in forecast_3_5_K]
    TimeSensitive_Req_3_6 = [x * perc1 for x in forecast_3_6_K]
    TimeSensitive_Req_3_7 = [x * perc1 for x in forecast_3_7_K]
    TimeSensitive_Req_3_8 = [x * perc1 for x in forecast_3_8_K]
    TimeSensitive_Req_4_1 = [x * perc1 for x in forecast_4_1_K]
    TimeSensitive_Req_4_2 = [x * perc1 for x in forecast_4_2_K]
    TimeSensitive_Req_4_3 = [x * perc1 for x in forecast_4_3_K]
    TimeSensitive_Req_4_7 = [x * perc1 for x in forecast_4_7_K]
    TimeSensitive_Req_4_8 = [x * perc1 for x in forecast_4_8_K]
    TimeSensitive_Req_5_1 = [x * perc1 for x in forecast_5_1_K]
    TimeSensitive_Req_5_2 = [x * perc1 for x in forecast_5_2_K]
    TimeSensitive_Req_5_3 = [x * perc1 for x in forecast_5_3_K]
    TimeSensitive_Req_5_7 = [x * perc1 for x in forecast_5_7_K]
    TimeSensitive_Req_5_8 = [x * perc1 for x in forecast_5_8_K]
    TimeSensitive_Req_6_1 = [x * perc1 for x in forecast_6_1_K]
    TimeSensitive_Req_6_2 = [x * perc1 for x in forecast_6_2_K]
    TimeSensitive_Req_6_3 = [x * perc1 for x in forecast_6_3_K]
    TimeSensitive_Req_6_7 = [x * perc1 for x in forecast_6_7_K]
    TimeSensitive_Req_6_8 = [x * perc1 for x in forecast_6_8_K]
    TimeSensitive_Req_7_1 = [x * perc1 for x in forecast_7_1_K]
    TimeSensitive_Req_7_2 = [x * perc1 for x in forecast_7_2_K]
    TimeSensitive_Req_7_3 = [x * perc1 for x in forecast_7_3_K]
    TimeSensitive_Req_7_4 = [x * perc1 for x in forecast_7_4_K]
    TimeSensitive_Req_7_5 = [x * perc1 for x in forecast_7_5_K]
    TimeSensitive_Req_7_6 = [x * perc1 for x in forecast_7_6_K]
    TimeSensitive_Req_8_1 = [x * perc1 for x in forecast_8_1_K]
    TimeSensitive_Req_8_2 = [x * perc1 for x in forecast_8_2_K]
    TimeSensitive_Req_8_3 = [x * perc1 for x in forecast_8_3_K]
    TimeSensitive_Req_8_4 = [x * perc1 for x in forecast_8_4_K]
    TimeSensitive_Req_8_5 = [x * perc1 for x in forecast_8_5_K]
    TimeSensitive_Req_8_6 = [x * perc1 for x in forecast_8_6_K]
    
    # 计算经济快递的需求
    Economy_Req_1_4 = [x * perc2 for x in forecast_1_4_K]
    Economy_Req_1_5 = [x * perc2 for x in forecast_1_5_K]
    Economy_Req_1_6 = [x * perc2 for x in forecast_1_6_K]
    Economy_Req_1_7 = [x * perc2 for x in forecast_1_7_K]
    Economy_Req_1_8 = [x * perc2 for x in forecast_1_8_K]
    Economy_Req_2_4 = [x * perc2 for x in forecast_2_4_K]
    Economy_Req_2_5 = [x * perc2 for x in forecast_2_5_K]
    Economy_Req_2_6 = [x * perc2 for x in forecast_2_6_K]
    Economy_Req_2_7 = [x * perc2 for x in forecast_2_7_K]
    Economy_Req_2_8 = [x * perc2 for x in forecast_2_8_K]
    Economy_Req_3_4 = [x * perc2 for x in forecast_3_4_K]
    Economy_Req_3_5 = [x * perc2 for x in forecast_3_5_K]
    Economy_Req_3_6 = [x * perc2 for x in forecast_3_6_K]
    Economy_Req_3_7 = [x * perc2 for x in forecast_3_7_K]
    Economy_Req_3_8 = [x * perc2 for x in forecast_3_8_K]
    Economy_Req_4_1 = [x * perc2 for x in forecast_4_1_K]
    Economy_Req_4_2 = [x * perc2 for x in forecast_4_2_K]
    Economy_Req_4_3 = [x * perc2 for x in forecast_4_3_K]
    Economy_Req_4_7 = [x * perc2 for x in forecast_4_7_K]
    Economy_Req_4_8 = [x * perc2 for x in forecast_4_8_K]
    Economy_Req_5_1 = [x * perc2 for x in forecast_5_1_K]
    Economy_Req_5_2 = [x * perc2 for x in forecast_5_2_K]
    Economy_Req_5_3 = [x * perc2 for x in forecast_5_3_K]
    Economy_Req_5_7 = [x * perc2 for x in forecast_5_7_K]
    Economy_Req_5_8 = [x * perc2 for x in forecast_5_8_K]
    Economy_Req_6_1 = [x * perc2 for x in forecast_6_1_K]
    Economy_Req_6_2 = [x * perc2 for x in forecast_6_2_K]
    Economy_Req_6_3 = [x * perc2 for x in forecast_6_3_K]
    Economy_Req_6_7 = [x * perc2 for x in forecast_6_7_K]
    Economy_Req_6_8 = [x * perc2 for x in forecast_6_8_K]
    Economy_Req_7_1 = [x * perc2 for x in forecast_7_1_K]
    Economy_Req_7_2 = [x * perc2 for x in forecast_7_2_K]
    Economy_Req_7_3 = [x * perc2 for x in forecast_7_3_K]
    Economy_Req_7_4 = [x * perc2 for x in forecast_7_4_K]
    Economy_Req_7_5 = [x * perc2 for x in forecast_7_5_K]
    Economy_Req_7_6 = [x * perc2 for x in forecast_7_6_K]
    Economy_Req_8_1 = [x * perc2 for x in forecast_8_1_K]
    Economy_Req_8_2 = [x * perc2 for x in forecast_8_2_K]
    Economy_Req_8_3 = [x * perc2 for x in forecast_8_3_K]
    Economy_Req_8_4 = [x * perc2 for x in forecast_8_4_K]
    Economy_Req_8_5 = [x * perc2 for x in forecast_8_5_K]
    Economy_Req_8_6 = [x * perc2 for x in forecast_8_6_K]
    
    # 主要计算模型
    m = gp.Model()
    m.Params.OutputFlag = 0
    m.Params.MIPGap = 0.005
    
    x_1_4 = {}
    x_1_5 = {}
    x_1_6 = {}
    x_1_7 = {}
    x_1_8 = {}
    x_2_4 = {}
    x_2_5 = {}
    x_2_6 = {}
    x_2_7 = {}
    x_2_8 = {}
    x_3_4 = {}
    x_3_5 = {}
    x_3_6 = {}
    x_3_7 = {}
    x_3_8 = {}
    x_4_1 = {}
    x_4_2 = {}
    x_4_3 = {}
    x_4_7 = {}
    x_4_8 = {}
    x_5_1 = {}
    x_5_2 = {}
    x_5_3 = {}
    x_5_7 = {}
    x_5_8 = {}
    x_6_1 = {}
    x_6_2 = {}
    x_6_3 = {}
    x_6_7 = {}
    x_6_8 = {}
    x_7_1 = {}
    x_7_2 = {}
    x_7_3 = {}
    x_7_4 = {}
    x_7_5 = {}
    x_7_6 = {}
    x_8_1 = {}
    x_8_2 = {}
    x_8_3 = {}
    x_8_4 = {}
    x_8_5 = {}
    x_8_6 = {}
    
    y_1_4 = {}
    y_1_5 = {}
    y_1_6 = {}
    y_1_7 = {}
    y_1_8 = {}
    y_2_4 = {}
    y_2_5 = {}
    y_2_6 = {}
    y_2_7 = {}
    y_2_8 = {}
    y_3_4 = {}
    y_3_5 = {}
    y_3_6 = {}
    y_3_7 = {}
    y_3_8 = {}
    y_4_1 = {}
    y_4_2 = {}
    y_4_3 = {}
    y_4_7 = {}
    y_4_8 = {}
    y_5_1 = {}
    y_5_2 = {}
    y_5_3 = {}
    y_5_7 = {}
    y_5_8 = {}
    y_6_1 = {}
    y_6_2 = {}
    y_6_3 = {}
    y_6_7 = {}
    y_6_8 = {}
    y_7_1 = {}
    y_7_2 = {}
    y_7_3 = {}
    y_7_4 = {}
    y_7_5 = {}
    y_7_6 = {}
    y_8_1 = {}
    y_8_2 = {}
    y_8_3 = {}
    y_8_4 = {}
    y_8_5 = {}
    y_8_6 = {}
    
    for w in range(1,3):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                x_1_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_1_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_1_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_2_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_2_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_2_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_3_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_3_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_3_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                x_1_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_1_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_2_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_2_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_3_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_3_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                x_4_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_4_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_4_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_5_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_5_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_5_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_6_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_6_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_6_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                x_4_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_4_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_5_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_5_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_6_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_6_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                x_7_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_7_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_7_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                x_7_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_7_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_7_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                
    for w in range(1,3):
        for j in range(N*K):
            for i in range(cargo_BH[j]):
                y_1_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_1_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_1_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_1_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_1_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_2_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_2_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_2_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_2_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_2_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_3_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_3_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_3_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_3_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_3_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
            for i in range(cargo_HS[j]):
                y_4_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_4_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_4_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_5_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_5_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_5_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_6_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_6_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_6_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_4_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_4_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_5_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_5_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_6_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_6_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
            for i in range(cargo_SB[j]):
                y_7_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_7_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_7_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_7_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_7_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_7_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                
    # 客机容量限制约束
    for j in range(len(passengerTime_BH)):
        cal1_BH = 0
        cal1_BH += gp.quicksum(x_1_4[i,j,w]+x_1_5[i,j,w]+x_1_6[i,j,w]+x_2_4[i,j,w]+x_2_5[i,j,w]+x_2_6[i,j,w]+x_3_4[i,j,w]+x_3_5[i,j,w]+x_3_6[i,j,w] for w in range(1,3) for i in range(passengerTime_BH[j]))
        m.addConstr(cal1_BH <= q)
    for j in range(len(passengerTime_BS)):
        cal1_BS = 0
        cal1_BS += gp.quicksum(x_1_7[i,j,w]+x_1_8[i,j,w]+x_2_7[i,j,w]+x_2_8[i,j,w]+x_3_7[i,j,w]+x_3_8[i,j,w] for w in range(1,3) for i in range(passengerTime_BS[j]))
        m.addConstr(cal1_BS <= q)
    for j in range(len(passengerTime_HB)):
        cal1_HB = 0
        cal1_HB += gp.quicksum(x_4_1[i,j,w]+x_4_2[i,j,w]+x_4_3[i,j,w]+x_5_1[i,j,w]+x_5_2[i,j,w]+x_5_3[i,j,w]+x_6_1[i,j,w]+x_6_2[i,j,w]+x_6_3[i,j,w] for w in range(1,3) for i in range(passengerTime_HB[j]))
        m.addConstr(cal1_HB <= q)
    for j in range(len(passengerTime_HS)):
        cal1_HS = 0
        cal1_HS += gp.quicksum(x_4_7[i,j,w]+x_4_8[i,j,w]+x_5_7[i,j,w]+x_5_8[i,j,w]+x_6_7[i,j,w]+x_6_8[i,j,w] for w in range(1,3) for i in range(passengerTime_HS[j]))
        m.addConstr(cal1_HS <= q)
    for j in range(len(passengerTime_SB)):
        cal1_SB = 0
        cal1_SB += gp.quicksum(x_7_1[i,j,w]+x_7_2[i,j,w]+x_7_3[i,j,w]+x_8_1[i,j,w]+x_8_2[i,j,w]+x_8_3[i,j,w] for w in range(1,3) for i in range(passengerTime_SB[j]))
        m.addConstr(cal1_SB <= q)
    for j in range(len(passengerTime_SH)):
        cal1_SH = 0
        cal1_SH += gp.quicksum(x_7_4[i,j,w]+x_7_5[i,j,w]+x_7_6[i,j,w]+x_8_4[i,j,w]+x_8_5[i,j,w]+x_8_6[i,j,w] for w in range(1,3) for i in range(passengerTime_SH[j]))
        m.addConstr(cal1_SH <= q)
        
    # 货机容量约束
    for j in range(N*K):
        cal2_BH = 0
        cal2_BH += (gp.quicksum((y_1_4[i,j,w]+y_1_5[i,j,w]+y_1_6[i,j,w]+y_2_4[i,j,w]+y_2_5[i,j,w]+y_2_6[i,j,w]+y_3_4[i,j,w]+y_3_5[i,j,w]+y_3_6[i,j,w]+y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w]) for w in range(1,3) for i in range(cargo_BH[j]))+gp.quicksum(y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w] for w in range(1,3) for i in range(cargo_SB[j])))
        m.addConstr(cal2_BH <= Q)
    for j in range(N*K):
        cal2_HS = 0
        cal2_HS += (gp.quicksum((y_4_7[i,j,w]+y_4_8[i,j,w]+y_5_7[i,j,w]+y_5_8[i,j,w]+y_6_7[i,j,w]+y_6_8[i,j,w]+y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w]) for w in range(1,3) for i in range(cargo_HS[j]))+gp.quicksum(y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w] for w in range(1,3) for i in range(cargo_BH[j])))
        m.addConstr(cal2_HS <= Q)
    for j in range(N*K):
        cal2_SB = 0
        cal2_SB += (gp.quicksum((y_7_1[i,j,w]+y_7_2[i,j,w]+y_7_3[i,j,w]+y_8_1[i,j,w]+y_8_2[i,j,w]+y_8_3[i,j,w]+y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w]) for w in range(1,3) for i in range(cargo_SB[j]))+gp.quicksum(y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w] for w in range(1,3) for i in range(cargo_HS[j])))
        m.addConstr(cal2_SB <= Q)
        
    # 在能运完的货物中，被运走的货物量最多达到这个时间段的订单需求量
    # 能运完的货物的仓储成本和逾期成本及被丢弃货物的成本计算
    for w in range(1,3):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                C3 += C2per[w] * (x_1_4[i,j,w]*max(BH_passengerTimeTable[j]+t1+t4-i-T_1[w]+flightTime_BH[j],0)+x_1_5[i,j,w]*max(BH_passengerTimeTable[j]+t1+t5-i-T_1[w]+flightTime_BH[j],0)+x_1_6[i,j,w]*max(BH_passengerTimeTable[j]+t1+t6-i-T_1[w]+flightTime_BH[j],0)+x_2_4[i,j,w]*max(BH_passengerTimeTable[j]+t2+t4-i-T_1[w]+flightTime_BH[j],0)+x_2_5[i,j,w]*max(BH_passengerTimeTable[j]+t2+t5-i-T_1[w]+flightTime_BH[j],0)+x_2_6[i,j,w]*max(BH_passengerTimeTable[j]+t2+t6-i-T_1[w]+flightTime_BH[j],0)+x_3_4[i,j,w]*max(BH_passengerTimeTable[j]+t3+t4-i-T_1[w]+flightTime_BH[j],0)+x_3_5[i,j,w]*max(BH_passengerTimeTable[j]+t3+t5-i-T_1[w]+flightTime_BH[j],0)+x_3_6[i,j,w]*max(BH_passengerTimeTable[j]+t3+t6-i-T_1[w]+flightTime_BH[j],0))
                C4 += c1 * ((x_1_4[i,j,w]+x_1_5[i,j,w]+x_1_6[i,j,w]+x_2_4[i,j,w]+x_2_5[i,j,w]+x_2_6[i,j,w]+x_3_4[i,j,w]+x_3_5[i,j,w]+x_3_6[i,j,w]) * (BH_passengerTimeTable[j] - i))
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                C3 += C2per[w] * (x_1_7[i,j,w]*max(BS_passengerTimeTable[j]+t1+t7-i-T_1[w]+flightTime_BS[j],0)+x_1_8[i,j,w]*max(BS_passengerTimeTable[j]+t1+t8-i-T_1[w]+flightTime_BS[j],0)+x_2_7[i,j,w]*max(BS_passengerTimeTable[j]+t2+t7-i-T_1[w]+flightTime_BS[j],0)+x_2_8[i,j,w]*max(BS_passengerTimeTable[j]+t2+t8-i-T_1[w]+flightTime_BS[j],0)+x_3_7[i,j,w]*max(BS_passengerTimeTable[j]+t3+t7-i-T_1[w]+flightTime_BS[j],0)+x_3_8[i,j,w]*max(BS_passengerTimeTable[j]+t3+t8-i-T_1[w]+flightTime_BS[j],0))
                C4 += c1 * ((x_1_7[i,j,w]+x_1_8[i,j,w]+x_2_7[i,j,w]+x_2_8[i,j,w]+x_3_7[i,j,w]+x_3_8[i,j,w]) * (BS_passengerTimeTable[j] - i))
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                C3 += C2per[w] * (x_4_1[i,j,w]*max(HB_passengerTimeTable[j]+t4+t1-i-T_1[w]+flightTime_HB[j],0)+x_4_2[i,j,w]*max(HB_passengerTimeTable[j]+t4+t2-i-T_1[w]+flightTime_HB[j],0)+x_4_3[i,j,w]*max(HB_passengerTimeTable[j]+t4+t3-i-T_1[w]+flightTime_HB[j],0)+x_5_1[i,j,w]*max(HB_passengerTimeTable[j]+t5+t1-i-T_1[w]+flightTime_HB[j],0)+x_5_2[i,j,w]*max(HB_passengerTimeTable[j]+t5+t2-i-T_1[w]+flightTime_HB[j],0)+x_5_3[i,j,w]*max(HB_passengerTimeTable[j]+t5+t3-i-T_1[w]+flightTime_HB[j],0)+x_6_1[i,j,w]*max(HB_passengerTimeTable[j]+t6+t1-i-T_1[w]+flightTime_HB[j],0)+x_6_2[i,j,w]*max(HB_passengerTimeTable[j]+t6+t2-i-T_1[w]+flightTime_HB[j],0)+x_6_3[i,j,w]*max(HB_passengerTimeTable[j]+t6+t3-i-T_1[w]+flightTime_HB[j],0))
                C4 += c1 * ((x_4_1[i,j,w]+x_4_2[i,j,w]+x_4_3[i,j,w]+x_5_1[i,j,w]+x_5_2[i,j,w]+x_5_3[i,j,w]+x_6_1[i,j,w]+x_6_2[i,j,w]+x_6_3[i,j,w]) * (HB_passengerTimeTable[j] - i))
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                C3 += C2per[w] * (x_4_7[i,j,w]*max(HS_passengerTimeTable[j]+t4+t7-i-T_1[w]+flightTime_HS[j],0)+x_4_8[i,j,w]*max(HS_passengerTimeTable[j]+t4+t8-i-T_1[w]+flightTime_HS[j],0)+x_5_7[i,j,w]*max(HS_passengerTimeTable[j]+t5+t7-i-T_1[w]+flightTime_HS[j],0)+x_5_8[i,j,w]*max(HS_passengerTimeTable[j]+t5+t8-i-T_1[w]+flightTime_HS[j],0)+x_6_7[i,j,w]*max(HS_passengerTimeTable[j]+t6+t7-i-T_1[w]+flightTime_HS[j],0)+x_6_8[i,j,w]*max(HS_passengerTimeTable[j]+t6+t8-i-T_1[w]+flightTime_HS[j],0))
                C4 += c1 * ((x_4_7[i,j,w]+x_4_8[i,j,w]+x_5_7[i,j,w]+x_5_8[i,j,w]+x_6_7[i,j,w]+x_6_8[i,j,w]) * (HS_passengerTimeTable[j] - i))
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                C3 += C2per[w] * (x_7_1[i,j,w]*max(SB_passengerTimeTable[j]+t7+t1-i-T_1[w]+flightTime_SB[j],0)+x_7_2[i,j,w]*max(SB_passengerTimeTable[j]+t7+t2-i-T_1[w]+flightTime_SB[j],0)+x_7_3[i,j,w]*max(SB_passengerTimeTable[j]+t7+t3-i-T_1[w]+flightTime_SB[j],0)+x_8_1[i,j,w]*max(SB_passengerTimeTable[j]+t8+t1-i-T_1[w]+flightTime_SB[j],0)+x_8_2[i,j,w]*max(SB_passengerTimeTable[j]+t8+t2-i-T_1[w]+flightTime_SB[j],0)+x_8_3[i,j,w]*max(SB_passengerTimeTable[j]+t8+t3-i-T_1[w]+flightTime_SB[j],0))
                C4 += c1 * ((x_7_1[i,j,w]+x_7_2[i,j,w]+x_7_3[i,j,w]+x_8_1[i,j,w]+x_8_2[i,j,w]+x_8_3[i,j,w]) * (SB_passengerTimeTable[j] - i))
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                C3 += C2per[w] * (x_7_4[i,j,w]*max(SH_passengerTimeTable[j]+t7+t4-i-T_1[w]+flightTime_SH[j],0)+x_7_5[i,j,w]*max(SH_passengerTimeTable[j]+t7+t5-i-T_1[w]+flightTime_SH[j],0)+x_7_6[i,j,w]*max(SH_passengerTimeTable[j]+t7+t6-i-T_1[w]+flightTime_SH[j],0)+x_8_4[i,j,w]*max(SH_passengerTimeTable[j]+t8+t4-i-T_1[w]+flightTime_SH[j],0)+x_8_5[i,j,w]*max(SH_passengerTimeTable[j]+t8+t5-i-T_1[w]+flightTime_SH[j],0)+x_8_6[i,j,w]*max(SH_passengerTimeTable[j]+t8+t6-i-T_1[w]+flightTime_SH[j],0))
                C4 += c1 * ((x_7_4[i,j,w]+x_7_5[i,j,w]+x_7_6[i,j,w]+x_8_4[i,j,w]+x_8_5[i,j,w]+x_8_6[i,j,w]) * (SH_passengerTimeTable[j] - i))
        for j in range(N*K):
            for i in range(cargo_BH[j]):
                C3 += C2per[w] * (y_1_4[i,j,w]*max(cargo_BH[j]+t1+t4-i-T_1[w]+Tcargo_1,0)+y_1_5[i,j,w]*max(cargo_BH[j]+t1+t5-i-T_1[w]+Tcargo_1,0)+y_1_6[i,j,w]*max(cargo_BH[j]+t1+t6-i-T_1[w]+Tcargo_1,0)+y_2_4[i,j,w]*max(cargo_BH[j]+t2+t4-i-T_1[w]+Tcargo_1,0)+y_2_5[i,j,w]*max(cargo_BH[j]+t2+t5-i-T_1[w]+Tcargo_1,0)+y_2_6[i,j,w]*max(cargo_BH[j]+t2+t6-i-T_1[w]+Tcargo_1,0))
                C3 += C2per[w] * (y_1_7[i,j,w]*max(cargo_HS[j]+t1+t7-i-T_1[w]+Tcargo_2,0)+y_1_8[i,j,w]*max(cargo_HS[j]+t1+t8-i-T_1[w]+Tcargo_2,0)+y_2_7[i,j,w]*max(cargo_HS[j]+t2+t7-i-T_1[w]+Tcargo_2,0)+y_2_8[i,j,w]*max(cargo_HS[j]+t2+t8-i-T_1[w]+Tcargo_2,0)+y_3_7[i,j,w]*max(cargo_HS[j]+t3+t7-i-T_1[w]+Tcargo_2,0)+y_3_8[i,j,w]*max(cargo_HS[j]+t3+t8-i-T_1[w]+Tcargo_2,0))
                C4 += c1 * ((y_1_4[i,j,w]+y_1_5[i,j,w]+y_1_6[i,j,w]+y_2_4[i,j,w]+y_2_5[i,j,w]+y_2_6[i,j,w]+y_3_4[i,j,w]+y_3_5[i,j,w]+y_3_6[i,j,w]+y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w]) * (cargo_BH[j] - i))
            for i in range(cargo_HS[j]):
                C3 += C2per[w] * (y_4_1[i,j,w]*max(cargo_SB[j]+t4+t1-i-T_1[w]+Tcargo_3,0)+y_4_2[i,j,w]*max(cargo_SB[j]+t4+t2-i-T_1[w]+Tcargo_3,0)+y_4_3[i,j,w]*max(cargo_SB[j]+t4+t3-i-T_1[w]+Tcargo_3,0)+y_5_1[i,j,w]*max(cargo_HS[j]+t5+t1-i-T_1[w]+Tcargo_3,0)+y_5_2[i,j,w]*max(cargo_SB[j]+t5+t2-i-T_1[w]+Tcargo_3,0)+y_5_3[i,j,w]*max(cargo_SB[j]+t5+t3-i-T_1[w]+Tcargo_3,0))
                C3 += C2per[w] * (y_4_7[i,j,w]*max(cargo_HS[j]+t4+t7-i-T_1[w]+Tcargo_2,0)+y_4_8[i,j,w]*max(cargo_HS[j]+t4+t8-i-T_1[w]+Tcargo_2,0)+y_5_7[i,j,w]*max(cargo_HS[j]+t5+t7-i-T_1[w]+Tcargo_2,0)+y_5_8[i,j,w]*max(cargo_HS[j]+t5+t8-i-T_1[w]+Tcargo_2,0))
                C4 += c1 * ((y_4_7[i,j,w]+y_4_8[i,j,w]+y_5_7[i,j,w]+y_5_8[i,j,w]+y_6_7[i,j,w]+y_6_8[i,j,w]+y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w]) * (cargo_HS[j] - i))
            for i in range(cargo_SB[j]):
                C3 += C2per[w] * (y_7_1[i,j,w]*max(cargo_SB[j]+t7+t1-i-T_1[w]+Tcargo_3,0)+y_7_2[i,j,w]*max(cargo_SB[j]+t7+t2-i-T_1[w]+Tcargo_3,0)+y_7_3[i,j,w]*max(cargo_SB[j]+t7+t3-i-T_1[w]+Tcargo_3,0)+y_8_1[i,j,w]*max(cargo_SB[j]+t8+t1-i-T_1[w]+Tcargo_3,0)+y_8_2[i,j,w]*max(cargo_SB[j]+t8+t2-i-T_1[w]+Tcargo_3,0)+y_8_3[i,j,w]*max(cargo_SB[j]+t8+t3-i-T_1[w]+Tcargo_3,0))
                C3 += C2per[w] * (y_7_4[i,j,w]*max(cargo_BH[j]+t7+t4-i-T_1[w]+Tcargo_1,0)+y_7_5[i,j,w]*max(cargo_BH[j]+t7+t5-i-T_1[w]+Tcargo_1,0)+y_7_6[i,j,w]*max(cargo_BH[j]+t7+t6-i-T_1[w]+Tcargo_1,0)+y_8_4[i,j,w]*max(cargo_BH[j]+t8+t4-i-T_1[w]+Tcargo_1,0)+y_8_5[i,j,w]*max(cargo_BH[j]+t8+t5-i-T_1[w]+Tcargo_1,0)+y_8_6[i,j,w]*max(cargo_BH[j]+t8+t6-i-T_1[w]+Tcargo_1,0))
                C4 += c1 * ((y_7_1[i,j,w]+y_7_2[i,j,w]+y_7_3[i,j,w]+y_8_1[i,j,w]+y_8_2[i,j,w]+y_8_3[i,j,w]+y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w]) * (cargo_SB[j] - i))
                
    TimeSensitive_Req_BH = [x1+x2+x3+x4+x5+x6+x7+x8+x9 for x1,x2,x3,x4,x5,x6,x7,x8,x9 in zip(TimeSensitive_Req_1_4,TimeSensitive_Req_1_5,TimeSensitive_Req_1_6,TimeSensitive_Req_2_4,TimeSensitive_Req_2_5,TimeSensitive_Req_2_6,TimeSensitive_Req_3_4,TimeSensitive_Req_3_5,TimeSensitive_Req_3_6)]
    TimeSensitive_Req_BS = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(TimeSensitive_Req_1_7,TimeSensitive_Req_1_8,TimeSensitive_Req_2_7,TimeSensitive_Req_2_8,TimeSensitive_Req_3_7,TimeSensitive_Req_3_8)]
    TimeSensitive_Req_HB = [x1+x2+x3+x4+x5+x6+x7+x8+x9 for x1,x2,x3,x4,x5,x6,x7,x8,x9 in zip(TimeSensitive_Req_4_1,TimeSensitive_Req_4_2,TimeSensitive_Req_4_3,TimeSensitive_Req_5_1,TimeSensitive_Req_5_2,TimeSensitive_Req_5_3,TimeSensitive_Req_6_1,TimeSensitive_Req_6_2,TimeSensitive_Req_6_3)]
    TimeSensitive_Req_HS = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(TimeSensitive_Req_4_7,TimeSensitive_Req_4_8,TimeSensitive_Req_5_7,TimeSensitive_Req_5_8,TimeSensitive_Req_6_7,TimeSensitive_Req_6_8)]
    TimeSensitive_Req_SB = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(TimeSensitive_Req_7_1,TimeSensitive_Req_7_2,TimeSensitive_Req_7_3,TimeSensitive_Req_8_1,TimeSensitive_Req_8_2,TimeSensitive_Req_8_3)]
    TimeSensitive_Req_SH = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(TimeSensitive_Req_7_4,TimeSensitive_Req_7_5,TimeSensitive_Req_7_6,TimeSensitive_Req_8_4,TimeSensitive_Req_8_5,TimeSensitive_Req_8_6)]
    Economy_Req_BH = [x1+x2+x3+x4+x5+x6+x7+x8+x9 for x1,x2,x3,x4,x5,x6,x7,x8,x9 in zip(Economy_Req_1_4,Economy_Req_1_5,Economy_Req_1_6,Economy_Req_2_4,Economy_Req_2_5,Economy_Req_2_6,Economy_Req_3_4,Economy_Req_3_5,Economy_Req_3_6)]
    Economy_Req_BS = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(Economy_Req_1_7,Economy_Req_1_8,Economy_Req_2_7,Economy_Req_2_8,Economy_Req_3_7,Economy_Req_3_8)]
    Economy_Req_HB = [x1+x2+x3+x4+x5+x6+x7+x8+x9 for x1,x2,x3,x4,x5,x6,x7,x8,x9 in zip(Economy_Req_4_1,Economy_Req_4_2,Economy_Req_4_3,Economy_Req_5_1,Economy_Req_5_2,Economy_Req_5_3,Economy_Req_6_1,Economy_Req_6_2,Economy_Req_6_3)]
    Economy_Req_HS = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(Economy_Req_4_7,Economy_Req_4_8,Economy_Req_5_7,Economy_Req_5_8,Economy_Req_6_7,Economy_Req_6_8)]
    Economy_Req_SB = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(Economy_Req_7_1,Economy_Req_7_2,Economy_Req_7_3,Economy_Req_8_1,Economy_Req_8_2,Economy_Req_8_3)]
    Economy_Req_SH = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(Economy_Req_7_4,Economy_Req_7_5,Economy_Req_7_6,Economy_Req_8_4,Economy_Req_8_5,Economy_Req_8_6)]
    forecast_BH_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_BH,Economy_Req_BH)]
    forecast_BS_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_BS,Economy_Req_BS)]
    forecast_HB_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_HB,Economy_Req_HB)]
    forecast_HS_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_HS,Economy_Req_HS)]
    forecast_SB_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_SB,Economy_Req_SB)]
    forecast_SH_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_SH,Economy_Req_SH)]
    passengerTotalBH = 0
    cargoTotalBH = 0
    passengerTotalBS = 0
    cargoTotalBS = 0
    passengerTotalHB = 0
    cargoTotalHB = 0
    passengerTotalHS = 0
    cargoTotalHS = 0
    passengerTotalSB = 0
    cargoTotalSB = 0
    passengerTotalSH = 0
    cargoTotalSH = 0
    
    for k in range(last_BH):
        transOut1 = 0
        transOut2 = 0
        transOut1_1_4 = 0
        transOut1_1_5 = 0
        transOut1_1_6 = 0
        transOut2_1_4 = 0
        transOut2_1_5 = 0
        transOut2_1_6 = 0
        transOut1_2_4 = 0
        transOut1_2_5 = 0
        transOut1_2_6 = 0
        transOut2_2_4 = 0
        transOut2_2_5 = 0
        transOut2_2_6 = 0
        transOut1_3_4 = 0
        transOut1_3_5 = 0
        transOut1_3_6 = 0
        transOut2_3_4 = 0
        transOut2_3_5 = 0
        transOut2_3_6 = 0
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                if i == k:
                    transOut1_1_4 += x_1_4[i,j,1]
                    transOut2_1_4 += x_1_4[i,j,2]
                    transOut1_1_5 += x_1_5[i,j,1]
                    transOut2_1_5 += x_1_5[i,j,2]
                    transOut1_1_6 += x_1_6[i,j,1]
                    transOut2_1_6 += x_1_6[i,j,2]
                    transOut1_2_4 += x_2_4[i,j,1]
                    transOut2_2_4 += x_2_4[i,j,2]
                    transOut1_2_5 += x_2_5[i,j,1]
                    transOut2_2_5 += x_2_5[i,j,2]
                    transOut1_2_6 += x_2_6[i,j,1]
                    transOut2_2_6 += x_2_6[i,j,2]
                    transOut1_3_4 += x_3_4[i,j,1]
                    transOut2_3_4 += x_3_4[i,j,2]
                    transOut1_3_5 += x_3_5[i,j,1]
                    transOut2_3_5 += x_3_5[i,j,2]
                    transOut1_3_6 += x_3_6[i,j,1]
                    transOut2_3_6 += x_3_6[i,j,2]
                    transOut1 += (x_1_4[i,j,1]+x_1_5[i,j,1]+x_1_6[i,j,1]+x_2_4[i,j,1]+x_2_5[i,j,1]+x_2_6[i,j,1]+x_3_4[i,j,1]+x_3_5[i,j,1]+x_3_6[i,j,1])
                    transOut2 += (x_1_4[i,j,2]+x_1_5[i,j,2]+x_1_6[i,j,2]+x_2_4[i,j,2]+x_2_5[i,j,2]+x_2_6[i,j,2]+x_3_4[i,j,2]+x_3_5[i,j,2]+x_3_6[i,j,2])
                    passengerTotalBH += (x_1_4[i,j,1]+x_1_5[i,j,1]+x_1_6[i,j,1]+x_2_4[i,j,1]+x_2_5[i,j,1]+x_2_6[i,j,1]+x_3_4[i,j,1]+x_3_5[i,j,1]+x_3_6[i,j,1]+x_1_4[i,j,2]+x_1_5[i,j,2]+x_1_6[i,j,2]+x_2_4[i,j,2]+x_2_5[i,j,2]+x_2_6[i,j,2]+x_3_4[i,j,2]+x_3_5[i,j,2]+x_3_6[i,j,2])          
        for j in range(N*K):
            for i in range(cargo_BH[j]):
                if i == k:
                    transOut1_1_4 += y_1_4[i,j,1]
                    transOut2_1_4 += y_1_4[i,j,2]
                    transOut1_1_5 += y_1_5[i,j,1]
                    transOut2_1_5 += y_1_5[i,j,2]
                    transOut1_1_6 += y_1_6[i,j,1]
                    transOut2_1_6 += y_1_6[i,j,2]
                    transOut1_2_4 += y_2_4[i,j,1]
                    transOut2_2_4 += y_2_4[i,j,2]
                    transOut1_2_5 += y_2_5[i,j,1]
                    transOut2_2_5 += y_2_5[i,j,2]
                    transOut1_2_6 += y_2_6[i,j,1]
                    transOut2_2_6 += y_2_6[i,j,2]
                    transOut1_3_4 += y_3_4[i,j,1]
                    transOut2_3_4 += y_3_4[i,j,2]
                    transOut1_3_5 += y_3_5[i,j,1]
                    transOut2_3_5 += y_3_5[i,j,2]
                    transOut1_3_6 += y_3_6[i,j,1]
                    transOut2_3_6 += y_3_6[i,j,2]
                    transOut1 += (y_1_4[i,j,1]+y_1_5[i,j,1]+y_1_6[i,j,1]+y_2_4[i,j,1]+y_2_5[i,j,1]+y_2_6[i,j,1]+y_3_4[i,j,1]+y_3_5[i,j,1]+y_3_6[i,j,1])
                    transOut2 += (y_1_4[i,j,2]+y_1_5[i,j,2]+y_1_6[i,j,2]+y_2_4[i,j,2]+y_2_5[i,j,2]+y_2_6[i,j,2]+y_3_4[i,j,2]+y_3_5[i,j,2]+y_3_6[i,j,2])
                    cargoTotalBH += (y_1_4[i,j,1]+y_1_5[i,j,1]+y_1_6[i,j,1]+y_2_4[i,j,1]+y_2_5[i,j,1]+y_2_6[i,j,1]+y_3_4[i,j,1]+y_3_5[i,j,1]+y_3_6[i,j,1]+y_1_4[i,j,2]+y_1_5[i,j,2]+y_1_6[i,j,2]+y_2_4[i,j,2]+y_2_5[i,j,2]+y_2_6[i,j,2]+y_3_4[i,j,2]+y_3_5[i,j,2]+y_3_6[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_1_4 <= TimeSensitive_Req_1_4[k])
        m.addConstr(transOut2_1_4 <= Economy_Req_1_4[k])
        m.addConstr(transOut1_1_5 <= TimeSensitive_Req_1_5[k])
        m.addConstr(transOut2_1_5 <= Economy_Req_1_5[k])
        m.addConstr(transOut1_1_6 <= TimeSensitive_Req_1_6[k])
        m.addConstr(transOut2_1_6 <= Economy_Req_1_6[k])
        m.addConstr(transOut1_2_4 <= TimeSensitive_Req_2_4[k])
        m.addConstr(transOut2_2_4 <= Economy_Req_2_4[k])
        m.addConstr(transOut1_2_5 <= TimeSensitive_Req_2_5[k])
        m.addConstr(transOut2_2_5 <= Economy_Req_2_5[k])
        m.addConstr(transOut1_2_6 <= TimeSensitive_Req_2_6[k])
        m.addConstr(transOut2_2_6 <= Economy_Req_2_6[k])
        m.addConstr(transOut1_3_4 <= TimeSensitive_Req_3_4[k])
        m.addConstr(transOut2_3_4 <= Economy_Req_3_4[k])
        m.addConstr(transOut1_3_5 <= TimeSensitive_Req_3_5[k])
        m.addConstr(transOut2_3_5 <= Economy_Req_3_5[k])
        m.addConstr(transOut1_3_6 <= TimeSensitive_Req_3_6[k])
        m.addConstr(transOut2_3_6 <= Economy_Req_3_6[k])
        trash = c3_1 * (TimeSensitive_Req_BH[k]-transOut1) + c3_2 * (Economy_Req_BH[k]-transOut2)
        C6 += trash
    for k in range(last_BS):
        transOut1 = 0
        transOut2 = 0
        transOut1_1_7 = 0
        transOut2_1_7 = 0
        transOut1_1_8 = 0
        transOut2_1_8 = 0
        transOut1_2_7 = 0
        transOut2_2_7 = 0
        transOut1_2_8 = 0
        transOut2_2_8 = 0
        transOut1_3_7 = 0
        transOut2_3_7 = 0
        transOut1_3_8 = 0
        transOut2_3_8 = 0
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                if i == k:
                    transOut1_1_7 += x_1_7[i,j,1]
                    transOut2_1_7 += x_1_7[i,j,2]
                    transOut1_1_8 += x_1_8[i,j,1]
                    transOut2_1_8 += x_1_8[i,j,2]
                    transOut1_2_7 += x_2_7[i,j,1]
                    transOut2_2_7 += x_2_7[i,j,2]
                    transOut1_2_8 += x_2_8[i,j,1]
                    transOut2_2_8 += x_2_8[i,j,2]
                    transOut1_3_7 += x_3_7[i,j,1]
                    transOut2_3_7 += x_3_7[i,j,2]
                    transOut1_3_8 += x_3_8[i,j,1]
                    transOut2_3_8 += x_3_8[i,j,2]
                    transOut1 += (x_1_7[i,j,1]+x_1_8[i,j,1]+x_2_7[i,j,1]+x_2_8[i,j,1]+x_3_7[i,j,1]+x_3_8[i,j,1])
                    transOut2 += (x_1_7[i,j,2]+x_1_8[i,j,2]+x_2_7[i,j,2]+x_2_8[i,j,2]+x_3_7[i,j,2]+x_3_8[i,j,2])
                    passengerTotalBS += (x_1_7[i,j,1]+x_1_8[i,j,1]+x_2_7[i,j,1]+x_2_8[i,j,1]+x_3_7[i,j,1]+x_3_8[i,j,1]+x_1_7[i,j,2]+x_1_8[i,j,2]+x_2_7[i,j,2]+x_2_8[i,j,2]+x_3_7[i,j,2]+x_3_8[i,j,2])
        for j in range(N*K):
            for i in range(cargo_BH[j]):
                if i == k:
                    transOut1_1_7 += y_1_7[i,j,1]
                    transOut2_1_7 += y_1_7[i,j,2]
                    transOut1_1_8 += y_1_8[i,j,1]
                    transOut2_1_8 += y_1_8[i,j,2]
                    transOut1_2_7 += y_2_7[i,j,1]
                    transOut2_2_7 += y_2_7[i,j,2]
                    transOut1_2_8 += y_2_8[i,j,1]
                    transOut2_2_8 += y_2_8[i,j,2]
                    transOut1_3_7 += y_3_7[i,j,1]
                    transOut2_3_7 += y_3_7[i,j,2]
                    transOut1_3_8 += y_3_8[i,j,1]
                    transOut2_3_8 += y_3_8[i,j,2]
                    transOut1 += (y_1_7[i,j,1]+y_1_8[i,j,1]+y_2_7[i,j,1]+y_2_8[i,j,1]+y_3_7[i,j,1]+y_3_8[i,j,1])
                    transOut2 += (y_1_7[i,j,2]+y_1_8[i,j,2]+y_2_7[i,j,2]+y_2_8[i,j,2]+y_3_7[i,j,2]+y_3_8[i,j,2])
                    cargoTotalBS += (y_1_7[i,j,1]+y_1_8[i,j,1]+y_2_7[i,j,1]+y_2_8[i,j,1]+y_3_7[i,j,1]+y_3_8[i,j,1]+y_1_7[i,j,2]+y_1_8[i,j,2]+y_2_7[i,j,2]+y_2_8[i,j,2]+y_3_7[i,j,2]+y_3_8[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_1_7 <= TimeSensitive_Req_1_7[k])
        m.addConstr(transOut2_1_7 <= Economy_Req_1_7[k])
        m.addConstr(transOut1_1_8 <= TimeSensitive_Req_1_8[k])
        m.addConstr(transOut2_1_8 <= Economy_Req_1_8[k])
        m.addConstr(transOut1_2_7 <= TimeSensitive_Req_2_7[k])
        m.addConstr(transOut2_2_7 <= Economy_Req_2_7[k])
        m.addConstr(transOut1_2_8 <= TimeSensitive_Req_2_8[k])
        m.addConstr(transOut2_2_8 <= Economy_Req_2_8[k])
        m.addConstr(transOut1_3_7 <= TimeSensitive_Req_3_7[k])
        m.addConstr(transOut2_3_7 <= Economy_Req_3_7[k])
        m.addConstr(transOut1_3_8 <= TimeSensitive_Req_3_8[k])
        m.addConstr(transOut2_3_8 <= Economy_Req_3_8[k])
        trash = c3_1 * (TimeSensitive_Req_BS[k]-transOut1) + c3_2 * (Economy_Req_BS[k]-transOut2)
        C6 += trash
    for k in range(last_HB):
        transOut1 = 0
        transOut2 = 0
        transOut1_4_1 = 0
        transOut2_4_1 = 0
        transOut1_4_2 = 0
        transOut2_4_2 = 0
        transOut1_4_3 = 0
        transOut2_4_3 = 0
        transOut1_5_1 = 0
        transOut2_5_1 = 0
        transOut1_5_2 = 0
        transOut2_5_2 = 0
        transOut1_5_3 = 0
        transOut2_5_3 = 0
        transOut1_6_1 = 0
        transOut2_6_1 = 0
        transOut1_6_2 = 0
        transOut2_6_2 = 0
        transOut1_6_3 = 0
        transOut2_6_3 = 0
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                if i == k:
                    transOut1_4_1 += x_4_1[i,j,1]
                    transOut2_4_1 += x_4_1[i,j,2]
                    transOut1_4_2 += x_4_2[i,j,1]
                    transOut2_4_2 += x_4_2[i,j,2]
                    transOut1_4_3 += x_4_3[i,j,1]
                    transOut2_4_3 += x_4_3[i,j,2]
                    transOut1_5_1 += x_5_1[i,j,1]
                    transOut2_5_1 += x_5_1[i,j,2]
                    transOut1_5_2 += x_5_2[i,j,1]
                    transOut2_5_2 += x_5_2[i,j,2]
                    transOut1_5_3 += x_5_3[i,j,1]
                    transOut2_5_3 += x_5_3[i,j,2]
                    transOut1_6_1 += x_6_1[i,j,1]
                    transOut2_6_1 += x_6_1[i,j,2]
                    transOut1_6_2 += x_6_2[i,j,1]
                    transOut2_6_2 += x_6_2[i,j,2]
                    transOut1_6_3 += x_6_3[i,j,1]
                    transOut2_6_3 += x_6_3[i,j,2]
                    transOut1 += x_4_1[i,j,1]+x_4_2[i,j,1]+x_4_3[i,j,1]+x_5_1[i,j,1]+x_5_2[i,j,1]+x_5_3[i,j,1]+x_6_1[i,j,1]+x_6_2[i,j,1]+x_6_3[i,j,1]
                    transOut2 += x_4_1[i,j,2]+x_4_2[i,j,2]+x_4_3[i,j,2]+x_5_1[i,j,2]+x_5_2[i,j,2]+x_5_3[i,j,2]+x_6_1[i,j,2]+x_6_2[i,j,2]+x_6_3[i,j,2]
                    passengerTotalHB += (x_4_1[i,j,1]+x_4_2[i,j,1]+x_4_3[i,j,1]+x_5_1[i,j,1]+x_5_2[i,j,1]+x_5_3[i,j,1]+x_6_1[i,j,1]+x_6_2[i,j,1]+x_6_3[i,j,1]+x_4_1[i,j,2]+x_4_2[i,j,2]+x_4_3[i,j,2]+x_5_1[i,j,2]+x_5_2[i,j,2]+x_5_3[i,j,2]+x_6_1[i,j,2]+x_6_2[i,j,2]+x_6_3[i,j,2])
        for j in range(N*K):
            for i in range(cargo_HS[j]):
                if i == k:
                    transOut1_4_1 += y_4_1[i,j,1]
                    transOut2_4_1 += y_4_1[i,j,2]
                    transOut1_4_2 += y_4_2[i,j,1]
                    transOut2_4_2 += y_4_2[i,j,2]
                    transOut1_4_3 += y_4_3[i,j,1]
                    transOut2_4_3 += y_4_3[i,j,2]
                    transOut1_5_1 += y_5_1[i,j,1]
                    transOut2_5_1 += y_5_1[i,j,2]
                    transOut1_5_2 += y_5_2[i,j,1]
                    transOut2_5_2 += y_5_2[i,j,2]
                    transOut1_5_3 += y_5_3[i,j,1]
                    transOut2_5_3 += y_5_3[i,j,2]
                    transOut1_6_1 += y_6_1[i,j,1]
                    transOut2_6_1 += y_6_1[i,j,2]
                    transOut1_6_2 += y_6_2[i,j,1]
                    transOut2_6_2 += y_6_2[i,j,2]
                    transOut1_6_3 += y_6_3[i,j,1]
                    transOut2_6_3 += y_6_3[i,j,2]
                    transOut1 += y_4_1[i,j,1]+y_4_2[i,j,1]+y_4_3[i,j,1]+y_5_1[i,j,1]+y_5_2[i,j,1]+y_5_3[i,j,1]+y_6_1[i,j,1]+y_6_2[i,j,1]+y_6_3[i,j,1]
                    transOut2 += y_4_1[i,j,2]+y_4_2[i,j,2]+y_4_3[i,j,2]+y_5_1[i,j,2]+y_5_2[i,j,2]+y_5_3[i,j,2]+y_6_1[i,j,2]+y_6_2[i,j,2]+y_6_3[i,j,2]
                    cargoTotalHB += (y_4_1[i,j,1]+y_4_2[i,j,1]+y_4_3[i,j,1]+y_5_1[i,j,1]+y_5_2[i,j,1]+y_5_3[i,j,1]+y_6_1[i,j,1]+y_6_2[i,j,1]+y_6_3[i,j,1]+y_4_1[i,j,2]+y_4_2[i,j,2]+y_4_3[i,j,2]+y_5_1[i,j,2]+y_5_2[i,j,2]+y_5_3[i,j,2]+y_6_1[i,j,2]+y_6_2[i,j,2]+y_6_3[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_4_1 <= TimeSensitive_Req_4_1[k])
        m.addConstr(transOut2_4_1 <= Economy_Req_4_1[k])
        m.addConstr(transOut1_4_2 <= TimeSensitive_Req_4_2[k])
        m.addConstr(transOut2_4_2 <= Economy_Req_4_2[k])
        m.addConstr(transOut1_4_3 <= TimeSensitive_Req_4_3[k])
        m.addConstr(transOut2_4_3 <= Economy_Req_4_3[k])
        m.addConstr(transOut1_5_1 <= TimeSensitive_Req_5_1[k])
        m.addConstr(transOut2_5_1 <= Economy_Req_5_1[k])
        m.addConstr(transOut1_5_2 <= TimeSensitive_Req_5_2[k])
        m.addConstr(transOut2_5_2 <= Economy_Req_5_2[k])
        m.addConstr(transOut1_5_3 <= TimeSensitive_Req_5_3[k])
        m.addConstr(transOut2_5_3 <= Economy_Req_5_3[k])
        m.addConstr(transOut1_6_1 <= TimeSensitive_Req_6_1[k])
        m.addConstr(transOut2_6_1 <= Economy_Req_6_1[k])
        m.addConstr(transOut1_6_2 <= TimeSensitive_Req_6_2[k])
        m.addConstr(transOut2_6_2 <= Economy_Req_6_2[k])
        m.addConstr(transOut1_6_3 <= TimeSensitive_Req_6_3[k])
        m.addConstr(transOut2_6_3 <= Economy_Req_6_3[k])
        trash = c3_1 * (TimeSensitive_Req_HB[k]-transOut1) + c3_2 * (Economy_Req_HB[k]-transOut2)
        C6 += trash
    for k in range(last_HS):
        transOut1 = 0
        transOut2 = 0
        transOut1_4_7 = 0
        transOut2_4_7 = 0
        transOut1_4_8 = 0
        transOut2_4_8 = 0
        transOut1_5_7 = 0
        transOut2_5_7 = 0
        transOut1_5_8 = 0
        transOut2_5_8 = 0
        transOut1_6_7 = 0
        transOut2_6_7 = 0
        transOut1_6_8 = 0
        transOut2_6_8 = 0
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                if i == k:
                    transOut1_4_7 += x_4_7[i,j,1]
                    transOut2_4_7 += x_4_7[i,j,2]
                    transOut1_4_8 += x_4_8[i,j,1]
                    transOut2_4_8 += x_4_8[i,j,2]
                    transOut1_5_7 += x_5_7[i,j,1]
                    transOut2_5_7 += x_5_7[i,j,2]
                    transOut1_5_8 += x_5_8[i,j,1]
                    transOut2_5_8 += x_5_8[i,j,2]
                    transOut1_6_7 += x_6_7[i,j,1]
                    transOut2_6_7 += x_6_7[i,j,2]
                    transOut1_6_8 += x_6_8[i,j,1]
                    transOut2_6_8 += x_6_8[i,j,2]
                    transOut1 += x_4_7[i,j,1]+x_4_8[i,j,1]+x_5_7[i,j,1]+x_5_8[i,j,1]+x_6_7[i,j,1]+x_6_8[i,j,1]
                    transOut2 += x_4_7[i,j,2]+x_4_8[i,j,2]+x_5_7[i,j,2]+x_5_8[i,j,2]+x_6_7[i,j,2]+x_6_8[i,j,2]
                    passengerTotalHS += (x_4_7[i,j,1]+x_4_8[i,j,1]+x_5_7[i,j,1]+x_5_8[i,j,1]+x_6_7[i,j,1]+x_6_8[i,j,1]+x_4_7[i,j,2]+x_4_8[i,j,2]+x_5_7[i,j,2]+x_5_8[i,j,2]+x_6_7[i,j,2]+x_6_8[i,j,2])
        for j in range(N*K):
            for i in range(cargo_HS[j]):
                if i == k:
                    transOut1_4_7 += y_4_7[i,j,1]
                    transOut2_4_7 += y_4_7[i,j,2]
                    transOut1_4_8 += y_4_8[i,j,1]
                    transOut2_4_8 += y_4_8[i,j,2]
                    transOut1_5_7 += y_5_7[i,j,1]
                    transOut2_5_7 += y_5_7[i,j,2]
                    transOut1_5_8 += y_5_8[i,j,1]
                    transOut2_5_8 += y_5_8[i,j,2]
                    transOut1_6_7 += y_6_7[i,j,1]
                    transOut2_6_7 += y_6_7[i,j,2]
                    transOut1_6_8 += y_6_8[i,j,1]
                    transOut2_6_8 += y_6_8[i,j,2]
                    transOut1 += y_4_7[i,j,1]+y_4_8[i,j,1]+y_5_7[i,j,1]+y_5_8[i,j,1]+y_6_7[i,j,1]+y_6_8[i,j,1]
                    transOut2 += y_4_7[i,j,2]+y_4_8[i,j,2]+y_5_7[i,j,2]+y_5_8[i,j,2]+y_6_7[i,j,2]+y_6_8[i,j,2]
                    cargoTotalHS += (y_4_7[i,j,1]+y_4_8[i,j,1]+y_5_7[i,j,1]+y_5_8[i,j,1]+y_6_7[i,j,1]+y_6_8[i,j,1]+y_4_7[i,j,2]+y_4_8[i,j,2]+y_5_7[i,j,2]+y_5_8[i,j,2]+y_6_7[i,j,2]+y_6_8[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_4_7 <= TimeSensitive_Req_4_7[k])
        m.addConstr(transOut2_4_7 <= Economy_Req_4_7[k])
        m.addConstr(transOut1_4_8 <= TimeSensitive_Req_4_8[k])
        m.addConstr(transOut2_4_8 <= Economy_Req_4_8[k])
        m.addConstr(transOut1_5_7 <= TimeSensitive_Req_5_7[k])
        m.addConstr(transOut2_5_7 <= Economy_Req_5_7[k])
        m.addConstr(transOut1_5_8 <= TimeSensitive_Req_5_8[k])
        m.addConstr(transOut2_5_8 <= Economy_Req_5_8[k])
        m.addConstr(transOut1_6_7 <= TimeSensitive_Req_6_7[k])
        m.addConstr(transOut2_6_7 <= Economy_Req_6_7[k])
        m.addConstr(transOut1_6_8 <= TimeSensitive_Req_6_8[k])
        m.addConstr(transOut2_6_8 <= Economy_Req_6_8[k])
        trash = c3_1 * (TimeSensitive_Req_HS[k]-transOut1) + c3_2 * (Economy_Req_HS[k]-transOut2)
        C6 += trash
    for k in range(last_SB):
        transOut1 = 0
        transOut2 = 0
        transOut1_7_1 = 0
        transOut2_7_1 = 0
        transOut1_7_2 = 0
        transOut2_7_2 = 0
        transOut1_7_3 = 0
        transOut2_7_3 = 0
        transOut1_8_1 = 0
        transOut2_8_1 = 0
        transOut1_8_2 = 0
        transOut2_8_2 = 0
        transOut1_8_3 = 0
        transOut2_8_3 = 0
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                if i == k:
                    transOut1_7_1 += x_7_1[i,j,1]
                    transOut2_7_1 += x_7_1[i,j,2]
                    transOut1_7_2 += x_7_2[i,j,1]
                    transOut2_7_2 += x_7_2[i,j,2]
                    transOut1_7_3 += x_7_3[i,j,1]
                    transOut2_7_3 += x_7_3[i,j,2]
                    transOut1_8_1 += x_8_1[i,j,1]
                    transOut2_8_1 += x_8_1[i,j,2]
                    transOut1_8_2 += x_8_2[i,j,1]
                    transOut2_8_2 += x_8_2[i,j,2]
                    transOut1_8_3 += x_8_3[i,j,1]
                    transOut2_8_3 += x_8_3[i,j,2]
                    transOut1 += x_7_1[i,j,1]+x_7_2[i,j,1]+x_7_3[i,j,1]+x_8_1[i,j,1]+x_8_2[i,j,1]+x_8_3[i,j,1]
                    transOut2 += x_7_1[i,j,2]+x_7_2[i,j,2]+x_7_3[i,j,2]+x_8_1[i,j,2]+x_8_2[i,j,2]+x_8_3[i,j,2]
                    passengerTotalSB += (x_7_1[i,j,1]+x_7_2[i,j,1]+x_7_3[i,j,1]+x_8_1[i,j,1]+x_8_2[i,j,1]+x_8_3[i,j,1]+x_7_1[i,j,2]+x_7_2[i,j,2]+x_7_3[i,j,2]+x_8_1[i,j,2]+x_8_2[i,j,2]+x_8_3[i,j,2])
        for j in range(N*K):
            for i in range(cargo_SB[j]):
                if i == k:
                    transOut1_7_1 += y_7_1[i,j,1]
                    transOut2_7_1 += y_7_1[i,j,2]
                    transOut1_7_2 += y_7_2[i,j,1]
                    transOut2_7_2 += y_7_2[i,j,2]
                    transOut1_7_3 += y_7_3[i,j,1]
                    transOut2_7_3 += y_7_3[i,j,2]
                    transOut1_8_1 += y_8_1[i,j,1]
                    transOut2_8_1 += y_8_1[i,j,2]
                    transOut1_8_2 += y_8_2[i,j,1]
                    transOut2_8_2 += y_8_2[i,j,2]
                    transOut1_8_3 += y_8_3[i,j,1]
                    transOut2_8_3 += y_8_3[i,j,2]
                    transOut1 += y_7_1[i,j,1]+y_7_2[i,j,1]+y_7_3[i,j,1]+y_8_1[i,j,1]+y_8_2[i,j,1]+y_8_3[i,j,1]
                    transOut2 += y_7_1[i,j,2]+y_7_2[i,j,2]+y_7_3[i,j,2]+y_8_1[i,j,2]+y_8_2[i,j,2]+y_8_3[i,j,2]
                    cargoTotalSB += (y_7_1[i,j,1]+y_7_2[i,j,1]+y_7_3[i,j,1]+y_8_1[i,j,1]+y_8_2[i,j,1]+y_8_3[i,j,1]+y_7_1[i,j,2]+y_7_2[i,j,2]+y_7_3[i,j,2]+y_8_1[i,j,2]+y_8_2[i,j,2]+y_8_3[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_7_1 <= TimeSensitive_Req_7_1[k])
        m.addConstr(transOut2_7_1 <= Economy_Req_7_1[k])
        m.addConstr(transOut1_7_2 <= TimeSensitive_Req_7_2[k])
        m.addConstr(transOut2_7_2 <= Economy_Req_7_2[k])
        m.addConstr(transOut1_7_3 <= TimeSensitive_Req_7_3[k])
        m.addConstr(transOut2_7_3 <= Economy_Req_7_3[k])
        m.addConstr(transOut1_8_1 <= TimeSensitive_Req_8_1[k])
        m.addConstr(transOut2_8_1 <= Economy_Req_8_1[k])
        m.addConstr(transOut1_8_2 <= TimeSensitive_Req_8_2[k])
        m.addConstr(transOut2_8_2 <= Economy_Req_8_2[k])
        m.addConstr(transOut1_8_3 <= TimeSensitive_Req_8_3[k])
        m.addConstr(transOut2_8_3 <= Economy_Req_8_3[k])
        trash = c3_1 * (TimeSensitive_Req_SB[k]-transOut1) + c3_2 * (Economy_Req_SB[k]-transOut2)
        C6 += trash
    for k in range(last_SH):
        transOut1 = 0
        transOut2 = 0
        transOut1_7_4 = 0
        transOut2_7_4 = 0
        transOut1_7_5 = 0
        transOut2_7_5 = 0
        transOut1_7_6 = 0
        transOut2_7_6 = 0
        transOut1_8_4 = 0
        transOut2_8_4 = 0
        transOut1_8_5 = 0
        transOut2_8_5 = 0
        transOut1_8_6 = 0
        transOut2_8_6 = 0
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                if i == k:
                    transOut1_7_4 += x_7_4[i,j,1]
                    transOut2_7_4 += x_7_4[i,j,2]
                    transOut1_7_5 += x_7_5[i,j,1]
                    transOut2_7_5 += x_7_5[i,j,2]
                    transOut1_7_6 += x_7_6[i,j,1]
                    transOut2_7_6 += x_7_6[i,j,2]
                    transOut1_8_4 += x_8_4[i,j,1]
                    transOut2_8_4 += x_8_4[i,j,2]
                    transOut1_8_5 += x_8_5[i,j,1]
                    transOut2_8_5 += x_8_5[i,j,2]
                    transOut1_8_6 += x_8_6[i,j,1]
                    transOut2_8_6 += x_8_6[i,j,2]
                    transOut1 += x_7_4[i,j,1]+x_7_5[i,j,1]+x_7_6[i,j,1]+x_8_4[i,j,1]+x_8_5[i,j,1]+x_8_6[i,j,1]
                    transOut2 += x_7_4[i,j,2]+x_7_5[i,j,2]+x_7_6[i,j,2]+x_8_4[i,j,2]+x_8_5[i,j,2]+x_8_6[i,j,2]
                    passengerTotalSH += (x_7_4[i,j,1]+x_7_5[i,j,1]+x_7_6[i,j,1]+x_8_4[i,j,1]+x_8_5[i,j,1]+x_8_6[i,j,1]+x_7_4[i,j,2]+x_7_5[i,j,2]+x_7_6[i,j,2]+x_8_4[i,j,2]+x_8_5[i,j,2]+x_8_6[i,j,2])
        for j in range(N*K):
            for i in range(cargo_SB[j]):
                if i == k:
                    transOut1_7_4 += y_7_4[i,j,1]
                    transOut2_7_4 += y_7_4[i,j,2]
                    transOut1_7_5 += y_7_5[i,j,1]
                    transOut2_7_5 += y_7_5[i,j,2]
                    transOut1_7_6 += y_7_6[i,j,1]
                    transOut2_7_6 += y_7_6[i,j,2]
                    transOut1_8_4 += y_8_4[i,j,1]
                    transOut2_8_4 += y_8_4[i,j,2]
                    transOut1_8_5 += y_8_5[i,j,1]
                    transOut2_8_5 += y_8_5[i,j,2]
                    transOut1_8_6 += y_8_6[i,j,1]
                    transOut2_8_6 += y_8_6[i,j,2]
                    transOut1 += y_7_4[i,j,1]+y_7_5[i,j,1]+y_7_6[i,j,1]+y_8_4[i,j,1]+y_8_5[i,j,1]+y_8_6[i,j,1]
                    transOut2 += y_7_4[i,j,2]+y_7_5[i,j,2]+y_7_6[i,j,2]+y_8_4[i,j,2]+y_8_5[i,j,2]+y_8_6[i,j,2]
                    cargoTotalSH += (y_7_4[i,j,1]+y_7_5[i,j,1]+y_7_6[i,j,1]+y_8_4[i,j,1]+y_8_5[i,j,1]+y_8_6[i,j,1]+y_7_4[i,j,2]+y_7_5[i,j,2]+y_7_6[i,j,2]+y_8_4[i,j,2]+y_8_5[i,j,2]+y_8_6[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_7_4 <= TimeSensitive_Req_7_4[k])
        m.addConstr(transOut2_7_4 <= Economy_Req_7_4[k])
        m.addConstr(transOut1_7_5 <= TimeSensitive_Req_7_5[k])
        m.addConstr(transOut2_7_5 <= Economy_Req_7_5[k])
        m.addConstr(transOut1_7_6 <= TimeSensitive_Req_7_6[k])
        m.addConstr(transOut2_7_6 <= Economy_Req_7_6[k])
        m.addConstr(transOut1_8_4 <= TimeSensitive_Req_8_4[k])
        m.addConstr(transOut2_8_4 <= Economy_Req_8_4[k])
        m.addConstr(transOut1_8_5 <= TimeSensitive_Req_8_5[k])
        m.addConstr(transOut2_8_5 <= Economy_Req_8_5[k])
        m.addConstr(transOut1_8_6 <= TimeSensitive_Req_8_6[k])
        m.addConstr(transOut2_8_6 <= Economy_Req_8_6[k])
        trash = c3_1 * (TimeSensitive_Req_SH[k]-transOut1) + c3_2 * (Economy_Req_SH[k]-transOut2)
        C6 += trash
    
    desertTotalBH = sum(forecast_1_4_K)+sum(forecast_1_5_K)+sum(forecast_1_6_K)+sum(forecast_2_4_K)+sum(forecast_2_5_K)+sum(forecast_2_6_K)+sum(forecast_3_4_K)+sum(forecast_3_5_K)+sum(forecast_3_6_K)-passengerTotalBH-cargoTotalBH
    desertTotalBS = sum(forecast_1_7_K)+sum(forecast_1_8_K)+sum(forecast_2_7_K)+sum(forecast_2_8_K)+sum(forecast_3_7_K)+sum(forecast_3_8_K)-passengerTotalBS-cargoTotalBS
    desertTotalHB = sum(forecast_4_1_K)+sum(forecast_4_2_K)+sum(forecast_4_3_K)+sum(forecast_5_1_K)+sum(forecast_5_2_K)+sum(forecast_5_3_K)+sum(forecast_6_1_K)+sum(forecast_6_2_K)+sum(forecast_6_3_K)-passengerTotalHB-cargoTotalHB
    desertTotalHS = sum(forecast_4_7_K)+sum(forecast_4_8_K)+sum(forecast_5_7_K)+sum(forecast_5_8_K)+sum(forecast_6_7_K)+sum(forecast_6_8_K)-passengerTotalHS-cargoTotalHS
    desertTotalSB = sum(forecast_7_1_K)+sum(forecast_7_2_K)+sum(forecast_7_3_K)+sum(forecast_8_1_K)+sum(forecast_8_2_K)+sum(forecast_8_3_K)-passengerTotalSB-cargoTotalSB
    desertTotalSH = sum(forecast_7_4_K)+sum(forecast_7_5_K)+sum(forecast_7_6_K)+sum(forecast_8_4_K)+sum(forecast_8_5_K)+sum(forecast_8_6_K)-passengerTotalSH-cargoTotalSH
                      
    # 本周期内无法运完的货物的仓储成本和预期逾期成本
    left_1_4 = 0
    left_1_5 = 0
    left_1_6 = 0
    left_1_7 = 0
    left_1_8 = 0
    left_2_4 = 0
    left_2_5 = 0
    left_2_6 = 0
    left_2_7 = 0
    left_2_8 = 0
    left_3_4 = 0
    left_3_5 = 0
    left_3_6 = 0
    left_3_7 = 0
    left_3_8 = 0
    left_4_1 = 0
    left_4_2 = 0
    left_4_3 = 0
    left_4_7 = 0
    left_4_8 = 0
    left_5_1 = 0
    left_5_2 = 0
    left_5_3 = 0
    left_5_7 = 0
    left_5_8 = 0
    left_6_1 = 0
    left_6_2 = 0
    left_6_3 = 0
    left_6_7 = 0
    left_6_8 = 0
    left_7_1 = 0
    left_7_2 = 0
    left_7_3 = 0
    left_7_4 = 0
    left_7_5 = 0
    left_7_6 = 0
    left_8_1 = 0
    left_8_2 = 0
    left_8_3 = 0
    left_8_4 = 0
    left_8_5 = 0
    left_8_6 = 0                 
    for i in range(last_BH, 24 * K):
        left_1_4 += forecast_1_4_K[i]
        left_1_5 += forecast_1_5_K[i]
        left_1_6 += forecast_1_6_K[i]
        left_2_4 += forecast_2_4_K[i]
        left_2_5 += forecast_2_5_K[i]
        left_2_6 += forecast_2_6_K[i]
        left_3_4 += forecast_3_4_K[i]
        left_3_5 += forecast_3_5_K[i]
        left_3_6 += forecast_3_6_K[i]      
        C1 += c1 * (forecast_1_4_K[i]+forecast_1_5_K[i]+forecast_1_6_K[i]+forecast_2_4_K[i]+forecast_2_5_K[i]+forecast_2_6_K[i]+forecast_3_4_K[i]+forecast_3_5_K[i]+forecast_3_6_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_BH[i] + c2_2 * Economy_Req_BH[i]) * (24 * K - i + first_BH - 1) * (1 - (i + 1) / (24 * K))
    for i in range(last_BS, 24 * K):
        left_1_7 += forecast_1_7_K[i]
        left_1_8 += forecast_1_8_K[i]
        left_2_7 += forecast_2_7_K[i]
        left_2_8 += forecast_2_8_K[i]
        left_3_7 += forecast_3_7_K[i]
        left_3_8 += forecast_3_8_K[i]
        C1 += c1 * (forecast_1_7_K[i]+forecast_1_8_K[i]+forecast_2_7_K[i]+forecast_2_8_K[i]+forecast_3_7_K[i]+forecast_3_8_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_BS[i] + c2_2 * Economy_Req_BS[i]) * (24 * K - i + first_BS - 1) * (1 - (i + 1) / (24 * K))  
    for i in range(last_HB, 24 * K):
        left_4_1 += forecast_4_1_K[i]
        left_4_2 += forecast_4_2_K[i]
        left_4_3 += forecast_4_3_K[i]
        left_5_1 += forecast_5_1_K[i]
        left_5_2 += forecast_5_2_K[i]
        left_5_3 += forecast_5_3_K[i]
        left_6_1 += forecast_6_1_K[i]
        left_6_2 += forecast_6_2_K[i]
        left_6_3 += forecast_6_3_K[i]
        C1 += c1 * (forecast_4_1_K[i]+forecast_4_2_K[i]+forecast_4_3_K[i]+forecast_5_1_K[i]+forecast_5_2_K[i]+forecast_5_3_K[i]+forecast_6_1_K[i]+forecast_6_2_K[i]+forecast_6_3_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_HB[i] + c2_2 * Economy_Req_HB[i]) * (24 * K - i + first_HB - 1) * (1 - (i + 1) / (24 * K))
    for i in range(last_HS, 24 * K):
        left_4_7 += forecast_4_7_K[i]
        left_4_8 += forecast_4_8_K[i]
        left_5_7 += forecast_5_7_K[i]
        left_5_8 += forecast_5_8_K[i]
        left_6_7 += forecast_6_7_K[i]
        left_6_8 += forecast_6_8_K[i]  
        C1 += c1 * (forecast_4_7_K[i]+forecast_4_8_K[i]+forecast_5_7_K[i]+forecast_5_8_K[i]+forecast_6_7_K[i]+forecast_6_8_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_HS[i] + c2_2 * Economy_Req_HS[i]) * (24 * K - i + first_HS - 1) * (1 - (i + 1) / (24 * K))
    for i in range(last_SB, 24 * K):
        left_7_1 += forecast_7_1_K[i]
        left_7_2 += forecast_7_2_K[i]
        left_7_3 += forecast_7_3_K[i]
        left_8_1 += forecast_8_1_K[i]
        left_8_2 += forecast_8_2_K[i]
        left_8_3 += forecast_8_3_K[i]   
        C1 += c1 * (forecast_7_1_K[i]+forecast_7_2_K[i]+forecast_7_3_K[i]+forecast_8_1_K[i]+forecast_8_2_K[i]+forecast_8_3_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_SB[i] + c2_2 * Economy_Req_SB[i]) * (24 * K - i + first_SB - 1) * (1 - (i + 1) / (24 * K))
    for i in range(last_SH, 24 * K):
        left_7_4 += forecast_7_4_K[i]
        left_7_5 += forecast_7_5_K[i]
        left_7_6 += forecast_7_6_K[i]
        left_8_4 += forecast_8_4_K[i]
        left_8_5 += forecast_8_5_K[i]
        left_8_6 += forecast_8_6_K[i]
        C1 += c1 * (forecast_7_4_K[i]+forecast_7_5_K[i]+forecast_7_6_K[i]+forecast_8_4_K[i]+forecast_8_5_K[i]+forecast_8_6_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_SH[i] + c2_2 * Economy_Req_SH[i]) * (24 * K - i + first_SH - 1) * (1 - (i + 1) / (24 * K))       
                
    left_to_leave_1_4.append(left_1_4)
    left_to_leave_1_5.append(left_1_5)
    left_to_leave_1_6.append(left_1_6)
    left_to_leave_1_7.append(left_1_7)
    left_to_leave_1_8.append(left_1_8)
    left_to_leave_2_4.append(left_2_4)
    left_to_leave_2_5.append(left_2_5)
    left_to_leave_2_6.append(left_2_6)
    left_to_leave_2_7.append(left_2_7)
    left_to_leave_2_8.append(left_2_8)
    left_to_leave_3_4.append(left_3_4)
    left_to_leave_3_5.append(left_3_5)
    left_to_leave_3_6.append(left_3_6)
    left_to_leave_3_7.append(left_3_7)
    left_to_leave_3_8.append(left_3_8)
    left_to_leave_4_1.append(left_4_1)
    left_to_leave_4_2.append(left_4_2)
    left_to_leave_4_3.append(left_4_3)
    left_to_leave_4_7.append(left_4_7)
    left_to_leave_4_8.append(left_4_8)
    left_to_leave_5_1.append(left_5_1)
    left_to_leave_5_2.append(left_5_2)
    left_to_leave_5_3.append(left_5_3)
    left_to_leave_5_7.append(left_5_7)
    left_to_leave_5_8.append(left_5_8)
    left_to_leave_6_1.append(left_6_1)
    left_to_leave_6_2.append(left_6_2)
    left_to_leave_6_3.append(left_6_3)
    left_to_leave_6_7.append(left_6_7)
    left_to_leave_6_8.append(left_6_8)
    left_to_leave_7_1.append(left_7_1)
    left_to_leave_7_2.append(left_7_2)
    left_to_leave_7_3.append(left_7_3)
    left_to_leave_7_4.append(left_7_4)
    left_to_leave_7_5.append(left_7_5)
    left_to_leave_7_6.append(left_7_6)
    left_to_leave_8_1.append(left_8_1)
    left_to_leave_8_2.append(left_8_2)
    left_to_leave_8_3.append(left_8_3)
    left_to_leave_8_4.append(left_8_4)
    left_to_leave_8_5.append(left_8_5)
    left_to_leave_8_6.append(left_8_6)
                      
    # 计算每个航段上客机和货机运输的量
    passengerTrans_BH = 0
    passengerTrans_BS = 0
    passengerTrans_HB = 0
    passengerTrans_HS = 0
    passengerTrans_SB = 0
    passengerTrans_SH = 0
    cargoTrans = 0
    cargoTrans_BH = 0
    cargoTrans_HS = 0
    cargoTrans_SB = 0
    for w in range(1,3):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                passengerTrans_BH += (x_1_4[i,j,w]+x_1_5[i,j,w]+x_1_6[i,j,w]+x_2_4[i,j,w]+x_2_5[i,j,w]+x_2_6[i,j,w]+x_3_4[i,j,w]+x_3_5[i,j,w]+x_3_6[i,j,w])
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                passengerTrans_BS += (x_1_7[i,j,w]+x_1_8[i,j,w]+x_2_7[i,j,w]+x_2_8[i,j,w]+x_3_7[i,j,w]+x_3_8[i,j,w])
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                passengerTrans_HB += (x_4_1[i,j,w]+x_4_2[i,j,w]+x_4_3[i,j,w]+x_5_1[i,j,w]+x_5_2[i,j,w]+x_5_3[i,j,w]+x_6_1[i,j,w]+x_6_2[i,j,w]+x_6_3[i,j,w])
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                passengerTrans_HS += (x_4_7[i,j,w]+x_4_8[i,j,w]+x_5_7[i,j,w]+x_5_8[i,j,w]+x_6_7[i,j,w]+x_6_8[i,j,w])
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                passengerTrans_SB += (x_7_1[i,j,w]+x_7_2[i,j,w]+x_7_3[i,j,w]+x_8_1[i,j,w]+x_8_2[i,j,w]+x_8_3[i,j,w])
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                passengerTrans_SH += (x_7_4[i,j,w]+x_7_5[i,j,w]+x_7_6[i,j,w]+x_8_4[i,j,w]+x_8_5[i,j,w]+x_8_6[i,j,w])
        for j in range(N*K):
            for i in range(cargo_BH[j]):
                cargoTrans += (y_1_4[i,j,w]+y_1_5[i,j,w]+y_1_6[i,j,w]+y_2_4[i,j,w]+y_2_5[i,j,w]+y_2_6[i,j,w]+y_3_4[i,j,w]+y_3_5[i,j,w]+y_3_6[i,j,w]+y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w])
                cargoTrans_BH += (y_1_4[i,j,w]+y_1_5[i,j,w]+y_1_6[i,j,w]+y_2_4[i,j,w]+y_2_5[i,j,w]+y_2_6[i,j,w]+y_3_4[i,j,w]+y_3_5[i,j,w]+y_3_6[i,j,w]+y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w])
                cargoTrans_HS += (y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w])
            for i in range(cargo_HS[j]):
                cargoTrans += (y_4_7[i,j,w]+y_4_8[i,j,w]+y_5_7[i,j,w]+y_5_8[i,j,w]+y_6_7[i,j,w]+y_6_8[i,j,w]+y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w])
                cargoTrans_HS += (y_4_7[i,j,w]+y_4_8[i,j,w]+y_5_7[i,j,w]+y_5_8[i,j,w]+y_6_7[i,j,w]+y_6_8[i,j,w]+y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w])
                cargoTrans_SB += (y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w])
            for i in range(cargo_SB[j]):
                cargoTrans += (y_7_1[i,j,w]+y_7_2[i,j,w]+y_7_3[i,j,w]+y_8_1[i,j,w]+y_8_2[i,j,w]+y_8_3[i,j,w]+y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w])
                cargoTrans_SB += (y_7_1[i,j,w]+y_7_2[i,j,w]+y_7_3[i,j,w]+y_8_1[i,j,w]+y_8_2[i,j,w]+y_8_3[i,j,w]+y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w])
                cargoTrans_BH += (y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w])
    passengerTrans = passengerTrans_BH+passengerTrans_BS+passengerTrans_HB+passengerTrans_HS+passengerTrans_SB+passengerTrans_SH
    
    # 只有客机运输成本是分段计价的
    zBH = {}
    zBS = {}
    zHB = {}
    zHS = {}
    zSB = {}
    zSH = {}
    A_BH = m.addVars(range(len(FR_BH)), vtype=GRB.BINARY)
    A_BS = m.addVars(range(len(FR_BS)), vtype=GRB.BINARY)
    A_HB = m.addVars(range(len(FR_HB)), vtype=GRB.BINARY)
    A_HS = m.addVars(range(len(FR_HS)), vtype=GRB.BINARY)
    A_SB = m.addVars(range(len(FR_SB)), vtype=GRB.BINARY)
    A_SH = m.addVars(range(len(FR_SH)), vtype=GRB.BINARY)
    
    for r in range(len(FR_BH)):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                zBH[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                zBS[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                zHB[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                zHS[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                zSB[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                zSH[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                
    m.addConstr(gp.quicksum(A_BH[r] for r in range(len(FR_BH))) == 1)
    m.addConstr(gp.quicksum(A_BS[r] for r in range(len(FR_BS))) == 1)
    m.addConstr(gp.quicksum(A_HB[r] for r in range(len(FR_HB))) == 1)
    m.addConstr(gp.quicksum(A_HS[r] for r in range(len(FR_HS))) == 1)
    m.addConstr(gp.quicksum(A_SB[r] for r in range(len(FR_SB))) == 1)
    m.addConstr(gp.quicksum(A_SH[r] for r in range(len(FR_SH))) == 1)
    
    for r in range(len(FR_BH)):
        for j in range(len(passengerTime_BH)):
            m.addConstr(gp.quicksum(x_1_4[i,j,w]+x_1_5[i,j,w]+x_1_6[i,j,w]+x_2_4[i,j,w]+x_2_5[i,j,w]+x_2_6[i,j,w]+x_3_4[i,j,w]+x_3_5[i,j,w]+x_3_6[i,j,w] for w in range(1,3) for i in range(passengerTime_BH[j])) >= lBH[r] * A_BH[r])
        for j in range(len(passengerTime_BS)):
            m.addConstr(gp.quicksum(x_1_7[i,j,w]+x_1_8[i,j,w]+x_2_7[i,j,w]+x_2_8[i,j,w]+x_3_7[i,j,w]+x_3_8[i,j,w] for w in range(1,3) for i in range(passengerTime_BS[j])) >= lBS[r] * A_BS[r])
        for j in range(len(passengerTime_HB)):
            m.addConstr(gp.quicksum(x_4_1[i,j,w]+x_4_2[i,j,w]+x_4_3[i,j,w]+x_5_1[i,j,w]+x_5_2[i,j,w]+x_5_3[i,j,w]+x_6_1[i,j,w]+x_6_2[i,j,w]+x_6_3[i,j,w] for w in range(1,3) for i in range(passengerTime_HB[j])) >= lHB[r] * A_HB[r])
        for j in range(len(passengerTime_HS)):
            m.addConstr(gp.quicksum(x_4_7[i,j,w]+x_4_8[i,j,w]+x_5_7[i,j,w]+x_5_8[i,j,w]+x_6_7[i,j,w]+x_6_8[i,j,w] for w in range(1,3) for i in range(passengerTime_HS[j])) >= lHS[r] * A_HS[r])
        for j in range(len(passengerTime_SB)):
            m.addConstr(gp.quicksum(x_7_1[i,j,w]+x_7_2[i,j,w]+x_7_3[i,j,w]+x_8_1[i,j,w]+x_8_2[i,j,w]+x_8_3[i,j,w] for w in range(1,3) for i in range(passengerTime_SB[j])) >= lSB[r] * A_SB[r])
        for j in range(len(passengerTime_SH)):
            m.addConstr(gp.quicksum(x_7_4[i,j,w]+x_7_5[i,j,w]+x_7_6[i,j,w]+x_8_4[i,j,w]+x_8_5[i,j,w]+x_8_6[i,j,w] for w in range(1,3) for i in range(passengerTime_SH[j])) >= lSH[r] * A_SH[r])
        
    for r in range(len(FR_BH)):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                m.addConstr(zBH[i,j,r] <= A_BH[r] * forecast_BH_K[i])
                m.addConstr(zBH[i,j,r] <= (x_1_4[i,j,1]+x_1_5[i,j,1]+x_1_6[i,j,1]+x_2_4[i,j,1]+x_2_5[i,j,1]+x_2_6[i,j,1]+x_3_4[i,j,1]+x_3_5[i,j,1]+x_3_6[i,j,1]+x_1_4[i,j,2]+x_1_5[i,j,2]+x_1_6[i,j,2]+x_2_4[i,j,2]+x_2_5[i,j,2]+x_2_6[i,j,2]+x_3_4[i,j,2]+x_3_5[i,j,2]+x_3_6[i,j,2]))
                m.addConstr(zBH[i,j,r] >= (x_1_4[i,j,1]+x_1_5[i,j,1]+x_1_6[i,j,1]+x_2_4[i,j,1]+x_2_5[i,j,1]+x_2_6[i,j,1]+x_3_4[i,j,1]+x_3_5[i,j,1]+x_3_6[i,j,1]+x_1_4[i,j,2]+x_1_5[i,j,2]+x_1_6[i,j,2]+x_2_4[i,j,2]+x_2_5[i,j,2]+x_2_6[i,j,2]+x_3_4[i,j,2]+x_3_5[i,j,2]+x_3_6[i,j,2] - forecast_BH_K[i] * (1 - A_BH[r])))
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                m.addConstr(zBS[i,j,r] <= A_BS[r] * forecast_BS_K[i])
                m.addConstr(zBS[i,j,r] <= (x_1_7[i,j,1]+x_1_8[i,j,1]+x_2_7[i,j,1]+x_2_8[i,j,1]+x_3_7[i,j,1]+x_3_8[i,j,1]+x_1_7[i,j,2]+x_1_8[i,j,2]+x_2_7[i,j,2]+x_2_8[i,j,2]+x_3_7[i,j,2]+x_3_8[i,j,2]))
                m.addConstr(zBS[i,j,r] >= (x_1_7[i,j,1]+x_1_8[i,j,1]+x_2_7[i,j,1]+x_2_8[i,j,1]+x_3_7[i,j,1]+x_3_8[i,j,1]+x_1_7[i,j,2]+x_1_8[i,j,2]+x_2_7[i,j,2]+x_2_8[i,j,2]+x_3_7[i,j,2]+x_3_8[i,j,2] - forecast_BS_K[i] * (1 - A_BS[r])))
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                m.addConstr(zHB[i,j,r] <= A_HB[r] * forecast_HB_K[i])
                m.addConstr(zHB[i,j,r] <= (x_4_1[i,j,1]+x_4_2[i,j,1]+x_4_3[i,j,1]+x_5_1[i,j,1]+x_5_2[i,j,1]+x_5_3[i,j,1]+x_6_1[i,j,1]+x_6_2[i,j,1]+x_6_3[i,j,1]+x_4_1[i,j,2]+x_4_2[i,j,2]+x_4_3[i,j,2]+x_5_1[i,j,2]+x_5_2[i,j,2]+x_5_3[i,j,2]+x_6_1[i,j,2]+x_6_2[i,j,2]+x_6_3[i,j,2]))
                m.addConstr(zHB[i,j,r] >= (x_4_1[i,j,1]+x_4_2[i,j,1]+x_4_3[i,j,1]+x_5_1[i,j,1]+x_5_2[i,j,1]+x_5_3[i,j,1]+x_6_1[i,j,1]+x_6_2[i,j,1]+x_6_3[i,j,1]+x_4_1[i,j,2]+x_4_2[i,j,2]+x_4_3[i,j,2]+x_5_1[i,j,2]+x_5_2[i,j,2]+x_5_3[i,j,2]+x_6_1[i,j,2]+x_6_2[i,j,2]+x_6_3[i,j,2] - forecast_HB_K[i] * (1 - A_HB[r])))
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                m.addConstr(zHS[i,j,r] <= A_HS[r] * forecast_HS_K[i])
                m.addConstr(zHS[i,j,r] <= (x_4_7[i,j,1]+x_4_8[i,j,1]+x_5_7[i,j,1]+x_5_8[i,j,1]+x_6_7[i,j,1]+x_6_8[i,j,1]+x_4_7[i,j,2]+x_4_8[i,j,2]+x_5_7[i,j,2]+x_5_8[i,j,2]+x_6_7[i,j,2]+x_6_8[i,j,2]))
                m.addConstr(zHS[i,j,r] >= (x_4_7[i,j,1]+x_4_8[i,j,1]+x_5_7[i,j,1]+x_5_8[i,j,1]+x_6_7[i,j,1]+x_6_8[i,j,1]+x_4_7[i,j,2]+x_4_8[i,j,2]+x_5_7[i,j,2]+x_5_8[i,j,2]+x_6_7[i,j,2]+x_6_8[i,j,2] - forecast_HS_K[i] * (1 - A_HS[r])))
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                m.addConstr(zSB[i,j,r] <= A_BH[r] * forecast_SB_K[i])
                m.addConstr(zSB[i,j,r] <= (x_7_1[i,j,1]+x_7_2[i,j,1]+x_7_3[i,j,1]+x_8_1[i,j,1]+x_8_2[i,j,1]+x_8_3[i,j,1]+x_7_1[i,j,2]+x_7_2[i,j,2]+x_7_3[i,j,2]+x_8_1[i,j,2]+x_8_2[i,j,2]+x_8_3[i,j,2]))
                m.addConstr(zSB[i,j,r] >= (x_7_1[i,j,1]+x_7_2[i,j,1]+x_7_3[i,j,1]+x_8_1[i,j,1]+x_8_2[i,j,1]+x_8_3[i,j,1]+x_7_1[i,j,2]+x_7_2[i,j,2]+x_7_3[i,j,2]+x_8_1[i,j,2]+x_8_2[i,j,2]+x_8_3[i,j,2] - forecast_SB_K[i] * (1 - A_SB[r])))
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                m.addConstr(zSH[i,j,r] <= A_SH[r] * forecast_SH_K[i])
                m.addConstr(zSH[i,j,r] <= (x_7_4[i,j,1]+x_7_5[i,j,1]+x_7_6[i,j,1]+x_8_4[i,j,1]+x_8_5[i,j,1]+x_8_6[i,j,1]+x_7_4[i,j,2]+x_7_5[i,j,2]+x_7_6[i,j,2]+x_8_4[i,j,2]+x_8_5[i,j,2]+x_8_6[i,j,2]))
                m.addConstr(zSH[i,j,r] >= (x_7_4[i,j,1]+x_7_5[i,j,1]+x_7_6[i,j,1]+x_8_4[i,j,1]+x_8_5[i,j,1]+x_8_6[i,j,1]+x_7_4[i,j,2]+x_7_5[i,j,2]+x_7_6[i,j,2]+x_8_4[i,j,2]+x_8_5[i,j,2]+x_8_6[i,j,2] - forecast_SH_K[i] * (1 - A_SH[r])))
                
    for r in range(len(FR_BH)):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                C5 += FR_BH[r] * zBH[i,j,r]
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                C5 += FR_BS[r] * zBS[i,j,r]
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                C5 += FR_HB[r] * zHB[i,j,r]
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                C5 += FR_HS[r] * zHS[i,j,r]
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                C5 += FR_SB[r] * zSB[i,j,r]
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                C5 += FR_SH[r] * zSH[i,j,r]
    
    cargo_operating_perHour = cargo_per + L * OilPrice
    
    nBH = {}
    nHS = {}
    nSB = {}
    M = 0.0001
    for j in range(N*K):
        nBH[j] = m.addVar(vtype=GRB.BINARY)
        nHS[j] = m.addVar(vtype=GRB.BINARY)
        nSB[j] = m.addVar(vtype=GRB.BINARY)
        
    for j in range(N*K):
        m.addConstr(nBH[j] >= M * gp.quicksum((y_1_4[i,j,w]+y_1_5[i,j,w]+y_1_6[i,j,w]+y_2_4[i,j,w]+y_2_5[i,j,w]+y_2_6[i,j,w]+y_3_4[i,j,w]+y_3_5[i,j,w]+y_3_6[i,j,w]+y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w]) for i in range(cargo_BH[j]) for w in range(1,3)) + M * gp.quicksum(y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w] for i in range(cargo_SB[j]) for w in range(1,3)))
        m.addConstr(nHS[j] >= M * gp.quicksum((y_4_7[i,j,w]+y_4_8[i,j,w]+y_5_7[i,j,w]+y_5_8[i,j,w]+y_6_7[i,j,w]+y_6_8[i,j,w]+y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w]) for i in range(cargo_HS[j]) for w in range(1,3)) + M * gp.quicksum(y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w] for i in range(cargo_BH[j]) for w in range(1,3)))
        m.addConstr(nSB[j] >= M * gp.quicksum((y_7_1[i,j,w]+y_7_2[i,j,w]+y_7_3[i,j,w]+y_8_1[i,j,w]+y_8_2[i,j,w]+y_8_3[i,j,w]+y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w]) for i in range(cargo_SB[j]) for w in range(1,3)) + M * gp.quicksum(y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w] for i in range(cargo_HS[j]) for w in range(1,3)))
        
    cargoUsed_BH = 0
    cargoUsed_HS = 0
    cargoUsed_SB = 0
    for j in range(N*K):
        cargoUsed_BH += nBH[j]
        cargoUsed_HS += nHS[j]
        cargoUsed_SB += nSB[j]
        C7 += cargo_operating_perHour * (Tcargo_1*nBH[j]+Tcargo_2*nHS[j]+Tcargo_3*nSB[j])
    
    requi = sum(forecast_BH_K)+sum(forecast_BS_K)+sum(forecast_HB_K)+sum(forecast_HS_K)+sum(forecast_SB_K)+sum(forecast_SH_K)
    unTrans = requi - transported_1 - transported_2
    untransprop = unTrans / requi
    
    m.setObjective(theta1 * (C1 + C2 + C3 + C4 + C5 + C6 + C7) + theta2 * untransprop, GRB.MINIMIZE)
    m.optimize()
    
    cargo_operating = cargo_operating_perHour * (Tcargo_1+Tcargo_2+Tcargo_3) * max(cargoUsed_BH.getValue(),cargoUsed_HS.getValue(),cargoUsed_SB.getValue())
    
    
    
    result1 = C1+C2+C3.getValue()+C4.getValue()+C5.getValue()+C6.getValue()+cargo_operating
    result2 = C3.getValue()+C2
    result3 = C4.getValue()+C1
    result4 = C5.getValue()
    result5 = cargo_operating
    result6 = transported_1.getValue()
    result7 = transported_2.getValue()
    result8 = unTrans.getValue()
    result9 = requi
    result10 = passengerTrans.getValue()
    result11 = cargoTrans.getValue()
    result12 = C6.getValue()
    result13 = passengerTrans_BH.getValue()
    result14 = passengerTrans_BS.getValue()
    result15 = passengerTrans_HB.getValue()
    result16 = passengerTrans_HS.getValue()
    result17 = passengerTrans_SB.getValue()
    result18 = passengerTrans_SH.getValue()
    result19 = cargoTrans_BH.getValue()
    result20 = cargoTrans_HS.getValue()
    result21 = cargoTrans_SB.getValue()
    result22 = max(cargoUsed_BH.getValue(),cargoUsed_HS.getValue(),cargoUsed_SB.getValue())
    output1 = passengerTotalBH.getValue()
    output2 = passengerTotalBS.getValue()
    output3 = passengerTotalHB.getValue()
    output4 = passengerTotalHS.getValue()
    output5 = passengerTotalSB.getValue()
    output6 = passengerTotalSH.getValue()
    output7 = cargoTotalBH.getValue()
    output8 = cargoTotalBS.getValue()
    output9 = cargoTotalHB.getValue()
    output10 = cargoTotalHS.getValue()
    output11 = cargoTotalSB.getValue()
    output12 = cargoTotalSH.getValue()
    output13 = desertTotalBH.getValue()
    output14 = desertTotalBS.getValue()
    output15 = desertTotalHB.getValue()
    output16 = desertTotalHS.getValue()
    output17 = desertTotalSB.getValue()
    output18 = desertTotalSH.getValue()
    
    return result1,result2,result3,result4,result5,result6,result7,result8,result9,result10,result11,result12,result13,result14,result15,result16,result17,result18,result19,result20,result21,result22,output1,output2,output3,output4,output5,output6,output7,output8,output9,output10,output11,output12,output13,output14,output15,output16,output17,output18

def leftFunctionARIMA(K):
    cargo_BH = []
    cargo_HS = []
    cargo_SB = []
        
    for i in range(K):
        cargo_BH_add = [x + 24 * i for x in cargo_BH_unit]
        cargo_HS_add = [x + 24 * i for x in cargo_HS_unit]
        cargo_SB_add = [x + 24 * i for x in cargo_SB_unit]
        for j in range(N):
            cargo_BH.append(cargo_BH_add[j])
            cargo_HS.append(cargo_HS_add[j])
            cargo_SB.append(cargo_SB_add[j])
    del cargo_BH_add,cargo_HS_add,cargo_SB_add
    BH_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_BH)
    BS_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_BS)
    HB_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_HB)
    HS_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_HS)
    SB_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_SB)
    SH_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_SH)
    flightTime_BH = passenger_flight_times_BH * K
    flightTime_BS = passenger_flight_times_BS * K
    flightTime_HB = passenger_flight_times_HB * K
    flightTime_HS = passenger_flight_times_HS * K
    flightTime_SB = passenger_flight_times_SB * K
    flightTime_SH = passenger_flight_times_SH * K
    first_flight_BH = min(min(BH_passengerTimeTable),min(cargo_BH))
    last_flight_BH = max(max(BH_passengerTimeTable),max(cargo_BH))
    first_flight_HS = min(min(HS_passengerTimeTable),min(cargo_HS))
    last_flight_HS = max(max(HS_passengerTimeTable),max(cargo_HS))
    first_flight_SB = min(min(SB_passengerTimeTable),min(cargo_SB))
    last_flight_SB = max(max(SB_passengerTimeTable),max(cargo_SB))
    first_flight_BS = min(BS_passengerTimeTable)
    last_flight_BS = max(BS_passengerTimeTable)
    first_flight_SH = min(SH_passengerTimeTable)
    last_flight_SH = max(SH_passengerTimeTable)
    first_flight_HB = min(HB_passengerTimeTable)
    last_flight_HB = max(HB_passengerTimeTable)
    BHcant_transport_passenger = passCantTransCal(BH_passengerTimeTable)
    BScant_transport_passenger = passCantTransCal(BS_passengerTimeTable)
    HBcant_transport_passenger = passCantTransCal(HB_passengerTimeTable)
    HScant_transport_passenger = passCantTransCal(HS_passengerTimeTable)
    SBcant_transport_passenger = passCantTransCal(SB_passengerTimeTable)
    SHcant_transport_passenger = passCantTransCal(SH_passengerTimeTable)
    BHcant_transport_cargo = max(cargo_BH) + 1
    HScant_transport_cargo = max(cargo_HS) + 1
    SBcant_transport_cargo = max(cargo_SB) + 1
    first_BH = process_value(first_flight_BH)
    first_BS = process_value(first_flight_BS)
    first_HB = process_value(first_flight_HB)
    first_HS = process_value(first_flight_HS)
    first_SB = process_value(first_flight_SB)
    first_SH = process_value(first_flight_SH)
    last_BH = process_value(last_flight_BH)
    last_BS = process_value(last_flight_BS)
    last_HB = process_value(last_flight_HB)
    last_HS = process_value(last_flight_HS)
    last_SB = process_value(last_flight_SB)
    last_SH = process_value(last_flight_SH)
    passengerTime_BH = passengerTimeCal(BH_passengerTimeTable)
    passengerTime_BS = passengerTimeCal(BS_passengerTimeTable)
    passengerTime_HB = passengerTimeCal(HB_passengerTimeTable)
    passengerTime_HS = passengerTimeCal(HS_passengerTimeTable)
    passengerTime_SB = passengerTimeCal(SB_passengerTimeTable)
    passengerTime_SH = passengerTimeCal(SH_passengerTimeTable)

    C1 = 0 # C1为未运完的仓储成本，初始值为0
    C2 = 0 # C2为未运完的逾期延迟成本，初始值为0
    C3 = 0 # C3为能运完的逾期延迟成本，初始值为0
    C4 = 0 # C4为能运完的仓储成本，初始值为0
    C5 = 0 # C5为运输成本，初始值为0
    C6 = 0 # C6为丢弃成本，初始值为0
    C7 = 0
    transported_1 = 0
    transported_2 = 0
    cargoUsed = 0
    
    # 进行模型拟合和预测
    model_1_4 = ARIMA(train['北京→杭州'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_1_4 = model_1_4.fit()
    model_1_5 = ARIMA(train['北京→南京'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_1_5 = model_1_5.fit()
    model_1_6 = ARIMA(train['北京→上海'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_1_6 = model_1_6.fit()
    model_1_7 = ARIMA(train['北京→深圳'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_1_7 = model_1_7.fit()
    model_1_8 = ARIMA(train['北京→香港'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_1_8 = model_1_8.fit()
    model_2_4 = ARIMA(train['潍坊→杭州'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_2_4 = model_2_4.fit()
    model_2_5 = ARIMA(train['潍坊→南京'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_2_5 = model_2_5.fit()
    model_2_6 = ARIMA(train['潍坊→上海'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_2_6 = model_2_6.fit()
    model_2_7 = ARIMA(train['潍坊→深圳'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_2_7 = model_2_7.fit()
    model_2_8 = ARIMA(train['潍坊→香港'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_2_8 = model_2_8.fit()
    model_3_4 = ARIMA(train['沈阳→杭州'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_3_4 = model_3_4.fit()
    model_3_5 = ARIMA(train['沈阳→南京'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_3_5 = model_3_5.fit()
    model_3_6 = ARIMA(train['沈阳→上海'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_3_6 = model_3_6.fit()
    model_3_7 = ARIMA(train['沈阳→深圳'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_3_7 = model_3_7.fit()
    model_3_8 = ARIMA(train['沈阳→香港'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_3_8 = model_3_8.fit()
    model_4_1 = ARIMA(train['杭州→北京'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_4_1 = model_4_1.fit()
    model_4_2 = ARIMA(train['杭州→潍坊'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_4_2 = model_4_2.fit()
    model_4_3 = ARIMA(train['杭州→沈阳'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_4_3 = model_4_3.fit()
    model_4_7 = ARIMA(train['杭州→深圳'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_4_7 = model_4_7.fit()
    model_4_8 = ARIMA(train['杭州→香港'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_4_8 = model_4_8.fit()
    model_5_1 = ARIMA(train['南京→北京'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_5_1 = model_5_1.fit()
    model_5_2 = ARIMA(train['南京→潍坊'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_5_2 = model_5_2.fit()
    model_5_3 = ARIMA(train['南京→沈阳'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_5_3 = model_5_3.fit()
    model_5_7 = ARIMA(train['南京→深圳'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_5_7 = model_5_7.fit()
    model_5_8 = ARIMA(train['南京→香港'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_5_8 = model_5_8.fit()
    model_6_1 = ARIMA(train['上海→北京'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_6_1 = model_6_1.fit()
    model_6_2 = ARIMA(train['上海→潍坊'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_6_2 = model_6_2.fit()
    model_6_3 = ARIMA(train['上海→沈阳'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_6_3 = model_6_3.fit()
    model_6_7 = ARIMA(train['上海→深圳'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_6_7 = model_6_7.fit()
    model_6_8 = ARIMA(train['上海→香港'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_6_8 = model_6_8.fit()
    model_7_1 = ARIMA(train['深圳→北京'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_7_1 = model_7_1.fit()
    model_7_2 = ARIMA(train['深圳→潍坊'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_7_2 = model_7_2.fit()
    model_7_3 = ARIMA(train['深圳→沈阳'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_7_3 = model_7_3.fit()
    model_7_4 = ARIMA(train['深圳→杭州'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_7_4 = model_7_4.fit()
    model_7_5 = ARIMA(train['深圳→南京'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_7_5 = model_7_5.fit()
    model_7_6 = ARIMA(train['深圳→上海'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_7_6 = model_7_6.fit()
    model_8_1 = ARIMA(train['香港→北京'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_8_1 = model_8_1.fit()
    model_8_2 = ARIMA(train['香港→潍坊'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_8_2 = model_8_2.fit()
    model_8_3 = ARIMA(train['香港→沈阳'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_8_3 = model_8_3.fit()
    model_8_4 = ARIMA(train['香港→杭州'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_8_4 = model_8_4.fit()
    model_8_5 = ARIMA(train['香港→南京'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_8_5 = model_8_5.fit()
    model_8_6 = ARIMA(train['香港→上海'], order=(pARIMA, dARIMA, qARIMA))
    model_fit_8_6 = model_8_6.fit()
    
    # 进行未来一步的预测
    forecast_1_4 = model_fit_1_4.forecast(steps=K)
    forecast_1_5 = model_fit_1_5.forecast(steps=K)
    forecast_1_6 = model_fit_1_6.forecast(steps=K)
    forecast_1_7 = model_fit_1_7.forecast(steps=K)
    forecast_1_8 = model_fit_1_8.forecast(steps=K)
    forecast_2_4 = model_fit_2_4.forecast(steps=K)
    forecast_2_5 = model_fit_2_5.forecast(steps=K)
    forecast_2_6 = model_fit_2_6.forecast(steps=K)
    forecast_2_7 = model_fit_2_7.forecast(steps=K)
    forecast_2_8 = model_fit_2_8.forecast(steps=K)
    forecast_3_4 = model_fit_3_4.forecast(steps=K)
    forecast_3_5 = model_fit_3_5.forecast(steps=K)
    forecast_3_6 = model_fit_3_6.forecast(steps=K)
    forecast_3_7 = model_fit_3_7.forecast(steps=K)
    forecast_3_8 = model_fit_3_8.forecast(steps=K)
    forecast_4_1 = model_fit_4_1.forecast(steps=K)
    forecast_4_2 = model_fit_4_2.forecast(steps=K)
    forecast_4_3 = model_fit_4_3.forecast(steps=K)
    forecast_4_7 = model_fit_4_7.forecast(steps=K)
    forecast_4_8 = model_fit_4_8.forecast(steps=K)
    forecast_5_1 = model_fit_5_1.forecast(steps=K)
    forecast_5_2 = model_fit_5_2.forecast(steps=K)
    forecast_5_3 = model_fit_5_3.forecast(steps=K)
    forecast_5_7 = model_fit_5_7.forecast(steps=K)
    forecast_5_8 = model_fit_5_8.forecast(steps=K)
    forecast_6_1 = model_fit_6_1.forecast(steps=K)
    forecast_6_2 = model_fit_6_2.forecast(steps=K)
    forecast_6_3 = model_fit_6_3.forecast(steps=K)
    forecast_6_7 = model_fit_6_7.forecast(steps=K)
    forecast_6_8 = model_fit_6_8.forecast(steps=K)
    forecast_7_1 = model_fit_7_1.forecast(steps=K)
    forecast_7_2 = model_fit_7_2.forecast(steps=K)
    forecast_7_3 = model_fit_7_3.forecast(steps=K)
    forecast_7_4 = model_fit_7_4.forecast(steps=K)
    forecast_7_5 = model_fit_7_5.forecast(steps=K)
    forecast_7_6 = model_fit_7_6.forecast(steps=K)
    forecast_8_1 = model_fit_8_1.forecast(steps=K)
    forecast_8_2 = model_fit_8_2.forecast(steps=K)
    forecast_8_3 = model_fit_8_3.forecast(steps=K)
    forecast_8_4 = model_fit_8_4.forecast(steps=K)
    forecast_8_5 = model_fit_8_5.forecast(steps=K)
    forecast_8_6 = model_fit_8_6.forecast(steps=K)
    
    forecast_1_4_K = TimeSplit(forecast_1_4)
    forecast_1_5_K = TimeSplit(forecast_1_5)
    forecast_1_6_K = TimeSplit(forecast_1_6)
    forecast_1_7_K = TimeSplit(forecast_1_7)
    forecast_1_8_K = TimeSplit(forecast_1_8)
    forecast_2_4_K = TimeSplit(forecast_2_4)
    forecast_2_5_K = TimeSplit(forecast_2_5)
    forecast_2_6_K = TimeSplit(forecast_2_6)
    forecast_2_7_K = TimeSplit(forecast_2_7)
    forecast_2_8_K = TimeSplit(forecast_2_8)
    forecast_3_4_K = TimeSplit(forecast_3_4)
    forecast_3_5_K = TimeSplit(forecast_3_5)
    forecast_3_6_K = TimeSplit(forecast_3_6)
    forecast_3_7_K = TimeSplit(forecast_3_7)
    forecast_3_8_K = TimeSplit(forecast_3_8)
    forecast_4_1_K = TimeSplit(forecast_4_1)
    forecast_4_2_K = TimeSplit(forecast_4_2)
    forecast_4_3_K = TimeSplit(forecast_4_3)
    forecast_4_7_K = TimeSplit(forecast_4_7)
    forecast_4_8_K = TimeSplit(forecast_4_8)
    forecast_5_1_K = TimeSplit(forecast_5_1)
    forecast_5_2_K = TimeSplit(forecast_5_2)
    forecast_5_3_K = TimeSplit(forecast_5_3)
    forecast_5_7_K = TimeSplit(forecast_5_7)
    forecast_5_8_K = TimeSplit(forecast_5_8)
    forecast_6_1_K = TimeSplit(forecast_6_1)
    forecast_6_2_K = TimeSplit(forecast_6_2)
    forecast_6_3_K = TimeSplit(forecast_6_3)
    forecast_6_7_K = TimeSplit(forecast_6_7)
    forecast_6_8_K = TimeSplit(forecast_6_8)
    forecast_7_1_K = TimeSplit(forecast_7_1)
    forecast_7_2_K = TimeSplit(forecast_7_2)
    forecast_7_3_K = TimeSplit(forecast_7_3)
    forecast_7_4_K = TimeSplit(forecast_7_4)
    forecast_7_5_K = TimeSplit(forecast_7_5)
    forecast_7_6_K = TimeSplit(forecast_7_6)
    forecast_8_1_K = TimeSplit(forecast_8_1)
    forecast_8_2_K = TimeSplit(forecast_8_2)
    forecast_8_3_K = TimeSplit(forecast_8_3)
    forecast_8_4_K = TimeSplit(forecast_8_4)
    forecast_8_5_K = TimeSplit(forecast_8_5)
    forecast_8_6_K = TimeSplit(forecast_8_6)
    
    forecast_1_4_K[0] += left_to_leave_1_4[-1]
    forecast_1_5_K[0] += left_to_leave_1_5[-1]
    forecast_1_6_K[0] += left_to_leave_1_6[-1]
    forecast_1_7_K[0] += left_to_leave_1_7[-1]
    forecast_1_8_K[0] += left_to_leave_1_8[-1]
    forecast_2_4_K[0] += left_to_leave_2_4[-1]
    forecast_2_5_K[0] += left_to_leave_2_5[-1]
    forecast_2_6_K[0] += left_to_leave_2_6[-1]
    forecast_2_7_K[0] += left_to_leave_2_7[-1]
    forecast_2_8_K[0] += left_to_leave_2_8[-1]
    forecast_3_4_K[0] += left_to_leave_3_4[-1]
    forecast_3_5_K[0] += left_to_leave_3_5[-1]
    forecast_3_6_K[0] += left_to_leave_3_6[-1]
    forecast_3_7_K[0] += left_to_leave_3_7[-1]
    forecast_3_8_K[0] += left_to_leave_3_8[-1]
    forecast_4_1_K[0] += left_to_leave_4_1[-1]
    forecast_4_2_K[0] += left_to_leave_4_2[-1]
    forecast_4_3_K[0] += left_to_leave_4_3[-1]
    forecast_4_7_K[0] += left_to_leave_4_7[-1]
    forecast_4_8_K[0] += left_to_leave_4_8[-1]
    forecast_5_1_K[0] += left_to_leave_5_1[-1]
    forecast_5_2_K[0] += left_to_leave_5_2[-1]
    forecast_5_3_K[0] += left_to_leave_5_3[-1]
    forecast_5_7_K[0] += left_to_leave_5_7[-1]
    forecast_5_8_K[0] += left_to_leave_5_8[-1]
    forecast_6_1_K[0] += left_to_leave_6_1[-1]
    forecast_6_2_K[0] += left_to_leave_6_2[-1]
    forecast_6_3_K[0] += left_to_leave_6_3[-1]
    forecast_6_7_K[0] += left_to_leave_6_7[-1]
    forecast_6_8_K[0] += left_to_leave_6_8[-1]
    forecast_7_1_K[0] += left_to_leave_7_1[-1]
    forecast_7_2_K[0] += left_to_leave_7_2[-1]
    forecast_7_3_K[0] += left_to_leave_7_3[-1]
    forecast_7_4_K[0] += left_to_leave_7_4[-1]
    forecast_7_5_K[0] += left_to_leave_7_5[-1]
    forecast_7_6_K[0] += left_to_leave_7_6[-1]
    forecast_8_1_K[0] += left_to_leave_8_1[-1]
    forecast_8_2_K[0] += left_to_leave_8_2[-1]
    forecast_8_3_K[0] += left_to_leave_8_3[-1]
    forecast_8_4_K[0] += left_to_leave_8_4[-1]
    forecast_8_5_K[0] += left_to_leave_8_5[-1]
    forecast_8_6_K[0] += left_to_leave_8_6[-1]
    
    # 计算时效快递的需求
    TimeSensitive_Req_1_4 = [x * perc1 for x in forecast_1_4_K]
    TimeSensitive_Req_1_5 = [x * perc1 for x in forecast_1_5_K]
    TimeSensitive_Req_1_6 = [x * perc1 for x in forecast_1_6_K]
    TimeSensitive_Req_1_7 = [x * perc1 for x in forecast_1_7_K]
    TimeSensitive_Req_1_8 = [x * perc1 for x in forecast_1_8_K]
    TimeSensitive_Req_2_4 = [x * perc1 for x in forecast_2_4_K]
    TimeSensitive_Req_2_5 = [x * perc1 for x in forecast_2_5_K]
    TimeSensitive_Req_2_6 = [x * perc1 for x in forecast_2_6_K]
    TimeSensitive_Req_2_7 = [x * perc1 for x in forecast_2_7_K]
    TimeSensitive_Req_2_8 = [x * perc1 for x in forecast_2_8_K]
    TimeSensitive_Req_3_4 = [x * perc1 for x in forecast_3_4_K]
    TimeSensitive_Req_3_5 = [x * perc1 for x in forecast_3_5_K]
    TimeSensitive_Req_3_6 = [x * perc1 for x in forecast_3_6_K]
    TimeSensitive_Req_3_7 = [x * perc1 for x in forecast_3_7_K]
    TimeSensitive_Req_3_8 = [x * perc1 for x in forecast_3_8_K]
    TimeSensitive_Req_4_1 = [x * perc1 for x in forecast_4_1_K]
    TimeSensitive_Req_4_2 = [x * perc1 for x in forecast_4_2_K]
    TimeSensitive_Req_4_3 = [x * perc1 for x in forecast_4_3_K]
    TimeSensitive_Req_4_7 = [x * perc1 for x in forecast_4_7_K]
    TimeSensitive_Req_4_8 = [x * perc1 for x in forecast_4_8_K]
    TimeSensitive_Req_5_1 = [x * perc1 for x in forecast_5_1_K]
    TimeSensitive_Req_5_2 = [x * perc1 for x in forecast_5_2_K]
    TimeSensitive_Req_5_3 = [x * perc1 for x in forecast_5_3_K]
    TimeSensitive_Req_5_7 = [x * perc1 for x in forecast_5_7_K]
    TimeSensitive_Req_5_8 = [x * perc1 for x in forecast_5_8_K]
    TimeSensitive_Req_6_1 = [x * perc1 for x in forecast_6_1_K]
    TimeSensitive_Req_6_2 = [x * perc1 for x in forecast_6_2_K]
    TimeSensitive_Req_6_3 = [x * perc1 for x in forecast_6_3_K]
    TimeSensitive_Req_6_7 = [x * perc1 for x in forecast_6_7_K]
    TimeSensitive_Req_6_8 = [x * perc1 for x in forecast_6_8_K]
    TimeSensitive_Req_7_1 = [x * perc1 for x in forecast_7_1_K]
    TimeSensitive_Req_7_2 = [x * perc1 for x in forecast_7_2_K]
    TimeSensitive_Req_7_3 = [x * perc1 for x in forecast_7_3_K]
    TimeSensitive_Req_7_4 = [x * perc1 for x in forecast_7_4_K]
    TimeSensitive_Req_7_5 = [x * perc1 for x in forecast_7_5_K]
    TimeSensitive_Req_7_6 = [x * perc1 for x in forecast_7_6_K]
    TimeSensitive_Req_8_1 = [x * perc1 for x in forecast_8_1_K]
    TimeSensitive_Req_8_2 = [x * perc1 for x in forecast_8_2_K]
    TimeSensitive_Req_8_3 = [x * perc1 for x in forecast_8_3_K]
    TimeSensitive_Req_8_4 = [x * perc1 for x in forecast_8_4_K]
    TimeSensitive_Req_8_5 = [x * perc1 for x in forecast_8_5_K]
    TimeSensitive_Req_8_6 = [x * perc1 for x in forecast_8_6_K]
    
    # 计算经济快递的需求
    Economy_Req_1_4 = [x * perc2 for x in forecast_1_4_K]
    Economy_Req_1_5 = [x * perc2 for x in forecast_1_5_K]
    Economy_Req_1_6 = [x * perc2 for x in forecast_1_6_K]
    Economy_Req_1_7 = [x * perc2 for x in forecast_1_7_K]
    Economy_Req_1_8 = [x * perc2 for x in forecast_1_8_K]
    Economy_Req_2_4 = [x * perc2 for x in forecast_2_4_K]
    Economy_Req_2_5 = [x * perc2 for x in forecast_2_5_K]
    Economy_Req_2_6 = [x * perc2 for x in forecast_2_6_K]
    Economy_Req_2_7 = [x * perc2 for x in forecast_2_7_K]
    Economy_Req_2_8 = [x * perc2 for x in forecast_2_8_K]
    Economy_Req_3_4 = [x * perc2 for x in forecast_3_4_K]
    Economy_Req_3_5 = [x * perc2 for x in forecast_3_5_K]
    Economy_Req_3_6 = [x * perc2 for x in forecast_3_6_K]
    Economy_Req_3_7 = [x * perc2 for x in forecast_3_7_K]
    Economy_Req_3_8 = [x * perc2 for x in forecast_3_8_K]
    Economy_Req_4_1 = [x * perc2 for x in forecast_4_1_K]
    Economy_Req_4_2 = [x * perc2 for x in forecast_4_2_K]
    Economy_Req_4_3 = [x * perc2 for x in forecast_4_3_K]
    Economy_Req_4_7 = [x * perc2 for x in forecast_4_7_K]
    Economy_Req_4_8 = [x * perc2 for x in forecast_4_8_K]
    Economy_Req_5_1 = [x * perc2 for x in forecast_5_1_K]
    Economy_Req_5_2 = [x * perc2 for x in forecast_5_2_K]
    Economy_Req_5_3 = [x * perc2 for x in forecast_5_3_K]
    Economy_Req_5_7 = [x * perc2 for x in forecast_5_7_K]
    Economy_Req_5_8 = [x * perc2 for x in forecast_5_8_K]
    Economy_Req_6_1 = [x * perc2 for x in forecast_6_1_K]
    Economy_Req_6_2 = [x * perc2 for x in forecast_6_2_K]
    Economy_Req_6_3 = [x * perc2 for x in forecast_6_3_K]
    Economy_Req_6_7 = [x * perc2 for x in forecast_6_7_K]
    Economy_Req_6_8 = [x * perc2 for x in forecast_6_8_K]
    Economy_Req_7_1 = [x * perc2 for x in forecast_7_1_K]
    Economy_Req_7_2 = [x * perc2 for x in forecast_7_2_K]
    Economy_Req_7_3 = [x * perc2 for x in forecast_7_3_K]
    Economy_Req_7_4 = [x * perc2 for x in forecast_7_4_K]
    Economy_Req_7_5 = [x * perc2 for x in forecast_7_5_K]
    Economy_Req_7_6 = [x * perc2 for x in forecast_7_6_K]
    Economy_Req_8_1 = [x * perc2 for x in forecast_8_1_K]
    Economy_Req_8_2 = [x * perc2 for x in forecast_8_2_K]
    Economy_Req_8_3 = [x * perc2 for x in forecast_8_3_K]
    Economy_Req_8_4 = [x * perc2 for x in forecast_8_4_K]
    Economy_Req_8_5 = [x * perc2 for x in forecast_8_5_K]
    Economy_Req_8_6 = [x * perc2 for x in forecast_8_6_K]
    
    # 主要计算模型
    m = gp.Model()
    m.Params.OutputFlag = 0
    m.Params.MIPGap = 0.005
    
    x_1_4 = {}
    x_1_5 = {}
    x_1_6 = {}
    x_1_7 = {}
    x_1_8 = {}
    x_2_4 = {}
    x_2_5 = {}
    x_2_6 = {}
    x_2_7 = {}
    x_2_8 = {}
    x_3_4 = {}
    x_3_5 = {}
    x_3_6 = {}
    x_3_7 = {}
    x_3_8 = {}
    x_4_1 = {}
    x_4_2 = {}
    x_4_3 = {}
    x_4_7 = {}
    x_4_8 = {}
    x_5_1 = {}
    x_5_2 = {}
    x_5_3 = {}
    x_5_7 = {}
    x_5_8 = {}
    x_6_1 = {}
    x_6_2 = {}
    x_6_3 = {}
    x_6_7 = {}
    x_6_8 = {}
    x_7_1 = {}
    x_7_2 = {}
    x_7_3 = {}
    x_7_4 = {}
    x_7_5 = {}
    x_7_6 = {}
    x_8_1 = {}
    x_8_2 = {}
    x_8_3 = {}
    x_8_4 = {}
    x_8_5 = {}
    x_8_6 = {}
    
    y_1_4 = {}
    y_1_5 = {}
    y_1_6 = {}
    y_1_7 = {}
    y_1_8 = {}
    y_2_4 = {}
    y_2_5 = {}
    y_2_6 = {}
    y_2_7 = {}
    y_2_8 = {}
    y_3_4 = {}
    y_3_5 = {}
    y_3_6 = {}
    y_3_7 = {}
    y_3_8 = {}
    y_4_1 = {}
    y_4_2 = {}
    y_4_3 = {}
    y_4_7 = {}
    y_4_8 = {}
    y_5_1 = {}
    y_5_2 = {}
    y_5_3 = {}
    y_5_7 = {}
    y_5_8 = {}
    y_6_1 = {}
    y_6_2 = {}
    y_6_3 = {}
    y_6_7 = {}
    y_6_8 = {}
    y_7_1 = {}
    y_7_2 = {}
    y_7_3 = {}
    y_7_4 = {}
    y_7_5 = {}
    y_7_6 = {}
    y_8_1 = {}
    y_8_2 = {}
    y_8_3 = {}
    y_8_4 = {}
    y_8_5 = {}
    y_8_6 = {}
    
    for w in range(1,3):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                x_1_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_1_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_1_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_2_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_2_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_2_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_3_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_3_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_3_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                x_1_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_1_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_2_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_2_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_3_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_3_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                x_4_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_4_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_4_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_5_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_5_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_5_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_6_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_6_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_6_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                x_4_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_4_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_5_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_5_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_6_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_6_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                x_7_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_7_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_7_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                x_7_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_7_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_7_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                
    for w in range(1,3):
        for j in range(N*K):
            for i in range(cargo_BH[j]):
                y_1_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_1_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_1_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_1_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_1_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_2_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_2_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_2_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_2_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_2_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_3_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_3_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_3_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_3_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_3_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
            for i in range(cargo_HS[j]):
                y_4_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_4_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_4_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_5_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_5_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_5_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_6_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_6_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_6_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_4_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_4_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_5_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_5_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_6_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_6_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
            for i in range(cargo_SB[j]):
                y_7_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_7_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_7_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_7_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_7_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_7_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                
    # 客机容量限制约束
    for j in range(len(passengerTime_BH)):
        cal1_BH = 0
        cal1_BH += gp.quicksum(x_1_4[i,j,w]+x_1_5[i,j,w]+x_1_6[i,j,w]+x_2_4[i,j,w]+x_2_5[i,j,w]+x_2_6[i,j,w]+x_3_4[i,j,w]+x_3_5[i,j,w]+x_3_6[i,j,w] for w in range(1,3) for i in range(passengerTime_BH[j]))
        m.addConstr(cal1_BH <= q)
    for j in range(len(passengerTime_BS)):
        cal1_BS = 0
        cal1_BS += gp.quicksum(x_1_7[i,j,w]+x_1_8[i,j,w]+x_2_7[i,j,w]+x_2_8[i,j,w]+x_3_7[i,j,w]+x_3_8[i,j,w] for w in range(1,3) for i in range(passengerTime_BS[j]))
        m.addConstr(cal1_BS <= q)
    for j in range(len(passengerTime_HB)):
        cal1_HB = 0
        cal1_HB += gp.quicksum(x_4_1[i,j,w]+x_4_2[i,j,w]+x_4_3[i,j,w]+x_5_1[i,j,w]+x_5_2[i,j,w]+x_5_3[i,j,w]+x_6_1[i,j,w]+x_6_2[i,j,w]+x_6_3[i,j,w] for w in range(1,3) for i in range(passengerTime_HB[j]))
        m.addConstr(cal1_HB <= q)
    for j in range(len(passengerTime_HS)):
        cal1_HS = 0
        cal1_HS += gp.quicksum(x_4_7[i,j,w]+x_4_8[i,j,w]+x_5_7[i,j,w]+x_5_8[i,j,w]+x_6_7[i,j,w]+x_6_8[i,j,w] for w in range(1,3) for i in range(passengerTime_HS[j]))
        m.addConstr(cal1_HS <= q)
    for j in range(len(passengerTime_SB)):
        cal1_SB = 0
        cal1_SB += gp.quicksum(x_7_1[i,j,w]+x_7_2[i,j,w]+x_7_3[i,j,w]+x_8_1[i,j,w]+x_8_2[i,j,w]+x_8_3[i,j,w] for w in range(1,3) for i in range(passengerTime_SB[j]))
        m.addConstr(cal1_SB <= q)
    for j in range(len(passengerTime_SH)):
        cal1_SH = 0
        cal1_SH += gp.quicksum(x_7_4[i,j,w]+x_7_5[i,j,w]+x_7_6[i,j,w]+x_8_4[i,j,w]+x_8_5[i,j,w]+x_8_6[i,j,w] for w in range(1,3) for i in range(passengerTime_SH[j]))
        m.addConstr(cal1_SH <= q)
        
    # 货机容量约束
    for j in range(N*K):
        cal2_BH = 0
        cal2_BH += (gp.quicksum((y_1_4[i,j,w]+y_1_5[i,j,w]+y_1_6[i,j,w]+y_2_4[i,j,w]+y_2_5[i,j,w]+y_2_6[i,j,w]+y_3_4[i,j,w]+y_3_5[i,j,w]+y_3_6[i,j,w]+y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w]) for w in range(1,3) for i in range(cargo_BH[j]))+gp.quicksum(y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w] for w in range(1,3) for i in range(cargo_SB[j])))
        m.addConstr(cal2_BH <= Q)
    for j in range(N*K):
        cal2_HS = 0
        cal2_HS += (gp.quicksum((y_4_7[i,j,w]+y_4_8[i,j,w]+y_5_7[i,j,w]+y_5_8[i,j,w]+y_6_7[i,j,w]+y_6_8[i,j,w]+y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w]) for w in range(1,3) for i in range(cargo_HS[j]))+gp.quicksum(y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w] for w in range(1,3) for i in range(cargo_BH[j])))
        m.addConstr(cal2_HS <= Q)
    for j in range(N*K):
        cal2_SB = 0
        cal2_SB += (gp.quicksum((y_7_1[i,j,w]+y_7_2[i,j,w]+y_7_3[i,j,w]+y_8_1[i,j,w]+y_8_2[i,j,w]+y_8_3[i,j,w]+y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w]) for w in range(1,3) for i in range(cargo_SB[j]))+gp.quicksum(y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w] for w in range(1,3) for i in range(cargo_HS[j])))
        m.addConstr(cal2_SB <= Q)
        
    # 在能运完的货物中，被运走的货物量最多达到这个时间段的订单需求量
    # 能运完的货物的仓储成本和逾期成本及被丢弃货物的成本计算
    for w in range(1,3):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                C3 += C2per[w] * (x_1_4[i,j,w]*max(BH_passengerTimeTable[j]+t1+t4-i-T_1[w]+flightTime_BH[j],0)+x_1_5[i,j,w]*max(BH_passengerTimeTable[j]+t1+t5-i-T_1[w]+flightTime_BH[j],0)+x_1_6[i,j,w]*max(BH_passengerTimeTable[j]+t1+t6-i-T_1[w]+flightTime_BH[j],0)+x_2_4[i,j,w]*max(BH_passengerTimeTable[j]+t2+t4-i-T_1[w]+flightTime_BH[j],0)+x_2_5[i,j,w]*max(BH_passengerTimeTable[j]+t2+t5-i-T_1[w]+flightTime_BH[j],0)+x_2_6[i,j,w]*max(BH_passengerTimeTable[j]+t2+t6-i-T_1[w]+flightTime_BH[j],0)+x_3_4[i,j,w]*max(BH_passengerTimeTable[j]+t3+t4-i-T_1[w]+flightTime_BH[j],0)+x_3_5[i,j,w]*max(BH_passengerTimeTable[j]+t3+t5-i-T_1[w]+flightTime_BH[j],0)+x_3_6[i,j,w]*max(BH_passengerTimeTable[j]+t3+t6-i-T_1[w]+flightTime_BH[j],0))
                C4 += c1 * ((x_1_4[i,j,w]+x_1_5[i,j,w]+x_1_6[i,j,w]+x_2_4[i,j,w]+x_2_5[i,j,w]+x_2_6[i,j,w]+x_3_4[i,j,w]+x_3_5[i,j,w]+x_3_6[i,j,w]) * (BH_passengerTimeTable[j] - i))
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                C3 += C2per[w] * (x_1_7[i,j,w]*max(BS_passengerTimeTable[j]+t1+t7-i-T_1[w]+flightTime_BS[j],0)+x_1_8[i,j,w]*max(BS_passengerTimeTable[j]+t1+t8-i-T_1[w]+flightTime_BS[j],0)+x_2_7[i,j,w]*max(BS_passengerTimeTable[j]+t2+t7-i-T_1[w]+flightTime_BS[j],0)+x_2_8[i,j,w]*max(BS_passengerTimeTable[j]+t2+t8-i-T_1[w]+flightTime_BS[j],0)+x_3_7[i,j,w]*max(BS_passengerTimeTable[j]+t3+t7-i-T_1[w]+flightTime_BS[j],0)+x_3_8[i,j,w]*max(BS_passengerTimeTable[j]+t3+t8-i-T_1[w]+flightTime_BS[j],0))
                C4 += c1 * ((x_1_7[i,j,w]+x_1_8[i,j,w]+x_2_7[i,j,w]+x_2_8[i,j,w]+x_3_7[i,j,w]+x_3_8[i,j,w]) * (BS_passengerTimeTable[j] - i))
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                C3 += C2per[w] * (x_4_1[i,j,w]*max(HB_passengerTimeTable[j]+t4+t1-i-T_1[w]+flightTime_HB[j],0)+x_4_2[i,j,w]*max(HB_passengerTimeTable[j]+t4+t2-i-T_1[w]+flightTime_HB[j],0)+x_4_3[i,j,w]*max(HB_passengerTimeTable[j]+t4+t3-i-T_1[w]+flightTime_HB[j],0)+x_5_1[i,j,w]*max(HB_passengerTimeTable[j]+t5+t1-i-T_1[w]+flightTime_HB[j],0)+x_5_2[i,j,w]*max(HB_passengerTimeTable[j]+t5+t2-i-T_1[w]+flightTime_HB[j],0)+x_5_3[i,j,w]*max(HB_passengerTimeTable[j]+t5+t3-i-T_1[w]+flightTime_HB[j],0)+x_6_1[i,j,w]*max(HB_passengerTimeTable[j]+t6+t1-i-T_1[w]+flightTime_HB[j],0)+x_6_2[i,j,w]*max(HB_passengerTimeTable[j]+t6+t2-i-T_1[w]+flightTime_HB[j],0)+x_6_3[i,j,w]*max(HB_passengerTimeTable[j]+t6+t3-i-T_1[w]+flightTime_HB[j],0))
                C4 += c1 * ((x_4_1[i,j,w]+x_4_2[i,j,w]+x_4_3[i,j,w]+x_5_1[i,j,w]+x_5_2[i,j,w]+x_5_3[i,j,w]+x_6_1[i,j,w]+x_6_2[i,j,w]+x_6_3[i,j,w]) * (HB_passengerTimeTable[j] - i))
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                C3 += C2per[w] * (x_4_7[i,j,w]*max(HS_passengerTimeTable[j]+t4+t7-i-T_1[w]+flightTime_HS[j],0)+x_4_8[i,j,w]*max(HS_passengerTimeTable[j]+t4+t8-i-T_1[w]+flightTime_HS[j],0)+x_5_7[i,j,w]*max(HS_passengerTimeTable[j]+t5+t7-i-T_1[w]+flightTime_HS[j],0)+x_5_8[i,j,w]*max(HS_passengerTimeTable[j]+t5+t8-i-T_1[w]+flightTime_HS[j],0)+x_6_7[i,j,w]*max(HS_passengerTimeTable[j]+t6+t7-i-T_1[w]+flightTime_HS[j],0)+x_6_8[i,j,w]*max(HS_passengerTimeTable[j]+t6+t8-i-T_1[w]+flightTime_HS[j],0))
                C4 += c1 * ((x_4_7[i,j,w]+x_4_8[i,j,w]+x_5_7[i,j,w]+x_5_8[i,j,w]+x_6_7[i,j,w]+x_6_8[i,j,w]) * (HS_passengerTimeTable[j] - i))
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                C3 += C2per[w] * (x_7_1[i,j,w]*max(SB_passengerTimeTable[j]+t7+t1-i-T_1[w]+flightTime_SB[j],0)+x_7_2[i,j,w]*max(SB_passengerTimeTable[j]+t7+t2-i-T_1[w]+flightTime_SB[j],0)+x_7_3[i,j,w]*max(SB_passengerTimeTable[j]+t7+t3-i-T_1[w]+flightTime_SB[j],0)+x_8_1[i,j,w]*max(SB_passengerTimeTable[j]+t8+t1-i-T_1[w]+flightTime_SB[j],0)+x_8_2[i,j,w]*max(SB_passengerTimeTable[j]+t8+t2-i-T_1[w]+flightTime_SB[j],0)+x_8_3[i,j,w]*max(SB_passengerTimeTable[j]+t8+t3-i-T_1[w]+flightTime_SB[j],0))
                C4 += c1 * ((x_7_1[i,j,w]+x_7_2[i,j,w]+x_7_3[i,j,w]+x_8_1[i,j,w]+x_8_2[i,j,w]+x_8_3[i,j,w]) * (SB_passengerTimeTable[j] - i))
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                C3 += C2per[w] * (x_7_4[i,j,w]*max(SH_passengerTimeTable[j]+t7+t4-i-T_1[w]+flightTime_SH[j],0)+x_7_5[i,j,w]*max(SH_passengerTimeTable[j]+t7+t5-i-T_1[w]+flightTime_SH[j],0)+x_7_6[i,j,w]*max(SH_passengerTimeTable[j]+t7+t6-i-T_1[w]+flightTime_SH[j],0)+x_8_4[i,j,w]*max(SH_passengerTimeTable[j]+t8+t4-i-T_1[w]+flightTime_SH[j],0)+x_8_5[i,j,w]*max(SH_passengerTimeTable[j]+t8+t5-i-T_1[w]+flightTime_SH[j],0)+x_8_6[i,j,w]*max(SH_passengerTimeTable[j]+t8+t6-i-T_1[w]+flightTime_SH[j],0))
                C4 += c1 * ((x_7_4[i,j,w]+x_7_5[i,j,w]+x_7_6[i,j,w]+x_8_4[i,j,w]+x_8_5[i,j,w]+x_8_6[i,j,w]) * (SH_passengerTimeTable[j] - i))
        for j in range(N*K):
            for i in range(cargo_BH[j]):
                C3 += C2per[w] * (y_1_4[i,j,w]*max(cargo_BH[j]+t1+t4-i-T_1[w]+Tcargo_1,0)+y_1_5[i,j,w]*max(cargo_BH[j]+t1+t5-i-T_1[w]+Tcargo_1,0)+y_1_6[i,j,w]*max(cargo_BH[j]+t1+t6-i-T_1[w]+Tcargo_1,0)+y_2_4[i,j,w]*max(cargo_BH[j]+t2+t4-i-T_1[w]+Tcargo_1,0)+y_2_5[i,j,w]*max(cargo_BH[j]+t2+t5-i-T_1[w]+Tcargo_1,0)+y_2_6[i,j,w]*max(cargo_BH[j]+t2+t6-i-T_1[w]+Tcargo_1,0))
                C3 += C2per[w] * (y_1_7[i,j,w]*max(cargo_HS[j]+t1+t7-i-T_1[w]+Tcargo_2,0)+y_1_8[i,j,w]*max(cargo_HS[j]+t1+t8-i-T_1[w]+Tcargo_2,0)+y_2_7[i,j,w]*max(cargo_HS[j]+t2+t7-i-T_1[w]+Tcargo_2,0)+y_2_8[i,j,w]*max(cargo_HS[j]+t2+t8-i-T_1[w]+Tcargo_2,0)+y_3_7[i,j,w]*max(cargo_HS[j]+t3+t7-i-T_1[w]+Tcargo_2,0)+y_3_8[i,j,w]*max(cargo_HS[j]+t3+t8-i-T_1[w]+Tcargo_2,0))
                C4 += c1 * ((y_1_4[i,j,w]+y_1_5[i,j,w]+y_1_6[i,j,w]+y_2_4[i,j,w]+y_2_5[i,j,w]+y_2_6[i,j,w]+y_3_4[i,j,w]+y_3_5[i,j,w]+y_3_6[i,j,w]+y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w]) * (cargo_BH[j] - i))
            for i in range(cargo_HS[j]):
                C3 += C2per[w] * (y_4_1[i,j,w]*max(cargo_SB[j]+t4+t1-i-T_1[w]+Tcargo_3,0)+y_4_2[i,j,w]*max(cargo_SB[j]+t4+t2-i-T_1[w]+Tcargo_3,0)+y_4_3[i,j,w]*max(cargo_SB[j]+t4+t3-i-T_1[w]+Tcargo_3,0)+y_5_1[i,j,w]*max(cargo_HS[j]+t5+t1-i-T_1[w]+Tcargo_3,0)+y_5_2[i,j,w]*max(cargo_SB[j]+t5+t2-i-T_1[w]+Tcargo_3,0)+y_5_3[i,j,w]*max(cargo_SB[j]+t5+t3-i-T_1[w]+Tcargo_3,0))
                C3 += C2per[w] * (y_4_7[i,j,w]*max(cargo_HS[j]+t4+t7-i-T_1[w]+Tcargo_2,0)+y_4_8[i,j,w]*max(cargo_HS[j]+t4+t8-i-T_1[w]+Tcargo_2,0)+y_5_7[i,j,w]*max(cargo_HS[j]+t5+t7-i-T_1[w]+Tcargo_2,0)+y_5_8[i,j,w]*max(cargo_HS[j]+t5+t8-i-T_1[w]+Tcargo_2,0))
                C4 += c1 * ((y_4_7[i,j,w]+y_4_8[i,j,w]+y_5_7[i,j,w]+y_5_8[i,j,w]+y_6_7[i,j,w]+y_6_8[i,j,w]+y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w]) * (cargo_HS[j] - i))
            for i in range(cargo_SB[j]):
                C3 += C2per[w] * (y_7_1[i,j,w]*max(cargo_SB[j]+t7+t1-i-T_1[w]+Tcargo_3,0)+y_7_2[i,j,w]*max(cargo_SB[j]+t7+t2-i-T_1[w]+Tcargo_3,0)+y_7_3[i,j,w]*max(cargo_SB[j]+t7+t3-i-T_1[w]+Tcargo_3,0)+y_8_1[i,j,w]*max(cargo_SB[j]+t8+t1-i-T_1[w]+Tcargo_3,0)+y_8_2[i,j,w]*max(cargo_SB[j]+t8+t2-i-T_1[w]+Tcargo_3,0)+y_8_3[i,j,w]*max(cargo_SB[j]+t8+t3-i-T_1[w]+Tcargo_3,0))
                C3 += C2per[w] * (y_7_4[i,j,w]*max(cargo_BH[j]+t7+t4-i-T_1[w]+Tcargo_1,0)+y_7_5[i,j,w]*max(cargo_BH[j]+t7+t5-i-T_1[w]+Tcargo_1,0)+y_7_6[i,j,w]*max(cargo_BH[j]+t7+t6-i-T_1[w]+Tcargo_1,0)+y_8_4[i,j,w]*max(cargo_BH[j]+t8+t4-i-T_1[w]+Tcargo_1,0)+y_8_5[i,j,w]*max(cargo_BH[j]+t8+t5-i-T_1[w]+Tcargo_1,0)+y_8_6[i,j,w]*max(cargo_BH[j]+t8+t6-i-T_1[w]+Tcargo_1,0))
                C4 += c1 * ((y_7_1[i,j,w]+y_7_2[i,j,w]+y_7_3[i,j,w]+y_8_1[i,j,w]+y_8_2[i,j,w]+y_8_3[i,j,w]+y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w]) * (cargo_SB[j] - i))
                
    TimeSensitive_Req_BH = [x1+x2+x3+x4+x5+x6+x7+x8+x9 for x1,x2,x3,x4,x5,x6,x7,x8,x9 in zip(TimeSensitive_Req_1_4,TimeSensitive_Req_1_5,TimeSensitive_Req_1_6,TimeSensitive_Req_2_4,TimeSensitive_Req_2_5,TimeSensitive_Req_2_6,TimeSensitive_Req_3_4,TimeSensitive_Req_3_5,TimeSensitive_Req_3_6)]
    TimeSensitive_Req_BS = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(TimeSensitive_Req_1_7,TimeSensitive_Req_1_8,TimeSensitive_Req_2_7,TimeSensitive_Req_2_8,TimeSensitive_Req_3_7,TimeSensitive_Req_3_8)]
    TimeSensitive_Req_HB = [x1+x2+x3+x4+x5+x6+x7+x8+x9 for x1,x2,x3,x4,x5,x6,x7,x8,x9 in zip(TimeSensitive_Req_4_1,TimeSensitive_Req_4_2,TimeSensitive_Req_4_3,TimeSensitive_Req_5_1,TimeSensitive_Req_5_2,TimeSensitive_Req_5_3,TimeSensitive_Req_6_1,TimeSensitive_Req_6_2,TimeSensitive_Req_6_3)]
    TimeSensitive_Req_HS = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(TimeSensitive_Req_4_7,TimeSensitive_Req_4_8,TimeSensitive_Req_5_7,TimeSensitive_Req_5_8,TimeSensitive_Req_6_7,TimeSensitive_Req_6_8)]
    TimeSensitive_Req_SB = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(TimeSensitive_Req_7_1,TimeSensitive_Req_7_2,TimeSensitive_Req_7_3,TimeSensitive_Req_8_1,TimeSensitive_Req_8_2,TimeSensitive_Req_8_3)]
    TimeSensitive_Req_SH = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(TimeSensitive_Req_7_4,TimeSensitive_Req_7_5,TimeSensitive_Req_7_6,TimeSensitive_Req_8_4,TimeSensitive_Req_8_5,TimeSensitive_Req_8_6)]
    Economy_Req_BH = [x1+x2+x3+x4+x5+x6+x7+x8+x9 for x1,x2,x3,x4,x5,x6,x7,x8,x9 in zip(Economy_Req_1_4,Economy_Req_1_5,Economy_Req_1_6,Economy_Req_2_4,Economy_Req_2_5,Economy_Req_2_6,Economy_Req_3_4,Economy_Req_3_5,Economy_Req_3_6)]
    Economy_Req_BS = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(Economy_Req_1_7,Economy_Req_1_8,Economy_Req_2_7,Economy_Req_2_8,Economy_Req_3_7,Economy_Req_3_8)]
    Economy_Req_HB = [x1+x2+x3+x4+x5+x6+x7+x8+x9 for x1,x2,x3,x4,x5,x6,x7,x8,x9 in zip(Economy_Req_4_1,Economy_Req_4_2,Economy_Req_4_3,Economy_Req_5_1,Economy_Req_5_2,Economy_Req_5_3,Economy_Req_6_1,Economy_Req_6_2,Economy_Req_6_3)]
    Economy_Req_HS = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(Economy_Req_4_7,Economy_Req_4_8,Economy_Req_5_7,Economy_Req_5_8,Economy_Req_6_7,Economy_Req_6_8)]
    Economy_Req_SB = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(Economy_Req_7_1,Economy_Req_7_2,Economy_Req_7_3,Economy_Req_8_1,Economy_Req_8_2,Economy_Req_8_3)]
    Economy_Req_SH = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(Economy_Req_7_4,Economy_Req_7_5,Economy_Req_7_6,Economy_Req_8_4,Economy_Req_8_5,Economy_Req_8_6)]
    forecast_BH_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_BH,Economy_Req_BH)]
    forecast_BS_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_BS,Economy_Req_BS)]
    forecast_HB_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_HB,Economy_Req_HB)]
    forecast_HS_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_HS,Economy_Req_HS)]
    forecast_SB_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_SB,Economy_Req_SB)]
    forecast_SH_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_SH,Economy_Req_SH)]
    passengerTotalBH = 0
    cargoTotalBH = 0
    passengerTotalBS = 0
    cargoTotalBS = 0
    passengerTotalHB = 0
    cargoTotalHB = 0
    passengerTotalHS = 0
    cargoTotalHS = 0
    passengerTotalSB = 0
    cargoTotalSB = 0
    passengerTotalSH = 0
    cargoTotalSH = 0
    
    for k in range(last_BH):
        transOut1 = 0
        transOut2 = 0
        transOut1_1_4 = 0
        transOut1_1_5 = 0
        transOut1_1_6 = 0
        transOut2_1_4 = 0
        transOut2_1_5 = 0
        transOut2_1_6 = 0
        transOut1_2_4 = 0
        transOut1_2_5 = 0
        transOut1_2_6 = 0
        transOut2_2_4 = 0
        transOut2_2_5 = 0
        transOut2_2_6 = 0
        transOut1_3_4 = 0
        transOut1_3_5 = 0
        transOut1_3_6 = 0
        transOut2_3_4 = 0
        transOut2_3_5 = 0
        transOut2_3_6 = 0
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                if i == k:
                    transOut1_1_4 += x_1_4[i,j,1]
                    transOut2_1_4 += x_1_4[i,j,2]
                    transOut1_1_5 += x_1_5[i,j,1]
                    transOut2_1_5 += x_1_5[i,j,2]
                    transOut1_1_6 += x_1_6[i,j,1]
                    transOut2_1_6 += x_1_6[i,j,2]
                    transOut1_2_4 += x_2_4[i,j,1]
                    transOut2_2_4 += x_2_4[i,j,2]
                    transOut1_2_5 += x_2_5[i,j,1]
                    transOut2_2_5 += x_2_5[i,j,2]
                    transOut1_2_6 += x_2_6[i,j,1]
                    transOut2_2_6 += x_2_6[i,j,2]
                    transOut1_3_4 += x_3_4[i,j,1]
                    transOut2_3_4 += x_3_4[i,j,2]
                    transOut1_3_5 += x_3_5[i,j,1]
                    transOut2_3_5 += x_3_5[i,j,2]
                    transOut1_3_6 += x_3_6[i,j,1]
                    transOut2_3_6 += x_3_6[i,j,2]
                    transOut1 += (x_1_4[i,j,1]+x_1_5[i,j,1]+x_1_6[i,j,1]+x_2_4[i,j,1]+x_2_5[i,j,1]+x_2_6[i,j,1]+x_3_4[i,j,1]+x_3_5[i,j,1]+x_3_6[i,j,1])
                    transOut2 += (x_1_4[i,j,2]+x_1_5[i,j,2]+x_1_6[i,j,2]+x_2_4[i,j,2]+x_2_5[i,j,2]+x_2_6[i,j,2]+x_3_4[i,j,2]+x_3_5[i,j,2]+x_3_6[i,j,2])
                    passengerTotalBH += (x_1_4[i,j,1]+x_1_5[i,j,1]+x_1_6[i,j,1]+x_2_4[i,j,1]+x_2_5[i,j,1]+x_2_6[i,j,1]+x_3_4[i,j,1]+x_3_5[i,j,1]+x_3_6[i,j,1]+x_1_4[i,j,2]+x_1_5[i,j,2]+x_1_6[i,j,2]+x_2_4[i,j,2]+x_2_5[i,j,2]+x_2_6[i,j,2]+x_3_4[i,j,2]+x_3_5[i,j,2]+x_3_6[i,j,2])          
        for j in range(N*K):
            for i in range(cargo_BH[j]):
                if i == k:
                    transOut1_1_4 += y_1_4[i,j,1]
                    transOut2_1_4 += y_1_4[i,j,2]
                    transOut1_1_5 += y_1_5[i,j,1]
                    transOut2_1_5 += y_1_5[i,j,2]
                    transOut1_1_6 += y_1_6[i,j,1]
                    transOut2_1_6 += y_1_6[i,j,2]
                    transOut1_2_4 += y_2_4[i,j,1]
                    transOut2_2_4 += y_2_4[i,j,2]
                    transOut1_2_5 += y_2_5[i,j,1]
                    transOut2_2_5 += y_2_5[i,j,2]
                    transOut1_2_6 += y_2_6[i,j,1]
                    transOut2_2_6 += y_2_6[i,j,2]
                    transOut1_3_4 += y_3_4[i,j,1]
                    transOut2_3_4 += y_3_4[i,j,2]
                    transOut1_3_5 += y_3_5[i,j,1]
                    transOut2_3_5 += y_3_5[i,j,2]
                    transOut1_3_6 += y_3_6[i,j,1]
                    transOut2_3_6 += y_3_6[i,j,2]
                    transOut1 += (y_1_4[i,j,1]+y_1_5[i,j,1]+y_1_6[i,j,1]+y_2_4[i,j,1]+y_2_5[i,j,1]+y_2_6[i,j,1]+y_3_4[i,j,1]+y_3_5[i,j,1]+y_3_6[i,j,1])
                    transOut2 += (y_1_4[i,j,2]+y_1_5[i,j,2]+y_1_6[i,j,2]+y_2_4[i,j,2]+y_2_5[i,j,2]+y_2_6[i,j,2]+y_3_4[i,j,2]+y_3_5[i,j,2]+y_3_6[i,j,2])
                    cargoTotalBH += (y_1_4[i,j,1]+y_1_5[i,j,1]+y_1_6[i,j,1]+y_2_4[i,j,1]+y_2_5[i,j,1]+y_2_6[i,j,1]+y_3_4[i,j,1]+y_3_5[i,j,1]+y_3_6[i,j,1]+y_1_4[i,j,2]+y_1_5[i,j,2]+y_1_6[i,j,2]+y_2_4[i,j,2]+y_2_5[i,j,2]+y_2_6[i,j,2]+y_3_4[i,j,2]+y_3_5[i,j,2]+y_3_6[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_1_4 <= TimeSensitive_Req_1_4[k])
        m.addConstr(transOut2_1_4 <= Economy_Req_1_4[k])
        m.addConstr(transOut1_1_5 <= TimeSensitive_Req_1_5[k])
        m.addConstr(transOut2_1_5 <= Economy_Req_1_5[k])
        m.addConstr(transOut1_1_6 <= TimeSensitive_Req_1_6[k])
        m.addConstr(transOut2_1_6 <= Economy_Req_1_6[k])
        m.addConstr(transOut1_2_4 <= TimeSensitive_Req_2_4[k])
        m.addConstr(transOut2_2_4 <= Economy_Req_2_4[k])
        m.addConstr(transOut1_2_5 <= TimeSensitive_Req_2_5[k])
        m.addConstr(transOut2_2_5 <= Economy_Req_2_5[k])
        m.addConstr(transOut1_2_6 <= TimeSensitive_Req_2_6[k])
        m.addConstr(transOut2_2_6 <= Economy_Req_2_6[k])
        m.addConstr(transOut1_3_4 <= TimeSensitive_Req_3_4[k])
        m.addConstr(transOut2_3_4 <= Economy_Req_3_4[k])
        m.addConstr(transOut1_3_5 <= TimeSensitive_Req_3_5[k])
        m.addConstr(transOut2_3_5 <= Economy_Req_3_5[k])
        m.addConstr(transOut1_3_6 <= TimeSensitive_Req_3_6[k])
        m.addConstr(transOut2_3_6 <= Economy_Req_3_6[k])
        trash = c3_1 * (TimeSensitive_Req_BH[k]-transOut1) + c3_2 * (Economy_Req_BH[k]-transOut2)
        C6 += trash
    for k in range(last_BS):
        transOut1 = 0
        transOut2 = 0
        transOut1_1_7 = 0
        transOut2_1_7 = 0
        transOut1_1_8 = 0
        transOut2_1_8 = 0
        transOut1_2_7 = 0
        transOut2_2_7 = 0
        transOut1_2_8 = 0
        transOut2_2_8 = 0
        transOut1_3_7 = 0
        transOut2_3_7 = 0
        transOut1_3_8 = 0
        transOut2_3_8 = 0
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                if i == k:
                    transOut1_1_7 += x_1_7[i,j,1]
                    transOut2_1_7 += x_1_7[i,j,2]
                    transOut1_1_8 += x_1_8[i,j,1]
                    transOut2_1_8 += x_1_8[i,j,2]
                    transOut1_2_7 += x_2_7[i,j,1]
                    transOut2_2_7 += x_2_7[i,j,2]
                    transOut1_2_8 += x_2_8[i,j,1]
                    transOut2_2_8 += x_2_8[i,j,2]
                    transOut1_3_7 += x_3_7[i,j,1]
                    transOut2_3_7 += x_3_7[i,j,2]
                    transOut1_3_8 += x_3_8[i,j,1]
                    transOut2_3_8 += x_3_8[i,j,2]
                    transOut1 += (x_1_7[i,j,1]+x_1_8[i,j,1]+x_2_7[i,j,1]+x_2_8[i,j,1]+x_3_7[i,j,1]+x_3_8[i,j,1])
                    transOut2 += (x_1_7[i,j,2]+x_1_8[i,j,2]+x_2_7[i,j,2]+x_2_8[i,j,2]+x_3_7[i,j,2]+x_3_8[i,j,2])
                    passengerTotalBS += (x_1_7[i,j,1]+x_1_8[i,j,1]+x_2_7[i,j,1]+x_2_8[i,j,1]+x_3_7[i,j,1]+x_3_8[i,j,1]+x_1_7[i,j,2]+x_1_8[i,j,2]+x_2_7[i,j,2]+x_2_8[i,j,2]+x_3_7[i,j,2]+x_3_8[i,j,2])
        for j in range(N*K):
            for i in range(cargo_BH[j]):
                if i == k:
                    transOut1_1_7 += y_1_7[i,j,1]
                    transOut2_1_7 += y_1_7[i,j,2]
                    transOut1_1_8 += y_1_8[i,j,1]
                    transOut2_1_8 += y_1_8[i,j,2]
                    transOut1_2_7 += y_2_7[i,j,1]
                    transOut2_2_7 += y_2_7[i,j,2]
                    transOut1_2_8 += y_2_8[i,j,1]
                    transOut2_2_8 += y_2_8[i,j,2]
                    transOut1_3_7 += y_3_7[i,j,1]
                    transOut2_3_7 += y_3_7[i,j,2]
                    transOut1_3_8 += y_3_8[i,j,1]
                    transOut2_3_8 += y_3_8[i,j,2]
                    transOut1 += (y_1_7[i,j,1]+y_1_8[i,j,1]+y_2_7[i,j,1]+y_2_8[i,j,1]+y_3_7[i,j,1]+y_3_8[i,j,1])
                    transOut2 += (y_1_7[i,j,2]+y_1_8[i,j,2]+y_2_7[i,j,2]+y_2_8[i,j,2]+y_3_7[i,j,2]+y_3_8[i,j,2])
                    cargoTotalBS += (y_1_7[i,j,1]+y_1_8[i,j,1]+y_2_7[i,j,1]+y_2_8[i,j,1]+y_3_7[i,j,1]+y_3_8[i,j,1]+y_1_7[i,j,2]+y_1_8[i,j,2]+y_2_7[i,j,2]+y_2_8[i,j,2]+y_3_7[i,j,2]+y_3_8[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_1_7 <= TimeSensitive_Req_1_7[k])
        m.addConstr(transOut2_1_7 <= Economy_Req_1_7[k])
        m.addConstr(transOut1_1_8 <= TimeSensitive_Req_1_8[k])
        m.addConstr(transOut2_1_8 <= Economy_Req_1_8[k])
        m.addConstr(transOut1_2_7 <= TimeSensitive_Req_2_7[k])
        m.addConstr(transOut2_2_7 <= Economy_Req_2_7[k])
        m.addConstr(transOut1_2_8 <= TimeSensitive_Req_2_8[k])
        m.addConstr(transOut2_2_8 <= Economy_Req_2_8[k])
        m.addConstr(transOut1_3_7 <= TimeSensitive_Req_3_7[k])
        m.addConstr(transOut2_3_7 <= Economy_Req_3_7[k])
        m.addConstr(transOut1_3_8 <= TimeSensitive_Req_3_8[k])
        m.addConstr(transOut2_3_8 <= Economy_Req_3_8[k])
        trash = c3_1 * (TimeSensitive_Req_BS[k]-transOut1) + c3_2 * (Economy_Req_BS[k]-transOut2)
        C6 += trash
    for k in range(last_HB):
        transOut1 = 0
        transOut2 = 0
        transOut1_4_1 = 0
        transOut2_4_1 = 0
        transOut1_4_2 = 0
        transOut2_4_2 = 0
        transOut1_4_3 = 0
        transOut2_4_3 = 0
        transOut1_5_1 = 0
        transOut2_5_1 = 0
        transOut1_5_2 = 0
        transOut2_5_2 = 0
        transOut1_5_3 = 0
        transOut2_5_3 = 0
        transOut1_6_1 = 0
        transOut2_6_1 = 0
        transOut1_6_2 = 0
        transOut2_6_2 = 0
        transOut1_6_3 = 0
        transOut2_6_3 = 0
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                if i == k:
                    transOut1_4_1 += x_4_1[i,j,1]
                    transOut2_4_1 += x_4_1[i,j,2]
                    transOut1_4_2 += x_4_2[i,j,1]
                    transOut2_4_2 += x_4_2[i,j,2]
                    transOut1_4_3 += x_4_3[i,j,1]
                    transOut2_4_3 += x_4_3[i,j,2]
                    transOut1_5_1 += x_5_1[i,j,1]
                    transOut2_5_1 += x_5_1[i,j,2]
                    transOut1_5_2 += x_5_2[i,j,1]
                    transOut2_5_2 += x_5_2[i,j,2]
                    transOut1_5_3 += x_5_3[i,j,1]
                    transOut2_5_3 += x_5_3[i,j,2]
                    transOut1_6_1 += x_6_1[i,j,1]
                    transOut2_6_1 += x_6_1[i,j,2]
                    transOut1_6_2 += x_6_2[i,j,1]
                    transOut2_6_2 += x_6_2[i,j,2]
                    transOut1_6_3 += x_6_3[i,j,1]
                    transOut2_6_3 += x_6_3[i,j,2]
                    transOut1 += x_4_1[i,j,1]+x_4_2[i,j,1]+x_4_3[i,j,1]+x_5_1[i,j,1]+x_5_2[i,j,1]+x_5_3[i,j,1]+x_6_1[i,j,1]+x_6_2[i,j,1]+x_6_3[i,j,1]
                    transOut2 += x_4_1[i,j,2]+x_4_2[i,j,2]+x_4_3[i,j,2]+x_5_1[i,j,2]+x_5_2[i,j,2]+x_5_3[i,j,2]+x_6_1[i,j,2]+x_6_2[i,j,2]+x_6_3[i,j,2]
                    passengerTotalHB += (x_4_1[i,j,1]+x_4_2[i,j,1]+x_4_3[i,j,1]+x_5_1[i,j,1]+x_5_2[i,j,1]+x_5_3[i,j,1]+x_6_1[i,j,1]+x_6_2[i,j,1]+x_6_3[i,j,1]+x_4_1[i,j,2]+x_4_2[i,j,2]+x_4_3[i,j,2]+x_5_1[i,j,2]+x_5_2[i,j,2]+x_5_3[i,j,2]+x_6_1[i,j,2]+x_6_2[i,j,2]+x_6_3[i,j,2])
        for j in range(N*K):
            for i in range(cargo_HS[j]):
                if i == k:
                    transOut1_4_1 += y_4_1[i,j,1]
                    transOut2_4_1 += y_4_1[i,j,2]
                    transOut1_4_2 += y_4_2[i,j,1]
                    transOut2_4_2 += y_4_2[i,j,2]
                    transOut1_4_3 += y_4_3[i,j,1]
                    transOut2_4_3 += y_4_3[i,j,2]
                    transOut1_5_1 += y_5_1[i,j,1]
                    transOut2_5_1 += y_5_1[i,j,2]
                    transOut1_5_2 += y_5_2[i,j,1]
                    transOut2_5_2 += y_5_2[i,j,2]
                    transOut1_5_3 += y_5_3[i,j,1]
                    transOut2_5_3 += y_5_3[i,j,2]
                    transOut1_6_1 += y_6_1[i,j,1]
                    transOut2_6_1 += y_6_1[i,j,2]
                    transOut1_6_2 += y_6_2[i,j,1]
                    transOut2_6_2 += y_6_2[i,j,2]
                    transOut1_6_3 += y_6_3[i,j,1]
                    transOut2_6_3 += y_6_3[i,j,2]
                    transOut1 += y_4_1[i,j,1]+y_4_2[i,j,1]+y_4_3[i,j,1]+y_5_1[i,j,1]+y_5_2[i,j,1]+y_5_3[i,j,1]+y_6_1[i,j,1]+y_6_2[i,j,1]+y_6_3[i,j,1]
                    transOut2 += y_4_1[i,j,2]+y_4_2[i,j,2]+y_4_3[i,j,2]+y_5_1[i,j,2]+y_5_2[i,j,2]+y_5_3[i,j,2]+y_6_1[i,j,2]+y_6_2[i,j,2]+y_6_3[i,j,2]
                    cargoTotalHB += (y_4_1[i,j,1]+y_4_2[i,j,1]+y_4_3[i,j,1]+y_5_1[i,j,1]+y_5_2[i,j,1]+y_5_3[i,j,1]+y_6_1[i,j,1]+y_6_2[i,j,1]+y_6_3[i,j,1]+y_4_1[i,j,2]+y_4_2[i,j,2]+y_4_3[i,j,2]+y_5_1[i,j,2]+y_5_2[i,j,2]+y_5_3[i,j,2]+y_6_1[i,j,2]+y_6_2[i,j,2]+y_6_3[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_4_1 <= TimeSensitive_Req_4_1[k])
        m.addConstr(transOut2_4_1 <= Economy_Req_4_1[k])
        m.addConstr(transOut1_4_2 <= TimeSensitive_Req_4_2[k])
        m.addConstr(transOut2_4_2 <= Economy_Req_4_2[k])
        m.addConstr(transOut1_4_3 <= TimeSensitive_Req_4_3[k])
        m.addConstr(transOut2_4_3 <= Economy_Req_4_3[k])
        m.addConstr(transOut1_5_1 <= TimeSensitive_Req_5_1[k])
        m.addConstr(transOut2_5_1 <= Economy_Req_5_1[k])
        m.addConstr(transOut1_5_2 <= TimeSensitive_Req_5_2[k])
        m.addConstr(transOut2_5_2 <= Economy_Req_5_2[k])
        m.addConstr(transOut1_5_3 <= TimeSensitive_Req_5_3[k])
        m.addConstr(transOut2_5_3 <= Economy_Req_5_3[k])
        m.addConstr(transOut1_6_1 <= TimeSensitive_Req_6_1[k])
        m.addConstr(transOut2_6_1 <= Economy_Req_6_1[k])
        m.addConstr(transOut1_6_2 <= TimeSensitive_Req_6_2[k])
        m.addConstr(transOut2_6_2 <= Economy_Req_6_2[k])
        m.addConstr(transOut1_6_3 <= TimeSensitive_Req_6_3[k])
        m.addConstr(transOut2_6_3 <= Economy_Req_6_3[k])
        trash = c3_1 * (TimeSensitive_Req_HB[k]-transOut1) + c3_2 * (Economy_Req_HB[k]-transOut2)
        C6 += trash
    for k in range(last_HS):
        transOut1 = 0
        transOut2 = 0
        transOut1_4_7 = 0
        transOut2_4_7 = 0
        transOut1_4_8 = 0
        transOut2_4_8 = 0
        transOut1_5_7 = 0
        transOut2_5_7 = 0
        transOut1_5_8 = 0
        transOut2_5_8 = 0
        transOut1_6_7 = 0
        transOut2_6_7 = 0
        transOut1_6_8 = 0
        transOut2_6_8 = 0
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                if i == k:
                    transOut1_4_7 += x_4_7[i,j,1]
                    transOut2_4_7 += x_4_7[i,j,2]
                    transOut1_4_8 += x_4_8[i,j,1]
                    transOut2_4_8 += x_4_8[i,j,2]
                    transOut1_5_7 += x_5_7[i,j,1]
                    transOut2_5_7 += x_5_7[i,j,2]
                    transOut1_5_8 += x_5_8[i,j,1]
                    transOut2_5_8 += x_5_8[i,j,2]
                    transOut1_6_7 += x_6_7[i,j,1]
                    transOut2_6_7 += x_6_7[i,j,2]
                    transOut1_6_8 += x_6_8[i,j,1]
                    transOut2_6_8 += x_6_8[i,j,2]
                    transOut1 += x_4_7[i,j,1]+x_4_8[i,j,1]+x_5_7[i,j,1]+x_5_8[i,j,1]+x_6_7[i,j,1]+x_6_8[i,j,1]
                    transOut2 += x_4_7[i,j,2]+x_4_8[i,j,2]+x_5_7[i,j,2]+x_5_8[i,j,2]+x_6_7[i,j,2]+x_6_8[i,j,2]
                    passengerTotalHS += (x_4_7[i,j,1]+x_4_8[i,j,1]+x_5_7[i,j,1]+x_5_8[i,j,1]+x_6_7[i,j,1]+x_6_8[i,j,1]+x_4_7[i,j,2]+x_4_8[i,j,2]+x_5_7[i,j,2]+x_5_8[i,j,2]+x_6_7[i,j,2]+x_6_8[i,j,2])
        for j in range(N*K):
            for i in range(cargo_HS[j]):
                if i == k:
                    transOut1_4_7 += y_4_7[i,j,1]
                    transOut2_4_7 += y_4_7[i,j,2]
                    transOut1_4_8 += y_4_8[i,j,1]
                    transOut2_4_8 += y_4_8[i,j,2]
                    transOut1_5_7 += y_5_7[i,j,1]
                    transOut2_5_7 += y_5_7[i,j,2]
                    transOut1_5_8 += y_5_8[i,j,1]
                    transOut2_5_8 += y_5_8[i,j,2]
                    transOut1_6_7 += y_6_7[i,j,1]
                    transOut2_6_7 += y_6_7[i,j,2]
                    transOut1_6_8 += y_6_8[i,j,1]
                    transOut2_6_8 += y_6_8[i,j,2]
                    transOut1 += y_4_7[i,j,1]+y_4_8[i,j,1]+y_5_7[i,j,1]+y_5_8[i,j,1]+y_6_7[i,j,1]+y_6_8[i,j,1]
                    transOut2 += y_4_7[i,j,2]+y_4_8[i,j,2]+y_5_7[i,j,2]+y_5_8[i,j,2]+y_6_7[i,j,2]+y_6_8[i,j,2]
                    cargoTotalHS += (y_4_7[i,j,1]+y_4_8[i,j,1]+y_5_7[i,j,1]+y_5_8[i,j,1]+y_6_7[i,j,1]+y_6_8[i,j,1]+y_4_7[i,j,2]+y_4_8[i,j,2]+y_5_7[i,j,2]+y_5_8[i,j,2]+y_6_7[i,j,2]+y_6_8[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_4_7 <= TimeSensitive_Req_4_7[k])
        m.addConstr(transOut2_4_7 <= Economy_Req_4_7[k])
        m.addConstr(transOut1_4_8 <= TimeSensitive_Req_4_8[k])
        m.addConstr(transOut2_4_8 <= Economy_Req_4_8[k])
        m.addConstr(transOut1_5_7 <= TimeSensitive_Req_5_7[k])
        m.addConstr(transOut2_5_7 <= Economy_Req_5_7[k])
        m.addConstr(transOut1_5_8 <= TimeSensitive_Req_5_8[k])
        m.addConstr(transOut2_5_8 <= Economy_Req_5_8[k])
        m.addConstr(transOut1_6_7 <= TimeSensitive_Req_6_7[k])
        m.addConstr(transOut2_6_7 <= Economy_Req_6_7[k])
        m.addConstr(transOut1_6_8 <= TimeSensitive_Req_6_8[k])
        m.addConstr(transOut2_6_8 <= Economy_Req_6_8[k])
        trash = c3_1 * (TimeSensitive_Req_HS[k]-transOut1) + c3_2 * (Economy_Req_HS[k]-transOut2)
        C6 += trash
    for k in range(last_SB):
        transOut1 = 0
        transOut2 = 0
        transOut1_7_1 = 0
        transOut2_7_1 = 0
        transOut1_7_2 = 0
        transOut2_7_2 = 0
        transOut1_7_3 = 0
        transOut2_7_3 = 0
        transOut1_8_1 = 0
        transOut2_8_1 = 0
        transOut1_8_2 = 0
        transOut2_8_2 = 0
        transOut1_8_3 = 0
        transOut2_8_3 = 0
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                if i == k:
                    transOut1_7_1 += x_7_1[i,j,1]
                    transOut2_7_1 += x_7_1[i,j,2]
                    transOut1_7_2 += x_7_2[i,j,1]
                    transOut2_7_2 += x_7_2[i,j,2]
                    transOut1_7_3 += x_7_3[i,j,1]
                    transOut2_7_3 += x_7_3[i,j,2]
                    transOut1_8_1 += x_8_1[i,j,1]
                    transOut2_8_1 += x_8_1[i,j,2]
                    transOut1_8_2 += x_8_2[i,j,1]
                    transOut2_8_2 += x_8_2[i,j,2]
                    transOut1_8_3 += x_8_3[i,j,1]
                    transOut2_8_3 += x_8_3[i,j,2]
                    transOut1 += x_7_1[i,j,1]+x_7_2[i,j,1]+x_7_3[i,j,1]+x_8_1[i,j,1]+x_8_2[i,j,1]+x_8_3[i,j,1]
                    transOut2 += x_7_1[i,j,2]+x_7_2[i,j,2]+x_7_3[i,j,2]+x_8_1[i,j,2]+x_8_2[i,j,2]+x_8_3[i,j,2]
                    passengerTotalSB += (x_7_1[i,j,1]+x_7_2[i,j,1]+x_7_3[i,j,1]+x_8_1[i,j,1]+x_8_2[i,j,1]+x_8_3[i,j,1]+x_7_1[i,j,2]+x_7_2[i,j,2]+x_7_3[i,j,2]+x_8_1[i,j,2]+x_8_2[i,j,2]+x_8_3[i,j,2])
        for j in range(N*K):
            for i in range(cargo_SB[j]):
                if i == k:
                    transOut1_7_1 += y_7_1[i,j,1]
                    transOut2_7_1 += y_7_1[i,j,2]
                    transOut1_7_2 += y_7_2[i,j,1]
                    transOut2_7_2 += y_7_2[i,j,2]
                    transOut1_7_3 += y_7_3[i,j,1]
                    transOut2_7_3 += y_7_3[i,j,2]
                    transOut1_8_1 += y_8_1[i,j,1]
                    transOut2_8_1 += y_8_1[i,j,2]
                    transOut1_8_2 += y_8_2[i,j,1]
                    transOut2_8_2 += y_8_2[i,j,2]
                    transOut1_8_3 += y_8_3[i,j,1]
                    transOut2_8_3 += y_8_3[i,j,2]
                    transOut1 += y_7_1[i,j,1]+y_7_2[i,j,1]+y_7_3[i,j,1]+y_8_1[i,j,1]+y_8_2[i,j,1]+y_8_3[i,j,1]
                    transOut2 += y_7_1[i,j,2]+y_7_2[i,j,2]+y_7_3[i,j,2]+y_8_1[i,j,2]+y_8_2[i,j,2]+y_8_3[i,j,2]
                    cargoTotalSB += (y_7_1[i,j,1]+y_7_2[i,j,1]+y_7_3[i,j,1]+y_8_1[i,j,1]+y_8_2[i,j,1]+y_8_3[i,j,1]+y_7_1[i,j,2]+y_7_2[i,j,2]+y_7_3[i,j,2]+y_8_1[i,j,2]+y_8_2[i,j,2]+y_8_3[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_7_1 <= TimeSensitive_Req_7_1[k])
        m.addConstr(transOut2_7_1 <= Economy_Req_7_1[k])
        m.addConstr(transOut1_7_2 <= TimeSensitive_Req_7_2[k])
        m.addConstr(transOut2_7_2 <= Economy_Req_7_2[k])
        m.addConstr(transOut1_7_3 <= TimeSensitive_Req_7_3[k])
        m.addConstr(transOut2_7_3 <= Economy_Req_7_3[k])
        m.addConstr(transOut1_8_1 <= TimeSensitive_Req_8_1[k])
        m.addConstr(transOut2_8_1 <= Economy_Req_8_1[k])
        m.addConstr(transOut1_8_2 <= TimeSensitive_Req_8_2[k])
        m.addConstr(transOut2_8_2 <= Economy_Req_8_2[k])
        m.addConstr(transOut1_8_3 <= TimeSensitive_Req_8_3[k])
        m.addConstr(transOut2_8_3 <= Economy_Req_8_3[k])
        trash = c3_1 * (TimeSensitive_Req_SB[k]-transOut1) + c3_2 * (Economy_Req_SB[k]-transOut2)
        C6 += trash
    for k in range(last_SH):
        transOut1 = 0
        transOut2 = 0
        transOut1_7_4 = 0
        transOut2_7_4 = 0
        transOut1_7_5 = 0
        transOut2_7_5 = 0
        transOut1_7_6 = 0
        transOut2_7_6 = 0
        transOut1_8_4 = 0
        transOut2_8_4 = 0
        transOut1_8_5 = 0
        transOut2_8_5 = 0
        transOut1_8_6 = 0
        transOut2_8_6 = 0
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                if i == k:
                    transOut1_7_4 += x_7_4[i,j,1]
                    transOut2_7_4 += x_7_4[i,j,2]
                    transOut1_7_5 += x_7_5[i,j,1]
                    transOut2_7_5 += x_7_5[i,j,2]
                    transOut1_7_6 += x_7_6[i,j,1]
                    transOut2_7_6 += x_7_6[i,j,2]
                    transOut1_8_4 += x_8_4[i,j,1]
                    transOut2_8_4 += x_8_4[i,j,2]
                    transOut1_8_5 += x_8_5[i,j,1]
                    transOut2_8_5 += x_8_5[i,j,2]
                    transOut1_8_6 += x_8_6[i,j,1]
                    transOut2_8_6 += x_8_6[i,j,2]
                    transOut1 += x_7_4[i,j,1]+x_7_5[i,j,1]+x_7_6[i,j,1]+x_8_4[i,j,1]+x_8_5[i,j,1]+x_8_6[i,j,1]
                    transOut2 += x_7_4[i,j,2]+x_7_5[i,j,2]+x_7_6[i,j,2]+x_8_4[i,j,2]+x_8_5[i,j,2]+x_8_6[i,j,2]
                    passengerTotalSH += (x_7_4[i,j,1]+x_7_5[i,j,1]+x_7_6[i,j,1]+x_8_4[i,j,1]+x_8_5[i,j,1]+x_8_6[i,j,1]+x_7_4[i,j,2]+x_7_5[i,j,2]+x_7_6[i,j,2]+x_8_4[i,j,2]+x_8_5[i,j,2]+x_8_6[i,j,2])
        for j in range(N*K):
            for i in range(cargo_SB[j]):
                if i == k:
                    transOut1_7_4 += y_7_4[i,j,1]
                    transOut2_7_4 += y_7_4[i,j,2]
                    transOut1_7_5 += y_7_5[i,j,1]
                    transOut2_7_5 += y_7_5[i,j,2]
                    transOut1_7_6 += y_7_6[i,j,1]
                    transOut2_7_6 += y_7_6[i,j,2]
                    transOut1_8_4 += y_8_4[i,j,1]
                    transOut2_8_4 += y_8_4[i,j,2]
                    transOut1_8_5 += y_8_5[i,j,1]
                    transOut2_8_5 += y_8_5[i,j,2]
                    transOut1_8_6 += y_8_6[i,j,1]
                    transOut2_8_6 += y_8_6[i,j,2]
                    transOut1 += y_7_4[i,j,1]+y_7_5[i,j,1]+y_7_6[i,j,1]+y_8_4[i,j,1]+y_8_5[i,j,1]+y_8_6[i,j,1]
                    transOut2 += y_7_4[i,j,2]+y_7_5[i,j,2]+y_7_6[i,j,2]+y_8_4[i,j,2]+y_8_5[i,j,2]+y_8_6[i,j,2]
                    cargoTotalSH += (y_7_4[i,j,1]+y_7_5[i,j,1]+y_7_6[i,j,1]+y_8_4[i,j,1]+y_8_5[i,j,1]+y_8_6[i,j,1]+y_7_4[i,j,2]+y_7_5[i,j,2]+y_7_6[i,j,2]+y_8_4[i,j,2]+y_8_5[i,j,2]+y_8_6[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_7_4 <= TimeSensitive_Req_7_4[k])
        m.addConstr(transOut2_7_4 <= Economy_Req_7_4[k])
        m.addConstr(transOut1_7_5 <= TimeSensitive_Req_7_5[k])
        m.addConstr(transOut2_7_5 <= Economy_Req_7_5[k])
        m.addConstr(transOut1_7_6 <= TimeSensitive_Req_7_6[k])
        m.addConstr(transOut2_7_6 <= Economy_Req_7_6[k])
        m.addConstr(transOut1_8_4 <= TimeSensitive_Req_8_4[k])
        m.addConstr(transOut2_8_4 <= Economy_Req_8_4[k])
        m.addConstr(transOut1_8_5 <= TimeSensitive_Req_8_5[k])
        m.addConstr(transOut2_8_5 <= Economy_Req_8_5[k])
        m.addConstr(transOut1_8_6 <= TimeSensitive_Req_8_6[k])
        m.addConstr(transOut2_8_6 <= Economy_Req_8_6[k])
        trash = c3_1 * (TimeSensitive_Req_SH[k]-transOut1) + c3_2 * (Economy_Req_SH[k]-transOut2)
        C6 += trash
    
    desertTotalBH = sum(forecast_1_4_K)+sum(forecast_1_5_K)+sum(forecast_1_6_K)+sum(forecast_2_4_K)+sum(forecast_2_5_K)+sum(forecast_2_6_K)+sum(forecast_3_4_K)+sum(forecast_3_5_K)+sum(forecast_3_6_K)-passengerTotalBH-cargoTotalBH
    desertTotalBS = sum(forecast_1_7_K)+sum(forecast_1_8_K)+sum(forecast_2_7_K)+sum(forecast_2_8_K)+sum(forecast_3_7_K)+sum(forecast_3_8_K)-passengerTotalBS-cargoTotalBS
    desertTotalHB = sum(forecast_4_1_K)+sum(forecast_4_2_K)+sum(forecast_4_3_K)+sum(forecast_5_1_K)+sum(forecast_5_2_K)+sum(forecast_5_3_K)+sum(forecast_6_1_K)+sum(forecast_6_2_K)+sum(forecast_6_3_K)-passengerTotalHB-cargoTotalHB
    desertTotalHS = sum(forecast_4_7_K)+sum(forecast_4_8_K)+sum(forecast_5_7_K)+sum(forecast_5_8_K)+sum(forecast_6_7_K)+sum(forecast_6_8_K)-passengerTotalHS-cargoTotalHS
    desertTotalSB = sum(forecast_7_1_K)+sum(forecast_7_2_K)+sum(forecast_7_3_K)+sum(forecast_8_1_K)+sum(forecast_8_2_K)+sum(forecast_8_3_K)-passengerTotalSB-cargoTotalSB
    desertTotalSH = sum(forecast_7_4_K)+sum(forecast_7_5_K)+sum(forecast_7_6_K)+sum(forecast_8_4_K)+sum(forecast_8_5_K)+sum(forecast_8_6_K)-passengerTotalSH-cargoTotalSH
                      
    # 本周期内无法运完的货物的仓储成本和预期逾期成本
    left_1_4 = 0
    left_1_5 = 0
    left_1_6 = 0
    left_1_7 = 0
    left_1_8 = 0
    left_2_4 = 0
    left_2_5 = 0
    left_2_6 = 0
    left_2_7 = 0
    left_2_8 = 0
    left_3_4 = 0
    left_3_5 = 0
    left_3_6 = 0
    left_3_7 = 0
    left_3_8 = 0
    left_4_1 = 0
    left_4_2 = 0
    left_4_3 = 0
    left_4_7 = 0
    left_4_8 = 0
    left_5_1 = 0
    left_5_2 = 0
    left_5_3 = 0
    left_5_7 = 0
    left_5_8 = 0
    left_6_1 = 0
    left_6_2 = 0
    left_6_3 = 0
    left_6_7 = 0
    left_6_8 = 0
    left_7_1 = 0
    left_7_2 = 0
    left_7_3 = 0
    left_7_4 = 0
    left_7_5 = 0
    left_7_6 = 0
    left_8_1 = 0
    left_8_2 = 0
    left_8_3 = 0
    left_8_4 = 0
    left_8_5 = 0
    left_8_6 = 0                 
    for i in range(last_BH, 24 * K):
        left_1_4 += forecast_1_4_K[i]
        left_1_5 += forecast_1_5_K[i]
        left_1_6 += forecast_1_6_K[i]
        left_2_4 += forecast_2_4_K[i]
        left_2_5 += forecast_2_5_K[i]
        left_2_6 += forecast_2_6_K[i]
        left_3_4 += forecast_3_4_K[i]
        left_3_5 += forecast_3_5_K[i]
        left_3_6 += forecast_3_6_K[i]      
        C1 += c1 * (forecast_1_4_K[i]+forecast_1_5_K[i]+forecast_1_6_K[i]+forecast_2_4_K[i]+forecast_2_5_K[i]+forecast_2_6_K[i]+forecast_3_4_K[i]+forecast_3_5_K[i]+forecast_3_6_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_BH[i] + c2_2 * Economy_Req_BH[i]) * (24 * K - i + first_BH - 1) * (1 - (i + 1) / (24 * K))
    for i in range(last_BS, 24 * K):
        left_1_7 += forecast_1_7_K[i]
        left_1_8 += forecast_1_8_K[i]
        left_2_7 += forecast_2_7_K[i]
        left_2_8 += forecast_2_8_K[i]
        left_3_7 += forecast_3_7_K[i]
        left_3_8 += forecast_3_8_K[i]
        C1 += c1 * (forecast_1_7_K[i]+forecast_1_8_K[i]+forecast_2_7_K[i]+forecast_2_8_K[i]+forecast_3_7_K[i]+forecast_3_8_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_BS[i] + c2_2 * Economy_Req_BS[i]) * (24 * K - i + first_BS - 1) * (1 - (i + 1) / (24 * K))  
    for i in range(last_HB, 24 * K):
        left_4_1 += forecast_4_1_K[i]
        left_4_2 += forecast_4_2_K[i]
        left_4_3 += forecast_4_3_K[i]
        left_5_1 += forecast_5_1_K[i]
        left_5_2 += forecast_5_2_K[i]
        left_5_3 += forecast_5_3_K[i]
        left_6_1 += forecast_6_1_K[i]
        left_6_2 += forecast_6_2_K[i]
        left_6_3 += forecast_6_3_K[i]
        C1 += c1 * (forecast_4_1_K[i]+forecast_4_2_K[i]+forecast_4_3_K[i]+forecast_5_1_K[i]+forecast_5_2_K[i]+forecast_5_3_K[i]+forecast_6_1_K[i]+forecast_6_2_K[i]+forecast_6_3_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_HB[i] + c2_2 * Economy_Req_HB[i]) * (24 * K - i + first_HB - 1) * (1 - (i + 1) / (24 * K))
    for i in range(last_HS, 24 * K):
        left_4_7 += forecast_4_7_K[i]
        left_4_8 += forecast_4_8_K[i]
        left_5_7 += forecast_5_7_K[i]
        left_5_8 += forecast_5_8_K[i]
        left_6_7 += forecast_6_7_K[i]
        left_6_8 += forecast_6_8_K[i]  
        C1 += c1 * (forecast_4_7_K[i]+forecast_4_8_K[i]+forecast_5_7_K[i]+forecast_5_8_K[i]+forecast_6_7_K[i]+forecast_6_8_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_HS[i] + c2_2 * Economy_Req_HS[i]) * (24 * K - i + first_HS - 1) * (1 - (i + 1) / (24 * K))
    for i in range(last_SB, 24 * K):
        left_7_1 += forecast_7_1_K[i]
        left_7_2 += forecast_7_2_K[i]
        left_7_3 += forecast_7_3_K[i]
        left_8_1 += forecast_8_1_K[i]
        left_8_2 += forecast_8_2_K[i]
        left_8_3 += forecast_8_3_K[i]   
        C1 += c1 * (forecast_7_1_K[i]+forecast_7_2_K[i]+forecast_7_3_K[i]+forecast_8_1_K[i]+forecast_8_2_K[i]+forecast_8_3_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_SB[i] + c2_2 * Economy_Req_SB[i]) * (24 * K - i + first_SB - 1) * (1 - (i + 1) / (24 * K))
    for i in range(last_SH, 24 * K):
        left_7_4 += forecast_7_4_K[i]
        left_7_5 += forecast_7_5_K[i]
        left_7_6 += forecast_7_6_K[i]
        left_8_4 += forecast_8_4_K[i]
        left_8_5 += forecast_8_5_K[i]
        left_8_6 += forecast_8_6_K[i]
        C1 += c1 * (forecast_7_4_K[i]+forecast_7_5_K[i]+forecast_7_6_K[i]+forecast_8_4_K[i]+forecast_8_5_K[i]+forecast_8_6_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_SH[i] + c2_2 * Economy_Req_SH[i]) * (24 * K - i + first_SH - 1) * (1 - (i + 1) / (24 * K))       
                
    left_to_leave_1_4.append(left_1_4)
    left_to_leave_1_5.append(left_1_5)
    left_to_leave_1_6.append(left_1_6)
    left_to_leave_1_7.append(left_1_7)
    left_to_leave_1_8.append(left_1_8)
    left_to_leave_2_4.append(left_2_4)
    left_to_leave_2_5.append(left_2_5)
    left_to_leave_2_6.append(left_2_6)
    left_to_leave_2_7.append(left_2_7)
    left_to_leave_2_8.append(left_2_8)
    left_to_leave_3_4.append(left_3_4)
    left_to_leave_3_5.append(left_3_5)
    left_to_leave_3_6.append(left_3_6)
    left_to_leave_3_7.append(left_3_7)
    left_to_leave_3_8.append(left_3_8)
    left_to_leave_4_1.append(left_4_1)
    left_to_leave_4_2.append(left_4_2)
    left_to_leave_4_3.append(left_4_3)
    left_to_leave_4_7.append(left_4_7)
    left_to_leave_4_8.append(left_4_8)
    left_to_leave_5_1.append(left_5_1)
    left_to_leave_5_2.append(left_5_2)
    left_to_leave_5_3.append(left_5_3)
    left_to_leave_5_7.append(left_5_7)
    left_to_leave_5_8.append(left_5_8)
    left_to_leave_6_1.append(left_6_1)
    left_to_leave_6_2.append(left_6_2)
    left_to_leave_6_3.append(left_6_3)
    left_to_leave_6_7.append(left_6_7)
    left_to_leave_6_8.append(left_6_8)
    left_to_leave_7_1.append(left_7_1)
    left_to_leave_7_2.append(left_7_2)
    left_to_leave_7_3.append(left_7_3)
    left_to_leave_7_4.append(left_7_4)
    left_to_leave_7_5.append(left_7_5)
    left_to_leave_7_6.append(left_7_6)
    left_to_leave_8_1.append(left_8_1)
    left_to_leave_8_2.append(left_8_2)
    left_to_leave_8_3.append(left_8_3)
    left_to_leave_8_4.append(left_8_4)
    left_to_leave_8_5.append(left_8_5)
    left_to_leave_8_6.append(left_8_6)
                      
    # 计算每个航段上客机和货机运输的量
    passengerTrans_BH = 0
    passengerTrans_BS = 0
    passengerTrans_HB = 0
    passengerTrans_HS = 0
    passengerTrans_SB = 0
    passengerTrans_SH = 0
    cargoTrans = 0
    cargoTrans_BH = 0
    cargoTrans_HS = 0
    cargoTrans_SB = 0
    for w in range(1,3):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                passengerTrans_BH += (x_1_4[i,j,w]+x_1_5[i,j,w]+x_1_6[i,j,w]+x_2_4[i,j,w]+x_2_5[i,j,w]+x_2_6[i,j,w]+x_3_4[i,j,w]+x_3_5[i,j,w]+x_3_6[i,j,w])
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                passengerTrans_BS += (x_1_7[i,j,w]+x_1_8[i,j,w]+x_2_7[i,j,w]+x_2_8[i,j,w]+x_3_7[i,j,w]+x_3_8[i,j,w])
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                passengerTrans_HB += (x_4_1[i,j,w]+x_4_2[i,j,w]+x_4_3[i,j,w]+x_5_1[i,j,w]+x_5_2[i,j,w]+x_5_3[i,j,w]+x_6_1[i,j,w]+x_6_2[i,j,w]+x_6_3[i,j,w])
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                passengerTrans_HS += (x_4_7[i,j,w]+x_4_8[i,j,w]+x_5_7[i,j,w]+x_5_8[i,j,w]+x_6_7[i,j,w]+x_6_8[i,j,w])
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                passengerTrans_SB += (x_7_1[i,j,w]+x_7_2[i,j,w]+x_7_3[i,j,w]+x_8_1[i,j,w]+x_8_2[i,j,w]+x_8_3[i,j,w])
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                passengerTrans_SH += (x_7_4[i,j,w]+x_7_5[i,j,w]+x_7_6[i,j,w]+x_8_4[i,j,w]+x_8_5[i,j,w]+x_8_6[i,j,w])
        for j in range(N*K):
            for i in range(cargo_BH[j]):
                cargoTrans += (y_1_4[i,j,w]+y_1_5[i,j,w]+y_1_6[i,j,w]+y_2_4[i,j,w]+y_2_5[i,j,w]+y_2_6[i,j,w]+y_3_4[i,j,w]+y_3_5[i,j,w]+y_3_6[i,j,w]+y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w])
                cargoTrans_BH += (y_1_4[i,j,w]+y_1_5[i,j,w]+y_1_6[i,j,w]+y_2_4[i,j,w]+y_2_5[i,j,w]+y_2_6[i,j,w]+y_3_4[i,j,w]+y_3_5[i,j,w]+y_3_6[i,j,w]+y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w])
                cargoTrans_HS += (y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w])
            for i in range(cargo_HS[j]):
                cargoTrans += (y_4_7[i,j,w]+y_4_8[i,j,w]+y_5_7[i,j,w]+y_5_8[i,j,w]+y_6_7[i,j,w]+y_6_8[i,j,w]+y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w])
                cargoTrans_HS += (y_4_7[i,j,w]+y_4_8[i,j,w]+y_5_7[i,j,w]+y_5_8[i,j,w]+y_6_7[i,j,w]+y_6_8[i,j,w]+y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w])
                cargoTrans_SB += (y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w])
            for i in range(cargo_SB[j]):
                cargoTrans += (y_7_1[i,j,w]+y_7_2[i,j,w]+y_7_3[i,j,w]+y_8_1[i,j,w]+y_8_2[i,j,w]+y_8_3[i,j,w]+y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w])
                cargoTrans_SB += (y_7_1[i,j,w]+y_7_2[i,j,w]+y_7_3[i,j,w]+y_8_1[i,j,w]+y_8_2[i,j,w]+y_8_3[i,j,w]+y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w])
                cargoTrans_BH += (y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w])
    passengerTrans = passengerTrans_BH+passengerTrans_BS+passengerTrans_HB+passengerTrans_HS+passengerTrans_SB+passengerTrans_SH
    
    # 只有客机运输成本是分段计价的
    zBH = {}
    zBS = {}
    zHB = {}
    zHS = {}
    zSB = {}
    zSH = {}
    A_BH = m.addVars(range(len(FR_BH)), vtype=GRB.BINARY)
    A_BS = m.addVars(range(len(FR_BS)), vtype=GRB.BINARY)
    A_HB = m.addVars(range(len(FR_HB)), vtype=GRB.BINARY)
    A_HS = m.addVars(range(len(FR_HS)), vtype=GRB.BINARY)
    A_SB = m.addVars(range(len(FR_SB)), vtype=GRB.BINARY)
    A_SH = m.addVars(range(len(FR_SH)), vtype=GRB.BINARY)
    
    for r in range(len(FR_BH)):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                zBH[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                zBS[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                zHB[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                zHS[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                zSB[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                zSH[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                
    m.addConstr(gp.quicksum(A_BH[r] for r in range(len(FR_BH))) == 1)
    m.addConstr(gp.quicksum(A_BS[r] for r in range(len(FR_BS))) == 1)
    m.addConstr(gp.quicksum(A_HB[r] for r in range(len(FR_HB))) == 1)
    m.addConstr(gp.quicksum(A_HS[r] for r in range(len(FR_HS))) == 1)
    m.addConstr(gp.quicksum(A_SB[r] for r in range(len(FR_SB))) == 1)
    m.addConstr(gp.quicksum(A_SH[r] for r in range(len(FR_SH))) == 1)
    
    for r in range(len(FR_BH)):
        for j in range(len(passengerTime_BH)):
            m.addConstr(gp.quicksum(x_1_4[i,j,w]+x_1_5[i,j,w]+x_1_6[i,j,w]+x_2_4[i,j,w]+x_2_5[i,j,w]+x_2_6[i,j,w]+x_3_4[i,j,w]+x_3_5[i,j,w]+x_3_6[i,j,w] for w in range(1,3) for i in range(passengerTime_BH[j])) >= lBH[r] * A_BH[r])
        for j in range(len(passengerTime_BS)):
            m.addConstr(gp.quicksum(x_1_7[i,j,w]+x_1_8[i,j,w]+x_2_7[i,j,w]+x_2_8[i,j,w]+x_3_7[i,j,w]+x_3_8[i,j,w] for w in range(1,3) for i in range(passengerTime_BS[j])) >= lBS[r] * A_BS[r])
        for j in range(len(passengerTime_HB)):
            m.addConstr(gp.quicksum(x_4_1[i,j,w]+x_4_2[i,j,w]+x_4_3[i,j,w]+x_5_1[i,j,w]+x_5_2[i,j,w]+x_5_3[i,j,w]+x_6_1[i,j,w]+x_6_2[i,j,w]+x_6_3[i,j,w] for w in range(1,3) for i in range(passengerTime_HB[j])) >= lHB[r] * A_HB[r])
        for j in range(len(passengerTime_HS)):
            m.addConstr(gp.quicksum(x_4_7[i,j,w]+x_4_8[i,j,w]+x_5_7[i,j,w]+x_5_8[i,j,w]+x_6_7[i,j,w]+x_6_8[i,j,w] for w in range(1,3) for i in range(passengerTime_HS[j])) >= lHS[r] * A_HS[r])
        for j in range(len(passengerTime_SB)):
            m.addConstr(gp.quicksum(x_7_1[i,j,w]+x_7_2[i,j,w]+x_7_3[i,j,w]+x_8_1[i,j,w]+x_8_2[i,j,w]+x_8_3[i,j,w] for w in range(1,3) for i in range(passengerTime_SB[j])) >= lSB[r] * A_SB[r])
        for j in range(len(passengerTime_SH)):
            m.addConstr(gp.quicksum(x_7_4[i,j,w]+x_7_5[i,j,w]+x_7_6[i,j,w]+x_8_4[i,j,w]+x_8_5[i,j,w]+x_8_6[i,j,w] for w in range(1,3) for i in range(passengerTime_SH[j])) >= lSH[r] * A_SH[r])
        
    for r in range(len(FR_BH)):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                m.addConstr(zBH[i,j,r] <= A_BH[r] * forecast_BH_K[i])
                m.addConstr(zBH[i,j,r] <= (x_1_4[i,j,1]+x_1_5[i,j,1]+x_1_6[i,j,1]+x_2_4[i,j,1]+x_2_5[i,j,1]+x_2_6[i,j,1]+x_3_4[i,j,1]+x_3_5[i,j,1]+x_3_6[i,j,1]+x_1_4[i,j,2]+x_1_5[i,j,2]+x_1_6[i,j,2]+x_2_4[i,j,2]+x_2_5[i,j,2]+x_2_6[i,j,2]+x_3_4[i,j,2]+x_3_5[i,j,2]+x_3_6[i,j,2]))
                m.addConstr(zBH[i,j,r] >= (x_1_4[i,j,1]+x_1_5[i,j,1]+x_1_6[i,j,1]+x_2_4[i,j,1]+x_2_5[i,j,1]+x_2_6[i,j,1]+x_3_4[i,j,1]+x_3_5[i,j,1]+x_3_6[i,j,1]+x_1_4[i,j,2]+x_1_5[i,j,2]+x_1_6[i,j,2]+x_2_4[i,j,2]+x_2_5[i,j,2]+x_2_6[i,j,2]+x_3_4[i,j,2]+x_3_5[i,j,2]+x_3_6[i,j,2] - forecast_BH_K[i] * (1 - A_BH[r])))
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                m.addConstr(zBS[i,j,r] <= A_BS[r] * forecast_BS_K[i])
                m.addConstr(zBS[i,j,r] <= (x_1_7[i,j,1]+x_1_8[i,j,1]+x_2_7[i,j,1]+x_2_8[i,j,1]+x_3_7[i,j,1]+x_3_8[i,j,1]+x_1_7[i,j,2]+x_1_8[i,j,2]+x_2_7[i,j,2]+x_2_8[i,j,2]+x_3_7[i,j,2]+x_3_8[i,j,2]))
                m.addConstr(zBS[i,j,r] >= (x_1_7[i,j,1]+x_1_8[i,j,1]+x_2_7[i,j,1]+x_2_8[i,j,1]+x_3_7[i,j,1]+x_3_8[i,j,1]+x_1_7[i,j,2]+x_1_8[i,j,2]+x_2_7[i,j,2]+x_2_8[i,j,2]+x_3_7[i,j,2]+x_3_8[i,j,2] - forecast_BS_K[i] * (1 - A_BS[r])))
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                m.addConstr(zHB[i,j,r] <= A_HB[r] * forecast_HB_K[i])
                m.addConstr(zHB[i,j,r] <= (x_4_1[i,j,1]+x_4_2[i,j,1]+x_4_3[i,j,1]+x_5_1[i,j,1]+x_5_2[i,j,1]+x_5_3[i,j,1]+x_6_1[i,j,1]+x_6_2[i,j,1]+x_6_3[i,j,1]+x_4_1[i,j,2]+x_4_2[i,j,2]+x_4_3[i,j,2]+x_5_1[i,j,2]+x_5_2[i,j,2]+x_5_3[i,j,2]+x_6_1[i,j,2]+x_6_2[i,j,2]+x_6_3[i,j,2]))
                m.addConstr(zHB[i,j,r] >= (x_4_1[i,j,1]+x_4_2[i,j,1]+x_4_3[i,j,1]+x_5_1[i,j,1]+x_5_2[i,j,1]+x_5_3[i,j,1]+x_6_1[i,j,1]+x_6_2[i,j,1]+x_6_3[i,j,1]+x_4_1[i,j,2]+x_4_2[i,j,2]+x_4_3[i,j,2]+x_5_1[i,j,2]+x_5_2[i,j,2]+x_5_3[i,j,2]+x_6_1[i,j,2]+x_6_2[i,j,2]+x_6_3[i,j,2] - forecast_HB_K[i] * (1 - A_HB[r])))
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                m.addConstr(zHS[i,j,r] <= A_HS[r] * forecast_HS_K[i])
                m.addConstr(zHS[i,j,r] <= (x_4_7[i,j,1]+x_4_8[i,j,1]+x_5_7[i,j,1]+x_5_8[i,j,1]+x_6_7[i,j,1]+x_6_8[i,j,1]+x_4_7[i,j,2]+x_4_8[i,j,2]+x_5_7[i,j,2]+x_5_8[i,j,2]+x_6_7[i,j,2]+x_6_8[i,j,2]))
                m.addConstr(zHS[i,j,r] >= (x_4_7[i,j,1]+x_4_8[i,j,1]+x_5_7[i,j,1]+x_5_8[i,j,1]+x_6_7[i,j,1]+x_6_8[i,j,1]+x_4_7[i,j,2]+x_4_8[i,j,2]+x_5_7[i,j,2]+x_5_8[i,j,2]+x_6_7[i,j,2]+x_6_8[i,j,2] - forecast_HS_K[i] * (1 - A_HS[r])))
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                m.addConstr(zSB[i,j,r] <= A_BH[r] * forecast_SB_K[i])
                m.addConstr(zSB[i,j,r] <= (x_7_1[i,j,1]+x_7_2[i,j,1]+x_7_3[i,j,1]+x_8_1[i,j,1]+x_8_2[i,j,1]+x_8_3[i,j,1]+x_7_1[i,j,2]+x_7_2[i,j,2]+x_7_3[i,j,2]+x_8_1[i,j,2]+x_8_2[i,j,2]+x_8_3[i,j,2]))
                m.addConstr(zSB[i,j,r] >= (x_7_1[i,j,1]+x_7_2[i,j,1]+x_7_3[i,j,1]+x_8_1[i,j,1]+x_8_2[i,j,1]+x_8_3[i,j,1]+x_7_1[i,j,2]+x_7_2[i,j,2]+x_7_3[i,j,2]+x_8_1[i,j,2]+x_8_2[i,j,2]+x_8_3[i,j,2] - forecast_SB_K[i] * (1 - A_SB[r])))
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                m.addConstr(zSH[i,j,r] <= A_SH[r] * forecast_SH_K[i])
                m.addConstr(zSH[i,j,r] <= (x_7_4[i,j,1]+x_7_5[i,j,1]+x_7_6[i,j,1]+x_8_4[i,j,1]+x_8_5[i,j,1]+x_8_6[i,j,1]+x_7_4[i,j,2]+x_7_5[i,j,2]+x_7_6[i,j,2]+x_8_4[i,j,2]+x_8_5[i,j,2]+x_8_6[i,j,2]))
                m.addConstr(zSH[i,j,r] >= (x_7_4[i,j,1]+x_7_5[i,j,1]+x_7_6[i,j,1]+x_8_4[i,j,1]+x_8_5[i,j,1]+x_8_6[i,j,1]+x_7_4[i,j,2]+x_7_5[i,j,2]+x_7_6[i,j,2]+x_8_4[i,j,2]+x_8_5[i,j,2]+x_8_6[i,j,2] - forecast_SH_K[i] * (1 - A_SH[r])))
                
    for r in range(len(FR_BH)):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                C5 += FR_BH[r] * zBH[i,j,r]
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                C5 += FR_BS[r] * zBS[i,j,r]
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                C5 += FR_HB[r] * zHB[i,j,r]
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                C5 += FR_HS[r] * zHS[i,j,r]
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                C5 += FR_SB[r] * zSB[i,j,r]
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                C5 += FR_SH[r] * zSH[i,j,r]
    
    cargo_operating_perHour = cargo_per + L * OilPrice
    
    nBH = {}
    nHS = {}
    nSB = {}
    M = 0.0001
    for j in range(N*K):
        nBH[j] = m.addVar(vtype=GRB.BINARY)
        nHS[j] = m.addVar(vtype=GRB.BINARY)
        nSB[j] = m.addVar(vtype=GRB.BINARY)
        
    for j in range(N*K):
        m.addConstr(nBH[j] >= M * gp.quicksum((y_1_4[i,j,w]+y_1_5[i,j,w]+y_1_6[i,j,w]+y_2_4[i,j,w]+y_2_5[i,j,w]+y_2_6[i,j,w]+y_3_4[i,j,w]+y_3_5[i,j,w]+y_3_6[i,j,w]+y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w]) for i in range(cargo_BH[j]) for w in range(1,3)) + M * gp.quicksum(y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w] for i in range(cargo_SB[j]) for w in range(1,3)))
        m.addConstr(nHS[j] >= M * gp.quicksum((y_4_7[i,j,w]+y_4_8[i,j,w]+y_5_7[i,j,w]+y_5_8[i,j,w]+y_6_7[i,j,w]+y_6_8[i,j,w]+y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w]) for i in range(cargo_HS[j]) for w in range(1,3)) + M * gp.quicksum(y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w] for i in range(cargo_BH[j]) for w in range(1,3)))
        m.addConstr(nSB[j] >= M * gp.quicksum((y_7_1[i,j,w]+y_7_2[i,j,w]+y_7_3[i,j,w]+y_8_1[i,j,w]+y_8_2[i,j,w]+y_8_3[i,j,w]+y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w]) for i in range(cargo_SB[j]) for w in range(1,3)) + M * gp.quicksum(y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w] for i in range(cargo_HS[j]) for w in range(1,3)))
        
    cargoUsed_BH = 0
    cargoUsed_HS = 0
    cargoUsed_SB = 0
    for j in range(N*K):
        cargoUsed_BH += nBH[j]
        cargoUsed_HS += nHS[j]
        cargoUsed_SB += nSB[j]
        C7 += cargo_operating_perHour * (Tcargo_1*nBH[j]+Tcargo_2*nHS[j]+Tcargo_3*nSB[j])
    
    requi = sum(forecast_BH_K)+sum(forecast_BS_K)+sum(forecast_HB_K)+sum(forecast_HS_K)+sum(forecast_SB_K)+sum(forecast_SH_K)
    unTrans = requi - transported_1 - transported_2
    untransprop = unTrans / requi
    
    m.setObjective(theta1 * (C1 + C2 + C3 + C4 + C5 + C6 + C7) + theta2 * untransprop, GRB.MINIMIZE)
    m.optimize()
    
    cargo_operating = cargo_operating_perHour * (Tcargo_1+Tcargo_2+Tcargo_3) * max(cargoUsed_BH.getValue(),cargoUsed_HS.getValue(),cargoUsed_SB.getValue())
    
    
    
    result1 = C1+C2+C3.getValue()+C4.getValue()+C5.getValue()+C6.getValue()+cargo_operating
    result2 = C3.getValue()+C2
    result3 = C4.getValue()+C1
    result4 = C5.getValue()
    result5 = cargo_operating
    result6 = transported_1.getValue()
    result7 = transported_2.getValue()
    result8 = unTrans.getValue()
    result9 = requi
    result10 = passengerTrans.getValue()
    result11 = cargoTrans.getValue()
    result12 = C6.getValue()
    result13 = passengerTrans_BH.getValue()
    result14 = passengerTrans_BS.getValue()
    result15 = passengerTrans_HB.getValue()
    result16 = passengerTrans_HS.getValue()
    result17 = passengerTrans_SB.getValue()
    result18 = passengerTrans_SH.getValue()
    result19 = cargoTrans_BH.getValue()
    result20 = cargoTrans_HS.getValue()
    result21 = cargoTrans_SB.getValue()
    result22 = max(cargoUsed_BH.getValue(),cargoUsed_HS.getValue(),cargoUsed_SB.getValue())
    output1 = passengerTotalBH.getValue()
    output2 = passengerTotalBS.getValue()
    output3 = passengerTotalHB.getValue()
    output4 = passengerTotalHS.getValue()
    output5 = passengerTotalSB.getValue()
    output6 = passengerTotalSH.getValue()
    output7 = cargoTotalBH.getValue()
    output8 = cargoTotalBS.getValue()
    output9 = cargoTotalHB.getValue()
    output10 = cargoTotalHS.getValue()
    output11 = cargoTotalSB.getValue()
    output12 = cargoTotalSH.getValue()
    output13 = desertTotalBH.getValue()
    output14 = desertTotalBS.getValue()
    output15 = desertTotalHB.getValue()
    output16 = desertTotalHS.getValue()
    output17 = desertTotalSB.getValue()
    output18 = desertTotalSH.getValue()
    
    return result1,result2,result3,result4,result5,result6,result7,result8,result9,result10,result11,result12,result13,result14,result15,result16,result17,result18,result19,result20,result21,result22,output1,output2,output3,output4,output5,output6,output7,output8,output9,output10,output11,output12,output13,output14,output15,output16,output17,output18

def mainFunctionACTUAL(K):
    cargo_BH = []
    cargo_HS = []
    cargo_SB = []
        
    for i in range(K):
        cargo_BH_add = [x + 24 * i for x in cargo_BH_unit]
        cargo_HS_add = [x + 24 * i for x in cargo_HS_unit]
        cargo_SB_add = [x + 24 * i for x in cargo_SB_unit]
        for j in range(N):
            cargo_BH.append(cargo_BH_add[j])
            cargo_HS.append(cargo_HS_add[j])
            cargo_SB.append(cargo_SB_add[j])
    del cargo_BH_add,cargo_HS_add,cargo_SB_add
    BH_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_BH)
    BS_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_BS)
    HB_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_HB)
    HS_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_HS)
    SB_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_SB)
    SH_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_SH)
    flightTime_BH = passenger_flight_times_BH * K
    flightTime_BS = passenger_flight_times_BS * K
    flightTime_HB = passenger_flight_times_HB * K
    flightTime_HS = passenger_flight_times_HS * K
    flightTime_SB = passenger_flight_times_SB * K
    flightTime_SH = passenger_flight_times_SH * K
    first_flight_BH = min(min(BH_passengerTimeTable),min(cargo_BH))
    last_flight_BH = max(max(BH_passengerTimeTable),max(cargo_BH))
    first_flight_HS = min(min(HS_passengerTimeTable),min(cargo_HS))
    last_flight_HS = max(max(HS_passengerTimeTable),max(cargo_HS))
    first_flight_SB = min(min(SB_passengerTimeTable),min(cargo_SB))
    last_flight_SB = max(max(SB_passengerTimeTable),max(cargo_SB))
    first_flight_BS = min(BS_passengerTimeTable)
    last_flight_BS = max(BS_passengerTimeTable)
    first_flight_SH = min(SH_passengerTimeTable)
    last_flight_SH = max(SH_passengerTimeTable)
    first_flight_HB = min(HB_passengerTimeTable)
    last_flight_HB = max(HB_passengerTimeTable)
    BHcant_transport_passenger = passCantTransCal(BH_passengerTimeTable)
    BScant_transport_passenger = passCantTransCal(BS_passengerTimeTable)
    HBcant_transport_passenger = passCantTransCal(HB_passengerTimeTable)
    HScant_transport_passenger = passCantTransCal(HS_passengerTimeTable)
    SBcant_transport_passenger = passCantTransCal(SB_passengerTimeTable)
    SHcant_transport_passenger = passCantTransCal(SH_passengerTimeTable)
    BHcant_transport_cargo = max(cargo_BH) + 1
    HScant_transport_cargo = max(cargo_HS) + 1
    SBcant_transport_cargo = max(cargo_SB) + 1
    first_BH = process_value(first_flight_BH)
    first_BS = process_value(first_flight_BS)
    first_HB = process_value(first_flight_HB)
    first_HS = process_value(first_flight_HS)
    first_SB = process_value(first_flight_SB)
    first_SH = process_value(first_flight_SH)
    last_BH = process_value(last_flight_BH)
    last_BS = process_value(last_flight_BS)
    last_HB = process_value(last_flight_HB)
    last_HS = process_value(last_flight_HS)
    last_SB = process_value(last_flight_SB)
    last_SH = process_value(last_flight_SH)
    passengerTime_BH = passengerTimeCal(BH_passengerTimeTable)
    passengerTime_BS = passengerTimeCal(BS_passengerTimeTable)
    passengerTime_HB = passengerTimeCal(HB_passengerTimeTable)
    passengerTime_HS = passengerTimeCal(HS_passengerTimeTable)
    passengerTime_SB = passengerTimeCal(SB_passengerTimeTable)
    passengerTime_SH = passengerTimeCal(SH_passengerTimeTable)

    C1 = 0 # C1为未运完的仓储成本，初始值为0
    C2 = 0 # C2为未运完的逾期延迟成本，初始值为0
    C3 = 0 # C3为能运完的逾期延迟成本，初始值为0
    C4 = 0 # C4为能运完的仓储成本，初始值为0
    C5 = 0 # C5为运输成本，初始值为0
    C6 = 0 # C6为丢弃成本，初始值为0
    C7 = 0
    transported_1 = 0
    transported_2 = 0
    cargoUsed = 0
    
    forecast_1_4_K = TimeSplit(forecast_1_4)
    forecast_1_5_K = TimeSplit(forecast_1_5)
    forecast_1_6_K = TimeSplit(forecast_1_6)
    forecast_1_7_K = TimeSplit(forecast_1_7)
    forecast_1_8_K = TimeSplit(forecast_1_8)
    forecast_2_4_K = TimeSplit(forecast_2_4)
    forecast_2_5_K = TimeSplit(forecast_2_5)
    forecast_2_6_K = TimeSplit(forecast_2_6)
    forecast_2_7_K = TimeSplit(forecast_2_7)
    forecast_2_8_K = TimeSplit(forecast_2_8)
    forecast_3_4_K = TimeSplit(forecast_3_4)
    forecast_3_5_K = TimeSplit(forecast_3_5)
    forecast_3_6_K = TimeSplit(forecast_3_6)
    forecast_3_7_K = TimeSplit(forecast_3_7)
    forecast_3_8_K = TimeSplit(forecast_3_8)
    forecast_4_1_K = TimeSplit(forecast_4_1)
    forecast_4_2_K = TimeSplit(forecast_4_2)
    forecast_4_3_K = TimeSplit(forecast_4_3)
    forecast_4_7_K = TimeSplit(forecast_4_7)
    forecast_4_8_K = TimeSplit(forecast_4_8)
    forecast_5_1_K = TimeSplit(forecast_5_1)
    forecast_5_2_K = TimeSplit(forecast_5_2)
    forecast_5_3_K = TimeSplit(forecast_5_3)
    forecast_5_7_K = TimeSplit(forecast_5_7)
    forecast_5_8_K = TimeSplit(forecast_5_8)
    forecast_6_1_K = TimeSplit(forecast_6_1)
    forecast_6_2_K = TimeSplit(forecast_6_2)
    forecast_6_3_K = TimeSplit(forecast_6_3)
    forecast_6_7_K = TimeSplit(forecast_6_7)
    forecast_6_8_K = TimeSplit(forecast_6_8)
    forecast_7_1_K = TimeSplit(forecast_7_1)
    forecast_7_2_K = TimeSplit(forecast_7_2)
    forecast_7_3_K = TimeSplit(forecast_7_3)
    forecast_7_4_K = TimeSplit(forecast_7_4)
    forecast_7_5_K = TimeSplit(forecast_7_5)
    forecast_7_6_K = TimeSplit(forecast_7_6)
    forecast_8_1_K = TimeSplit(forecast_8_1)
    forecast_8_2_K = TimeSplit(forecast_8_2)
    forecast_8_3_K = TimeSplit(forecast_8_3)
    forecast_8_4_K = TimeSplit(forecast_8_4)
    forecast_8_5_K = TimeSplit(forecast_8_5)
    forecast_8_6_K = TimeSplit(forecast_8_6)
    
    forecast_1_4_K[0] += left_to_leave_1_4[-1]
    forecast_1_5_K[0] += left_to_leave_1_5[-1]
    forecast_1_6_K[0] += left_to_leave_1_6[-1]
    forecast_1_7_K[0] += left_to_leave_1_7[-1]
    forecast_1_8_K[0] += left_to_leave_1_8[-1]
    forecast_2_4_K[0] += left_to_leave_2_4[-1]
    forecast_2_5_K[0] += left_to_leave_2_5[-1]
    forecast_2_6_K[0] += left_to_leave_2_6[-1]
    forecast_2_7_K[0] += left_to_leave_2_7[-1]
    forecast_2_8_K[0] += left_to_leave_2_8[-1]
    forecast_3_4_K[0] += left_to_leave_3_4[-1]
    forecast_3_5_K[0] += left_to_leave_3_5[-1]
    forecast_3_6_K[0] += left_to_leave_3_6[-1]
    forecast_3_7_K[0] += left_to_leave_3_7[-1]
    forecast_3_8_K[0] += left_to_leave_3_8[-1]
    forecast_4_1_K[0] += left_to_leave_4_1[-1]
    forecast_4_2_K[0] += left_to_leave_4_2[-1]
    forecast_4_3_K[0] += left_to_leave_4_3[-1]
    forecast_4_7_K[0] += left_to_leave_4_7[-1]
    forecast_4_8_K[0] += left_to_leave_4_8[-1]
    forecast_5_1_K[0] += left_to_leave_5_1[-1]
    forecast_5_2_K[0] += left_to_leave_5_2[-1]
    forecast_5_3_K[0] += left_to_leave_5_3[-1]
    forecast_5_7_K[0] += left_to_leave_5_7[-1]
    forecast_5_8_K[0] += left_to_leave_5_8[-1]
    forecast_6_1_K[0] += left_to_leave_6_1[-1]
    forecast_6_2_K[0] += left_to_leave_6_2[-1]
    forecast_6_3_K[0] += left_to_leave_6_3[-1]
    forecast_6_7_K[0] += left_to_leave_6_7[-1]
    forecast_6_8_K[0] += left_to_leave_6_8[-1]
    forecast_7_1_K[0] += left_to_leave_7_1[-1]
    forecast_7_2_K[0] += left_to_leave_7_2[-1]
    forecast_7_3_K[0] += left_to_leave_7_3[-1]
    forecast_7_4_K[0] += left_to_leave_7_4[-1]
    forecast_7_5_K[0] += left_to_leave_7_5[-1]
    forecast_7_6_K[0] += left_to_leave_7_6[-1]
    forecast_8_1_K[0] += left_to_leave_8_1[-1]
    forecast_8_2_K[0] += left_to_leave_8_2[-1]
    forecast_8_3_K[0] += left_to_leave_8_3[-1]
    forecast_8_4_K[0] += left_to_leave_8_4[-1]
    forecast_8_5_K[0] += left_to_leave_8_5[-1]
    forecast_8_6_K[0] += left_to_leave_8_6[-1]
    
    # 计算时效快递的需求
    TimeSensitive_Req_1_4 = [x * perc1 for x in forecast_1_4_K]
    TimeSensitive_Req_1_5 = [x * perc1 for x in forecast_1_5_K]
    TimeSensitive_Req_1_6 = [x * perc1 for x in forecast_1_6_K]
    TimeSensitive_Req_1_7 = [x * perc1 for x in forecast_1_7_K]
    TimeSensitive_Req_1_8 = [x * perc1 for x in forecast_1_8_K]
    TimeSensitive_Req_2_4 = [x * perc1 for x in forecast_2_4_K]
    TimeSensitive_Req_2_5 = [x * perc1 for x in forecast_2_5_K]
    TimeSensitive_Req_2_6 = [x * perc1 for x in forecast_2_6_K]
    TimeSensitive_Req_2_7 = [x * perc1 for x in forecast_2_7_K]
    TimeSensitive_Req_2_8 = [x * perc1 for x in forecast_2_8_K]
    TimeSensitive_Req_3_4 = [x * perc1 for x in forecast_3_4_K]
    TimeSensitive_Req_3_5 = [x * perc1 for x in forecast_3_5_K]
    TimeSensitive_Req_3_6 = [x * perc1 for x in forecast_3_6_K]
    TimeSensitive_Req_3_7 = [x * perc1 for x in forecast_3_7_K]
    TimeSensitive_Req_3_8 = [x * perc1 for x in forecast_3_8_K]
    TimeSensitive_Req_4_1 = [x * perc1 for x in forecast_4_1_K]
    TimeSensitive_Req_4_2 = [x * perc1 for x in forecast_4_2_K]
    TimeSensitive_Req_4_3 = [x * perc1 for x in forecast_4_3_K]
    TimeSensitive_Req_4_7 = [x * perc1 for x in forecast_4_7_K]
    TimeSensitive_Req_4_8 = [x * perc1 for x in forecast_4_8_K]
    TimeSensitive_Req_5_1 = [x * perc1 for x in forecast_5_1_K]
    TimeSensitive_Req_5_2 = [x * perc1 for x in forecast_5_2_K]
    TimeSensitive_Req_5_3 = [x * perc1 for x in forecast_5_3_K]
    TimeSensitive_Req_5_7 = [x * perc1 for x in forecast_5_7_K]
    TimeSensitive_Req_5_8 = [x * perc1 for x in forecast_5_8_K]
    TimeSensitive_Req_6_1 = [x * perc1 for x in forecast_6_1_K]
    TimeSensitive_Req_6_2 = [x * perc1 for x in forecast_6_2_K]
    TimeSensitive_Req_6_3 = [x * perc1 for x in forecast_6_3_K]
    TimeSensitive_Req_6_7 = [x * perc1 for x in forecast_6_7_K]
    TimeSensitive_Req_6_8 = [x * perc1 for x in forecast_6_8_K]
    TimeSensitive_Req_7_1 = [x * perc1 for x in forecast_7_1_K]
    TimeSensitive_Req_7_2 = [x * perc1 for x in forecast_7_2_K]
    TimeSensitive_Req_7_3 = [x * perc1 for x in forecast_7_3_K]
    TimeSensitive_Req_7_4 = [x * perc1 for x in forecast_7_4_K]
    TimeSensitive_Req_7_5 = [x * perc1 for x in forecast_7_5_K]
    TimeSensitive_Req_7_6 = [x * perc1 for x in forecast_7_6_K]
    TimeSensitive_Req_8_1 = [x * perc1 for x in forecast_8_1_K]
    TimeSensitive_Req_8_2 = [x * perc1 for x in forecast_8_2_K]
    TimeSensitive_Req_8_3 = [x * perc1 for x in forecast_8_3_K]
    TimeSensitive_Req_8_4 = [x * perc1 for x in forecast_8_4_K]
    TimeSensitive_Req_8_5 = [x * perc1 for x in forecast_8_5_K]
    TimeSensitive_Req_8_6 = [x * perc1 for x in forecast_8_6_K]
    
    # 计算经济快递的需求
    Economy_Req_1_4 = [x * perc2 for x in forecast_1_4_K]
    Economy_Req_1_5 = [x * perc2 for x in forecast_1_5_K]
    Economy_Req_1_6 = [x * perc2 for x in forecast_1_6_K]
    Economy_Req_1_7 = [x * perc2 for x in forecast_1_7_K]
    Economy_Req_1_8 = [x * perc2 for x in forecast_1_8_K]
    Economy_Req_2_4 = [x * perc2 for x in forecast_2_4_K]
    Economy_Req_2_5 = [x * perc2 for x in forecast_2_5_K]
    Economy_Req_2_6 = [x * perc2 for x in forecast_2_6_K]
    Economy_Req_2_7 = [x * perc2 for x in forecast_2_7_K]
    Economy_Req_2_8 = [x * perc2 for x in forecast_2_8_K]
    Economy_Req_3_4 = [x * perc2 for x in forecast_3_4_K]
    Economy_Req_3_5 = [x * perc2 for x in forecast_3_5_K]
    Economy_Req_3_6 = [x * perc2 for x in forecast_3_6_K]
    Economy_Req_3_7 = [x * perc2 for x in forecast_3_7_K]
    Economy_Req_3_8 = [x * perc2 for x in forecast_3_8_K]
    Economy_Req_4_1 = [x * perc2 for x in forecast_4_1_K]
    Economy_Req_4_2 = [x * perc2 for x in forecast_4_2_K]
    Economy_Req_4_3 = [x * perc2 for x in forecast_4_3_K]
    Economy_Req_4_7 = [x * perc2 for x in forecast_4_7_K]
    Economy_Req_4_8 = [x * perc2 for x in forecast_4_8_K]
    Economy_Req_5_1 = [x * perc2 for x in forecast_5_1_K]
    Economy_Req_5_2 = [x * perc2 for x in forecast_5_2_K]
    Economy_Req_5_3 = [x * perc2 for x in forecast_5_3_K]
    Economy_Req_5_7 = [x * perc2 for x in forecast_5_7_K]
    Economy_Req_5_8 = [x * perc2 for x in forecast_5_8_K]
    Economy_Req_6_1 = [x * perc2 for x in forecast_6_1_K]
    Economy_Req_6_2 = [x * perc2 for x in forecast_6_2_K]
    Economy_Req_6_3 = [x * perc2 for x in forecast_6_3_K]
    Economy_Req_6_7 = [x * perc2 for x in forecast_6_7_K]
    Economy_Req_6_8 = [x * perc2 for x in forecast_6_8_K]
    Economy_Req_7_1 = [x * perc2 for x in forecast_7_1_K]
    Economy_Req_7_2 = [x * perc2 for x in forecast_7_2_K]
    Economy_Req_7_3 = [x * perc2 for x in forecast_7_3_K]
    Economy_Req_7_4 = [x * perc2 for x in forecast_7_4_K]
    Economy_Req_7_5 = [x * perc2 for x in forecast_7_5_K]
    Economy_Req_7_6 = [x * perc2 for x in forecast_7_6_K]
    Economy_Req_8_1 = [x * perc2 for x in forecast_8_1_K]
    Economy_Req_8_2 = [x * perc2 for x in forecast_8_2_K]
    Economy_Req_8_3 = [x * perc2 for x in forecast_8_3_K]
    Economy_Req_8_4 = [x * perc2 for x in forecast_8_4_K]
    Economy_Req_8_5 = [x * perc2 for x in forecast_8_5_K]
    Economy_Req_8_6 = [x * perc2 for x in forecast_8_6_K]
    
    # 主要计算模型
    m = gp.Model()
    m.Params.OutputFlag = 0
    m.Params.MIPGap = 0.005
    
    x_1_4 = {}
    x_1_5 = {}
    x_1_6 = {}
    x_1_7 = {}
    x_1_8 = {}
    x_2_4 = {}
    x_2_5 = {}
    x_2_6 = {}
    x_2_7 = {}
    x_2_8 = {}
    x_3_4 = {}
    x_3_5 = {}
    x_3_6 = {}
    x_3_7 = {}
    x_3_8 = {}
    x_4_1 = {}
    x_4_2 = {}
    x_4_3 = {}
    x_4_7 = {}
    x_4_8 = {}
    x_5_1 = {}
    x_5_2 = {}
    x_5_3 = {}
    x_5_7 = {}
    x_5_8 = {}
    x_6_1 = {}
    x_6_2 = {}
    x_6_3 = {}
    x_6_7 = {}
    x_6_8 = {}
    x_7_1 = {}
    x_7_2 = {}
    x_7_3 = {}
    x_7_4 = {}
    x_7_5 = {}
    x_7_6 = {}
    x_8_1 = {}
    x_8_2 = {}
    x_8_3 = {}
    x_8_4 = {}
    x_8_5 = {}
    x_8_6 = {}
    
    y_1_4 = {}
    y_1_5 = {}
    y_1_6 = {}
    y_1_7 = {}
    y_1_8 = {}
    y_2_4 = {}
    y_2_5 = {}
    y_2_6 = {}
    y_2_7 = {}
    y_2_8 = {}
    y_3_4 = {}
    y_3_5 = {}
    y_3_6 = {}
    y_3_7 = {}
    y_3_8 = {}
    y_4_1 = {}
    y_4_2 = {}
    y_4_3 = {}
    y_4_7 = {}
    y_4_8 = {}
    y_5_1 = {}
    y_5_2 = {}
    y_5_3 = {}
    y_5_7 = {}
    y_5_8 = {}
    y_6_1 = {}
    y_6_2 = {}
    y_6_3 = {}
    y_6_7 = {}
    y_6_8 = {}
    y_7_1 = {}
    y_7_2 = {}
    y_7_3 = {}
    y_7_4 = {}
    y_7_5 = {}
    y_7_6 = {}
    y_8_1 = {}
    y_8_2 = {}
    y_8_3 = {}
    y_8_4 = {}
    y_8_5 = {}
    y_8_6 = {}
    
    for w in range(1,3):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                x_1_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_1_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_1_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_2_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_2_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_2_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_3_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_3_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_3_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                x_1_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_1_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_2_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_2_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_3_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_3_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                x_4_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_4_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_4_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_5_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_5_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_5_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_6_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_6_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_6_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                x_4_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_4_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_5_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_5_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_6_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_6_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                x_7_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_7_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_7_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                x_7_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_7_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_7_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                
    for w in range(1,3):
        for j in range(N*K):
            for i in range(cargo_BH[j]):
                y_1_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_1_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_1_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_1_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_1_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_2_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_2_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_2_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_2_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_2_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_3_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_3_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_3_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_3_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_3_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
            for i in range(cargo_HS[j]):
                y_4_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_4_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_4_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_5_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_5_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_5_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_6_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_6_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_6_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_4_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_4_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_5_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_5_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_6_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_6_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
            for i in range(cargo_SB[j]):
                y_7_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_7_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_7_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_7_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_7_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_7_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                
    # 客机容量限制约束
    for j in range(len(passengerTime_BH)):
        cal1_BH = 0
        cal1_BH += gp.quicksum(x_1_4[i,j,w]+x_1_5[i,j,w]+x_1_6[i,j,w]+x_2_4[i,j,w]+x_2_5[i,j,w]+x_2_6[i,j,w]+x_3_4[i,j,w]+x_3_5[i,j,w]+x_3_6[i,j,w] for w in range(1,3) for i in range(passengerTime_BH[j]))
        m.addConstr(cal1_BH <= q)
    for j in range(len(passengerTime_BS)):
        cal1_BS = 0
        cal1_BS += gp.quicksum(x_1_7[i,j,w]+x_1_8[i,j,w]+x_2_7[i,j,w]+x_2_8[i,j,w]+x_3_7[i,j,w]+x_3_8[i,j,w] for w in range(1,3) for i in range(passengerTime_BS[j]))
        m.addConstr(cal1_BS <= q)
    for j in range(len(passengerTime_HB)):
        cal1_HB = 0
        cal1_HB += gp.quicksum(x_4_1[i,j,w]+x_4_2[i,j,w]+x_4_3[i,j,w]+x_5_1[i,j,w]+x_5_2[i,j,w]+x_5_3[i,j,w]+x_6_1[i,j,w]+x_6_2[i,j,w]+x_6_3[i,j,w] for w in range(1,3) for i in range(passengerTime_HB[j]))
        m.addConstr(cal1_HB <= q)
    for j in range(len(passengerTime_HS)):
        cal1_HS = 0
        cal1_HS += gp.quicksum(x_4_7[i,j,w]+x_4_8[i,j,w]+x_5_7[i,j,w]+x_5_8[i,j,w]+x_6_7[i,j,w]+x_6_8[i,j,w] for w in range(1,3) for i in range(passengerTime_HS[j]))
        m.addConstr(cal1_HS <= q)
    for j in range(len(passengerTime_SB)):
        cal1_SB = 0
        cal1_SB += gp.quicksum(x_7_1[i,j,w]+x_7_2[i,j,w]+x_7_3[i,j,w]+x_8_1[i,j,w]+x_8_2[i,j,w]+x_8_3[i,j,w] for w in range(1,3) for i in range(passengerTime_SB[j]))
        m.addConstr(cal1_SB <= q)
    for j in range(len(passengerTime_SH)):
        cal1_SH = 0
        cal1_SH += gp.quicksum(x_7_4[i,j,w]+x_7_5[i,j,w]+x_7_6[i,j,w]+x_8_4[i,j,w]+x_8_5[i,j,w]+x_8_6[i,j,w] for w in range(1,3) for i in range(passengerTime_SH[j]))
        m.addConstr(cal1_SH <= q)
        
    # 货机容量约束
    for j in range(N*K):
        cal2_BH = 0
        cal2_BH += (gp.quicksum((y_1_4[i,j,w]+y_1_5[i,j,w]+y_1_6[i,j,w]+y_2_4[i,j,w]+y_2_5[i,j,w]+y_2_6[i,j,w]+y_3_4[i,j,w]+y_3_5[i,j,w]+y_3_6[i,j,w]+y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w]) for w in range(1,3) for i in range(cargo_BH[j]))+gp.quicksum(y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w] for w in range(1,3) for i in range(cargo_SB[j])))
        m.addConstr(cal2_BH <= Q)
    for j in range(N*K):
        cal2_HS = 0
        cal2_HS += (gp.quicksum((y_4_7[i,j,w]+y_4_8[i,j,w]+y_5_7[i,j,w]+y_5_8[i,j,w]+y_6_7[i,j,w]+y_6_8[i,j,w]+y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w]) for w in range(1,3) for i in range(cargo_HS[j]))+gp.quicksum(y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w] for w in range(1,3) for i in range(cargo_BH[j])))
        m.addConstr(cal2_HS <= Q)
    for j in range(N*K):
        cal2_SB = 0
        cal2_SB += (gp.quicksum((y_7_1[i,j,w]+y_7_2[i,j,w]+y_7_3[i,j,w]+y_8_1[i,j,w]+y_8_2[i,j,w]+y_8_3[i,j,w]+y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w]) for w in range(1,3) for i in range(cargo_SB[j]))+gp.quicksum(y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w] for w in range(1,3) for i in range(cargo_HS[j])))
        m.addConstr(cal2_SB <= Q)
        
    # 在能运完的货物中，被运走的货物量最多达到这个时间段的订单需求量
    # 能运完的货物的仓储成本和逾期成本及被丢弃货物的成本计算
    for w in range(1,3):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                C3 += C2per[w] * (x_1_4[i,j,w]*max(BH_passengerTimeTable[j]+t1+t4-i-T_1[w]+flightTime_BH[j],0)+x_1_5[i,j,w]*max(BH_passengerTimeTable[j]+t1+t5-i-T_1[w]+flightTime_BH[j],0)+x_1_6[i,j,w]*max(BH_passengerTimeTable[j]+t1+t6-i-T_1[w]+flightTime_BH[j],0)+x_2_4[i,j,w]*max(BH_passengerTimeTable[j]+t2+t4-i-T_1[w]+flightTime_BH[j],0)+x_2_5[i,j,w]*max(BH_passengerTimeTable[j]+t2+t5-i-T_1[w]+flightTime_BH[j],0)+x_2_6[i,j,w]*max(BH_passengerTimeTable[j]+t2+t6-i-T_1[w]+flightTime_BH[j],0)+x_3_4[i,j,w]*max(BH_passengerTimeTable[j]+t3+t4-i-T_1[w]+flightTime_BH[j],0)+x_3_5[i,j,w]*max(BH_passengerTimeTable[j]+t3+t5-i-T_1[w]+flightTime_BH[j],0)+x_3_6[i,j,w]*max(BH_passengerTimeTable[j]+t3+t6-i-T_1[w]+flightTime_BH[j],0))
                C4 += c1 * ((x_1_4[i,j,w]+x_1_5[i,j,w]+x_1_6[i,j,w]+x_2_4[i,j,w]+x_2_5[i,j,w]+x_2_6[i,j,w]+x_3_4[i,j,w]+x_3_5[i,j,w]+x_3_6[i,j,w]) * (BH_passengerTimeTable[j] - i))
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                C3 += C2per[w] * (x_1_7[i,j,w]*max(BS_passengerTimeTable[j]+t1+t7-i-T_1[w]+flightTime_BS[j],0)+x_1_8[i,j,w]*max(BS_passengerTimeTable[j]+t1+t8-i-T_1[w]+flightTime_BS[j],0)+x_2_7[i,j,w]*max(BS_passengerTimeTable[j]+t2+t7-i-T_1[w]+flightTime_BS[j],0)+x_2_8[i,j,w]*max(BS_passengerTimeTable[j]+t2+t8-i-T_1[w]+flightTime_BS[j],0)+x_3_7[i,j,w]*max(BS_passengerTimeTable[j]+t3+t7-i-T_1[w]+flightTime_BS[j],0)+x_3_8[i,j,w]*max(BS_passengerTimeTable[j]+t3+t8-i-T_1[w]+flightTime_BS[j],0))
                C4 += c1 * ((x_1_7[i,j,w]+x_1_8[i,j,w]+x_2_7[i,j,w]+x_2_8[i,j,w]+x_3_7[i,j,w]+x_3_8[i,j,w]) * (BS_passengerTimeTable[j] - i))
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                C3 += C2per[w] * (x_4_1[i,j,w]*max(HB_passengerTimeTable[j]+t4+t1-i-T_1[w]+flightTime_HB[j],0)+x_4_2[i,j,w]*max(HB_passengerTimeTable[j]+t4+t2-i-T_1[w]+flightTime_HB[j],0)+x_4_3[i,j,w]*max(HB_passengerTimeTable[j]+t4+t3-i-T_1[w]+flightTime_HB[j],0)+x_5_1[i,j,w]*max(HB_passengerTimeTable[j]+t5+t1-i-T_1[w]+flightTime_HB[j],0)+x_5_2[i,j,w]*max(HB_passengerTimeTable[j]+t5+t2-i-T_1[w]+flightTime_HB[j],0)+x_5_3[i,j,w]*max(HB_passengerTimeTable[j]+t5+t3-i-T_1[w]+flightTime_HB[j],0)+x_6_1[i,j,w]*max(HB_passengerTimeTable[j]+t6+t1-i-T_1[w]+flightTime_HB[j],0)+x_6_2[i,j,w]*max(HB_passengerTimeTable[j]+t6+t2-i-T_1[w]+flightTime_HB[j],0)+x_6_3[i,j,w]*max(HB_passengerTimeTable[j]+t6+t3-i-T_1[w]+flightTime_HB[j],0))
                C4 += c1 * ((x_4_1[i,j,w]+x_4_2[i,j,w]+x_4_3[i,j,w]+x_5_1[i,j,w]+x_5_2[i,j,w]+x_5_3[i,j,w]+x_6_1[i,j,w]+x_6_2[i,j,w]+x_6_3[i,j,w]) * (HB_passengerTimeTable[j] - i))
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                C3 += C2per[w] * (x_4_7[i,j,w]*max(HS_passengerTimeTable[j]+t4+t7-i-T_1[w]+flightTime_HS[j],0)+x_4_8[i,j,w]*max(HS_passengerTimeTable[j]+t4+t8-i-T_1[w]+flightTime_HS[j],0)+x_5_7[i,j,w]*max(HS_passengerTimeTable[j]+t5+t7-i-T_1[w]+flightTime_HS[j],0)+x_5_8[i,j,w]*max(HS_passengerTimeTable[j]+t5+t8-i-T_1[w]+flightTime_HS[j],0)+x_6_7[i,j,w]*max(HS_passengerTimeTable[j]+t6+t7-i-T_1[w]+flightTime_HS[j],0)+x_6_8[i,j,w]*max(HS_passengerTimeTable[j]+t6+t8-i-T_1[w]+flightTime_HS[j],0))
                C4 += c1 * ((x_4_7[i,j,w]+x_4_8[i,j,w]+x_5_7[i,j,w]+x_5_8[i,j,w]+x_6_7[i,j,w]+x_6_8[i,j,w]) * (HS_passengerTimeTable[j] - i))
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                C3 += C2per[w] * (x_7_1[i,j,w]*max(SB_passengerTimeTable[j]+t7+t1-i-T_1[w]+flightTime_SB[j],0)+x_7_2[i,j,w]*max(SB_passengerTimeTable[j]+t7+t2-i-T_1[w]+flightTime_SB[j],0)+x_7_3[i,j,w]*max(SB_passengerTimeTable[j]+t7+t3-i-T_1[w]+flightTime_SB[j],0)+x_8_1[i,j,w]*max(SB_passengerTimeTable[j]+t8+t1-i-T_1[w]+flightTime_SB[j],0)+x_8_2[i,j,w]*max(SB_passengerTimeTable[j]+t8+t2-i-T_1[w]+flightTime_SB[j],0)+x_8_3[i,j,w]*max(SB_passengerTimeTable[j]+t8+t3-i-T_1[w]+flightTime_SB[j],0))
                C4 += c1 * ((x_7_1[i,j,w]+x_7_2[i,j,w]+x_7_3[i,j,w]+x_8_1[i,j,w]+x_8_2[i,j,w]+x_8_3[i,j,w]) * (SB_passengerTimeTable[j] - i))
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                C3 += C2per[w] * (x_7_4[i,j,w]*max(SH_passengerTimeTable[j]+t7+t4-i-T_1[w]+flightTime_SH[j],0)+x_7_5[i,j,w]*max(SH_passengerTimeTable[j]+t7+t5-i-T_1[w]+flightTime_SH[j],0)+x_7_6[i,j,w]*max(SH_passengerTimeTable[j]+t7+t6-i-T_1[w]+flightTime_SH[j],0)+x_8_4[i,j,w]*max(SH_passengerTimeTable[j]+t8+t4-i-T_1[w]+flightTime_SH[j],0)+x_8_5[i,j,w]*max(SH_passengerTimeTable[j]+t8+t5-i-T_1[w]+flightTime_SH[j],0)+x_8_6[i,j,w]*max(SH_passengerTimeTable[j]+t8+t6-i-T_1[w]+flightTime_SH[j],0))
                C4 += c1 * ((x_7_4[i,j,w]+x_7_5[i,j,w]+x_7_6[i,j,w]+x_8_4[i,j,w]+x_8_5[i,j,w]+x_8_6[i,j,w]) * (SH_passengerTimeTable[j] - i))
        for j in range(N*K):
            for i in range(cargo_BH[j]):
                C3 += C2per[w] * (y_1_4[i,j,w]*max(cargo_BH[j]+t1+t4-i-T_1[w]+Tcargo_1,0)+y_1_5[i,j,w]*max(cargo_BH[j]+t1+t5-i-T_1[w]+Tcargo_1,0)+y_1_6[i,j,w]*max(cargo_BH[j]+t1+t6-i-T_1[w]+Tcargo_1,0)+y_2_4[i,j,w]*max(cargo_BH[j]+t2+t4-i-T_1[w]+Tcargo_1,0)+y_2_5[i,j,w]*max(cargo_BH[j]+t2+t5-i-T_1[w]+Tcargo_1,0)+y_2_6[i,j,w]*max(cargo_BH[j]+t2+t6-i-T_1[w]+Tcargo_1,0))
                C3 += C2per[w] * (y_1_7[i,j,w]*max(cargo_HS[j]+t1+t7-i-T_1[w]+Tcargo_2,0)+y_1_8[i,j,w]*max(cargo_HS[j]+t1+t8-i-T_1[w]+Tcargo_2,0)+y_2_7[i,j,w]*max(cargo_HS[j]+t2+t7-i-T_1[w]+Tcargo_2,0)+y_2_8[i,j,w]*max(cargo_HS[j]+t2+t8-i-T_1[w]+Tcargo_2,0)+y_3_7[i,j,w]*max(cargo_HS[j]+t3+t7-i-T_1[w]+Tcargo_2,0)+y_3_8[i,j,w]*max(cargo_HS[j]+t3+t8-i-T_1[w]+Tcargo_2,0))
                C4 += c1 * ((y_1_4[i,j,w]+y_1_5[i,j,w]+y_1_6[i,j,w]+y_2_4[i,j,w]+y_2_5[i,j,w]+y_2_6[i,j,w]+y_3_4[i,j,w]+y_3_5[i,j,w]+y_3_6[i,j,w]+y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w]) * (cargo_BH[j] - i))
            for i in range(cargo_HS[j]):
                C3 += C2per[w] * (y_4_1[i,j,w]*max(cargo_SB[j]+t4+t1-i-T_1[w]+Tcargo_3,0)+y_4_2[i,j,w]*max(cargo_SB[j]+t4+t2-i-T_1[w]+Tcargo_3,0)+y_4_3[i,j,w]*max(cargo_SB[j]+t4+t3-i-T_1[w]+Tcargo_3,0)+y_5_1[i,j,w]*max(cargo_HS[j]+t5+t1-i-T_1[w]+Tcargo_3,0)+y_5_2[i,j,w]*max(cargo_SB[j]+t5+t2-i-T_1[w]+Tcargo_3,0)+y_5_3[i,j,w]*max(cargo_SB[j]+t5+t3-i-T_1[w]+Tcargo_3,0))
                C3 += C2per[w] * (y_4_7[i,j,w]*max(cargo_HS[j]+t4+t7-i-T_1[w]+Tcargo_2,0)+y_4_8[i,j,w]*max(cargo_HS[j]+t4+t8-i-T_1[w]+Tcargo_2,0)+y_5_7[i,j,w]*max(cargo_HS[j]+t5+t7-i-T_1[w]+Tcargo_2,0)+y_5_8[i,j,w]*max(cargo_HS[j]+t5+t8-i-T_1[w]+Tcargo_2,0))
                C4 += c1 * ((y_4_7[i,j,w]+y_4_8[i,j,w]+y_5_7[i,j,w]+y_5_8[i,j,w]+y_6_7[i,j,w]+y_6_8[i,j,w]+y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w]) * (cargo_HS[j] - i))
            for i in range(cargo_SB[j]):
                C3 += C2per[w] * (y_7_1[i,j,w]*max(cargo_SB[j]+t7+t1-i-T_1[w]+Tcargo_3,0)+y_7_2[i,j,w]*max(cargo_SB[j]+t7+t2-i-T_1[w]+Tcargo_3,0)+y_7_3[i,j,w]*max(cargo_SB[j]+t7+t3-i-T_1[w]+Tcargo_3,0)+y_8_1[i,j,w]*max(cargo_SB[j]+t8+t1-i-T_1[w]+Tcargo_3,0)+y_8_2[i,j,w]*max(cargo_SB[j]+t8+t2-i-T_1[w]+Tcargo_3,0)+y_8_3[i,j,w]*max(cargo_SB[j]+t8+t3-i-T_1[w]+Tcargo_3,0))
                C3 += C2per[w] * (y_7_4[i,j,w]*max(cargo_BH[j]+t7+t4-i-T_1[w]+Tcargo_1,0)+y_7_5[i,j,w]*max(cargo_BH[j]+t7+t5-i-T_1[w]+Tcargo_1,0)+y_7_6[i,j,w]*max(cargo_BH[j]+t7+t6-i-T_1[w]+Tcargo_1,0)+y_8_4[i,j,w]*max(cargo_BH[j]+t8+t4-i-T_1[w]+Tcargo_1,0)+y_8_5[i,j,w]*max(cargo_BH[j]+t8+t5-i-T_1[w]+Tcargo_1,0)+y_8_6[i,j,w]*max(cargo_BH[j]+t8+t6-i-T_1[w]+Tcargo_1,0))
                C4 += c1 * ((y_7_1[i,j,w]+y_7_2[i,j,w]+y_7_3[i,j,w]+y_8_1[i,j,w]+y_8_2[i,j,w]+y_8_3[i,j,w]+y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w]) * (cargo_SB[j] - i))
                
    TimeSensitive_Req_BH = [x1+x2+x3+x4+x5+x6+x7+x8+x9 for x1,x2,x3,x4,x5,x6,x7,x8,x9 in zip(TimeSensitive_Req_1_4,TimeSensitive_Req_1_5,TimeSensitive_Req_1_6,TimeSensitive_Req_2_4,TimeSensitive_Req_2_5,TimeSensitive_Req_2_6,TimeSensitive_Req_3_4,TimeSensitive_Req_3_5,TimeSensitive_Req_3_6)]
    TimeSensitive_Req_BS = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(TimeSensitive_Req_1_7,TimeSensitive_Req_1_8,TimeSensitive_Req_2_7,TimeSensitive_Req_2_8,TimeSensitive_Req_3_7,TimeSensitive_Req_3_8)]
    TimeSensitive_Req_HB = [x1+x2+x3+x4+x5+x6+x7+x8+x9 for x1,x2,x3,x4,x5,x6,x7,x8,x9 in zip(TimeSensitive_Req_4_1,TimeSensitive_Req_4_2,TimeSensitive_Req_4_3,TimeSensitive_Req_5_1,TimeSensitive_Req_5_2,TimeSensitive_Req_5_3,TimeSensitive_Req_6_1,TimeSensitive_Req_6_2,TimeSensitive_Req_6_3)]
    TimeSensitive_Req_HS = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(TimeSensitive_Req_4_7,TimeSensitive_Req_4_8,TimeSensitive_Req_5_7,TimeSensitive_Req_5_8,TimeSensitive_Req_6_7,TimeSensitive_Req_6_8)]
    TimeSensitive_Req_SB = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(TimeSensitive_Req_7_1,TimeSensitive_Req_7_2,TimeSensitive_Req_7_3,TimeSensitive_Req_8_1,TimeSensitive_Req_8_2,TimeSensitive_Req_8_3)]
    TimeSensitive_Req_SH = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(TimeSensitive_Req_7_4,TimeSensitive_Req_7_5,TimeSensitive_Req_7_6,TimeSensitive_Req_8_4,TimeSensitive_Req_8_5,TimeSensitive_Req_8_6)]
    Economy_Req_BH = [x1+x2+x3+x4+x5+x6+x7+x8+x9 for x1,x2,x3,x4,x5,x6,x7,x8,x9 in zip(Economy_Req_1_4,Economy_Req_1_5,Economy_Req_1_6,Economy_Req_2_4,Economy_Req_2_5,Economy_Req_2_6,Economy_Req_3_4,Economy_Req_3_5,Economy_Req_3_6)]
    Economy_Req_BS = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(Economy_Req_1_7,Economy_Req_1_8,Economy_Req_2_7,Economy_Req_2_8,Economy_Req_3_7,Economy_Req_3_8)]
    Economy_Req_HB = [x1+x2+x3+x4+x5+x6+x7+x8+x9 for x1,x2,x3,x4,x5,x6,x7,x8,x9 in zip(Economy_Req_4_1,Economy_Req_4_2,Economy_Req_4_3,Economy_Req_5_1,Economy_Req_5_2,Economy_Req_5_3,Economy_Req_6_1,Economy_Req_6_2,Economy_Req_6_3)]
    Economy_Req_HS = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(Economy_Req_4_7,Economy_Req_4_8,Economy_Req_5_7,Economy_Req_5_8,Economy_Req_6_7,Economy_Req_6_8)]
    Economy_Req_SB = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(Economy_Req_7_1,Economy_Req_7_2,Economy_Req_7_3,Economy_Req_8_1,Economy_Req_8_2,Economy_Req_8_3)]
    Economy_Req_SH = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(Economy_Req_7_4,Economy_Req_7_5,Economy_Req_7_6,Economy_Req_8_4,Economy_Req_8_5,Economy_Req_8_6)]
    forecast_BH_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_BH,Economy_Req_BH)]
    forecast_BS_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_BS,Economy_Req_BS)]
    forecast_HB_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_HB,Economy_Req_HB)]
    forecast_HS_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_HS,Economy_Req_HS)]
    forecast_SB_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_SB,Economy_Req_SB)]
    forecast_SH_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_SH,Economy_Req_SH)]
    passengerTotalBH = 0
    cargoTotalBH = 0
    passengerTotalBS = 0
    cargoTotalBS = 0
    passengerTotalHB = 0
    cargoTotalHB = 0
    passengerTotalHS = 0
    cargoTotalHS = 0
    passengerTotalSB = 0
    cargoTotalSB = 0
    passengerTotalSH = 0
    cargoTotalSH = 0
    
    for k in range(last_BH):
        transOut1 = 0
        transOut2 = 0
        transOut1_1_4 = 0
        transOut1_1_5 = 0
        transOut1_1_6 = 0
        transOut2_1_4 = 0
        transOut2_1_5 = 0
        transOut2_1_6 = 0
        transOut1_2_4 = 0
        transOut1_2_5 = 0
        transOut1_2_6 = 0
        transOut2_2_4 = 0
        transOut2_2_5 = 0
        transOut2_2_6 = 0
        transOut1_3_4 = 0
        transOut1_3_5 = 0
        transOut1_3_6 = 0
        transOut2_3_4 = 0
        transOut2_3_5 = 0
        transOut2_3_6 = 0
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                if i == k:
                    transOut1_1_4 += x_1_4[i,j,1]
                    transOut2_1_4 += x_1_4[i,j,2]
                    transOut1_1_5 += x_1_5[i,j,1]
                    transOut2_1_5 += x_1_5[i,j,2]
                    transOut1_1_6 += x_1_6[i,j,1]
                    transOut2_1_6 += x_1_6[i,j,2]
                    transOut1_2_4 += x_2_4[i,j,1]
                    transOut2_2_4 += x_2_4[i,j,2]
                    transOut1_2_5 += x_2_5[i,j,1]
                    transOut2_2_5 += x_2_5[i,j,2]
                    transOut1_2_6 += x_2_6[i,j,1]
                    transOut2_2_6 += x_2_6[i,j,2]
                    transOut1_3_4 += x_3_4[i,j,1]
                    transOut2_3_4 += x_3_4[i,j,2]
                    transOut1_3_5 += x_3_5[i,j,1]
                    transOut2_3_5 += x_3_5[i,j,2]
                    transOut1_3_6 += x_3_6[i,j,1]
                    transOut2_3_6 += x_3_6[i,j,2]
                    transOut1 += (x_1_4[i,j,1]+x_1_5[i,j,1]+x_1_6[i,j,1]+x_2_4[i,j,1]+x_2_5[i,j,1]+x_2_6[i,j,1]+x_3_4[i,j,1]+x_3_5[i,j,1]+x_3_6[i,j,1])
                    transOut2 += (x_1_4[i,j,2]+x_1_5[i,j,2]+x_1_6[i,j,2]+x_2_4[i,j,2]+x_2_5[i,j,2]+x_2_6[i,j,2]+x_3_4[i,j,2]+x_3_5[i,j,2]+x_3_6[i,j,2])
                    passengerTotalBH += (x_1_4[i,j,1]+x_1_5[i,j,1]+x_1_6[i,j,1]+x_2_4[i,j,1]+x_2_5[i,j,1]+x_2_6[i,j,1]+x_3_4[i,j,1]+x_3_5[i,j,1]+x_3_6[i,j,1]+x_1_4[i,j,2]+x_1_5[i,j,2]+x_1_6[i,j,2]+x_2_4[i,j,2]+x_2_5[i,j,2]+x_2_6[i,j,2]+x_3_4[i,j,2]+x_3_5[i,j,2]+x_3_6[i,j,2])          
        for j in range(N*K):
            for i in range(cargo_BH[j]):
                if i == k:
                    transOut1_1_4 += y_1_4[i,j,1]
                    transOut2_1_4 += y_1_4[i,j,2]
                    transOut1_1_5 += y_1_5[i,j,1]
                    transOut2_1_5 += y_1_5[i,j,2]
                    transOut1_1_6 += y_1_6[i,j,1]
                    transOut2_1_6 += y_1_6[i,j,2]
                    transOut1_2_4 += y_2_4[i,j,1]
                    transOut2_2_4 += y_2_4[i,j,2]
                    transOut1_2_5 += y_2_5[i,j,1]
                    transOut2_2_5 += y_2_5[i,j,2]
                    transOut1_2_6 += y_2_6[i,j,1]
                    transOut2_2_6 += y_2_6[i,j,2]
                    transOut1_3_4 += y_3_4[i,j,1]
                    transOut2_3_4 += y_3_4[i,j,2]
                    transOut1_3_5 += y_3_5[i,j,1]
                    transOut2_3_5 += y_3_5[i,j,2]
                    transOut1_3_6 += y_3_6[i,j,1]
                    transOut2_3_6 += y_3_6[i,j,2]
                    transOut1 += (y_1_4[i,j,1]+y_1_5[i,j,1]+y_1_6[i,j,1]+y_2_4[i,j,1]+y_2_5[i,j,1]+y_2_6[i,j,1]+y_3_4[i,j,1]+y_3_5[i,j,1]+y_3_6[i,j,1])
                    transOut2 += (y_1_4[i,j,2]+y_1_5[i,j,2]+y_1_6[i,j,2]+y_2_4[i,j,2]+y_2_5[i,j,2]+y_2_6[i,j,2]+y_3_4[i,j,2]+y_3_5[i,j,2]+y_3_6[i,j,2])
                    cargoTotalBH += (y_1_4[i,j,1]+y_1_5[i,j,1]+y_1_6[i,j,1]+y_2_4[i,j,1]+y_2_5[i,j,1]+y_2_6[i,j,1]+y_3_4[i,j,1]+y_3_5[i,j,1]+y_3_6[i,j,1]+y_1_4[i,j,2]+y_1_5[i,j,2]+y_1_6[i,j,2]+y_2_4[i,j,2]+y_2_5[i,j,2]+y_2_6[i,j,2]+y_3_4[i,j,2]+y_3_5[i,j,2]+y_3_6[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_1_4 <= TimeSensitive_Req_1_4[k])
        m.addConstr(transOut2_1_4 <= Economy_Req_1_4[k])
        m.addConstr(transOut1_1_5 <= TimeSensitive_Req_1_5[k])
        m.addConstr(transOut2_1_5 <= Economy_Req_1_5[k])
        m.addConstr(transOut1_1_6 <= TimeSensitive_Req_1_6[k])
        m.addConstr(transOut2_1_6 <= Economy_Req_1_6[k])
        m.addConstr(transOut1_2_4 <= TimeSensitive_Req_2_4[k])
        m.addConstr(transOut2_2_4 <= Economy_Req_2_4[k])
        m.addConstr(transOut1_2_5 <= TimeSensitive_Req_2_5[k])
        m.addConstr(transOut2_2_5 <= Economy_Req_2_5[k])
        m.addConstr(transOut1_2_6 <= TimeSensitive_Req_2_6[k])
        m.addConstr(transOut2_2_6 <= Economy_Req_2_6[k])
        m.addConstr(transOut1_3_4 <= TimeSensitive_Req_3_4[k])
        m.addConstr(transOut2_3_4 <= Economy_Req_3_4[k])
        m.addConstr(transOut1_3_5 <= TimeSensitive_Req_3_5[k])
        m.addConstr(transOut2_3_5 <= Economy_Req_3_5[k])
        m.addConstr(transOut1_3_6 <= TimeSensitive_Req_3_6[k])
        m.addConstr(transOut2_3_6 <= Economy_Req_3_6[k])
        trash = c3_1 * (TimeSensitive_Req_BH[k]-transOut1) + c3_2 * (Economy_Req_BH[k]-transOut2)
        C6 += trash
    for k in range(last_BS):
        transOut1 = 0
        transOut2 = 0
        transOut1_1_7 = 0
        transOut2_1_7 = 0
        transOut1_1_8 = 0
        transOut2_1_8 = 0
        transOut1_2_7 = 0
        transOut2_2_7 = 0
        transOut1_2_8 = 0
        transOut2_2_8 = 0
        transOut1_3_7 = 0
        transOut2_3_7 = 0
        transOut1_3_8 = 0
        transOut2_3_8 = 0
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                if i == k:
                    transOut1_1_7 += x_1_7[i,j,1]
                    transOut2_1_7 += x_1_7[i,j,2]
                    transOut1_1_8 += x_1_8[i,j,1]
                    transOut2_1_8 += x_1_8[i,j,2]
                    transOut1_2_7 += x_2_7[i,j,1]
                    transOut2_2_7 += x_2_7[i,j,2]
                    transOut1_2_8 += x_2_8[i,j,1]
                    transOut2_2_8 += x_2_8[i,j,2]
                    transOut1_3_7 += x_3_7[i,j,1]
                    transOut2_3_7 += x_3_7[i,j,2]
                    transOut1_3_8 += x_3_8[i,j,1]
                    transOut2_3_8 += x_3_8[i,j,2]
                    transOut1 += (x_1_7[i,j,1]+x_1_8[i,j,1]+x_2_7[i,j,1]+x_2_8[i,j,1]+x_3_7[i,j,1]+x_3_8[i,j,1])
                    transOut2 += (x_1_7[i,j,2]+x_1_8[i,j,2]+x_2_7[i,j,2]+x_2_8[i,j,2]+x_3_7[i,j,2]+x_3_8[i,j,2])
                    passengerTotalBS += (x_1_7[i,j,1]+x_1_8[i,j,1]+x_2_7[i,j,1]+x_2_8[i,j,1]+x_3_7[i,j,1]+x_3_8[i,j,1]+x_1_7[i,j,2]+x_1_8[i,j,2]+x_2_7[i,j,2]+x_2_8[i,j,2]+x_3_7[i,j,2]+x_3_8[i,j,2])
        for j in range(N*K):
            for i in range(cargo_BH[j]):
                if i == k:
                    transOut1_1_7 += y_1_7[i,j,1]
                    transOut2_1_7 += y_1_7[i,j,2]
                    transOut1_1_8 += y_1_8[i,j,1]
                    transOut2_1_8 += y_1_8[i,j,2]
                    transOut1_2_7 += y_2_7[i,j,1]
                    transOut2_2_7 += y_2_7[i,j,2]
                    transOut1_2_8 += y_2_8[i,j,1]
                    transOut2_2_8 += y_2_8[i,j,2]
                    transOut1_3_7 += y_3_7[i,j,1]
                    transOut2_3_7 += y_3_7[i,j,2]
                    transOut1_3_8 += y_3_8[i,j,1]
                    transOut2_3_8 += y_3_8[i,j,2]
                    transOut1 += (y_1_7[i,j,1]+y_1_8[i,j,1]+y_2_7[i,j,1]+y_2_8[i,j,1]+y_3_7[i,j,1]+y_3_8[i,j,1])
                    transOut2 += (y_1_7[i,j,2]+y_1_8[i,j,2]+y_2_7[i,j,2]+y_2_8[i,j,2]+y_3_7[i,j,2]+y_3_8[i,j,2])
                    cargoTotalBS += (y_1_7[i,j,1]+y_1_8[i,j,1]+y_2_7[i,j,1]+y_2_8[i,j,1]+y_3_7[i,j,1]+y_3_8[i,j,1]+y_1_7[i,j,2]+y_1_8[i,j,2]+y_2_7[i,j,2]+y_2_8[i,j,2]+y_3_7[i,j,2]+y_3_8[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_1_7 <= TimeSensitive_Req_1_7[k])
        m.addConstr(transOut2_1_7 <= Economy_Req_1_7[k])
        m.addConstr(transOut1_1_8 <= TimeSensitive_Req_1_8[k])
        m.addConstr(transOut2_1_8 <= Economy_Req_1_8[k])
        m.addConstr(transOut1_2_7 <= TimeSensitive_Req_2_7[k])
        m.addConstr(transOut2_2_7 <= Economy_Req_2_7[k])
        m.addConstr(transOut1_2_8 <= TimeSensitive_Req_2_8[k])
        m.addConstr(transOut2_2_8 <= Economy_Req_2_8[k])
        m.addConstr(transOut1_3_7 <= TimeSensitive_Req_3_7[k])
        m.addConstr(transOut2_3_7 <= Economy_Req_3_7[k])
        m.addConstr(transOut1_3_8 <= TimeSensitive_Req_3_8[k])
        m.addConstr(transOut2_3_8 <= Economy_Req_3_8[k])
        trash = c3_1 * (TimeSensitive_Req_BS[k]-transOut1) + c3_2 * (Economy_Req_BS[k]-transOut2)
        C6 += trash
    for k in range(last_HB):
        transOut1 = 0
        transOut2 = 0
        transOut1_4_1 = 0
        transOut2_4_1 = 0
        transOut1_4_2 = 0
        transOut2_4_2 = 0
        transOut1_4_3 = 0
        transOut2_4_3 = 0
        transOut1_5_1 = 0
        transOut2_5_1 = 0
        transOut1_5_2 = 0
        transOut2_5_2 = 0
        transOut1_5_3 = 0
        transOut2_5_3 = 0
        transOut1_6_1 = 0
        transOut2_6_1 = 0
        transOut1_6_2 = 0
        transOut2_6_2 = 0
        transOut1_6_3 = 0
        transOut2_6_3 = 0
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                if i == k:
                    transOut1_4_1 += x_4_1[i,j,1]
                    transOut2_4_1 += x_4_1[i,j,2]
                    transOut1_4_2 += x_4_2[i,j,1]
                    transOut2_4_2 += x_4_2[i,j,2]
                    transOut1_4_3 += x_4_3[i,j,1]
                    transOut2_4_3 += x_4_3[i,j,2]
                    transOut1_5_1 += x_5_1[i,j,1]
                    transOut2_5_1 += x_5_1[i,j,2]
                    transOut1_5_2 += x_5_2[i,j,1]
                    transOut2_5_2 += x_5_2[i,j,2]
                    transOut1_5_3 += x_5_3[i,j,1]
                    transOut2_5_3 += x_5_3[i,j,2]
                    transOut1_6_1 += x_6_1[i,j,1]
                    transOut2_6_1 += x_6_1[i,j,2]
                    transOut1_6_2 += x_6_2[i,j,1]
                    transOut2_6_2 += x_6_2[i,j,2]
                    transOut1_6_3 += x_6_3[i,j,1]
                    transOut2_6_3 += x_6_3[i,j,2]
                    transOut1 += x_4_1[i,j,1]+x_4_2[i,j,1]+x_4_3[i,j,1]+x_5_1[i,j,1]+x_5_2[i,j,1]+x_5_3[i,j,1]+x_6_1[i,j,1]+x_6_2[i,j,1]+x_6_3[i,j,1]
                    transOut2 += x_4_1[i,j,2]+x_4_2[i,j,2]+x_4_3[i,j,2]+x_5_1[i,j,2]+x_5_2[i,j,2]+x_5_3[i,j,2]+x_6_1[i,j,2]+x_6_2[i,j,2]+x_6_3[i,j,2]
                    passengerTotalHB += (x_4_1[i,j,1]+x_4_2[i,j,1]+x_4_3[i,j,1]+x_5_1[i,j,1]+x_5_2[i,j,1]+x_5_3[i,j,1]+x_6_1[i,j,1]+x_6_2[i,j,1]+x_6_3[i,j,1]+x_4_1[i,j,2]+x_4_2[i,j,2]+x_4_3[i,j,2]+x_5_1[i,j,2]+x_5_2[i,j,2]+x_5_3[i,j,2]+x_6_1[i,j,2]+x_6_2[i,j,2]+x_6_3[i,j,2])
        for j in range(N*K):
            for i in range(cargo_HS[j]):
                if i == k:
                    transOut1_4_1 += y_4_1[i,j,1]
                    transOut2_4_1 += y_4_1[i,j,2]
                    transOut1_4_2 += y_4_2[i,j,1]
                    transOut2_4_2 += y_4_2[i,j,2]
                    transOut1_4_3 += y_4_3[i,j,1]
                    transOut2_4_3 += y_4_3[i,j,2]
                    transOut1_5_1 += y_5_1[i,j,1]
                    transOut2_5_1 += y_5_1[i,j,2]
                    transOut1_5_2 += y_5_2[i,j,1]
                    transOut2_5_2 += y_5_2[i,j,2]
                    transOut1_5_3 += y_5_3[i,j,1]
                    transOut2_5_3 += y_5_3[i,j,2]
                    transOut1_6_1 += y_6_1[i,j,1]
                    transOut2_6_1 += y_6_1[i,j,2]
                    transOut1_6_2 += y_6_2[i,j,1]
                    transOut2_6_2 += y_6_2[i,j,2]
                    transOut1_6_3 += y_6_3[i,j,1]
                    transOut2_6_3 += y_6_3[i,j,2]
                    transOut1 += y_4_1[i,j,1]+y_4_2[i,j,1]+y_4_3[i,j,1]+y_5_1[i,j,1]+y_5_2[i,j,1]+y_5_3[i,j,1]+y_6_1[i,j,1]+y_6_2[i,j,1]+y_6_3[i,j,1]
                    transOut2 += y_4_1[i,j,2]+y_4_2[i,j,2]+y_4_3[i,j,2]+y_5_1[i,j,2]+y_5_2[i,j,2]+y_5_3[i,j,2]+y_6_1[i,j,2]+y_6_2[i,j,2]+y_6_3[i,j,2]
                    cargoTotalHB += (y_4_1[i,j,1]+y_4_2[i,j,1]+y_4_3[i,j,1]+y_5_1[i,j,1]+y_5_2[i,j,1]+y_5_3[i,j,1]+y_6_1[i,j,1]+y_6_2[i,j,1]+y_6_3[i,j,1]+y_4_1[i,j,2]+y_4_2[i,j,2]+y_4_3[i,j,2]+y_5_1[i,j,2]+y_5_2[i,j,2]+y_5_3[i,j,2]+y_6_1[i,j,2]+y_6_2[i,j,2]+y_6_3[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_4_1 <= TimeSensitive_Req_4_1[k])
        m.addConstr(transOut2_4_1 <= Economy_Req_4_1[k])
        m.addConstr(transOut1_4_2 <= TimeSensitive_Req_4_2[k])
        m.addConstr(transOut2_4_2 <= Economy_Req_4_2[k])
        m.addConstr(transOut1_4_3 <= TimeSensitive_Req_4_3[k])
        m.addConstr(transOut2_4_3 <= Economy_Req_4_3[k])
        m.addConstr(transOut1_5_1 <= TimeSensitive_Req_5_1[k])
        m.addConstr(transOut2_5_1 <= Economy_Req_5_1[k])
        m.addConstr(transOut1_5_2 <= TimeSensitive_Req_5_2[k])
        m.addConstr(transOut2_5_2 <= Economy_Req_5_2[k])
        m.addConstr(transOut1_5_3 <= TimeSensitive_Req_5_3[k])
        m.addConstr(transOut2_5_3 <= Economy_Req_5_3[k])
        m.addConstr(transOut1_6_1 <= TimeSensitive_Req_6_1[k])
        m.addConstr(transOut2_6_1 <= Economy_Req_6_1[k])
        m.addConstr(transOut1_6_2 <= TimeSensitive_Req_6_2[k])
        m.addConstr(transOut2_6_2 <= Economy_Req_6_2[k])
        m.addConstr(transOut1_6_3 <= TimeSensitive_Req_6_3[k])
        m.addConstr(transOut2_6_3 <= Economy_Req_6_3[k])
        trash = c3_1 * (TimeSensitive_Req_HB[k]-transOut1) + c3_2 * (Economy_Req_HB[k]-transOut2)
        C6 += trash
    for k in range(last_HS):
        transOut1 = 0
        transOut2 = 0
        transOut1_4_7 = 0
        transOut2_4_7 = 0
        transOut1_4_8 = 0
        transOut2_4_8 = 0
        transOut1_5_7 = 0
        transOut2_5_7 = 0
        transOut1_5_8 = 0
        transOut2_5_8 = 0
        transOut1_6_7 = 0
        transOut2_6_7 = 0
        transOut1_6_8 = 0
        transOut2_6_8 = 0
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                if i == k:
                    transOut1_4_7 += x_4_7[i,j,1]
                    transOut2_4_7 += x_4_7[i,j,2]
                    transOut1_4_8 += x_4_8[i,j,1]
                    transOut2_4_8 += x_4_8[i,j,2]
                    transOut1_5_7 += x_5_7[i,j,1]
                    transOut2_5_7 += x_5_7[i,j,2]
                    transOut1_5_8 += x_5_8[i,j,1]
                    transOut2_5_8 += x_5_8[i,j,2]
                    transOut1_6_7 += x_6_7[i,j,1]
                    transOut2_6_7 += x_6_7[i,j,2]
                    transOut1_6_8 += x_6_8[i,j,1]
                    transOut2_6_8 += x_6_8[i,j,2]
                    transOut1 += x_4_7[i,j,1]+x_4_8[i,j,1]+x_5_7[i,j,1]+x_5_8[i,j,1]+x_6_7[i,j,1]+x_6_8[i,j,1]
                    transOut2 += x_4_7[i,j,2]+x_4_8[i,j,2]+x_5_7[i,j,2]+x_5_8[i,j,2]+x_6_7[i,j,2]+x_6_8[i,j,2]
                    passengerTotalHS += (x_4_7[i,j,1]+x_4_8[i,j,1]+x_5_7[i,j,1]+x_5_8[i,j,1]+x_6_7[i,j,1]+x_6_8[i,j,1]+x_4_7[i,j,2]+x_4_8[i,j,2]+x_5_7[i,j,2]+x_5_8[i,j,2]+x_6_7[i,j,2]+x_6_8[i,j,2])
        for j in range(N*K):
            for i in range(cargo_HS[j]):
                if i == k:
                    transOut1_4_7 += y_4_7[i,j,1]
                    transOut2_4_7 += y_4_7[i,j,2]
                    transOut1_4_8 += y_4_8[i,j,1]
                    transOut2_4_8 += y_4_8[i,j,2]
                    transOut1_5_7 += y_5_7[i,j,1]
                    transOut2_5_7 += y_5_7[i,j,2]
                    transOut1_5_8 += y_5_8[i,j,1]
                    transOut2_5_8 += y_5_8[i,j,2]
                    transOut1_6_7 += y_6_7[i,j,1]
                    transOut2_6_7 += y_6_7[i,j,2]
                    transOut1_6_8 += y_6_8[i,j,1]
                    transOut2_6_8 += y_6_8[i,j,2]
                    transOut1 += y_4_7[i,j,1]+y_4_8[i,j,1]+y_5_7[i,j,1]+y_5_8[i,j,1]+y_6_7[i,j,1]+y_6_8[i,j,1]
                    transOut2 += y_4_7[i,j,2]+y_4_8[i,j,2]+y_5_7[i,j,2]+y_5_8[i,j,2]+y_6_7[i,j,2]+y_6_8[i,j,2]
                    cargoTotalHS += (y_4_7[i,j,1]+y_4_8[i,j,1]+y_5_7[i,j,1]+y_5_8[i,j,1]+y_6_7[i,j,1]+y_6_8[i,j,1]+y_4_7[i,j,2]+y_4_8[i,j,2]+y_5_7[i,j,2]+y_5_8[i,j,2]+y_6_7[i,j,2]+y_6_8[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_4_7 <= TimeSensitive_Req_4_7[k])
        m.addConstr(transOut2_4_7 <= Economy_Req_4_7[k])
        m.addConstr(transOut1_4_8 <= TimeSensitive_Req_4_8[k])
        m.addConstr(transOut2_4_8 <= Economy_Req_4_8[k])
        m.addConstr(transOut1_5_7 <= TimeSensitive_Req_5_7[k])
        m.addConstr(transOut2_5_7 <= Economy_Req_5_7[k])
        m.addConstr(transOut1_5_8 <= TimeSensitive_Req_5_8[k])
        m.addConstr(transOut2_5_8 <= Economy_Req_5_8[k])
        m.addConstr(transOut1_6_7 <= TimeSensitive_Req_6_7[k])
        m.addConstr(transOut2_6_7 <= Economy_Req_6_7[k])
        m.addConstr(transOut1_6_8 <= TimeSensitive_Req_6_8[k])
        m.addConstr(transOut2_6_8 <= Economy_Req_6_8[k])
        trash = c3_1 * (TimeSensitive_Req_HS[k]-transOut1) + c3_2 * (Economy_Req_HS[k]-transOut2)
        C6 += trash
    for k in range(last_SB):
        transOut1 = 0
        transOut2 = 0
        transOut1_7_1 = 0
        transOut2_7_1 = 0
        transOut1_7_2 = 0
        transOut2_7_2 = 0
        transOut1_7_3 = 0
        transOut2_7_3 = 0
        transOut1_8_1 = 0
        transOut2_8_1 = 0
        transOut1_8_2 = 0
        transOut2_8_2 = 0
        transOut1_8_3 = 0
        transOut2_8_3 = 0
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                if i == k:
                    transOut1_7_1 += x_7_1[i,j,1]
                    transOut2_7_1 += x_7_1[i,j,2]
                    transOut1_7_2 += x_7_2[i,j,1]
                    transOut2_7_2 += x_7_2[i,j,2]
                    transOut1_7_3 += x_7_3[i,j,1]
                    transOut2_7_3 += x_7_3[i,j,2]
                    transOut1_8_1 += x_8_1[i,j,1]
                    transOut2_8_1 += x_8_1[i,j,2]
                    transOut1_8_2 += x_8_2[i,j,1]
                    transOut2_8_2 += x_8_2[i,j,2]
                    transOut1_8_3 += x_8_3[i,j,1]
                    transOut2_8_3 += x_8_3[i,j,2]
                    transOut1 += x_7_1[i,j,1]+x_7_2[i,j,1]+x_7_3[i,j,1]+x_8_1[i,j,1]+x_8_2[i,j,1]+x_8_3[i,j,1]
                    transOut2 += x_7_1[i,j,2]+x_7_2[i,j,2]+x_7_3[i,j,2]+x_8_1[i,j,2]+x_8_2[i,j,2]+x_8_3[i,j,2]
                    passengerTotalSB += (x_7_1[i,j,1]+x_7_2[i,j,1]+x_7_3[i,j,1]+x_8_1[i,j,1]+x_8_2[i,j,1]+x_8_3[i,j,1]+x_7_1[i,j,2]+x_7_2[i,j,2]+x_7_3[i,j,2]+x_8_1[i,j,2]+x_8_2[i,j,2]+x_8_3[i,j,2])
        for j in range(N*K):
            for i in range(cargo_SB[j]):
                if i == k:
                    transOut1_7_1 += y_7_1[i,j,1]
                    transOut2_7_1 += y_7_1[i,j,2]
                    transOut1_7_2 += y_7_2[i,j,1]
                    transOut2_7_2 += y_7_2[i,j,2]
                    transOut1_7_3 += y_7_3[i,j,1]
                    transOut2_7_3 += y_7_3[i,j,2]
                    transOut1_8_1 += y_8_1[i,j,1]
                    transOut2_8_1 += y_8_1[i,j,2]
                    transOut1_8_2 += y_8_2[i,j,1]
                    transOut2_8_2 += y_8_2[i,j,2]
                    transOut1_8_3 += y_8_3[i,j,1]
                    transOut2_8_3 += y_8_3[i,j,2]
                    transOut1 += y_7_1[i,j,1]+y_7_2[i,j,1]+y_7_3[i,j,1]+y_8_1[i,j,1]+y_8_2[i,j,1]+y_8_3[i,j,1]
                    transOut2 += y_7_1[i,j,2]+y_7_2[i,j,2]+y_7_3[i,j,2]+y_8_1[i,j,2]+y_8_2[i,j,2]+y_8_3[i,j,2]
                    cargoTotalSB += (y_7_1[i,j,1]+y_7_2[i,j,1]+y_7_3[i,j,1]+y_8_1[i,j,1]+y_8_2[i,j,1]+y_8_3[i,j,1]+y_7_1[i,j,2]+y_7_2[i,j,2]+y_7_3[i,j,2]+y_8_1[i,j,2]+y_8_2[i,j,2]+y_8_3[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_7_1 <= TimeSensitive_Req_7_1[k])
        m.addConstr(transOut2_7_1 <= Economy_Req_7_1[k])
        m.addConstr(transOut1_7_2 <= TimeSensitive_Req_7_2[k])
        m.addConstr(transOut2_7_2 <= Economy_Req_7_2[k])
        m.addConstr(transOut1_7_3 <= TimeSensitive_Req_7_3[k])
        m.addConstr(transOut2_7_3 <= Economy_Req_7_3[k])
        m.addConstr(transOut1_8_1 <= TimeSensitive_Req_8_1[k])
        m.addConstr(transOut2_8_1 <= Economy_Req_8_1[k])
        m.addConstr(transOut1_8_2 <= TimeSensitive_Req_8_2[k])
        m.addConstr(transOut2_8_2 <= Economy_Req_8_2[k])
        m.addConstr(transOut1_8_3 <= TimeSensitive_Req_8_3[k])
        m.addConstr(transOut2_8_3 <= Economy_Req_8_3[k])
        trash = c3_1 * (TimeSensitive_Req_SB[k]-transOut1) + c3_2 * (Economy_Req_SB[k]-transOut2)
        C6 += trash
    for k in range(last_SH):
        transOut1 = 0
        transOut2 = 0
        transOut1_7_4 = 0
        transOut2_7_4 = 0
        transOut1_7_5 = 0
        transOut2_7_5 = 0
        transOut1_7_6 = 0
        transOut2_7_6 = 0
        transOut1_8_4 = 0
        transOut2_8_4 = 0
        transOut1_8_5 = 0
        transOut2_8_5 = 0
        transOut1_8_6 = 0
        transOut2_8_6 = 0
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                if i == k:
                    transOut1_7_4 += x_7_4[i,j,1]
                    transOut2_7_4 += x_7_4[i,j,2]
                    transOut1_7_5 += x_7_5[i,j,1]
                    transOut2_7_5 += x_7_5[i,j,2]
                    transOut1_7_6 += x_7_6[i,j,1]
                    transOut2_7_6 += x_7_6[i,j,2]
                    transOut1_8_4 += x_8_4[i,j,1]
                    transOut2_8_4 += x_8_4[i,j,2]
                    transOut1_8_5 += x_8_5[i,j,1]
                    transOut2_8_5 += x_8_5[i,j,2]
                    transOut1_8_6 += x_8_6[i,j,1]
                    transOut2_8_6 += x_8_6[i,j,2]
                    transOut1 += x_7_4[i,j,1]+x_7_5[i,j,1]+x_7_6[i,j,1]+x_8_4[i,j,1]+x_8_5[i,j,1]+x_8_6[i,j,1]
                    transOut2 += x_7_4[i,j,2]+x_7_5[i,j,2]+x_7_6[i,j,2]+x_8_4[i,j,2]+x_8_5[i,j,2]+x_8_6[i,j,2]
                    passengerTotalSH += (x_7_4[i,j,1]+x_7_5[i,j,1]+x_7_6[i,j,1]+x_8_4[i,j,1]+x_8_5[i,j,1]+x_8_6[i,j,1]+x_7_4[i,j,2]+x_7_5[i,j,2]+x_7_6[i,j,2]+x_8_4[i,j,2]+x_8_5[i,j,2]+x_8_6[i,j,2])
        for j in range(N*K):
            for i in range(cargo_SB[j]):
                if i == k:
                    transOut1_7_4 += y_7_4[i,j,1]
                    transOut2_7_4 += y_7_4[i,j,2]
                    transOut1_7_5 += y_7_5[i,j,1]
                    transOut2_7_5 += y_7_5[i,j,2]
                    transOut1_7_6 += y_7_6[i,j,1]
                    transOut2_7_6 += y_7_6[i,j,2]
                    transOut1_8_4 += y_8_4[i,j,1]
                    transOut2_8_4 += y_8_4[i,j,2]
                    transOut1_8_5 += y_8_5[i,j,1]
                    transOut2_8_5 += y_8_5[i,j,2]
                    transOut1_8_6 += y_8_6[i,j,1]
                    transOut2_8_6 += y_8_6[i,j,2]
                    transOut1 += y_7_4[i,j,1]+y_7_5[i,j,1]+y_7_6[i,j,1]+y_8_4[i,j,1]+y_8_5[i,j,1]+y_8_6[i,j,1]
                    transOut2 += y_7_4[i,j,2]+y_7_5[i,j,2]+y_7_6[i,j,2]+y_8_4[i,j,2]+y_8_5[i,j,2]+y_8_6[i,j,2]
                    cargoTotalSH += (y_7_4[i,j,1]+y_7_5[i,j,1]+y_7_6[i,j,1]+y_8_4[i,j,1]+y_8_5[i,j,1]+y_8_6[i,j,1]+y_7_4[i,j,2]+y_7_5[i,j,2]+y_7_6[i,j,2]+y_8_4[i,j,2]+y_8_5[i,j,2]+y_8_6[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_7_4 <= TimeSensitive_Req_7_4[k])
        m.addConstr(transOut2_7_4 <= Economy_Req_7_4[k])
        m.addConstr(transOut1_7_5 <= TimeSensitive_Req_7_5[k])
        m.addConstr(transOut2_7_5 <= Economy_Req_7_5[k])
        m.addConstr(transOut1_7_6 <= TimeSensitive_Req_7_6[k])
        m.addConstr(transOut2_7_6 <= Economy_Req_7_6[k])
        m.addConstr(transOut1_8_4 <= TimeSensitive_Req_8_4[k])
        m.addConstr(transOut2_8_4 <= Economy_Req_8_4[k])
        m.addConstr(transOut1_8_5 <= TimeSensitive_Req_8_5[k])
        m.addConstr(transOut2_8_5 <= Economy_Req_8_5[k])
        m.addConstr(transOut1_8_6 <= TimeSensitive_Req_8_6[k])
        m.addConstr(transOut2_8_6 <= Economy_Req_8_6[k])
        trash = c3_1 * (TimeSensitive_Req_SH[k]-transOut1) + c3_2 * (Economy_Req_SH[k]-transOut2)
        C6 += trash
    
    desertTotalBH = sum(forecast_1_4_K)+sum(forecast_1_5_K)+sum(forecast_1_6_K)+sum(forecast_2_4_K)+sum(forecast_2_5_K)+sum(forecast_2_6_K)+sum(forecast_3_4_K)+sum(forecast_3_5_K)+sum(forecast_3_6_K)-passengerTotalBH-cargoTotalBH
    desertTotalBS = sum(forecast_1_7_K)+sum(forecast_1_8_K)+sum(forecast_2_7_K)+sum(forecast_2_8_K)+sum(forecast_3_7_K)+sum(forecast_3_8_K)-passengerTotalBS-cargoTotalBS
    desertTotalHB = sum(forecast_4_1_K)+sum(forecast_4_2_K)+sum(forecast_4_3_K)+sum(forecast_5_1_K)+sum(forecast_5_2_K)+sum(forecast_5_3_K)+sum(forecast_6_1_K)+sum(forecast_6_2_K)+sum(forecast_6_3_K)-passengerTotalHB-cargoTotalHB
    desertTotalHS = sum(forecast_4_7_K)+sum(forecast_4_8_K)+sum(forecast_5_7_K)+sum(forecast_5_8_K)+sum(forecast_6_7_K)+sum(forecast_6_8_K)-passengerTotalHS-cargoTotalHS
    desertTotalSB = sum(forecast_7_1_K)+sum(forecast_7_2_K)+sum(forecast_7_3_K)+sum(forecast_8_1_K)+sum(forecast_8_2_K)+sum(forecast_8_3_K)-passengerTotalSB-cargoTotalSB
    desertTotalSH = sum(forecast_7_4_K)+sum(forecast_7_5_K)+sum(forecast_7_6_K)+sum(forecast_8_4_K)+sum(forecast_8_5_K)+sum(forecast_8_6_K)-passengerTotalSH-cargoTotalSH
                      
    # 本周期内无法运完的货物的仓储成本和预期逾期成本
    left_1_4 = 0
    left_1_5 = 0
    left_1_6 = 0
    left_1_7 = 0
    left_1_8 = 0
    left_2_4 = 0
    left_2_5 = 0
    left_2_6 = 0
    left_2_7 = 0
    left_2_8 = 0
    left_3_4 = 0
    left_3_5 = 0
    left_3_6 = 0
    left_3_7 = 0
    left_3_8 = 0
    left_4_1 = 0
    left_4_2 = 0
    left_4_3 = 0
    left_4_7 = 0
    left_4_8 = 0
    left_5_1 = 0
    left_5_2 = 0
    left_5_3 = 0
    left_5_7 = 0
    left_5_8 = 0
    left_6_1 = 0
    left_6_2 = 0
    left_6_3 = 0
    left_6_7 = 0
    left_6_8 = 0
    left_7_1 = 0
    left_7_2 = 0
    left_7_3 = 0
    left_7_4 = 0
    left_7_5 = 0
    left_7_6 = 0
    left_8_1 = 0
    left_8_2 = 0
    left_8_3 = 0
    left_8_4 = 0
    left_8_5 = 0
    left_8_6 = 0                 
    for i in range(last_BH, 24 * K):
        left_1_4 += forecast_1_4_K[i]
        left_1_5 += forecast_1_5_K[i]
        left_1_6 += forecast_1_6_K[i]
        left_2_4 += forecast_2_4_K[i]
        left_2_5 += forecast_2_5_K[i]
        left_2_6 += forecast_2_6_K[i]
        left_3_4 += forecast_3_4_K[i]
        left_3_5 += forecast_3_5_K[i]
        left_3_6 += forecast_3_6_K[i]      
        C1 += c1 * (forecast_1_4_K[i]+forecast_1_5_K[i]+forecast_1_6_K[i]+forecast_2_4_K[i]+forecast_2_5_K[i]+forecast_2_6_K[i]+forecast_3_4_K[i]+forecast_3_5_K[i]+forecast_3_6_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_BH[i] + c2_2 * Economy_Req_BH[i]) * (24 * K - i + first_BH - 1) * (1 - (i + 1) / (24 * K))
    for i in range(last_BS, 24 * K):
        left_1_7 += forecast_1_7_K[i]
        left_1_8 += forecast_1_8_K[i]
        left_2_7 += forecast_2_7_K[i]
        left_2_8 += forecast_2_8_K[i]
        left_3_7 += forecast_3_7_K[i]
        left_3_8 += forecast_3_8_K[i]
        C1 += c1 * (forecast_1_7_K[i]+forecast_1_8_K[i]+forecast_2_7_K[i]+forecast_2_8_K[i]+forecast_3_7_K[i]+forecast_3_8_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_BS[i] + c2_2 * Economy_Req_BS[i]) * (24 * K - i + first_BS - 1) * (1 - (i + 1) / (24 * K))  
    for i in range(last_HB, 24 * K):
        left_4_1 += forecast_4_1_K[i]
        left_4_2 += forecast_4_2_K[i]
        left_4_3 += forecast_4_3_K[i]
        left_5_1 += forecast_5_1_K[i]
        left_5_2 += forecast_5_2_K[i]
        left_5_3 += forecast_5_3_K[i]
        left_6_1 += forecast_6_1_K[i]
        left_6_2 += forecast_6_2_K[i]
        left_6_3 += forecast_6_3_K[i]
        C1 += c1 * (forecast_4_1_K[i]+forecast_4_2_K[i]+forecast_4_3_K[i]+forecast_5_1_K[i]+forecast_5_2_K[i]+forecast_5_3_K[i]+forecast_6_1_K[i]+forecast_6_2_K[i]+forecast_6_3_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_HB[i] + c2_2 * Economy_Req_HB[i]) * (24 * K - i + first_HB - 1) * (1 - (i + 1) / (24 * K))
    for i in range(last_HS, 24 * K):
        left_4_7 += forecast_4_7_K[i]
        left_4_8 += forecast_4_8_K[i]
        left_5_7 += forecast_5_7_K[i]
        left_5_8 += forecast_5_8_K[i]
        left_6_7 += forecast_6_7_K[i]
        left_6_8 += forecast_6_8_K[i]  
        C1 += c1 * (forecast_4_7_K[i]+forecast_4_8_K[i]+forecast_5_7_K[i]+forecast_5_8_K[i]+forecast_6_7_K[i]+forecast_6_8_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_HS[i] + c2_2 * Economy_Req_HS[i]) * (24 * K - i + first_HS - 1) * (1 - (i + 1) / (24 * K))
    for i in range(last_SB, 24 * K):
        left_7_1 += forecast_7_1_K[i]
        left_7_2 += forecast_7_2_K[i]
        left_7_3 += forecast_7_3_K[i]
        left_8_1 += forecast_8_1_K[i]
        left_8_2 += forecast_8_2_K[i]
        left_8_3 += forecast_8_3_K[i]   
        C1 += c1 * (forecast_7_1_K[i]+forecast_7_2_K[i]+forecast_7_3_K[i]+forecast_8_1_K[i]+forecast_8_2_K[i]+forecast_8_3_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_SB[i] + c2_2 * Economy_Req_SB[i]) * (24 * K - i + first_SB - 1) * (1 - (i + 1) / (24 * K))
    for i in range(last_SH, 24 * K):
        left_7_4 += forecast_7_4_K[i]
        left_7_5 += forecast_7_5_K[i]
        left_7_6 += forecast_7_6_K[i]
        left_8_4 += forecast_8_4_K[i]
        left_8_5 += forecast_8_5_K[i]
        left_8_6 += forecast_8_6_K[i]
        C1 += c1 * (forecast_7_4_K[i]+forecast_7_5_K[i]+forecast_7_6_K[i]+forecast_8_4_K[i]+forecast_8_5_K[i]+forecast_8_6_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_SH[i] + c2_2 * Economy_Req_SH[i]) * (24 * K - i + first_SH - 1) * (1 - (i + 1) / (24 * K))       
                
    left_to_leave_1_4.append(left_1_4)
    left_to_leave_1_5.append(left_1_5)
    left_to_leave_1_6.append(left_1_6)
    left_to_leave_1_7.append(left_1_7)
    left_to_leave_1_8.append(left_1_8)
    left_to_leave_2_4.append(left_2_4)
    left_to_leave_2_5.append(left_2_5)
    left_to_leave_2_6.append(left_2_6)
    left_to_leave_2_7.append(left_2_7)
    left_to_leave_2_8.append(left_2_8)
    left_to_leave_3_4.append(left_3_4)
    left_to_leave_3_5.append(left_3_5)
    left_to_leave_3_6.append(left_3_6)
    left_to_leave_3_7.append(left_3_7)
    left_to_leave_3_8.append(left_3_8)
    left_to_leave_4_1.append(left_4_1)
    left_to_leave_4_2.append(left_4_2)
    left_to_leave_4_3.append(left_4_3)
    left_to_leave_4_7.append(left_4_7)
    left_to_leave_4_8.append(left_4_8)
    left_to_leave_5_1.append(left_5_1)
    left_to_leave_5_2.append(left_5_2)
    left_to_leave_5_3.append(left_5_3)
    left_to_leave_5_7.append(left_5_7)
    left_to_leave_5_8.append(left_5_8)
    left_to_leave_6_1.append(left_6_1)
    left_to_leave_6_2.append(left_6_2)
    left_to_leave_6_3.append(left_6_3)
    left_to_leave_6_7.append(left_6_7)
    left_to_leave_6_8.append(left_6_8)
    left_to_leave_7_1.append(left_7_1)
    left_to_leave_7_2.append(left_7_2)
    left_to_leave_7_3.append(left_7_3)
    left_to_leave_7_4.append(left_7_4)
    left_to_leave_7_5.append(left_7_5)
    left_to_leave_7_6.append(left_7_6)
    left_to_leave_8_1.append(left_8_1)
    left_to_leave_8_2.append(left_8_2)
    left_to_leave_8_3.append(left_8_3)
    left_to_leave_8_4.append(left_8_4)
    left_to_leave_8_5.append(left_8_5)
    left_to_leave_8_6.append(left_8_6)
                      
    # 计算每个航段上客机和货机运输的量
    passengerTrans_BH = 0
    passengerTrans_BS = 0
    passengerTrans_HB = 0
    passengerTrans_HS = 0
    passengerTrans_SB = 0
    passengerTrans_SH = 0
    cargoTrans = 0
    cargoTrans_BH = 0
    cargoTrans_HS = 0
    cargoTrans_SB = 0
    for w in range(1,3):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                passengerTrans_BH += (x_1_4[i,j,w]+x_1_5[i,j,w]+x_1_6[i,j,w]+x_2_4[i,j,w]+x_2_5[i,j,w]+x_2_6[i,j,w]+x_3_4[i,j,w]+x_3_5[i,j,w]+x_3_6[i,j,w])
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                passengerTrans_BS += (x_1_7[i,j,w]+x_1_8[i,j,w]+x_2_7[i,j,w]+x_2_8[i,j,w]+x_3_7[i,j,w]+x_3_8[i,j,w])
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                passengerTrans_HB += (x_4_1[i,j,w]+x_4_2[i,j,w]+x_4_3[i,j,w]+x_5_1[i,j,w]+x_5_2[i,j,w]+x_5_3[i,j,w]+x_6_1[i,j,w]+x_6_2[i,j,w]+x_6_3[i,j,w])
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                passengerTrans_HS += (x_4_7[i,j,w]+x_4_8[i,j,w]+x_5_7[i,j,w]+x_5_8[i,j,w]+x_6_7[i,j,w]+x_6_8[i,j,w])
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                passengerTrans_SB += (x_7_1[i,j,w]+x_7_2[i,j,w]+x_7_3[i,j,w]+x_8_1[i,j,w]+x_8_2[i,j,w]+x_8_3[i,j,w])
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                passengerTrans_SH += (x_7_4[i,j,w]+x_7_5[i,j,w]+x_7_6[i,j,w]+x_8_4[i,j,w]+x_8_5[i,j,w]+x_8_6[i,j,w])
        for j in range(N*K):
            for i in range(cargo_BH[j]):
                cargoTrans += (y_1_4[i,j,w]+y_1_5[i,j,w]+y_1_6[i,j,w]+y_2_4[i,j,w]+y_2_5[i,j,w]+y_2_6[i,j,w]+y_3_4[i,j,w]+y_3_5[i,j,w]+y_3_6[i,j,w]+y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w])
                cargoTrans_BH += (y_1_4[i,j,w]+y_1_5[i,j,w]+y_1_6[i,j,w]+y_2_4[i,j,w]+y_2_5[i,j,w]+y_2_6[i,j,w]+y_3_4[i,j,w]+y_3_5[i,j,w]+y_3_6[i,j,w]+y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w])
                cargoTrans_HS += (y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w])
            for i in range(cargo_HS[j]):
                cargoTrans += (y_4_7[i,j,w]+y_4_8[i,j,w]+y_5_7[i,j,w]+y_5_8[i,j,w]+y_6_7[i,j,w]+y_6_8[i,j,w]+y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w])
                cargoTrans_HS += (y_4_7[i,j,w]+y_4_8[i,j,w]+y_5_7[i,j,w]+y_5_8[i,j,w]+y_6_7[i,j,w]+y_6_8[i,j,w]+y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w])
                cargoTrans_SB += (y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w])
            for i in range(cargo_SB[j]):
                cargoTrans += (y_7_1[i,j,w]+y_7_2[i,j,w]+y_7_3[i,j,w]+y_8_1[i,j,w]+y_8_2[i,j,w]+y_8_3[i,j,w]+y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w])
                cargoTrans_SB += (y_7_1[i,j,w]+y_7_2[i,j,w]+y_7_3[i,j,w]+y_8_1[i,j,w]+y_8_2[i,j,w]+y_8_3[i,j,w]+y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w])
                cargoTrans_BH += (y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w])
    passengerTrans = passengerTrans_BH+passengerTrans_BS+passengerTrans_HB+passengerTrans_HS+passengerTrans_SB+passengerTrans_SH
    
    # 只有客机运输成本是分段计价的
    zBH = {}
    zBS = {}
    zHB = {}
    zHS = {}
    zSB = {}
    zSH = {}
    A_BH = m.addVars(range(len(FR_BH)), vtype=GRB.BINARY)
    A_BS = m.addVars(range(len(FR_BS)), vtype=GRB.BINARY)
    A_HB = m.addVars(range(len(FR_HB)), vtype=GRB.BINARY)
    A_HS = m.addVars(range(len(FR_HS)), vtype=GRB.BINARY)
    A_SB = m.addVars(range(len(FR_SB)), vtype=GRB.BINARY)
    A_SH = m.addVars(range(len(FR_SH)), vtype=GRB.BINARY)
    
    for r in range(len(FR_BH)):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                zBH[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                zBS[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                zHB[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                zHS[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                zSB[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                zSH[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                
    m.addConstr(gp.quicksum(A_BH[r] for r in range(len(FR_BH))) == 1)
    m.addConstr(gp.quicksum(A_BS[r] for r in range(len(FR_BS))) == 1)
    m.addConstr(gp.quicksum(A_HB[r] for r in range(len(FR_HB))) == 1)
    m.addConstr(gp.quicksum(A_HS[r] for r in range(len(FR_HS))) == 1)
    m.addConstr(gp.quicksum(A_SB[r] for r in range(len(FR_SB))) == 1)
    m.addConstr(gp.quicksum(A_SH[r] for r in range(len(FR_SH))) == 1)
    
    for r in range(len(FR_BH)):
        for j in range(len(passengerTime_BH)):
            m.addConstr(gp.quicksum(x_1_4[i,j,w]+x_1_5[i,j,w]+x_1_6[i,j,w]+x_2_4[i,j,w]+x_2_5[i,j,w]+x_2_6[i,j,w]+x_3_4[i,j,w]+x_3_5[i,j,w]+x_3_6[i,j,w] for w in range(1,3) for i in range(passengerTime_BH[j])) >= lBH[r] * A_BH[r])
        for j in range(len(passengerTime_BS)):
            m.addConstr(gp.quicksum(x_1_7[i,j,w]+x_1_8[i,j,w]+x_2_7[i,j,w]+x_2_8[i,j,w]+x_3_7[i,j,w]+x_3_8[i,j,w] for w in range(1,3) for i in range(passengerTime_BS[j])) >= lBS[r] * A_BS[r])
        for j in range(len(passengerTime_HB)):
            m.addConstr(gp.quicksum(x_4_1[i,j,w]+x_4_2[i,j,w]+x_4_3[i,j,w]+x_5_1[i,j,w]+x_5_2[i,j,w]+x_5_3[i,j,w]+x_6_1[i,j,w]+x_6_2[i,j,w]+x_6_3[i,j,w] for w in range(1,3) for i in range(passengerTime_HB[j])) >= lHB[r] * A_HB[r])
        for j in range(len(passengerTime_HS)):
            m.addConstr(gp.quicksum(x_4_7[i,j,w]+x_4_8[i,j,w]+x_5_7[i,j,w]+x_5_8[i,j,w]+x_6_7[i,j,w]+x_6_8[i,j,w] for w in range(1,3) for i in range(passengerTime_HS[j])) >= lHS[r] * A_HS[r])
        for j in range(len(passengerTime_SB)):
            m.addConstr(gp.quicksum(x_7_1[i,j,w]+x_7_2[i,j,w]+x_7_3[i,j,w]+x_8_1[i,j,w]+x_8_2[i,j,w]+x_8_3[i,j,w] for w in range(1,3) for i in range(passengerTime_SB[j])) >= lSB[r] * A_SB[r])
        for j in range(len(passengerTime_SH)):
            m.addConstr(gp.quicksum(x_7_4[i,j,w]+x_7_5[i,j,w]+x_7_6[i,j,w]+x_8_4[i,j,w]+x_8_5[i,j,w]+x_8_6[i,j,w] for w in range(1,3) for i in range(passengerTime_SH[j])) >= lSH[r] * A_SH[r])
        
    for r in range(len(FR_BH)):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                m.addConstr(zBH[i,j,r] <= A_BH[r] * forecast_BH_K[i])
                m.addConstr(zBH[i,j,r] <= (x_1_4[i,j,1]+x_1_5[i,j,1]+x_1_6[i,j,1]+x_2_4[i,j,1]+x_2_5[i,j,1]+x_2_6[i,j,1]+x_3_4[i,j,1]+x_3_5[i,j,1]+x_3_6[i,j,1]+x_1_4[i,j,2]+x_1_5[i,j,2]+x_1_6[i,j,2]+x_2_4[i,j,2]+x_2_5[i,j,2]+x_2_6[i,j,2]+x_3_4[i,j,2]+x_3_5[i,j,2]+x_3_6[i,j,2]))
                m.addConstr(zBH[i,j,r] >= (x_1_4[i,j,1]+x_1_5[i,j,1]+x_1_6[i,j,1]+x_2_4[i,j,1]+x_2_5[i,j,1]+x_2_6[i,j,1]+x_3_4[i,j,1]+x_3_5[i,j,1]+x_3_6[i,j,1]+x_1_4[i,j,2]+x_1_5[i,j,2]+x_1_6[i,j,2]+x_2_4[i,j,2]+x_2_5[i,j,2]+x_2_6[i,j,2]+x_3_4[i,j,2]+x_3_5[i,j,2]+x_3_6[i,j,2] - forecast_BH_K[i] * (1 - A_BH[r])))
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                m.addConstr(zBS[i,j,r] <= A_BS[r] * forecast_BS_K[i])
                m.addConstr(zBS[i,j,r] <= (x_1_7[i,j,1]+x_1_8[i,j,1]+x_2_7[i,j,1]+x_2_8[i,j,1]+x_3_7[i,j,1]+x_3_8[i,j,1]+x_1_7[i,j,2]+x_1_8[i,j,2]+x_2_7[i,j,2]+x_2_8[i,j,2]+x_3_7[i,j,2]+x_3_8[i,j,2]))
                m.addConstr(zBS[i,j,r] >= (x_1_7[i,j,1]+x_1_8[i,j,1]+x_2_7[i,j,1]+x_2_8[i,j,1]+x_3_7[i,j,1]+x_3_8[i,j,1]+x_1_7[i,j,2]+x_1_8[i,j,2]+x_2_7[i,j,2]+x_2_8[i,j,2]+x_3_7[i,j,2]+x_3_8[i,j,2] - forecast_BS_K[i] * (1 - A_BS[r])))
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                m.addConstr(zHB[i,j,r] <= A_HB[r] * forecast_HB_K[i])
                m.addConstr(zHB[i,j,r] <= (x_4_1[i,j,1]+x_4_2[i,j,1]+x_4_3[i,j,1]+x_5_1[i,j,1]+x_5_2[i,j,1]+x_5_3[i,j,1]+x_6_1[i,j,1]+x_6_2[i,j,1]+x_6_3[i,j,1]+x_4_1[i,j,2]+x_4_2[i,j,2]+x_4_3[i,j,2]+x_5_1[i,j,2]+x_5_2[i,j,2]+x_5_3[i,j,2]+x_6_1[i,j,2]+x_6_2[i,j,2]+x_6_3[i,j,2]))
                m.addConstr(zHB[i,j,r] >= (x_4_1[i,j,1]+x_4_2[i,j,1]+x_4_3[i,j,1]+x_5_1[i,j,1]+x_5_2[i,j,1]+x_5_3[i,j,1]+x_6_1[i,j,1]+x_6_2[i,j,1]+x_6_3[i,j,1]+x_4_1[i,j,2]+x_4_2[i,j,2]+x_4_3[i,j,2]+x_5_1[i,j,2]+x_5_2[i,j,2]+x_5_3[i,j,2]+x_6_1[i,j,2]+x_6_2[i,j,2]+x_6_3[i,j,2] - forecast_HB_K[i] * (1 - A_HB[r])))
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                m.addConstr(zHS[i,j,r] <= A_HS[r] * forecast_HS_K[i])
                m.addConstr(zHS[i,j,r] <= (x_4_7[i,j,1]+x_4_8[i,j,1]+x_5_7[i,j,1]+x_5_8[i,j,1]+x_6_7[i,j,1]+x_6_8[i,j,1]+x_4_7[i,j,2]+x_4_8[i,j,2]+x_5_7[i,j,2]+x_5_8[i,j,2]+x_6_7[i,j,2]+x_6_8[i,j,2]))
                m.addConstr(zHS[i,j,r] >= (x_4_7[i,j,1]+x_4_8[i,j,1]+x_5_7[i,j,1]+x_5_8[i,j,1]+x_6_7[i,j,1]+x_6_8[i,j,1]+x_4_7[i,j,2]+x_4_8[i,j,2]+x_5_7[i,j,2]+x_5_8[i,j,2]+x_6_7[i,j,2]+x_6_8[i,j,2] - forecast_HS_K[i] * (1 - A_HS[r])))
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                m.addConstr(zSB[i,j,r] <= A_BH[r] * forecast_SB_K[i])
                m.addConstr(zSB[i,j,r] <= (x_7_1[i,j,1]+x_7_2[i,j,1]+x_7_3[i,j,1]+x_8_1[i,j,1]+x_8_2[i,j,1]+x_8_3[i,j,1]+x_7_1[i,j,2]+x_7_2[i,j,2]+x_7_3[i,j,2]+x_8_1[i,j,2]+x_8_2[i,j,2]+x_8_3[i,j,2]))
                m.addConstr(zSB[i,j,r] >= (x_7_1[i,j,1]+x_7_2[i,j,1]+x_7_3[i,j,1]+x_8_1[i,j,1]+x_8_2[i,j,1]+x_8_3[i,j,1]+x_7_1[i,j,2]+x_7_2[i,j,2]+x_7_3[i,j,2]+x_8_1[i,j,2]+x_8_2[i,j,2]+x_8_3[i,j,2] - forecast_SB_K[i] * (1 - A_SB[r])))
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                m.addConstr(zSH[i,j,r] <= A_SH[r] * forecast_SH_K[i])
                m.addConstr(zSH[i,j,r] <= (x_7_4[i,j,1]+x_7_5[i,j,1]+x_7_6[i,j,1]+x_8_4[i,j,1]+x_8_5[i,j,1]+x_8_6[i,j,1]+x_7_4[i,j,2]+x_7_5[i,j,2]+x_7_6[i,j,2]+x_8_4[i,j,2]+x_8_5[i,j,2]+x_8_6[i,j,2]))
                m.addConstr(zSH[i,j,r] >= (x_7_4[i,j,1]+x_7_5[i,j,1]+x_7_6[i,j,1]+x_8_4[i,j,1]+x_8_5[i,j,1]+x_8_6[i,j,1]+x_7_4[i,j,2]+x_7_5[i,j,2]+x_7_6[i,j,2]+x_8_4[i,j,2]+x_8_5[i,j,2]+x_8_6[i,j,2] - forecast_SH_K[i] * (1 - A_SH[r])))
                
    for r in range(len(FR_BH)):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                C5 += FR_BH[r] * zBH[i,j,r]
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                C5 += FR_BS[r] * zBS[i,j,r]
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                C5 += FR_HB[r] * zHB[i,j,r]
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                C5 += FR_HS[r] * zHS[i,j,r]
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                C5 += FR_SB[r] * zSB[i,j,r]
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                C5 += FR_SH[r] * zSH[i,j,r]
    
    cargo_operating_perHour = cargo_per + L * OilPrice
    
    nBH = {}
    nHS = {}
    nSB = {}
    M = 0.0001
    for j in range(N*K):
        nBH[j] = m.addVar(vtype=GRB.BINARY)
        nHS[j] = m.addVar(vtype=GRB.BINARY)
        nSB[j] = m.addVar(vtype=GRB.BINARY)
        
    for j in range(N*K):
        m.addConstr(nBH[j] >= M * gp.quicksum((y_1_4[i,j,w]+y_1_5[i,j,w]+y_1_6[i,j,w]+y_2_4[i,j,w]+y_2_5[i,j,w]+y_2_6[i,j,w]+y_3_4[i,j,w]+y_3_5[i,j,w]+y_3_6[i,j,w]+y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w]) for i in range(cargo_BH[j]) for w in range(1,3)) + M * gp.quicksum(y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w] for i in range(cargo_SB[j]) for w in range(1,3)))
        m.addConstr(nHS[j] >= M * gp.quicksum((y_4_7[i,j,w]+y_4_8[i,j,w]+y_5_7[i,j,w]+y_5_8[i,j,w]+y_6_7[i,j,w]+y_6_8[i,j,w]+y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w]) for i in range(cargo_HS[j]) for w in range(1,3)) + M * gp.quicksum(y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w] for i in range(cargo_BH[j]) for w in range(1,3)))
        m.addConstr(nSB[j] >= M * gp.quicksum((y_7_1[i,j,w]+y_7_2[i,j,w]+y_7_3[i,j,w]+y_8_1[i,j,w]+y_8_2[i,j,w]+y_8_3[i,j,w]+y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w]) for i in range(cargo_SB[j]) for w in range(1,3)) + M * gp.quicksum(y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w] for i in range(cargo_HS[j]) for w in range(1,3)))
        
    cargoUsed_BH = 0
    cargoUsed_HS = 0
    cargoUsed_SB = 0
    for j in range(N*K):
        cargoUsed_BH += nBH[j]
        cargoUsed_HS += nHS[j]
        cargoUsed_SB += nSB[j]
        C7 += cargo_operating_perHour * (Tcargo_1*nBH[j]+Tcargo_2*nHS[j]+Tcargo_3*nSB[j])
    
    requi = sum(forecast_BH_K)+sum(forecast_BS_K)+sum(forecast_HB_K)+sum(forecast_HS_K)+sum(forecast_SB_K)+sum(forecast_SH_K)
    unTrans = requi - transported_1 - transported_2
    untransprop = unTrans / requi
    
    m.setObjective(theta1 * (C1 + C2 + C3 + C4 + C5 + C6 + C7) + theta2 * untransprop, GRB.MINIMIZE)
    m.optimize()
    
    cargo_operating = cargo_operating_perHour * (Tcargo_1+Tcargo_2+Tcargo_3) * max(cargoUsed_BH.getValue(),cargoUsed_HS.getValue(),cargoUsed_SB.getValue())
    
    
    
    result1 = C1+C2+C3.getValue()+C4.getValue()+C5.getValue()+C6.getValue()+cargo_operating
    result2 = C3.getValue()+C2
    result3 = C4.getValue()+C1
    result4 = C5.getValue()
    result5 = cargo_operating
    result6 = transported_1.getValue()
    result7 = transported_2.getValue()
    result8 = unTrans.getValue()
    result9 = requi
    result10 = passengerTrans.getValue()
    result11 = cargoTrans.getValue()
    result12 = C6.getValue()
    result13 = passengerTrans_BH.getValue()
    result14 = passengerTrans_BS.getValue()
    result15 = passengerTrans_HB.getValue()
    result16 = passengerTrans_HS.getValue()
    result17 = passengerTrans_SB.getValue()
    result18 = passengerTrans_SH.getValue()
    result19 = cargoTrans_BH.getValue()
    result20 = cargoTrans_HS.getValue()
    result21 = cargoTrans_SB.getValue()
    result22 = max(cargoUsed_BH.getValue(),cargoUsed_HS.getValue(),cargoUsed_SB.getValue())
    output1 = passengerTotalBH.getValue()
    output2 = passengerTotalBS.getValue()
    output3 = passengerTotalHB.getValue()
    output4 = passengerTotalHS.getValue()
    output5 = passengerTotalSB.getValue()
    output6 = passengerTotalSH.getValue()
    output7 = cargoTotalBH.getValue()
    output8 = cargoTotalBS.getValue()
    output9 = cargoTotalHB.getValue()
    output10 = cargoTotalHS.getValue()
    output11 = cargoTotalSB.getValue()
    output12 = cargoTotalSH.getValue()
    output13 = desertTotalBH.getValue()
    output14 = desertTotalBS.getValue()
    output15 = desertTotalHB.getValue()
    output16 = desertTotalHS.getValue()
    output17 = desertTotalSB.getValue()
    output18 = desertTotalSH.getValue()
    
    return result1,result2,result3,result4,result5,result6,result7,result8,result9,result10,result11,result12,result13,result14,result15,result16,result17,result18,result19,result20,result21,result22,output1,output2,output3,output4,output5,output6,output7,output8,output9,output10,output11,output12,output13,output14,output15,output16,output17,output18

def leftFunctionACTUAL(K):
    cargo_BH = []
    cargo_HS = []
    cargo_SB = []
        
    for i in range(K):
        cargo_BH_add = [x + 24 * i for x in cargo_BH_unit]
        cargo_HS_add = [x + 24 * i for x in cargo_HS_unit]
        cargo_SB_add = [x + 24 * i for x in cargo_SB_unit]
        for j in range(N):
            cargo_BH.append(cargo_BH_add[j])
            cargo_HS.append(cargo_HS_add[j])
            cargo_SB.append(cargo_SB_add[j])
    del cargo_BH_add,cargo_HS_add,cargo_SB_add
    BH_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_BH)
    BS_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_BS)
    HB_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_HB)
    HS_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_HS)
    SB_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_SB)
    SH_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_SH)
    flightTime_BH = passenger_flight_times_BH * K
    flightTime_BS = passenger_flight_times_BS * K
    flightTime_HB = passenger_flight_times_HB * K
    flightTime_HS = passenger_flight_times_HS * K
    flightTime_SB = passenger_flight_times_SB * K
    flightTime_SH = passenger_flight_times_SH * K
    first_flight_BH = min(min(BH_passengerTimeTable),min(cargo_BH))
    last_flight_BH = max(max(BH_passengerTimeTable),max(cargo_BH))
    first_flight_HS = min(min(HS_passengerTimeTable),min(cargo_HS))
    last_flight_HS = max(max(HS_passengerTimeTable),max(cargo_HS))
    first_flight_SB = min(min(SB_passengerTimeTable),min(cargo_SB))
    last_flight_SB = max(max(SB_passengerTimeTable),max(cargo_SB))
    first_flight_BS = min(BS_passengerTimeTable)
    last_flight_BS = max(BS_passengerTimeTable)
    first_flight_SH = min(SH_passengerTimeTable)
    last_flight_SH = max(SH_passengerTimeTable)
    first_flight_HB = min(HB_passengerTimeTable)
    last_flight_HB = max(HB_passengerTimeTable)
    BHcant_transport_passenger = passCantTransCal(BH_passengerTimeTable)
    BScant_transport_passenger = passCantTransCal(BS_passengerTimeTable)
    HBcant_transport_passenger = passCantTransCal(HB_passengerTimeTable)
    HScant_transport_passenger = passCantTransCal(HS_passengerTimeTable)
    SBcant_transport_passenger = passCantTransCal(SB_passengerTimeTable)
    SHcant_transport_passenger = passCantTransCal(SH_passengerTimeTable)
    BHcant_transport_cargo = max(cargo_BH) + 1
    HScant_transport_cargo = max(cargo_HS) + 1
    SBcant_transport_cargo = max(cargo_SB) + 1
    first_BH = process_value(first_flight_BH)
    first_BS = process_value(first_flight_BS)
    first_HB = process_value(first_flight_HB)
    first_HS = process_value(first_flight_HS)
    first_SB = process_value(first_flight_SB)
    first_SH = process_value(first_flight_SH)
    last_BH = process_value(last_flight_BH)
    last_BS = process_value(last_flight_BS)
    last_HB = process_value(last_flight_HB)
    last_HS = process_value(last_flight_HS)
    last_SB = process_value(last_flight_SB)
    last_SH = process_value(last_flight_SH)
    passengerTime_BH = passengerTimeCal(BH_passengerTimeTable)
    passengerTime_BS = passengerTimeCal(BS_passengerTimeTable)
    passengerTime_HB = passengerTimeCal(HB_passengerTimeTable)
    passengerTime_HS = passengerTimeCal(HS_passengerTimeTable)
    passengerTime_SB = passengerTimeCal(SB_passengerTimeTable)
    passengerTime_SH = passengerTimeCal(SH_passengerTimeTable)

    C1 = 0 # C1为未运完的仓储成本，初始值为0
    C2 = 0 # C2为未运完的逾期延迟成本，初始值为0
    C3 = 0 # C3为能运完的逾期延迟成本，初始值为0
    C4 = 0 # C4为能运完的仓储成本，初始值为0
    C5 = 0 # C5为运输成本，初始值为0
    C6 = 0 # C6为丢弃成本，初始值为0
    C7 = 0
    transported_1 = 0
    transported_2 = 0
    cargoUsed = 0
    
    forecast_1_4_K = TimeSplit(forecast_1_4)
    forecast_1_5_K = TimeSplit(forecast_1_5)
    forecast_1_6_K = TimeSplit(forecast_1_6)
    forecast_1_7_K = TimeSplit(forecast_1_7)
    forecast_1_8_K = TimeSplit(forecast_1_8)
    forecast_2_4_K = TimeSplit(forecast_2_4)
    forecast_2_5_K = TimeSplit(forecast_2_5)
    forecast_2_6_K = TimeSplit(forecast_2_6)
    forecast_2_7_K = TimeSplit(forecast_2_7)
    forecast_2_8_K = TimeSplit(forecast_2_8)
    forecast_3_4_K = TimeSplit(forecast_3_4)
    forecast_3_5_K = TimeSplit(forecast_3_5)
    forecast_3_6_K = TimeSplit(forecast_3_6)
    forecast_3_7_K = TimeSplit(forecast_3_7)
    forecast_3_8_K = TimeSplit(forecast_3_8)
    forecast_4_1_K = TimeSplit(forecast_4_1)
    forecast_4_2_K = TimeSplit(forecast_4_2)
    forecast_4_3_K = TimeSplit(forecast_4_3)
    forecast_4_7_K = TimeSplit(forecast_4_7)
    forecast_4_8_K = TimeSplit(forecast_4_8)
    forecast_5_1_K = TimeSplit(forecast_5_1)
    forecast_5_2_K = TimeSplit(forecast_5_2)
    forecast_5_3_K = TimeSplit(forecast_5_3)
    forecast_5_7_K = TimeSplit(forecast_5_7)
    forecast_5_8_K = TimeSplit(forecast_5_8)
    forecast_6_1_K = TimeSplit(forecast_6_1)
    forecast_6_2_K = TimeSplit(forecast_6_2)
    forecast_6_3_K = TimeSplit(forecast_6_3)
    forecast_6_7_K = TimeSplit(forecast_6_7)
    forecast_6_8_K = TimeSplit(forecast_6_8)
    forecast_7_1_K = TimeSplit(forecast_7_1)
    forecast_7_2_K = TimeSplit(forecast_7_2)
    forecast_7_3_K = TimeSplit(forecast_7_3)
    forecast_7_4_K = TimeSplit(forecast_7_4)
    forecast_7_5_K = TimeSplit(forecast_7_5)
    forecast_7_6_K = TimeSplit(forecast_7_6)
    forecast_8_1_K = TimeSplit(forecast_8_1)
    forecast_8_2_K = TimeSplit(forecast_8_2)
    forecast_8_3_K = TimeSplit(forecast_8_3)
    forecast_8_4_K = TimeSplit(forecast_8_4)
    forecast_8_5_K = TimeSplit(forecast_8_5)
    forecast_8_6_K = TimeSplit(forecast_8_6)
    
    forecast_1_4_K[0] += left_to_leave_1_4[-1]
    forecast_1_5_K[0] += left_to_leave_1_5[-1]
    forecast_1_6_K[0] += left_to_leave_1_6[-1]
    forecast_1_7_K[0] += left_to_leave_1_7[-1]
    forecast_1_8_K[0] += left_to_leave_1_8[-1]
    forecast_2_4_K[0] += left_to_leave_2_4[-1]
    forecast_2_5_K[0] += left_to_leave_2_5[-1]
    forecast_2_6_K[0] += left_to_leave_2_6[-1]
    forecast_2_7_K[0] += left_to_leave_2_7[-1]
    forecast_2_8_K[0] += left_to_leave_2_8[-1]
    forecast_3_4_K[0] += left_to_leave_3_4[-1]
    forecast_3_5_K[0] += left_to_leave_3_5[-1]
    forecast_3_6_K[0] += left_to_leave_3_6[-1]
    forecast_3_7_K[0] += left_to_leave_3_7[-1]
    forecast_3_8_K[0] += left_to_leave_3_8[-1]
    forecast_4_1_K[0] += left_to_leave_4_1[-1]
    forecast_4_2_K[0] += left_to_leave_4_2[-1]
    forecast_4_3_K[0] += left_to_leave_4_3[-1]
    forecast_4_7_K[0] += left_to_leave_4_7[-1]
    forecast_4_8_K[0] += left_to_leave_4_8[-1]
    forecast_5_1_K[0] += left_to_leave_5_1[-1]
    forecast_5_2_K[0] += left_to_leave_5_2[-1]
    forecast_5_3_K[0] += left_to_leave_5_3[-1]
    forecast_5_7_K[0] += left_to_leave_5_7[-1]
    forecast_5_8_K[0] += left_to_leave_5_8[-1]
    forecast_6_1_K[0] += left_to_leave_6_1[-1]
    forecast_6_2_K[0] += left_to_leave_6_2[-1]
    forecast_6_3_K[0] += left_to_leave_6_3[-1]
    forecast_6_7_K[0] += left_to_leave_6_7[-1]
    forecast_6_8_K[0] += left_to_leave_6_8[-1]
    forecast_7_1_K[0] += left_to_leave_7_1[-1]
    forecast_7_2_K[0] += left_to_leave_7_2[-1]
    forecast_7_3_K[0] += left_to_leave_7_3[-1]
    forecast_7_4_K[0] += left_to_leave_7_4[-1]
    forecast_7_5_K[0] += left_to_leave_7_5[-1]
    forecast_7_6_K[0] += left_to_leave_7_6[-1]
    forecast_8_1_K[0] += left_to_leave_8_1[-1]
    forecast_8_2_K[0] += left_to_leave_8_2[-1]
    forecast_8_3_K[0] += left_to_leave_8_3[-1]
    forecast_8_4_K[0] += left_to_leave_8_4[-1]
    forecast_8_5_K[0] += left_to_leave_8_5[-1]
    forecast_8_6_K[0] += left_to_leave_8_6[-1]
    
    # 计算时效快递的需求
    TimeSensitive_Req_1_4 = [x * perc1 for x in forecast_1_4_K]
    TimeSensitive_Req_1_5 = [x * perc1 for x in forecast_1_5_K]
    TimeSensitive_Req_1_6 = [x * perc1 for x in forecast_1_6_K]
    TimeSensitive_Req_1_7 = [x * perc1 for x in forecast_1_7_K]
    TimeSensitive_Req_1_8 = [x * perc1 for x in forecast_1_8_K]
    TimeSensitive_Req_2_4 = [x * perc1 for x in forecast_2_4_K]
    TimeSensitive_Req_2_5 = [x * perc1 for x in forecast_2_5_K]
    TimeSensitive_Req_2_6 = [x * perc1 for x in forecast_2_6_K]
    TimeSensitive_Req_2_7 = [x * perc1 for x in forecast_2_7_K]
    TimeSensitive_Req_2_8 = [x * perc1 for x in forecast_2_8_K]
    TimeSensitive_Req_3_4 = [x * perc1 for x in forecast_3_4_K]
    TimeSensitive_Req_3_5 = [x * perc1 for x in forecast_3_5_K]
    TimeSensitive_Req_3_6 = [x * perc1 for x in forecast_3_6_K]
    TimeSensitive_Req_3_7 = [x * perc1 for x in forecast_3_7_K]
    TimeSensitive_Req_3_8 = [x * perc1 for x in forecast_3_8_K]
    TimeSensitive_Req_4_1 = [x * perc1 for x in forecast_4_1_K]
    TimeSensitive_Req_4_2 = [x * perc1 for x in forecast_4_2_K]
    TimeSensitive_Req_4_3 = [x * perc1 for x in forecast_4_3_K]
    TimeSensitive_Req_4_7 = [x * perc1 for x in forecast_4_7_K]
    TimeSensitive_Req_4_8 = [x * perc1 for x in forecast_4_8_K]
    TimeSensitive_Req_5_1 = [x * perc1 for x in forecast_5_1_K]
    TimeSensitive_Req_5_2 = [x * perc1 for x in forecast_5_2_K]
    TimeSensitive_Req_5_3 = [x * perc1 for x in forecast_5_3_K]
    TimeSensitive_Req_5_7 = [x * perc1 for x in forecast_5_7_K]
    TimeSensitive_Req_5_8 = [x * perc1 for x in forecast_5_8_K]
    TimeSensitive_Req_6_1 = [x * perc1 for x in forecast_6_1_K]
    TimeSensitive_Req_6_2 = [x * perc1 for x in forecast_6_2_K]
    TimeSensitive_Req_6_3 = [x * perc1 for x in forecast_6_3_K]
    TimeSensitive_Req_6_7 = [x * perc1 for x in forecast_6_7_K]
    TimeSensitive_Req_6_8 = [x * perc1 for x in forecast_6_8_K]
    TimeSensitive_Req_7_1 = [x * perc1 for x in forecast_7_1_K]
    TimeSensitive_Req_7_2 = [x * perc1 for x in forecast_7_2_K]
    TimeSensitive_Req_7_3 = [x * perc1 for x in forecast_7_3_K]
    TimeSensitive_Req_7_4 = [x * perc1 for x in forecast_7_4_K]
    TimeSensitive_Req_7_5 = [x * perc1 for x in forecast_7_5_K]
    TimeSensitive_Req_7_6 = [x * perc1 for x in forecast_7_6_K]
    TimeSensitive_Req_8_1 = [x * perc1 for x in forecast_8_1_K]
    TimeSensitive_Req_8_2 = [x * perc1 for x in forecast_8_2_K]
    TimeSensitive_Req_8_3 = [x * perc1 for x in forecast_8_3_K]
    TimeSensitive_Req_8_4 = [x * perc1 for x in forecast_8_4_K]
    TimeSensitive_Req_8_5 = [x * perc1 for x in forecast_8_5_K]
    TimeSensitive_Req_8_6 = [x * perc1 for x in forecast_8_6_K]
    
    # 计算经济快递的需求
    Economy_Req_1_4 = [x * perc2 for x in forecast_1_4_K]
    Economy_Req_1_5 = [x * perc2 for x in forecast_1_5_K]
    Economy_Req_1_6 = [x * perc2 for x in forecast_1_6_K]
    Economy_Req_1_7 = [x * perc2 for x in forecast_1_7_K]
    Economy_Req_1_8 = [x * perc2 for x in forecast_1_8_K]
    Economy_Req_2_4 = [x * perc2 for x in forecast_2_4_K]
    Economy_Req_2_5 = [x * perc2 for x in forecast_2_5_K]
    Economy_Req_2_6 = [x * perc2 for x in forecast_2_6_K]
    Economy_Req_2_7 = [x * perc2 for x in forecast_2_7_K]
    Economy_Req_2_8 = [x * perc2 for x in forecast_2_8_K]
    Economy_Req_3_4 = [x * perc2 for x in forecast_3_4_K]
    Economy_Req_3_5 = [x * perc2 for x in forecast_3_5_K]
    Economy_Req_3_6 = [x * perc2 for x in forecast_3_6_K]
    Economy_Req_3_7 = [x * perc2 for x in forecast_3_7_K]
    Economy_Req_3_8 = [x * perc2 for x in forecast_3_8_K]
    Economy_Req_4_1 = [x * perc2 for x in forecast_4_1_K]
    Economy_Req_4_2 = [x * perc2 for x in forecast_4_2_K]
    Economy_Req_4_3 = [x * perc2 for x in forecast_4_3_K]
    Economy_Req_4_7 = [x * perc2 for x in forecast_4_7_K]
    Economy_Req_4_8 = [x * perc2 for x in forecast_4_8_K]
    Economy_Req_5_1 = [x * perc2 for x in forecast_5_1_K]
    Economy_Req_5_2 = [x * perc2 for x in forecast_5_2_K]
    Economy_Req_5_3 = [x * perc2 for x in forecast_5_3_K]
    Economy_Req_5_7 = [x * perc2 for x in forecast_5_7_K]
    Economy_Req_5_8 = [x * perc2 for x in forecast_5_8_K]
    Economy_Req_6_1 = [x * perc2 for x in forecast_6_1_K]
    Economy_Req_6_2 = [x * perc2 for x in forecast_6_2_K]
    Economy_Req_6_3 = [x * perc2 for x in forecast_6_3_K]
    Economy_Req_6_7 = [x * perc2 for x in forecast_6_7_K]
    Economy_Req_6_8 = [x * perc2 for x in forecast_6_8_K]
    Economy_Req_7_1 = [x * perc2 for x in forecast_7_1_K]
    Economy_Req_7_2 = [x * perc2 for x in forecast_7_2_K]
    Economy_Req_7_3 = [x * perc2 for x in forecast_7_3_K]
    Economy_Req_7_4 = [x * perc2 for x in forecast_7_4_K]
    Economy_Req_7_5 = [x * perc2 for x in forecast_7_5_K]
    Economy_Req_7_6 = [x * perc2 for x in forecast_7_6_K]
    Economy_Req_8_1 = [x * perc2 for x in forecast_8_1_K]
    Economy_Req_8_2 = [x * perc2 for x in forecast_8_2_K]
    Economy_Req_8_3 = [x * perc2 for x in forecast_8_3_K]
    Economy_Req_8_4 = [x * perc2 for x in forecast_8_4_K]
    Economy_Req_8_5 = [x * perc2 for x in forecast_8_5_K]
    Economy_Req_8_6 = [x * perc2 for x in forecast_8_6_K]
    
    # 主要计算模型
    m = gp.Model()
    m.Params.OutputFlag = 0
    m.Params.MIPGap = 0.005
    
    x_1_4 = {}
    x_1_5 = {}
    x_1_6 = {}
    x_1_7 = {}
    x_1_8 = {}
    x_2_4 = {}
    x_2_5 = {}
    x_2_6 = {}
    x_2_7 = {}
    x_2_8 = {}
    x_3_4 = {}
    x_3_5 = {}
    x_3_6 = {}
    x_3_7 = {}
    x_3_8 = {}
    x_4_1 = {}
    x_4_2 = {}
    x_4_3 = {}
    x_4_7 = {}
    x_4_8 = {}
    x_5_1 = {}
    x_5_2 = {}
    x_5_3 = {}
    x_5_7 = {}
    x_5_8 = {}
    x_6_1 = {}
    x_6_2 = {}
    x_6_3 = {}
    x_6_7 = {}
    x_6_8 = {}
    x_7_1 = {}
    x_7_2 = {}
    x_7_3 = {}
    x_7_4 = {}
    x_7_5 = {}
    x_7_6 = {}
    x_8_1 = {}
    x_8_2 = {}
    x_8_3 = {}
    x_8_4 = {}
    x_8_5 = {}
    x_8_6 = {}
    
    y_1_4 = {}
    y_1_5 = {}
    y_1_6 = {}
    y_1_7 = {}
    y_1_8 = {}
    y_2_4 = {}
    y_2_5 = {}
    y_2_6 = {}
    y_2_7 = {}
    y_2_8 = {}
    y_3_4 = {}
    y_3_5 = {}
    y_3_6 = {}
    y_3_7 = {}
    y_3_8 = {}
    y_4_1 = {}
    y_4_2 = {}
    y_4_3 = {}
    y_4_7 = {}
    y_4_8 = {}
    y_5_1 = {}
    y_5_2 = {}
    y_5_3 = {}
    y_5_7 = {}
    y_5_8 = {}
    y_6_1 = {}
    y_6_2 = {}
    y_6_3 = {}
    y_6_7 = {}
    y_6_8 = {}
    y_7_1 = {}
    y_7_2 = {}
    y_7_3 = {}
    y_7_4 = {}
    y_7_5 = {}
    y_7_6 = {}
    y_8_1 = {}
    y_8_2 = {}
    y_8_3 = {}
    y_8_4 = {}
    y_8_5 = {}
    y_8_6 = {}
    
    for w in range(1,3):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                x_1_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_1_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_1_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_2_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_2_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_2_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_3_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_3_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_3_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                x_1_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_1_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_2_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_2_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_3_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_3_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                x_4_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_4_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_4_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_5_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_5_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_5_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_6_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_6_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_6_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                x_4_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_4_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_5_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_5_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_6_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_6_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                x_7_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_7_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_7_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                x_7_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_7_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_7_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                
    for w in range(1,3):
        for j in range(N*K):
            for i in range(cargo_BH[j]):
                y_1_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_1_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_1_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_1_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_1_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_2_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_2_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_2_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_2_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_2_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_3_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_3_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_3_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_3_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_3_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
            for i in range(cargo_HS[j]):
                y_4_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_4_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_4_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_5_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_5_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_5_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_6_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_6_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_6_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_4_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_4_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_5_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_5_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_6_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_6_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
            for i in range(cargo_SB[j]):
                y_7_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_7_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_7_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_7_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_7_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_7_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                
    # 客机容量限制约束
    for j in range(len(passengerTime_BH)):
        cal1_BH = 0
        cal1_BH += gp.quicksum(x_1_4[i,j,w]+x_1_5[i,j,w]+x_1_6[i,j,w]+x_2_4[i,j,w]+x_2_5[i,j,w]+x_2_6[i,j,w]+x_3_4[i,j,w]+x_3_5[i,j,w]+x_3_6[i,j,w] for w in range(1,3) for i in range(passengerTime_BH[j]))
        m.addConstr(cal1_BH <= q)
    for j in range(len(passengerTime_BS)):
        cal1_BS = 0
        cal1_BS += gp.quicksum(x_1_7[i,j,w]+x_1_8[i,j,w]+x_2_7[i,j,w]+x_2_8[i,j,w]+x_3_7[i,j,w]+x_3_8[i,j,w] for w in range(1,3) for i in range(passengerTime_BS[j]))
        m.addConstr(cal1_BS <= q)
    for j in range(len(passengerTime_HB)):
        cal1_HB = 0
        cal1_HB += gp.quicksum(x_4_1[i,j,w]+x_4_2[i,j,w]+x_4_3[i,j,w]+x_5_1[i,j,w]+x_5_2[i,j,w]+x_5_3[i,j,w]+x_6_1[i,j,w]+x_6_2[i,j,w]+x_6_3[i,j,w] for w in range(1,3) for i in range(passengerTime_HB[j]))
        m.addConstr(cal1_HB <= q)
    for j in range(len(passengerTime_HS)):
        cal1_HS = 0
        cal1_HS += gp.quicksum(x_4_7[i,j,w]+x_4_8[i,j,w]+x_5_7[i,j,w]+x_5_8[i,j,w]+x_6_7[i,j,w]+x_6_8[i,j,w] for w in range(1,3) for i in range(passengerTime_HS[j]))
        m.addConstr(cal1_HS <= q)
    for j in range(len(passengerTime_SB)):
        cal1_SB = 0
        cal1_SB += gp.quicksum(x_7_1[i,j,w]+x_7_2[i,j,w]+x_7_3[i,j,w]+x_8_1[i,j,w]+x_8_2[i,j,w]+x_8_3[i,j,w] for w in range(1,3) for i in range(passengerTime_SB[j]))
        m.addConstr(cal1_SB <= q)
    for j in range(len(passengerTime_SH)):
        cal1_SH = 0
        cal1_SH += gp.quicksum(x_7_4[i,j,w]+x_7_5[i,j,w]+x_7_6[i,j,w]+x_8_4[i,j,w]+x_8_5[i,j,w]+x_8_6[i,j,w] for w in range(1,3) for i in range(passengerTime_SH[j]))
        m.addConstr(cal1_SH <= q)
        
    # 货机容量约束
    for j in range(N*K):
        cal2_BH = 0
        cal2_BH += (gp.quicksum((y_1_4[i,j,w]+y_1_5[i,j,w]+y_1_6[i,j,w]+y_2_4[i,j,w]+y_2_5[i,j,w]+y_2_6[i,j,w]+y_3_4[i,j,w]+y_3_5[i,j,w]+y_3_6[i,j,w]+y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w]) for w in range(1,3) for i in range(cargo_BH[j]))+gp.quicksum(y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w] for w in range(1,3) for i in range(cargo_SB[j])))
        m.addConstr(cal2_BH <= Q)
    for j in range(N*K):
        cal2_HS = 0
        cal2_HS += (gp.quicksum((y_4_7[i,j,w]+y_4_8[i,j,w]+y_5_7[i,j,w]+y_5_8[i,j,w]+y_6_7[i,j,w]+y_6_8[i,j,w]+y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w]) for w in range(1,3) for i in range(cargo_HS[j]))+gp.quicksum(y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w] for w in range(1,3) for i in range(cargo_BH[j])))
        m.addConstr(cal2_HS <= Q)
    for j in range(N*K):
        cal2_SB = 0
        cal2_SB += (gp.quicksum((y_7_1[i,j,w]+y_7_2[i,j,w]+y_7_3[i,j,w]+y_8_1[i,j,w]+y_8_2[i,j,w]+y_8_3[i,j,w]+y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w]) for w in range(1,3) for i in range(cargo_SB[j]))+gp.quicksum(y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w] for w in range(1,3) for i in range(cargo_HS[j])))
        m.addConstr(cal2_SB <= Q)
        
    # 在能运完的货物中，被运走的货物量最多达到这个时间段的订单需求量
    # 能运完的货物的仓储成本和逾期成本及被丢弃货物的成本计算
    for w in range(1,3):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                C3 += C2per[w] * (x_1_4[i,j,w]*max(BH_passengerTimeTable[j]+t1+t4-i-T_1[w]+flightTime_BH[j],0)+x_1_5[i,j,w]*max(BH_passengerTimeTable[j]+t1+t5-i-T_1[w]+flightTime_BH[j],0)+x_1_6[i,j,w]*max(BH_passengerTimeTable[j]+t1+t6-i-T_1[w]+flightTime_BH[j],0)+x_2_4[i,j,w]*max(BH_passengerTimeTable[j]+t2+t4-i-T_1[w]+flightTime_BH[j],0)+x_2_5[i,j,w]*max(BH_passengerTimeTable[j]+t2+t5-i-T_1[w]+flightTime_BH[j],0)+x_2_6[i,j,w]*max(BH_passengerTimeTable[j]+t2+t6-i-T_1[w]+flightTime_BH[j],0)+x_3_4[i,j,w]*max(BH_passengerTimeTable[j]+t3+t4-i-T_1[w]+flightTime_BH[j],0)+x_3_5[i,j,w]*max(BH_passengerTimeTable[j]+t3+t5-i-T_1[w]+flightTime_BH[j],0)+x_3_6[i,j,w]*max(BH_passengerTimeTable[j]+t3+t6-i-T_1[w]+flightTime_BH[j],0))
                C4 += c1 * ((x_1_4[i,j,w]+x_1_5[i,j,w]+x_1_6[i,j,w]+x_2_4[i,j,w]+x_2_5[i,j,w]+x_2_6[i,j,w]+x_3_4[i,j,w]+x_3_5[i,j,w]+x_3_6[i,j,w]) * (BH_passengerTimeTable[j] - i))
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                C3 += C2per[w] * (x_1_7[i,j,w]*max(BS_passengerTimeTable[j]+t1+t7-i-T_1[w]+flightTime_BS[j],0)+x_1_8[i,j,w]*max(BS_passengerTimeTable[j]+t1+t8-i-T_1[w]+flightTime_BS[j],0)+x_2_7[i,j,w]*max(BS_passengerTimeTable[j]+t2+t7-i-T_1[w]+flightTime_BS[j],0)+x_2_8[i,j,w]*max(BS_passengerTimeTable[j]+t2+t8-i-T_1[w]+flightTime_BS[j],0)+x_3_7[i,j,w]*max(BS_passengerTimeTable[j]+t3+t7-i-T_1[w]+flightTime_BS[j],0)+x_3_8[i,j,w]*max(BS_passengerTimeTable[j]+t3+t8-i-T_1[w]+flightTime_BS[j],0))
                C4 += c1 * ((x_1_7[i,j,w]+x_1_8[i,j,w]+x_2_7[i,j,w]+x_2_8[i,j,w]+x_3_7[i,j,w]+x_3_8[i,j,w]) * (BS_passengerTimeTable[j] - i))
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                C3 += C2per[w] * (x_4_1[i,j,w]*max(HB_passengerTimeTable[j]+t4+t1-i-T_1[w]+flightTime_HB[j],0)+x_4_2[i,j,w]*max(HB_passengerTimeTable[j]+t4+t2-i-T_1[w]+flightTime_HB[j],0)+x_4_3[i,j,w]*max(HB_passengerTimeTable[j]+t4+t3-i-T_1[w]+flightTime_HB[j],0)+x_5_1[i,j,w]*max(HB_passengerTimeTable[j]+t5+t1-i-T_1[w]+flightTime_HB[j],0)+x_5_2[i,j,w]*max(HB_passengerTimeTable[j]+t5+t2-i-T_1[w]+flightTime_HB[j],0)+x_5_3[i,j,w]*max(HB_passengerTimeTable[j]+t5+t3-i-T_1[w]+flightTime_HB[j],0)+x_6_1[i,j,w]*max(HB_passengerTimeTable[j]+t6+t1-i-T_1[w]+flightTime_HB[j],0)+x_6_2[i,j,w]*max(HB_passengerTimeTable[j]+t6+t2-i-T_1[w]+flightTime_HB[j],0)+x_6_3[i,j,w]*max(HB_passengerTimeTable[j]+t6+t3-i-T_1[w]+flightTime_HB[j],0))
                C4 += c1 * ((x_4_1[i,j,w]+x_4_2[i,j,w]+x_4_3[i,j,w]+x_5_1[i,j,w]+x_5_2[i,j,w]+x_5_3[i,j,w]+x_6_1[i,j,w]+x_6_2[i,j,w]+x_6_3[i,j,w]) * (HB_passengerTimeTable[j] - i))
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                C3 += C2per[w] * (x_4_7[i,j,w]*max(HS_passengerTimeTable[j]+t4+t7-i-T_1[w]+flightTime_HS[j],0)+x_4_8[i,j,w]*max(HS_passengerTimeTable[j]+t4+t8-i-T_1[w]+flightTime_HS[j],0)+x_5_7[i,j,w]*max(HS_passengerTimeTable[j]+t5+t7-i-T_1[w]+flightTime_HS[j],0)+x_5_8[i,j,w]*max(HS_passengerTimeTable[j]+t5+t8-i-T_1[w]+flightTime_HS[j],0)+x_6_7[i,j,w]*max(HS_passengerTimeTable[j]+t6+t7-i-T_1[w]+flightTime_HS[j],0)+x_6_8[i,j,w]*max(HS_passengerTimeTable[j]+t6+t8-i-T_1[w]+flightTime_HS[j],0))
                C4 += c1 * ((x_4_7[i,j,w]+x_4_8[i,j,w]+x_5_7[i,j,w]+x_5_8[i,j,w]+x_6_7[i,j,w]+x_6_8[i,j,w]) * (HS_passengerTimeTable[j] - i))
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                C3 += C2per[w] * (x_7_1[i,j,w]*max(SB_passengerTimeTable[j]+t7+t1-i-T_1[w]+flightTime_SB[j],0)+x_7_2[i,j,w]*max(SB_passengerTimeTable[j]+t7+t2-i-T_1[w]+flightTime_SB[j],0)+x_7_3[i,j,w]*max(SB_passengerTimeTable[j]+t7+t3-i-T_1[w]+flightTime_SB[j],0)+x_8_1[i,j,w]*max(SB_passengerTimeTable[j]+t8+t1-i-T_1[w]+flightTime_SB[j],0)+x_8_2[i,j,w]*max(SB_passengerTimeTable[j]+t8+t2-i-T_1[w]+flightTime_SB[j],0)+x_8_3[i,j,w]*max(SB_passengerTimeTable[j]+t8+t3-i-T_1[w]+flightTime_SB[j],0))
                C4 += c1 * ((x_7_1[i,j,w]+x_7_2[i,j,w]+x_7_3[i,j,w]+x_8_1[i,j,w]+x_8_2[i,j,w]+x_8_3[i,j,w]) * (SB_passengerTimeTable[j] - i))
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                C3 += C2per[w] * (x_7_4[i,j,w]*max(SH_passengerTimeTable[j]+t7+t4-i-T_1[w]+flightTime_SH[j],0)+x_7_5[i,j,w]*max(SH_passengerTimeTable[j]+t7+t5-i-T_1[w]+flightTime_SH[j],0)+x_7_6[i,j,w]*max(SH_passengerTimeTable[j]+t7+t6-i-T_1[w]+flightTime_SH[j],0)+x_8_4[i,j,w]*max(SH_passengerTimeTable[j]+t8+t4-i-T_1[w]+flightTime_SH[j],0)+x_8_5[i,j,w]*max(SH_passengerTimeTable[j]+t8+t5-i-T_1[w]+flightTime_SH[j],0)+x_8_6[i,j,w]*max(SH_passengerTimeTable[j]+t8+t6-i-T_1[w]+flightTime_SH[j],0))
                C4 += c1 * ((x_7_4[i,j,w]+x_7_5[i,j,w]+x_7_6[i,j,w]+x_8_4[i,j,w]+x_8_5[i,j,w]+x_8_6[i,j,w]) * (SH_passengerTimeTable[j] - i))
        for j in range(N*K):
            for i in range(cargo_BH[j]):
                C3 += C2per[w] * (y_1_4[i,j,w]*max(cargo_BH[j]+t1+t4-i-T_1[w]+Tcargo_1,0)+y_1_5[i,j,w]*max(cargo_BH[j]+t1+t5-i-T_1[w]+Tcargo_1,0)+y_1_6[i,j,w]*max(cargo_BH[j]+t1+t6-i-T_1[w]+Tcargo_1,0)+y_2_4[i,j,w]*max(cargo_BH[j]+t2+t4-i-T_1[w]+Tcargo_1,0)+y_2_5[i,j,w]*max(cargo_BH[j]+t2+t5-i-T_1[w]+Tcargo_1,0)+y_2_6[i,j,w]*max(cargo_BH[j]+t2+t6-i-T_1[w]+Tcargo_1,0))
                C3 += C2per[w] * (y_1_7[i,j,w]*max(cargo_HS[j]+t1+t7-i-T_1[w]+Tcargo_2,0)+y_1_8[i,j,w]*max(cargo_HS[j]+t1+t8-i-T_1[w]+Tcargo_2,0)+y_2_7[i,j,w]*max(cargo_HS[j]+t2+t7-i-T_1[w]+Tcargo_2,0)+y_2_8[i,j,w]*max(cargo_HS[j]+t2+t8-i-T_1[w]+Tcargo_2,0)+y_3_7[i,j,w]*max(cargo_HS[j]+t3+t7-i-T_1[w]+Tcargo_2,0)+y_3_8[i,j,w]*max(cargo_HS[j]+t3+t8-i-T_1[w]+Tcargo_2,0))
                C4 += c1 * ((y_1_4[i,j,w]+y_1_5[i,j,w]+y_1_6[i,j,w]+y_2_4[i,j,w]+y_2_5[i,j,w]+y_2_6[i,j,w]+y_3_4[i,j,w]+y_3_5[i,j,w]+y_3_6[i,j,w]+y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w]) * (cargo_BH[j] - i))
            for i in range(cargo_HS[j]):
                C3 += C2per[w] * (y_4_1[i,j,w]*max(cargo_SB[j]+t4+t1-i-T_1[w]+Tcargo_3,0)+y_4_2[i,j,w]*max(cargo_SB[j]+t4+t2-i-T_1[w]+Tcargo_3,0)+y_4_3[i,j,w]*max(cargo_SB[j]+t4+t3-i-T_1[w]+Tcargo_3,0)+y_5_1[i,j,w]*max(cargo_HS[j]+t5+t1-i-T_1[w]+Tcargo_3,0)+y_5_2[i,j,w]*max(cargo_SB[j]+t5+t2-i-T_1[w]+Tcargo_3,0)+y_5_3[i,j,w]*max(cargo_SB[j]+t5+t3-i-T_1[w]+Tcargo_3,0))
                C3 += C2per[w] * (y_4_7[i,j,w]*max(cargo_HS[j]+t4+t7-i-T_1[w]+Tcargo_2,0)+y_4_8[i,j,w]*max(cargo_HS[j]+t4+t8-i-T_1[w]+Tcargo_2,0)+y_5_7[i,j,w]*max(cargo_HS[j]+t5+t7-i-T_1[w]+Tcargo_2,0)+y_5_8[i,j,w]*max(cargo_HS[j]+t5+t8-i-T_1[w]+Tcargo_2,0))
                C4 += c1 * ((y_4_7[i,j,w]+y_4_8[i,j,w]+y_5_7[i,j,w]+y_5_8[i,j,w]+y_6_7[i,j,w]+y_6_8[i,j,w]+y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w]) * (cargo_HS[j] - i))
            for i in range(cargo_SB[j]):
                C3 += C2per[w] * (y_7_1[i,j,w]*max(cargo_SB[j]+t7+t1-i-T_1[w]+Tcargo_3,0)+y_7_2[i,j,w]*max(cargo_SB[j]+t7+t2-i-T_1[w]+Tcargo_3,0)+y_7_3[i,j,w]*max(cargo_SB[j]+t7+t3-i-T_1[w]+Tcargo_3,0)+y_8_1[i,j,w]*max(cargo_SB[j]+t8+t1-i-T_1[w]+Tcargo_3,0)+y_8_2[i,j,w]*max(cargo_SB[j]+t8+t2-i-T_1[w]+Tcargo_3,0)+y_8_3[i,j,w]*max(cargo_SB[j]+t8+t3-i-T_1[w]+Tcargo_3,0))
                C3 += C2per[w] * (y_7_4[i,j,w]*max(cargo_BH[j]+t7+t4-i-T_1[w]+Tcargo_1,0)+y_7_5[i,j,w]*max(cargo_BH[j]+t7+t5-i-T_1[w]+Tcargo_1,0)+y_7_6[i,j,w]*max(cargo_BH[j]+t7+t6-i-T_1[w]+Tcargo_1,0)+y_8_4[i,j,w]*max(cargo_BH[j]+t8+t4-i-T_1[w]+Tcargo_1,0)+y_8_5[i,j,w]*max(cargo_BH[j]+t8+t5-i-T_1[w]+Tcargo_1,0)+y_8_6[i,j,w]*max(cargo_BH[j]+t8+t6-i-T_1[w]+Tcargo_1,0))
                C4 += c1 * ((y_7_1[i,j,w]+y_7_2[i,j,w]+y_7_3[i,j,w]+y_8_1[i,j,w]+y_8_2[i,j,w]+y_8_3[i,j,w]+y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w]) * (cargo_SB[j] - i))
                
    TimeSensitive_Req_BH = [x1+x2+x3+x4+x5+x6+x7+x8+x9 for x1,x2,x3,x4,x5,x6,x7,x8,x9 in zip(TimeSensitive_Req_1_4,TimeSensitive_Req_1_5,TimeSensitive_Req_1_6,TimeSensitive_Req_2_4,TimeSensitive_Req_2_5,TimeSensitive_Req_2_6,TimeSensitive_Req_3_4,TimeSensitive_Req_3_5,TimeSensitive_Req_3_6)]
    TimeSensitive_Req_BS = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(TimeSensitive_Req_1_7,TimeSensitive_Req_1_8,TimeSensitive_Req_2_7,TimeSensitive_Req_2_8,TimeSensitive_Req_3_7,TimeSensitive_Req_3_8)]
    TimeSensitive_Req_HB = [x1+x2+x3+x4+x5+x6+x7+x8+x9 for x1,x2,x3,x4,x5,x6,x7,x8,x9 in zip(TimeSensitive_Req_4_1,TimeSensitive_Req_4_2,TimeSensitive_Req_4_3,TimeSensitive_Req_5_1,TimeSensitive_Req_5_2,TimeSensitive_Req_5_3,TimeSensitive_Req_6_1,TimeSensitive_Req_6_2,TimeSensitive_Req_6_3)]
    TimeSensitive_Req_HS = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(TimeSensitive_Req_4_7,TimeSensitive_Req_4_8,TimeSensitive_Req_5_7,TimeSensitive_Req_5_8,TimeSensitive_Req_6_7,TimeSensitive_Req_6_8)]
    TimeSensitive_Req_SB = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(TimeSensitive_Req_7_1,TimeSensitive_Req_7_2,TimeSensitive_Req_7_3,TimeSensitive_Req_8_1,TimeSensitive_Req_8_2,TimeSensitive_Req_8_3)]
    TimeSensitive_Req_SH = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(TimeSensitive_Req_7_4,TimeSensitive_Req_7_5,TimeSensitive_Req_7_6,TimeSensitive_Req_8_4,TimeSensitive_Req_8_5,TimeSensitive_Req_8_6)]
    Economy_Req_BH = [x1+x2+x3+x4+x5+x6+x7+x8+x9 for x1,x2,x3,x4,x5,x6,x7,x8,x9 in zip(Economy_Req_1_4,Economy_Req_1_5,Economy_Req_1_6,Economy_Req_2_4,Economy_Req_2_5,Economy_Req_2_6,Economy_Req_3_4,Economy_Req_3_5,Economy_Req_3_6)]
    Economy_Req_BS = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(Economy_Req_1_7,Economy_Req_1_8,Economy_Req_2_7,Economy_Req_2_8,Economy_Req_3_7,Economy_Req_3_8)]
    Economy_Req_HB = [x1+x2+x3+x4+x5+x6+x7+x8+x9 for x1,x2,x3,x4,x5,x6,x7,x8,x9 in zip(Economy_Req_4_1,Economy_Req_4_2,Economy_Req_4_3,Economy_Req_5_1,Economy_Req_5_2,Economy_Req_5_3,Economy_Req_6_1,Economy_Req_6_2,Economy_Req_6_3)]
    Economy_Req_HS = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(Economy_Req_4_7,Economy_Req_4_8,Economy_Req_5_7,Economy_Req_5_8,Economy_Req_6_7,Economy_Req_6_8)]
    Economy_Req_SB = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(Economy_Req_7_1,Economy_Req_7_2,Economy_Req_7_3,Economy_Req_8_1,Economy_Req_8_2,Economy_Req_8_3)]
    Economy_Req_SH = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(Economy_Req_7_4,Economy_Req_7_5,Economy_Req_7_6,Economy_Req_8_4,Economy_Req_8_5,Economy_Req_8_6)]
    forecast_BH_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_BH,Economy_Req_BH)]
    forecast_BS_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_BS,Economy_Req_BS)]
    forecast_HB_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_HB,Economy_Req_HB)]
    forecast_HS_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_HS,Economy_Req_HS)]
    forecast_SB_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_SB,Economy_Req_SB)]
    forecast_SH_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_SH,Economy_Req_SH)]
    passengerTotalBH = 0
    cargoTotalBH = 0
    passengerTotalBS = 0
    cargoTotalBS = 0
    passengerTotalHB = 0
    cargoTotalHB = 0
    passengerTotalHS = 0
    cargoTotalHS = 0
    passengerTotalSB = 0
    cargoTotalSB = 0
    passengerTotalSH = 0
    cargoTotalSH = 0
    
    for k in range(last_BH):
        transOut1 = 0
        transOut2 = 0
        transOut1_1_4 = 0
        transOut1_1_5 = 0
        transOut1_1_6 = 0
        transOut2_1_4 = 0
        transOut2_1_5 = 0
        transOut2_1_6 = 0
        transOut1_2_4 = 0
        transOut1_2_5 = 0
        transOut1_2_6 = 0
        transOut2_2_4 = 0
        transOut2_2_5 = 0
        transOut2_2_6 = 0
        transOut1_3_4 = 0
        transOut1_3_5 = 0
        transOut1_3_6 = 0
        transOut2_3_4 = 0
        transOut2_3_5 = 0
        transOut2_3_6 = 0
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                if i == k:
                    transOut1_1_4 += x_1_4[i,j,1]
                    transOut2_1_4 += x_1_4[i,j,2]
                    transOut1_1_5 += x_1_5[i,j,1]
                    transOut2_1_5 += x_1_5[i,j,2]
                    transOut1_1_6 += x_1_6[i,j,1]
                    transOut2_1_6 += x_1_6[i,j,2]
                    transOut1_2_4 += x_2_4[i,j,1]
                    transOut2_2_4 += x_2_4[i,j,2]
                    transOut1_2_5 += x_2_5[i,j,1]
                    transOut2_2_5 += x_2_5[i,j,2]
                    transOut1_2_6 += x_2_6[i,j,1]
                    transOut2_2_6 += x_2_6[i,j,2]
                    transOut1_3_4 += x_3_4[i,j,1]
                    transOut2_3_4 += x_3_4[i,j,2]
                    transOut1_3_5 += x_3_5[i,j,1]
                    transOut2_3_5 += x_3_5[i,j,2]
                    transOut1_3_6 += x_3_6[i,j,1]
                    transOut2_3_6 += x_3_6[i,j,2]
                    transOut1 += (x_1_4[i,j,1]+x_1_5[i,j,1]+x_1_6[i,j,1]+x_2_4[i,j,1]+x_2_5[i,j,1]+x_2_6[i,j,1]+x_3_4[i,j,1]+x_3_5[i,j,1]+x_3_6[i,j,1])
                    transOut2 += (x_1_4[i,j,2]+x_1_5[i,j,2]+x_1_6[i,j,2]+x_2_4[i,j,2]+x_2_5[i,j,2]+x_2_6[i,j,2]+x_3_4[i,j,2]+x_3_5[i,j,2]+x_3_6[i,j,2])
                    passengerTotalBH += (x_1_4[i,j,1]+x_1_5[i,j,1]+x_1_6[i,j,1]+x_2_4[i,j,1]+x_2_5[i,j,1]+x_2_6[i,j,1]+x_3_4[i,j,1]+x_3_5[i,j,1]+x_3_6[i,j,1]+x_1_4[i,j,2]+x_1_5[i,j,2]+x_1_6[i,j,2]+x_2_4[i,j,2]+x_2_5[i,j,2]+x_2_6[i,j,2]+x_3_4[i,j,2]+x_3_5[i,j,2]+x_3_6[i,j,2])          
        for j in range(N*K):
            for i in range(cargo_BH[j]):
                if i == k:
                    transOut1_1_4 += y_1_4[i,j,1]
                    transOut2_1_4 += y_1_4[i,j,2]
                    transOut1_1_5 += y_1_5[i,j,1]
                    transOut2_1_5 += y_1_5[i,j,2]
                    transOut1_1_6 += y_1_6[i,j,1]
                    transOut2_1_6 += y_1_6[i,j,2]
                    transOut1_2_4 += y_2_4[i,j,1]
                    transOut2_2_4 += y_2_4[i,j,2]
                    transOut1_2_5 += y_2_5[i,j,1]
                    transOut2_2_5 += y_2_5[i,j,2]
                    transOut1_2_6 += y_2_6[i,j,1]
                    transOut2_2_6 += y_2_6[i,j,2]
                    transOut1_3_4 += y_3_4[i,j,1]
                    transOut2_3_4 += y_3_4[i,j,2]
                    transOut1_3_5 += y_3_5[i,j,1]
                    transOut2_3_5 += y_3_5[i,j,2]
                    transOut1_3_6 += y_3_6[i,j,1]
                    transOut2_3_6 += y_3_6[i,j,2]
                    transOut1 += (y_1_4[i,j,1]+y_1_5[i,j,1]+y_1_6[i,j,1]+y_2_4[i,j,1]+y_2_5[i,j,1]+y_2_6[i,j,1]+y_3_4[i,j,1]+y_3_5[i,j,1]+y_3_6[i,j,1])
                    transOut2 += (y_1_4[i,j,2]+y_1_5[i,j,2]+y_1_6[i,j,2]+y_2_4[i,j,2]+y_2_5[i,j,2]+y_2_6[i,j,2]+y_3_4[i,j,2]+y_3_5[i,j,2]+y_3_6[i,j,2])
                    cargoTotalBH += (y_1_4[i,j,1]+y_1_5[i,j,1]+y_1_6[i,j,1]+y_2_4[i,j,1]+y_2_5[i,j,1]+y_2_6[i,j,1]+y_3_4[i,j,1]+y_3_5[i,j,1]+y_3_6[i,j,1]+y_1_4[i,j,2]+y_1_5[i,j,2]+y_1_6[i,j,2]+y_2_4[i,j,2]+y_2_5[i,j,2]+y_2_6[i,j,2]+y_3_4[i,j,2]+y_3_5[i,j,2]+y_3_6[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_1_4 <= TimeSensitive_Req_1_4[k])
        m.addConstr(transOut2_1_4 <= Economy_Req_1_4[k])
        m.addConstr(transOut1_1_5 <= TimeSensitive_Req_1_5[k])
        m.addConstr(transOut2_1_5 <= Economy_Req_1_5[k])
        m.addConstr(transOut1_1_6 <= TimeSensitive_Req_1_6[k])
        m.addConstr(transOut2_1_6 <= Economy_Req_1_6[k])
        m.addConstr(transOut1_2_4 <= TimeSensitive_Req_2_4[k])
        m.addConstr(transOut2_2_4 <= Economy_Req_2_4[k])
        m.addConstr(transOut1_2_5 <= TimeSensitive_Req_2_5[k])
        m.addConstr(transOut2_2_5 <= Economy_Req_2_5[k])
        m.addConstr(transOut1_2_6 <= TimeSensitive_Req_2_6[k])
        m.addConstr(transOut2_2_6 <= Economy_Req_2_6[k])
        m.addConstr(transOut1_3_4 <= TimeSensitive_Req_3_4[k])
        m.addConstr(transOut2_3_4 <= Economy_Req_3_4[k])
        m.addConstr(transOut1_3_5 <= TimeSensitive_Req_3_5[k])
        m.addConstr(transOut2_3_5 <= Economy_Req_3_5[k])
        m.addConstr(transOut1_3_6 <= TimeSensitive_Req_3_6[k])
        m.addConstr(transOut2_3_6 <= Economy_Req_3_6[k])
        trash = c3_1 * (TimeSensitive_Req_BH[k]-transOut1) + c3_2 * (Economy_Req_BH[k]-transOut2)
        C6 += trash
    for k in range(last_BS):
        transOut1 = 0
        transOut2 = 0
        transOut1_1_7 = 0
        transOut2_1_7 = 0
        transOut1_1_8 = 0
        transOut2_1_8 = 0
        transOut1_2_7 = 0
        transOut2_2_7 = 0
        transOut1_2_8 = 0
        transOut2_2_8 = 0
        transOut1_3_7 = 0
        transOut2_3_7 = 0
        transOut1_3_8 = 0
        transOut2_3_8 = 0
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                if i == k:
                    transOut1_1_7 += x_1_7[i,j,1]
                    transOut2_1_7 += x_1_7[i,j,2]
                    transOut1_1_8 += x_1_8[i,j,1]
                    transOut2_1_8 += x_1_8[i,j,2]
                    transOut1_2_7 += x_2_7[i,j,1]
                    transOut2_2_7 += x_2_7[i,j,2]
                    transOut1_2_8 += x_2_8[i,j,1]
                    transOut2_2_8 += x_2_8[i,j,2]
                    transOut1_3_7 += x_3_7[i,j,1]
                    transOut2_3_7 += x_3_7[i,j,2]
                    transOut1_3_8 += x_3_8[i,j,1]
                    transOut2_3_8 += x_3_8[i,j,2]
                    transOut1 += (x_1_7[i,j,1]+x_1_8[i,j,1]+x_2_7[i,j,1]+x_2_8[i,j,1]+x_3_7[i,j,1]+x_3_8[i,j,1])
                    transOut2 += (x_1_7[i,j,2]+x_1_8[i,j,2]+x_2_7[i,j,2]+x_2_8[i,j,2]+x_3_7[i,j,2]+x_3_8[i,j,2])
                    passengerTotalBS += (x_1_7[i,j,1]+x_1_8[i,j,1]+x_2_7[i,j,1]+x_2_8[i,j,1]+x_3_7[i,j,1]+x_3_8[i,j,1]+x_1_7[i,j,2]+x_1_8[i,j,2]+x_2_7[i,j,2]+x_2_8[i,j,2]+x_3_7[i,j,2]+x_3_8[i,j,2])
        for j in range(N*K):
            for i in range(cargo_BH[j]):
                if i == k:
                    transOut1_1_7 += y_1_7[i,j,1]
                    transOut2_1_7 += y_1_7[i,j,2]
                    transOut1_1_8 += y_1_8[i,j,1]
                    transOut2_1_8 += y_1_8[i,j,2]
                    transOut1_2_7 += y_2_7[i,j,1]
                    transOut2_2_7 += y_2_7[i,j,2]
                    transOut1_2_8 += y_2_8[i,j,1]
                    transOut2_2_8 += y_2_8[i,j,2]
                    transOut1_3_7 += y_3_7[i,j,1]
                    transOut2_3_7 += y_3_7[i,j,2]
                    transOut1_3_8 += y_3_8[i,j,1]
                    transOut2_3_8 += y_3_8[i,j,2]
                    transOut1 += (y_1_7[i,j,1]+y_1_8[i,j,1]+y_2_7[i,j,1]+y_2_8[i,j,1]+y_3_7[i,j,1]+y_3_8[i,j,1])
                    transOut2 += (y_1_7[i,j,2]+y_1_8[i,j,2]+y_2_7[i,j,2]+y_2_8[i,j,2]+y_3_7[i,j,2]+y_3_8[i,j,2])
                    cargoTotalBS += (y_1_7[i,j,1]+y_1_8[i,j,1]+y_2_7[i,j,1]+y_2_8[i,j,1]+y_3_7[i,j,1]+y_3_8[i,j,1]+y_1_7[i,j,2]+y_1_8[i,j,2]+y_2_7[i,j,2]+y_2_8[i,j,2]+y_3_7[i,j,2]+y_3_8[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_1_7 <= TimeSensitive_Req_1_7[k])
        m.addConstr(transOut2_1_7 <= Economy_Req_1_7[k])
        m.addConstr(transOut1_1_8 <= TimeSensitive_Req_1_8[k])
        m.addConstr(transOut2_1_8 <= Economy_Req_1_8[k])
        m.addConstr(transOut1_2_7 <= TimeSensitive_Req_2_7[k])
        m.addConstr(transOut2_2_7 <= Economy_Req_2_7[k])
        m.addConstr(transOut1_2_8 <= TimeSensitive_Req_2_8[k])
        m.addConstr(transOut2_2_8 <= Economy_Req_2_8[k])
        m.addConstr(transOut1_3_7 <= TimeSensitive_Req_3_7[k])
        m.addConstr(transOut2_3_7 <= Economy_Req_3_7[k])
        m.addConstr(transOut1_3_8 <= TimeSensitive_Req_3_8[k])
        m.addConstr(transOut2_3_8 <= Economy_Req_3_8[k])
        trash = c3_1 * (TimeSensitive_Req_BS[k]-transOut1) + c3_2 * (Economy_Req_BS[k]-transOut2)
        C6 += trash
    for k in range(last_HB):
        transOut1 = 0
        transOut2 = 0
        transOut1_4_1 = 0
        transOut2_4_1 = 0
        transOut1_4_2 = 0
        transOut2_4_2 = 0
        transOut1_4_3 = 0
        transOut2_4_3 = 0
        transOut1_5_1 = 0
        transOut2_5_1 = 0
        transOut1_5_2 = 0
        transOut2_5_2 = 0
        transOut1_5_3 = 0
        transOut2_5_3 = 0
        transOut1_6_1 = 0
        transOut2_6_1 = 0
        transOut1_6_2 = 0
        transOut2_6_2 = 0
        transOut1_6_3 = 0
        transOut2_6_3 = 0
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                if i == k:
                    transOut1_4_1 += x_4_1[i,j,1]
                    transOut2_4_1 += x_4_1[i,j,2]
                    transOut1_4_2 += x_4_2[i,j,1]
                    transOut2_4_2 += x_4_2[i,j,2]
                    transOut1_4_3 += x_4_3[i,j,1]
                    transOut2_4_3 += x_4_3[i,j,2]
                    transOut1_5_1 += x_5_1[i,j,1]
                    transOut2_5_1 += x_5_1[i,j,2]
                    transOut1_5_2 += x_5_2[i,j,1]
                    transOut2_5_2 += x_5_2[i,j,2]
                    transOut1_5_3 += x_5_3[i,j,1]
                    transOut2_5_3 += x_5_3[i,j,2]
                    transOut1_6_1 += x_6_1[i,j,1]
                    transOut2_6_1 += x_6_1[i,j,2]
                    transOut1_6_2 += x_6_2[i,j,1]
                    transOut2_6_2 += x_6_2[i,j,2]
                    transOut1_6_3 += x_6_3[i,j,1]
                    transOut2_6_3 += x_6_3[i,j,2]
                    transOut1 += x_4_1[i,j,1]+x_4_2[i,j,1]+x_4_3[i,j,1]+x_5_1[i,j,1]+x_5_2[i,j,1]+x_5_3[i,j,1]+x_6_1[i,j,1]+x_6_2[i,j,1]+x_6_3[i,j,1]
                    transOut2 += x_4_1[i,j,2]+x_4_2[i,j,2]+x_4_3[i,j,2]+x_5_1[i,j,2]+x_5_2[i,j,2]+x_5_3[i,j,2]+x_6_1[i,j,2]+x_6_2[i,j,2]+x_6_3[i,j,2]
                    passengerTotalHB += (x_4_1[i,j,1]+x_4_2[i,j,1]+x_4_3[i,j,1]+x_5_1[i,j,1]+x_5_2[i,j,1]+x_5_3[i,j,1]+x_6_1[i,j,1]+x_6_2[i,j,1]+x_6_3[i,j,1]+x_4_1[i,j,2]+x_4_2[i,j,2]+x_4_3[i,j,2]+x_5_1[i,j,2]+x_5_2[i,j,2]+x_5_3[i,j,2]+x_6_1[i,j,2]+x_6_2[i,j,2]+x_6_3[i,j,2])
        for j in range(N*K):
            for i in range(cargo_HS[j]):
                if i == k:
                    transOut1_4_1 += y_4_1[i,j,1]
                    transOut2_4_1 += y_4_1[i,j,2]
                    transOut1_4_2 += y_4_2[i,j,1]
                    transOut2_4_2 += y_4_2[i,j,2]
                    transOut1_4_3 += y_4_3[i,j,1]
                    transOut2_4_3 += y_4_3[i,j,2]
                    transOut1_5_1 += y_5_1[i,j,1]
                    transOut2_5_1 += y_5_1[i,j,2]
                    transOut1_5_2 += y_5_2[i,j,1]
                    transOut2_5_2 += y_5_2[i,j,2]
                    transOut1_5_3 += y_5_3[i,j,1]
                    transOut2_5_3 += y_5_3[i,j,2]
                    transOut1_6_1 += y_6_1[i,j,1]
                    transOut2_6_1 += y_6_1[i,j,2]
                    transOut1_6_2 += y_6_2[i,j,1]
                    transOut2_6_2 += y_6_2[i,j,2]
                    transOut1_6_3 += y_6_3[i,j,1]
                    transOut2_6_3 += y_6_3[i,j,2]
                    transOut1 += y_4_1[i,j,1]+y_4_2[i,j,1]+y_4_3[i,j,1]+y_5_1[i,j,1]+y_5_2[i,j,1]+y_5_3[i,j,1]+y_6_1[i,j,1]+y_6_2[i,j,1]+y_6_3[i,j,1]
                    transOut2 += y_4_1[i,j,2]+y_4_2[i,j,2]+y_4_3[i,j,2]+y_5_1[i,j,2]+y_5_2[i,j,2]+y_5_3[i,j,2]+y_6_1[i,j,2]+y_6_2[i,j,2]+y_6_3[i,j,2]
                    cargoTotalHB += (y_4_1[i,j,1]+y_4_2[i,j,1]+y_4_3[i,j,1]+y_5_1[i,j,1]+y_5_2[i,j,1]+y_5_3[i,j,1]+y_6_1[i,j,1]+y_6_2[i,j,1]+y_6_3[i,j,1]+y_4_1[i,j,2]+y_4_2[i,j,2]+y_4_3[i,j,2]+y_5_1[i,j,2]+y_5_2[i,j,2]+y_5_3[i,j,2]+y_6_1[i,j,2]+y_6_2[i,j,2]+y_6_3[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_4_1 <= TimeSensitive_Req_4_1[k])
        m.addConstr(transOut2_4_1 <= Economy_Req_4_1[k])
        m.addConstr(transOut1_4_2 <= TimeSensitive_Req_4_2[k])
        m.addConstr(transOut2_4_2 <= Economy_Req_4_2[k])
        m.addConstr(transOut1_4_3 <= TimeSensitive_Req_4_3[k])
        m.addConstr(transOut2_4_3 <= Economy_Req_4_3[k])
        m.addConstr(transOut1_5_1 <= TimeSensitive_Req_5_1[k])
        m.addConstr(transOut2_5_1 <= Economy_Req_5_1[k])
        m.addConstr(transOut1_5_2 <= TimeSensitive_Req_5_2[k])
        m.addConstr(transOut2_5_2 <= Economy_Req_5_2[k])
        m.addConstr(transOut1_5_3 <= TimeSensitive_Req_5_3[k])
        m.addConstr(transOut2_5_3 <= Economy_Req_5_3[k])
        m.addConstr(transOut1_6_1 <= TimeSensitive_Req_6_1[k])
        m.addConstr(transOut2_6_1 <= Economy_Req_6_1[k])
        m.addConstr(transOut1_6_2 <= TimeSensitive_Req_6_2[k])
        m.addConstr(transOut2_6_2 <= Economy_Req_6_2[k])
        m.addConstr(transOut1_6_3 <= TimeSensitive_Req_6_3[k])
        m.addConstr(transOut2_6_3 <= Economy_Req_6_3[k])
        trash = c3_1 * (TimeSensitive_Req_HB[k]-transOut1) + c3_2 * (Economy_Req_HB[k]-transOut2)
        C6 += trash
    for k in range(last_HS):
        transOut1 = 0
        transOut2 = 0
        transOut1_4_7 = 0
        transOut2_4_7 = 0
        transOut1_4_8 = 0
        transOut2_4_8 = 0
        transOut1_5_7 = 0
        transOut2_5_7 = 0
        transOut1_5_8 = 0
        transOut2_5_8 = 0
        transOut1_6_7 = 0
        transOut2_6_7 = 0
        transOut1_6_8 = 0
        transOut2_6_8 = 0
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                if i == k:
                    transOut1_4_7 += x_4_7[i,j,1]
                    transOut2_4_7 += x_4_7[i,j,2]
                    transOut1_4_8 += x_4_8[i,j,1]
                    transOut2_4_8 += x_4_8[i,j,2]
                    transOut1_5_7 += x_5_7[i,j,1]
                    transOut2_5_7 += x_5_7[i,j,2]
                    transOut1_5_8 += x_5_8[i,j,1]
                    transOut2_5_8 += x_5_8[i,j,2]
                    transOut1_6_7 += x_6_7[i,j,1]
                    transOut2_6_7 += x_6_7[i,j,2]
                    transOut1_6_8 += x_6_8[i,j,1]
                    transOut2_6_8 += x_6_8[i,j,2]
                    transOut1 += x_4_7[i,j,1]+x_4_8[i,j,1]+x_5_7[i,j,1]+x_5_8[i,j,1]+x_6_7[i,j,1]+x_6_8[i,j,1]
                    transOut2 += x_4_7[i,j,2]+x_4_8[i,j,2]+x_5_7[i,j,2]+x_5_8[i,j,2]+x_6_7[i,j,2]+x_6_8[i,j,2]
                    passengerTotalHS += (x_4_7[i,j,1]+x_4_8[i,j,1]+x_5_7[i,j,1]+x_5_8[i,j,1]+x_6_7[i,j,1]+x_6_8[i,j,1]+x_4_7[i,j,2]+x_4_8[i,j,2]+x_5_7[i,j,2]+x_5_8[i,j,2]+x_6_7[i,j,2]+x_6_8[i,j,2])
        for j in range(N*K):
            for i in range(cargo_HS[j]):
                if i == k:
                    transOut1_4_7 += y_4_7[i,j,1]
                    transOut2_4_7 += y_4_7[i,j,2]
                    transOut1_4_8 += y_4_8[i,j,1]
                    transOut2_4_8 += y_4_8[i,j,2]
                    transOut1_5_7 += y_5_7[i,j,1]
                    transOut2_5_7 += y_5_7[i,j,2]
                    transOut1_5_8 += y_5_8[i,j,1]
                    transOut2_5_8 += y_5_8[i,j,2]
                    transOut1_6_7 += y_6_7[i,j,1]
                    transOut2_6_7 += y_6_7[i,j,2]
                    transOut1_6_8 += y_6_8[i,j,1]
                    transOut2_6_8 += y_6_8[i,j,2]
                    transOut1 += y_4_7[i,j,1]+y_4_8[i,j,1]+y_5_7[i,j,1]+y_5_8[i,j,1]+y_6_7[i,j,1]+y_6_8[i,j,1]
                    transOut2 += y_4_7[i,j,2]+y_4_8[i,j,2]+y_5_7[i,j,2]+y_5_8[i,j,2]+y_6_7[i,j,2]+y_6_8[i,j,2]
                    cargoTotalHS += (y_4_7[i,j,1]+y_4_8[i,j,1]+y_5_7[i,j,1]+y_5_8[i,j,1]+y_6_7[i,j,1]+y_6_8[i,j,1]+y_4_7[i,j,2]+y_4_8[i,j,2]+y_5_7[i,j,2]+y_5_8[i,j,2]+y_6_7[i,j,2]+y_6_8[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_4_7 <= TimeSensitive_Req_4_7[k])
        m.addConstr(transOut2_4_7 <= Economy_Req_4_7[k])
        m.addConstr(transOut1_4_8 <= TimeSensitive_Req_4_8[k])
        m.addConstr(transOut2_4_8 <= Economy_Req_4_8[k])
        m.addConstr(transOut1_5_7 <= TimeSensitive_Req_5_7[k])
        m.addConstr(transOut2_5_7 <= Economy_Req_5_7[k])
        m.addConstr(transOut1_5_8 <= TimeSensitive_Req_5_8[k])
        m.addConstr(transOut2_5_8 <= Economy_Req_5_8[k])
        m.addConstr(transOut1_6_7 <= TimeSensitive_Req_6_7[k])
        m.addConstr(transOut2_6_7 <= Economy_Req_6_7[k])
        m.addConstr(transOut1_6_8 <= TimeSensitive_Req_6_8[k])
        m.addConstr(transOut2_6_8 <= Economy_Req_6_8[k])
        trash = c3_1 * (TimeSensitive_Req_HS[k]-transOut1) + c3_2 * (Economy_Req_HS[k]-transOut2)
        C6 += trash
    for k in range(last_SB):
        transOut1 = 0
        transOut2 = 0
        transOut1_7_1 = 0
        transOut2_7_1 = 0
        transOut1_7_2 = 0
        transOut2_7_2 = 0
        transOut1_7_3 = 0
        transOut2_7_3 = 0
        transOut1_8_1 = 0
        transOut2_8_1 = 0
        transOut1_8_2 = 0
        transOut2_8_2 = 0
        transOut1_8_3 = 0
        transOut2_8_3 = 0
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                if i == k:
                    transOut1_7_1 += x_7_1[i,j,1]
                    transOut2_7_1 += x_7_1[i,j,2]
                    transOut1_7_2 += x_7_2[i,j,1]
                    transOut2_7_2 += x_7_2[i,j,2]
                    transOut1_7_3 += x_7_3[i,j,1]
                    transOut2_7_3 += x_7_3[i,j,2]
                    transOut1_8_1 += x_8_1[i,j,1]
                    transOut2_8_1 += x_8_1[i,j,2]
                    transOut1_8_2 += x_8_2[i,j,1]
                    transOut2_8_2 += x_8_2[i,j,2]
                    transOut1_8_3 += x_8_3[i,j,1]
                    transOut2_8_3 += x_8_3[i,j,2]
                    transOut1 += x_7_1[i,j,1]+x_7_2[i,j,1]+x_7_3[i,j,1]+x_8_1[i,j,1]+x_8_2[i,j,1]+x_8_3[i,j,1]
                    transOut2 += x_7_1[i,j,2]+x_7_2[i,j,2]+x_7_3[i,j,2]+x_8_1[i,j,2]+x_8_2[i,j,2]+x_8_3[i,j,2]
                    passengerTotalSB += (x_7_1[i,j,1]+x_7_2[i,j,1]+x_7_3[i,j,1]+x_8_1[i,j,1]+x_8_2[i,j,1]+x_8_3[i,j,1]+x_7_1[i,j,2]+x_7_2[i,j,2]+x_7_3[i,j,2]+x_8_1[i,j,2]+x_8_2[i,j,2]+x_8_3[i,j,2])
        for j in range(N*K):
            for i in range(cargo_SB[j]):
                if i == k:
                    transOut1_7_1 += y_7_1[i,j,1]
                    transOut2_7_1 += y_7_1[i,j,2]
                    transOut1_7_2 += y_7_2[i,j,1]
                    transOut2_7_2 += y_7_2[i,j,2]
                    transOut1_7_3 += y_7_3[i,j,1]
                    transOut2_7_3 += y_7_3[i,j,2]
                    transOut1_8_1 += y_8_1[i,j,1]
                    transOut2_8_1 += y_8_1[i,j,2]
                    transOut1_8_2 += y_8_2[i,j,1]
                    transOut2_8_2 += y_8_2[i,j,2]
                    transOut1_8_3 += y_8_3[i,j,1]
                    transOut2_8_3 += y_8_3[i,j,2]
                    transOut1 += y_7_1[i,j,1]+y_7_2[i,j,1]+y_7_3[i,j,1]+y_8_1[i,j,1]+y_8_2[i,j,1]+y_8_3[i,j,1]
                    transOut2 += y_7_1[i,j,2]+y_7_2[i,j,2]+y_7_3[i,j,2]+y_8_1[i,j,2]+y_8_2[i,j,2]+y_8_3[i,j,2]
                    cargoTotalSB += (y_7_1[i,j,1]+y_7_2[i,j,1]+y_7_3[i,j,1]+y_8_1[i,j,1]+y_8_2[i,j,1]+y_8_3[i,j,1]+y_7_1[i,j,2]+y_7_2[i,j,2]+y_7_3[i,j,2]+y_8_1[i,j,2]+y_8_2[i,j,2]+y_8_3[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_7_1 <= TimeSensitive_Req_7_1[k])
        m.addConstr(transOut2_7_1 <= Economy_Req_7_1[k])
        m.addConstr(transOut1_7_2 <= TimeSensitive_Req_7_2[k])
        m.addConstr(transOut2_7_2 <= Economy_Req_7_2[k])
        m.addConstr(transOut1_7_3 <= TimeSensitive_Req_7_3[k])
        m.addConstr(transOut2_7_3 <= Economy_Req_7_3[k])
        m.addConstr(transOut1_8_1 <= TimeSensitive_Req_8_1[k])
        m.addConstr(transOut2_8_1 <= Economy_Req_8_1[k])
        m.addConstr(transOut1_8_2 <= TimeSensitive_Req_8_2[k])
        m.addConstr(transOut2_8_2 <= Economy_Req_8_2[k])
        m.addConstr(transOut1_8_3 <= TimeSensitive_Req_8_3[k])
        m.addConstr(transOut2_8_3 <= Economy_Req_8_3[k])
        trash = c3_1 * (TimeSensitive_Req_SB[k]-transOut1) + c3_2 * (Economy_Req_SB[k]-transOut2)
        C6 += trash
    for k in range(last_SH):
        transOut1 = 0
        transOut2 = 0
        transOut1_7_4 = 0
        transOut2_7_4 = 0
        transOut1_7_5 = 0
        transOut2_7_5 = 0
        transOut1_7_6 = 0
        transOut2_7_6 = 0
        transOut1_8_4 = 0
        transOut2_8_4 = 0
        transOut1_8_5 = 0
        transOut2_8_5 = 0
        transOut1_8_6 = 0
        transOut2_8_6 = 0
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                if i == k:
                    transOut1_7_4 += x_7_4[i,j,1]
                    transOut2_7_4 += x_7_4[i,j,2]
                    transOut1_7_5 += x_7_5[i,j,1]
                    transOut2_7_5 += x_7_5[i,j,2]
                    transOut1_7_6 += x_7_6[i,j,1]
                    transOut2_7_6 += x_7_6[i,j,2]
                    transOut1_8_4 += x_8_4[i,j,1]
                    transOut2_8_4 += x_8_4[i,j,2]
                    transOut1_8_5 += x_8_5[i,j,1]
                    transOut2_8_5 += x_8_5[i,j,2]
                    transOut1_8_6 += x_8_6[i,j,1]
                    transOut2_8_6 += x_8_6[i,j,2]
                    transOut1 += x_7_4[i,j,1]+x_7_5[i,j,1]+x_7_6[i,j,1]+x_8_4[i,j,1]+x_8_5[i,j,1]+x_8_6[i,j,1]
                    transOut2 += x_7_4[i,j,2]+x_7_5[i,j,2]+x_7_6[i,j,2]+x_8_4[i,j,2]+x_8_5[i,j,2]+x_8_6[i,j,2]
                    passengerTotalSH += (x_7_4[i,j,1]+x_7_5[i,j,1]+x_7_6[i,j,1]+x_8_4[i,j,1]+x_8_5[i,j,1]+x_8_6[i,j,1]+x_7_4[i,j,2]+x_7_5[i,j,2]+x_7_6[i,j,2]+x_8_4[i,j,2]+x_8_5[i,j,2]+x_8_6[i,j,2])
        for j in range(N*K):
            for i in range(cargo_SB[j]):
                if i == k:
                    transOut1_7_4 += y_7_4[i,j,1]
                    transOut2_7_4 += y_7_4[i,j,2]
                    transOut1_7_5 += y_7_5[i,j,1]
                    transOut2_7_5 += y_7_5[i,j,2]
                    transOut1_7_6 += y_7_6[i,j,1]
                    transOut2_7_6 += y_7_6[i,j,2]
                    transOut1_8_4 += y_8_4[i,j,1]
                    transOut2_8_4 += y_8_4[i,j,2]
                    transOut1_8_5 += y_8_5[i,j,1]
                    transOut2_8_5 += y_8_5[i,j,2]
                    transOut1_8_6 += y_8_6[i,j,1]
                    transOut2_8_6 += y_8_6[i,j,2]
                    transOut1 += y_7_4[i,j,1]+y_7_5[i,j,1]+y_7_6[i,j,1]+y_8_4[i,j,1]+y_8_5[i,j,1]+y_8_6[i,j,1]
                    transOut2 += y_7_4[i,j,2]+y_7_5[i,j,2]+y_7_6[i,j,2]+y_8_4[i,j,2]+y_8_5[i,j,2]+y_8_6[i,j,2]
                    cargoTotalSH += (y_7_4[i,j,1]+y_7_5[i,j,1]+y_7_6[i,j,1]+y_8_4[i,j,1]+y_8_5[i,j,1]+y_8_6[i,j,1]+y_7_4[i,j,2]+y_7_5[i,j,2]+y_7_6[i,j,2]+y_8_4[i,j,2]+y_8_5[i,j,2]+y_8_6[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_7_4 <= TimeSensitive_Req_7_4[k])
        m.addConstr(transOut2_7_4 <= Economy_Req_7_4[k])
        m.addConstr(transOut1_7_5 <= TimeSensitive_Req_7_5[k])
        m.addConstr(transOut2_7_5 <= Economy_Req_7_5[k])
        m.addConstr(transOut1_7_6 <= TimeSensitive_Req_7_6[k])
        m.addConstr(transOut2_7_6 <= Economy_Req_7_6[k])
        m.addConstr(transOut1_8_4 <= TimeSensitive_Req_8_4[k])
        m.addConstr(transOut2_8_4 <= Economy_Req_8_4[k])
        m.addConstr(transOut1_8_5 <= TimeSensitive_Req_8_5[k])
        m.addConstr(transOut2_8_5 <= Economy_Req_8_5[k])
        m.addConstr(transOut1_8_6 <= TimeSensitive_Req_8_6[k])
        m.addConstr(transOut2_8_6 <= Economy_Req_8_6[k])
        trash = c3_1 * (TimeSensitive_Req_SH[k]-transOut1) + c3_2 * (Economy_Req_SH[k]-transOut2)
        C6 += trash
    
    desertTotalBH = sum(forecast_1_4_K)+sum(forecast_1_5_K)+sum(forecast_1_6_K)+sum(forecast_2_4_K)+sum(forecast_2_5_K)+sum(forecast_2_6_K)+sum(forecast_3_4_K)+sum(forecast_3_5_K)+sum(forecast_3_6_K)-passengerTotalBH-cargoTotalBH
    desertTotalBS = sum(forecast_1_7_K)+sum(forecast_1_8_K)+sum(forecast_2_7_K)+sum(forecast_2_8_K)+sum(forecast_3_7_K)+sum(forecast_3_8_K)-passengerTotalBS-cargoTotalBS
    desertTotalHB = sum(forecast_4_1_K)+sum(forecast_4_2_K)+sum(forecast_4_3_K)+sum(forecast_5_1_K)+sum(forecast_5_2_K)+sum(forecast_5_3_K)+sum(forecast_6_1_K)+sum(forecast_6_2_K)+sum(forecast_6_3_K)-passengerTotalHB-cargoTotalHB
    desertTotalHS = sum(forecast_4_7_K)+sum(forecast_4_8_K)+sum(forecast_5_7_K)+sum(forecast_5_8_K)+sum(forecast_6_7_K)+sum(forecast_6_8_K)-passengerTotalHS-cargoTotalHS
    desertTotalSB = sum(forecast_7_1_K)+sum(forecast_7_2_K)+sum(forecast_7_3_K)+sum(forecast_8_1_K)+sum(forecast_8_2_K)+sum(forecast_8_3_K)-passengerTotalSB-cargoTotalSB
    desertTotalSH = sum(forecast_7_4_K)+sum(forecast_7_5_K)+sum(forecast_7_6_K)+sum(forecast_8_4_K)+sum(forecast_8_5_K)+sum(forecast_8_6_K)-passengerTotalSH-cargoTotalSH
                      
    # 本周期内无法运完的货物的仓储成本和预期逾期成本
    left_1_4 = 0
    left_1_5 = 0
    left_1_6 = 0
    left_1_7 = 0
    left_1_8 = 0
    left_2_4 = 0
    left_2_5 = 0
    left_2_6 = 0
    left_2_7 = 0
    left_2_8 = 0
    left_3_4 = 0
    left_3_5 = 0
    left_3_6 = 0
    left_3_7 = 0
    left_3_8 = 0
    left_4_1 = 0
    left_4_2 = 0
    left_4_3 = 0
    left_4_7 = 0
    left_4_8 = 0
    left_5_1 = 0
    left_5_2 = 0
    left_5_3 = 0
    left_5_7 = 0
    left_5_8 = 0
    left_6_1 = 0
    left_6_2 = 0
    left_6_3 = 0
    left_6_7 = 0
    left_6_8 = 0
    left_7_1 = 0
    left_7_2 = 0
    left_7_3 = 0
    left_7_4 = 0
    left_7_5 = 0
    left_7_6 = 0
    left_8_1 = 0
    left_8_2 = 0
    left_8_3 = 0
    left_8_4 = 0
    left_8_5 = 0
    left_8_6 = 0                 
    for i in range(last_BH, 24 * K):
        left_1_4 += forecast_1_4_K[i]
        left_1_5 += forecast_1_5_K[i]
        left_1_6 += forecast_1_6_K[i]
        left_2_4 += forecast_2_4_K[i]
        left_2_5 += forecast_2_5_K[i]
        left_2_6 += forecast_2_6_K[i]
        left_3_4 += forecast_3_4_K[i]
        left_3_5 += forecast_3_5_K[i]
        left_3_6 += forecast_3_6_K[i]      
        C1 += c1 * (forecast_1_4_K[i]+forecast_1_5_K[i]+forecast_1_6_K[i]+forecast_2_4_K[i]+forecast_2_5_K[i]+forecast_2_6_K[i]+forecast_3_4_K[i]+forecast_3_5_K[i]+forecast_3_6_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_BH[i] + c2_2 * Economy_Req_BH[i]) * (24 * K - i + first_BH - 1) * (1 - (i + 1) / (24 * K))
    for i in range(last_BS, 24 * K):
        left_1_7 += forecast_1_7_K[i]
        left_1_8 += forecast_1_8_K[i]
        left_2_7 += forecast_2_7_K[i]
        left_2_8 += forecast_2_8_K[i]
        left_3_7 += forecast_3_7_K[i]
        left_3_8 += forecast_3_8_K[i]
        C1 += c1 * (forecast_1_7_K[i]+forecast_1_8_K[i]+forecast_2_7_K[i]+forecast_2_8_K[i]+forecast_3_7_K[i]+forecast_3_8_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_BS[i] + c2_2 * Economy_Req_BS[i]) * (24 * K - i + first_BS - 1) * (1 - (i + 1) / (24 * K))  
    for i in range(last_HB, 24 * K):
        left_4_1 += forecast_4_1_K[i]
        left_4_2 += forecast_4_2_K[i]
        left_4_3 += forecast_4_3_K[i]
        left_5_1 += forecast_5_1_K[i]
        left_5_2 += forecast_5_2_K[i]
        left_5_3 += forecast_5_3_K[i]
        left_6_1 += forecast_6_1_K[i]
        left_6_2 += forecast_6_2_K[i]
        left_6_3 += forecast_6_3_K[i]
        C1 += c1 * (forecast_4_1_K[i]+forecast_4_2_K[i]+forecast_4_3_K[i]+forecast_5_1_K[i]+forecast_5_2_K[i]+forecast_5_3_K[i]+forecast_6_1_K[i]+forecast_6_2_K[i]+forecast_6_3_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_HB[i] + c2_2 * Economy_Req_HB[i]) * (24 * K - i + first_HB - 1) * (1 - (i + 1) / (24 * K))
    for i in range(last_HS, 24 * K):
        left_4_7 += forecast_4_7_K[i]
        left_4_8 += forecast_4_8_K[i]
        left_5_7 += forecast_5_7_K[i]
        left_5_8 += forecast_5_8_K[i]
        left_6_7 += forecast_6_7_K[i]
        left_6_8 += forecast_6_8_K[i]  
        C1 += c1 * (forecast_4_7_K[i]+forecast_4_8_K[i]+forecast_5_7_K[i]+forecast_5_8_K[i]+forecast_6_7_K[i]+forecast_6_8_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_HS[i] + c2_2 * Economy_Req_HS[i]) * (24 * K - i + first_HS - 1) * (1 - (i + 1) / (24 * K))
    for i in range(last_SB, 24 * K):
        left_7_1 += forecast_7_1_K[i]
        left_7_2 += forecast_7_2_K[i]
        left_7_3 += forecast_7_3_K[i]
        left_8_1 += forecast_8_1_K[i]
        left_8_2 += forecast_8_2_K[i]
        left_8_3 += forecast_8_3_K[i]   
        C1 += c1 * (forecast_7_1_K[i]+forecast_7_2_K[i]+forecast_7_3_K[i]+forecast_8_1_K[i]+forecast_8_2_K[i]+forecast_8_3_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_SB[i] + c2_2 * Economy_Req_SB[i]) * (24 * K - i + first_SB - 1) * (1 - (i + 1) / (24 * K))
    for i in range(last_SH, 24 * K):
        left_7_4 += forecast_7_4_K[i]
        left_7_5 += forecast_7_5_K[i]
        left_7_6 += forecast_7_6_K[i]
        left_8_4 += forecast_8_4_K[i]
        left_8_5 += forecast_8_5_K[i]
        left_8_6 += forecast_8_6_K[i]
        C1 += c1 * (forecast_7_4_K[i]+forecast_7_5_K[i]+forecast_7_6_K[i]+forecast_8_4_K[i]+forecast_8_5_K[i]+forecast_8_6_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_SH[i] + c2_2 * Economy_Req_SH[i]) * (24 * K - i + first_SH - 1) * (1 - (i + 1) / (24 * K))       
                
    left_to_leave_1_4.append(left_1_4)
    left_to_leave_1_5.append(left_1_5)
    left_to_leave_1_6.append(left_1_6)
    left_to_leave_1_7.append(left_1_7)
    left_to_leave_1_8.append(left_1_8)
    left_to_leave_2_4.append(left_2_4)
    left_to_leave_2_5.append(left_2_5)
    left_to_leave_2_6.append(left_2_6)
    left_to_leave_2_7.append(left_2_7)
    left_to_leave_2_8.append(left_2_8)
    left_to_leave_3_4.append(left_3_4)
    left_to_leave_3_5.append(left_3_5)
    left_to_leave_3_6.append(left_3_6)
    left_to_leave_3_7.append(left_3_7)
    left_to_leave_3_8.append(left_3_8)
    left_to_leave_4_1.append(left_4_1)
    left_to_leave_4_2.append(left_4_2)
    left_to_leave_4_3.append(left_4_3)
    left_to_leave_4_7.append(left_4_7)
    left_to_leave_4_8.append(left_4_8)
    left_to_leave_5_1.append(left_5_1)
    left_to_leave_5_2.append(left_5_2)
    left_to_leave_5_3.append(left_5_3)
    left_to_leave_5_7.append(left_5_7)
    left_to_leave_5_8.append(left_5_8)
    left_to_leave_6_1.append(left_6_1)
    left_to_leave_6_2.append(left_6_2)
    left_to_leave_6_3.append(left_6_3)
    left_to_leave_6_7.append(left_6_7)
    left_to_leave_6_8.append(left_6_8)
    left_to_leave_7_1.append(left_7_1)
    left_to_leave_7_2.append(left_7_2)
    left_to_leave_7_3.append(left_7_3)
    left_to_leave_7_4.append(left_7_4)
    left_to_leave_7_5.append(left_7_5)
    left_to_leave_7_6.append(left_7_6)
    left_to_leave_8_1.append(left_8_1)
    left_to_leave_8_2.append(left_8_2)
    left_to_leave_8_3.append(left_8_3)
    left_to_leave_8_4.append(left_8_4)
    left_to_leave_8_5.append(left_8_5)
    left_to_leave_8_6.append(left_8_6)
                      
    # 计算每个航段上客机和货机运输的量
    passengerTrans_BH = 0
    passengerTrans_BS = 0
    passengerTrans_HB = 0
    passengerTrans_HS = 0
    passengerTrans_SB = 0
    passengerTrans_SH = 0
    cargoTrans = 0
    cargoTrans_BH = 0
    cargoTrans_HS = 0
    cargoTrans_SB = 0
    for w in range(1,3):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                passengerTrans_BH += (x_1_4[i,j,w]+x_1_5[i,j,w]+x_1_6[i,j,w]+x_2_4[i,j,w]+x_2_5[i,j,w]+x_2_6[i,j,w]+x_3_4[i,j,w]+x_3_5[i,j,w]+x_3_6[i,j,w])
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                passengerTrans_BS += (x_1_7[i,j,w]+x_1_8[i,j,w]+x_2_7[i,j,w]+x_2_8[i,j,w]+x_3_7[i,j,w]+x_3_8[i,j,w])
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                passengerTrans_HB += (x_4_1[i,j,w]+x_4_2[i,j,w]+x_4_3[i,j,w]+x_5_1[i,j,w]+x_5_2[i,j,w]+x_5_3[i,j,w]+x_6_1[i,j,w]+x_6_2[i,j,w]+x_6_3[i,j,w])
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                passengerTrans_HS += (x_4_7[i,j,w]+x_4_8[i,j,w]+x_5_7[i,j,w]+x_5_8[i,j,w]+x_6_7[i,j,w]+x_6_8[i,j,w])
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                passengerTrans_SB += (x_7_1[i,j,w]+x_7_2[i,j,w]+x_7_3[i,j,w]+x_8_1[i,j,w]+x_8_2[i,j,w]+x_8_3[i,j,w])
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                passengerTrans_SH += (x_7_4[i,j,w]+x_7_5[i,j,w]+x_7_6[i,j,w]+x_8_4[i,j,w]+x_8_5[i,j,w]+x_8_6[i,j,w])
        for j in range(N*K):
            for i in range(cargo_BH[j]):
                cargoTrans += (y_1_4[i,j,w]+y_1_5[i,j,w]+y_1_6[i,j,w]+y_2_4[i,j,w]+y_2_5[i,j,w]+y_2_6[i,j,w]+y_3_4[i,j,w]+y_3_5[i,j,w]+y_3_6[i,j,w]+y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w])
                cargoTrans_BH += (y_1_4[i,j,w]+y_1_5[i,j,w]+y_1_6[i,j,w]+y_2_4[i,j,w]+y_2_5[i,j,w]+y_2_6[i,j,w]+y_3_4[i,j,w]+y_3_5[i,j,w]+y_3_6[i,j,w]+y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w])
                cargoTrans_HS += (y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w])
            for i in range(cargo_HS[j]):
                cargoTrans += (y_4_7[i,j,w]+y_4_8[i,j,w]+y_5_7[i,j,w]+y_5_8[i,j,w]+y_6_7[i,j,w]+y_6_8[i,j,w]+y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w])
                cargoTrans_HS += (y_4_7[i,j,w]+y_4_8[i,j,w]+y_5_7[i,j,w]+y_5_8[i,j,w]+y_6_7[i,j,w]+y_6_8[i,j,w]+y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w])
                cargoTrans_SB += (y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w])
            for i in range(cargo_SB[j]):
                cargoTrans += (y_7_1[i,j,w]+y_7_2[i,j,w]+y_7_3[i,j,w]+y_8_1[i,j,w]+y_8_2[i,j,w]+y_8_3[i,j,w]+y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w])
                cargoTrans_SB += (y_7_1[i,j,w]+y_7_2[i,j,w]+y_7_3[i,j,w]+y_8_1[i,j,w]+y_8_2[i,j,w]+y_8_3[i,j,w]+y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w])
                cargoTrans_BH += (y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w])
    passengerTrans = passengerTrans_BH+passengerTrans_BS+passengerTrans_HB+passengerTrans_HS+passengerTrans_SB+passengerTrans_SH
    
    # 只有客机运输成本是分段计价的
    zBH = {}
    zBS = {}
    zHB = {}
    zHS = {}
    zSB = {}
    zSH = {}
    A_BH = m.addVars(range(len(FR_BH)), vtype=GRB.BINARY)
    A_BS = m.addVars(range(len(FR_BS)), vtype=GRB.BINARY)
    A_HB = m.addVars(range(len(FR_HB)), vtype=GRB.BINARY)
    A_HS = m.addVars(range(len(FR_HS)), vtype=GRB.BINARY)
    A_SB = m.addVars(range(len(FR_SB)), vtype=GRB.BINARY)
    A_SH = m.addVars(range(len(FR_SH)), vtype=GRB.BINARY)
    
    for r in range(len(FR_BH)):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                zBH[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                zBS[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                zHB[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                zHS[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                zSB[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                zSH[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                
    m.addConstr(gp.quicksum(A_BH[r] for r in range(len(FR_BH))) == 1)
    m.addConstr(gp.quicksum(A_BS[r] for r in range(len(FR_BS))) == 1)
    m.addConstr(gp.quicksum(A_HB[r] for r in range(len(FR_HB))) == 1)
    m.addConstr(gp.quicksum(A_HS[r] for r in range(len(FR_HS))) == 1)
    m.addConstr(gp.quicksum(A_SB[r] for r in range(len(FR_SB))) == 1)
    m.addConstr(gp.quicksum(A_SH[r] for r in range(len(FR_SH))) == 1)
    
    for r in range(len(FR_BH)):
        for j in range(len(passengerTime_BH)):
            m.addConstr(gp.quicksum(x_1_4[i,j,w]+x_1_5[i,j,w]+x_1_6[i,j,w]+x_2_4[i,j,w]+x_2_5[i,j,w]+x_2_6[i,j,w]+x_3_4[i,j,w]+x_3_5[i,j,w]+x_3_6[i,j,w] for w in range(1,3) for i in range(passengerTime_BH[j])) >= lBH[r] * A_BH[r])
        for j in range(len(passengerTime_BS)):
            m.addConstr(gp.quicksum(x_1_7[i,j,w]+x_1_8[i,j,w]+x_2_7[i,j,w]+x_2_8[i,j,w]+x_3_7[i,j,w]+x_3_8[i,j,w] for w in range(1,3) for i in range(passengerTime_BS[j])) >= lBS[r] * A_BS[r])
        for j in range(len(passengerTime_HB)):
            m.addConstr(gp.quicksum(x_4_1[i,j,w]+x_4_2[i,j,w]+x_4_3[i,j,w]+x_5_1[i,j,w]+x_5_2[i,j,w]+x_5_3[i,j,w]+x_6_1[i,j,w]+x_6_2[i,j,w]+x_6_3[i,j,w] for w in range(1,3) for i in range(passengerTime_HB[j])) >= lHB[r] * A_HB[r])
        for j in range(len(passengerTime_HS)):
            m.addConstr(gp.quicksum(x_4_7[i,j,w]+x_4_8[i,j,w]+x_5_7[i,j,w]+x_5_8[i,j,w]+x_6_7[i,j,w]+x_6_8[i,j,w] for w in range(1,3) for i in range(passengerTime_HS[j])) >= lHS[r] * A_HS[r])
        for j in range(len(passengerTime_SB)):
            m.addConstr(gp.quicksum(x_7_1[i,j,w]+x_7_2[i,j,w]+x_7_3[i,j,w]+x_8_1[i,j,w]+x_8_2[i,j,w]+x_8_3[i,j,w] for w in range(1,3) for i in range(passengerTime_SB[j])) >= lSB[r] * A_SB[r])
        for j in range(len(passengerTime_SH)):
            m.addConstr(gp.quicksum(x_7_4[i,j,w]+x_7_5[i,j,w]+x_7_6[i,j,w]+x_8_4[i,j,w]+x_8_5[i,j,w]+x_8_6[i,j,w] for w in range(1,3) for i in range(passengerTime_SH[j])) >= lSH[r] * A_SH[r])
        
    for r in range(len(FR_BH)):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                m.addConstr(zBH[i,j,r] <= A_BH[r] * forecast_BH_K[i])
                m.addConstr(zBH[i,j,r] <= (x_1_4[i,j,1]+x_1_5[i,j,1]+x_1_6[i,j,1]+x_2_4[i,j,1]+x_2_5[i,j,1]+x_2_6[i,j,1]+x_3_4[i,j,1]+x_3_5[i,j,1]+x_3_6[i,j,1]+x_1_4[i,j,2]+x_1_5[i,j,2]+x_1_6[i,j,2]+x_2_4[i,j,2]+x_2_5[i,j,2]+x_2_6[i,j,2]+x_3_4[i,j,2]+x_3_5[i,j,2]+x_3_6[i,j,2]))
                m.addConstr(zBH[i,j,r] >= (x_1_4[i,j,1]+x_1_5[i,j,1]+x_1_6[i,j,1]+x_2_4[i,j,1]+x_2_5[i,j,1]+x_2_6[i,j,1]+x_3_4[i,j,1]+x_3_5[i,j,1]+x_3_6[i,j,1]+x_1_4[i,j,2]+x_1_5[i,j,2]+x_1_6[i,j,2]+x_2_4[i,j,2]+x_2_5[i,j,2]+x_2_6[i,j,2]+x_3_4[i,j,2]+x_3_5[i,j,2]+x_3_6[i,j,2] - forecast_BH_K[i] * (1 - A_BH[r])))
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                m.addConstr(zBS[i,j,r] <= A_BS[r] * forecast_BS_K[i])
                m.addConstr(zBS[i,j,r] <= (x_1_7[i,j,1]+x_1_8[i,j,1]+x_2_7[i,j,1]+x_2_8[i,j,1]+x_3_7[i,j,1]+x_3_8[i,j,1]+x_1_7[i,j,2]+x_1_8[i,j,2]+x_2_7[i,j,2]+x_2_8[i,j,2]+x_3_7[i,j,2]+x_3_8[i,j,2]))
                m.addConstr(zBS[i,j,r] >= (x_1_7[i,j,1]+x_1_8[i,j,1]+x_2_7[i,j,1]+x_2_8[i,j,1]+x_3_7[i,j,1]+x_3_8[i,j,1]+x_1_7[i,j,2]+x_1_8[i,j,2]+x_2_7[i,j,2]+x_2_8[i,j,2]+x_3_7[i,j,2]+x_3_8[i,j,2] - forecast_BS_K[i] * (1 - A_BS[r])))
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                m.addConstr(zHB[i,j,r] <= A_HB[r] * forecast_HB_K[i])
                m.addConstr(zHB[i,j,r] <= (x_4_1[i,j,1]+x_4_2[i,j,1]+x_4_3[i,j,1]+x_5_1[i,j,1]+x_5_2[i,j,1]+x_5_3[i,j,1]+x_6_1[i,j,1]+x_6_2[i,j,1]+x_6_3[i,j,1]+x_4_1[i,j,2]+x_4_2[i,j,2]+x_4_3[i,j,2]+x_5_1[i,j,2]+x_5_2[i,j,2]+x_5_3[i,j,2]+x_6_1[i,j,2]+x_6_2[i,j,2]+x_6_3[i,j,2]))
                m.addConstr(zHB[i,j,r] >= (x_4_1[i,j,1]+x_4_2[i,j,1]+x_4_3[i,j,1]+x_5_1[i,j,1]+x_5_2[i,j,1]+x_5_3[i,j,1]+x_6_1[i,j,1]+x_6_2[i,j,1]+x_6_3[i,j,1]+x_4_1[i,j,2]+x_4_2[i,j,2]+x_4_3[i,j,2]+x_5_1[i,j,2]+x_5_2[i,j,2]+x_5_3[i,j,2]+x_6_1[i,j,2]+x_6_2[i,j,2]+x_6_3[i,j,2] - forecast_HB_K[i] * (1 - A_HB[r])))
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                m.addConstr(zHS[i,j,r] <= A_HS[r] * forecast_HS_K[i])
                m.addConstr(zHS[i,j,r] <= (x_4_7[i,j,1]+x_4_8[i,j,1]+x_5_7[i,j,1]+x_5_8[i,j,1]+x_6_7[i,j,1]+x_6_8[i,j,1]+x_4_7[i,j,2]+x_4_8[i,j,2]+x_5_7[i,j,2]+x_5_8[i,j,2]+x_6_7[i,j,2]+x_6_8[i,j,2]))
                m.addConstr(zHS[i,j,r] >= (x_4_7[i,j,1]+x_4_8[i,j,1]+x_5_7[i,j,1]+x_5_8[i,j,1]+x_6_7[i,j,1]+x_6_8[i,j,1]+x_4_7[i,j,2]+x_4_8[i,j,2]+x_5_7[i,j,2]+x_5_8[i,j,2]+x_6_7[i,j,2]+x_6_8[i,j,2] - forecast_HS_K[i] * (1 - A_HS[r])))
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                m.addConstr(zSB[i,j,r] <= A_BH[r] * forecast_SB_K[i])
                m.addConstr(zSB[i,j,r] <= (x_7_1[i,j,1]+x_7_2[i,j,1]+x_7_3[i,j,1]+x_8_1[i,j,1]+x_8_2[i,j,1]+x_8_3[i,j,1]+x_7_1[i,j,2]+x_7_2[i,j,2]+x_7_3[i,j,2]+x_8_1[i,j,2]+x_8_2[i,j,2]+x_8_3[i,j,2]))
                m.addConstr(zSB[i,j,r] >= (x_7_1[i,j,1]+x_7_2[i,j,1]+x_7_3[i,j,1]+x_8_1[i,j,1]+x_8_2[i,j,1]+x_8_3[i,j,1]+x_7_1[i,j,2]+x_7_2[i,j,2]+x_7_3[i,j,2]+x_8_1[i,j,2]+x_8_2[i,j,2]+x_8_3[i,j,2] - forecast_SB_K[i] * (1 - A_SB[r])))
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                m.addConstr(zSH[i,j,r] <= A_SH[r] * forecast_SH_K[i])
                m.addConstr(zSH[i,j,r] <= (x_7_4[i,j,1]+x_7_5[i,j,1]+x_7_6[i,j,1]+x_8_4[i,j,1]+x_8_5[i,j,1]+x_8_6[i,j,1]+x_7_4[i,j,2]+x_7_5[i,j,2]+x_7_6[i,j,2]+x_8_4[i,j,2]+x_8_5[i,j,2]+x_8_6[i,j,2]))
                m.addConstr(zSH[i,j,r] >= (x_7_4[i,j,1]+x_7_5[i,j,1]+x_7_6[i,j,1]+x_8_4[i,j,1]+x_8_5[i,j,1]+x_8_6[i,j,1]+x_7_4[i,j,2]+x_7_5[i,j,2]+x_7_6[i,j,2]+x_8_4[i,j,2]+x_8_5[i,j,2]+x_8_6[i,j,2] - forecast_SH_K[i] * (1 - A_SH[r])))
                
    for r in range(len(FR_BH)):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                C5 += FR_BH[r] * zBH[i,j,r]
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                C5 += FR_BS[r] * zBS[i,j,r]
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                C5 += FR_HB[r] * zHB[i,j,r]
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                C5 += FR_HS[r] * zHS[i,j,r]
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                C5 += FR_SB[r] * zSB[i,j,r]
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                C5 += FR_SH[r] * zSH[i,j,r]
    
    cargo_operating_perHour = cargo_per + L * OilPrice
    
    nBH = {}
    nHS = {}
    nSB = {}
    M = 0.0001
    for j in range(N*K):
        nBH[j] = m.addVar(vtype=GRB.BINARY)
        nHS[j] = m.addVar(vtype=GRB.BINARY)
        nSB[j] = m.addVar(vtype=GRB.BINARY)
        
    for j in range(N*K):
        m.addConstr(nBH[j] >= M * gp.quicksum((y_1_4[i,j,w]+y_1_5[i,j,w]+y_1_6[i,j,w]+y_2_4[i,j,w]+y_2_5[i,j,w]+y_2_6[i,j,w]+y_3_4[i,j,w]+y_3_5[i,j,w]+y_3_6[i,j,w]+y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w]) for i in range(cargo_BH[j]) for w in range(1,3)) + M * gp.quicksum(y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w] for i in range(cargo_SB[j]) for w in range(1,3)))
        m.addConstr(nHS[j] >= M * gp.quicksum((y_4_7[i,j,w]+y_4_8[i,j,w]+y_5_7[i,j,w]+y_5_8[i,j,w]+y_6_7[i,j,w]+y_6_8[i,j,w]+y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w]) for i in range(cargo_HS[j]) for w in range(1,3)) + M * gp.quicksum(y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w] for i in range(cargo_BH[j]) for w in range(1,3)))
        m.addConstr(nSB[j] >= M * gp.quicksum((y_7_1[i,j,w]+y_7_2[i,j,w]+y_7_3[i,j,w]+y_8_1[i,j,w]+y_8_2[i,j,w]+y_8_3[i,j,w]+y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w]) for i in range(cargo_SB[j]) for w in range(1,3)) + M * gp.quicksum(y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w] for i in range(cargo_HS[j]) for w in range(1,3)))
        
    cargoUsed_BH = 0
    cargoUsed_HS = 0
    cargoUsed_SB = 0
    for j in range(N*K):
        cargoUsed_BH += nBH[j]
        cargoUsed_HS += nHS[j]
        cargoUsed_SB += nSB[j]
        C7 += cargo_operating_perHour * (Tcargo_1*nBH[j]+Tcargo_2*nHS[j]+Tcargo_3*nSB[j])
    
    requi = sum(forecast_BH_K)+sum(forecast_BS_K)+sum(forecast_HB_K)+sum(forecast_HS_K)+sum(forecast_SB_K)+sum(forecast_SH_K)
    unTrans = requi - transported_1 - transported_2
    untransprop = unTrans / requi
    
    m.setObjective(theta1 * (C1 + C2 + C3 + C4 + C5 + C6 + C7) + theta2 * untransprop, GRB.MINIMIZE)
    m.optimize()
    
    cargo_operating = cargo_operating_perHour * (Tcargo_1+Tcargo_2+Tcargo_3) * max(cargoUsed_BH.getValue(),cargoUsed_HS.getValue(),cargoUsed_SB.getValue())
    
    
    
    result1 = C1+C2+C3.getValue()+C4.getValue()+C5.getValue()+C6.getValue()+cargo_operating
    result2 = C3.getValue()+C2
    result3 = C4.getValue()+C1
    result4 = C5.getValue()
    result5 = cargo_operating
    result6 = transported_1.getValue()
    result7 = transported_2.getValue()
    result8 = unTrans.getValue()
    result9 = requi
    result10 = passengerTrans.getValue()
    result11 = cargoTrans.getValue()
    result12 = C6.getValue()
    result13 = passengerTrans_BH.getValue()
    result14 = passengerTrans_BS.getValue()
    result15 = passengerTrans_HB.getValue()
    result16 = passengerTrans_HS.getValue()
    result17 = passengerTrans_SB.getValue()
    result18 = passengerTrans_SH.getValue()
    result19 = cargoTrans_BH.getValue()
    result20 = cargoTrans_HS.getValue()
    result21 = cargoTrans_SB.getValue()
    result22 = max(cargoUsed_BH.getValue(),cargoUsed_HS.getValue(),cargoUsed_SB.getValue())
    output1 = passengerTotalBH.getValue()
    output2 = passengerTotalBS.getValue()
    output3 = passengerTotalHB.getValue()
    output4 = passengerTotalHS.getValue()
    output5 = passengerTotalSB.getValue()
    output6 = passengerTotalSH.getValue()
    output7 = cargoTotalBH.getValue()
    output8 = cargoTotalBS.getValue()
    output9 = cargoTotalHB.getValue()
    output10 = cargoTotalHS.getValue()
    output11 = cargoTotalSB.getValue()
    output12 = cargoTotalSH.getValue()
    output13 = desertTotalBH.getValue()
    output14 = desertTotalBS.getValue()
    output15 = desertTotalHB.getValue()
    output16 = desertTotalHS.getValue()
    output17 = desertTotalSB.getValue()
    output18 = desertTotalSH.getValue()
    
    return result1,result2,result3,result4,result5,result6,result7,result8,result9,result10,result11,result12,result13,result14,result15,result16,result17,result18,result19,result20,result21,result22,output1,output2,output3,output4,output5,output6,output7,output8,output9,output10,output11,output12,output13,output14,output15,output16,output17,output18

w = 0.45
theta1 = 1 # 成本权重
theta2 = 0 # 丢弃比例权重
while w < 1.5:
    w += 0.05
    Q = 50 * w
    q = (1968 - N * Q) / (len(hours_from_midnight_BH)+len(hours_from_midnight_BS)+len(hours_from_midnight_HB)+len(hours_from_midnight_HS)+len(hours_from_midnight_SB)+len(hours_from_midnight_SH))
    
    # 假设客机分段计价总共分成3段
    FR_BH = [20000,12000,8000]
    lBH = [0,0.4*q,0.7*q]
    FR_BS = [20000,12000,8000]
    lBS = [0,0.4*q,0.7*q]
    FR_HB = [20000,12000,8000]
    lHB = [0,0.4*q,0.7*q]
    FR_HS = [20000,12000,8000]
    lHS = [0,0.4*q,0.7*q]
    FR_SB = [20000,12000,8000]
    lSB = [0,0.4*q,0.7*q]
    FR_SH = [20000,12000,8000]
    lSH = [0,0.4*q,0.7*q]
    
    passengerCapacity = q * (len(hours_from_midnight_BH)+len(hours_from_midnight_BS)+len(hours_from_midnight_HB)+len(hours_from_midnight_HS)+len(hours_from_midnight_SB)+len(hours_from_midnight_SH))
    passengerCapacity_BH = q * len(hours_from_midnight_BH)
    passengerCapacity_BS = q * len(hours_from_midnight_BS)
    passengerCapacity_HB = q * len(hours_from_midnight_HB)
    passengerCapacity_HS = q * len(hours_from_midnight_HS)
    passengerCapacity_SB = q * len(hours_from_midnight_SB)
    passengerCapacity_SH = q * len(hours_from_midnight_SH)
    
    cargo_per = 39400 * w
    L = 2.3 * w
    OilPrice = 3200
    
    print(f"-------------------------------------------当前的货机运力w值为{round(w,2)}--------------------------------------------")
    print(f"当前货机总运力为{N*Q},占比{N*Q/1968};客机总运力{1968 - N * Q},占比{(1968 - N * Q)/1968}")
    print("----------------------------------ARIMA模型下的预测----------------------------------\n")
    pred_num = 12 # 假设预测的周期总长度
    for s in range(1,pred_num+1):
        ave1 = 0
        ave2 = 0
        ave3 = 0
        ave4 = 0
        ave5 = 0
        ave6 = 0
        ave7 = 0
        ave8 = 0
        ave9 = 0
        ave10 = 0
        ave11 = 0
        ave12 = 0
        ave13 = 0
        ave14 = 0
        ave15 = 0
        ave16 = 0
        ave17 = 0
        ave18 = 0
        ave19 = 0
        ave20 = 0
        ave21 = 0
        ave22 = 0
        ave23 = 0
        ave24 = 0
        ave25 = 0
        ave26 = 0
        ave27 = 0
        TotalCargoUsed = 0
        ave28 = 0
        ave29 = 0
        ave30 = 0
        ave31 = 0
        ave32 = 0
        ave33 = 0
        ave34 = 0
        ave35 = 0
        ave36 = 0
        ave37 = 0
        ave38 = 0
        ave39 = 0
        ave40 = 0
        ave41 = 0
        ave42 = 0
        ave43 = 0
        ave44 = 0
        ave45 = 0
    
        K = s # 假设周期长度
        total_days = K
        predict = 0
        count = 0
        while total_days < pred_num:
            train = Original_Requirements.iloc[0:(60 + predict)] # 训练集数据
            test = Original_Requirements.iloc[(60 + predict):90] # 测试集数据（真实数据）
            predict += K
            total_days += K
            count += 1
            ADF_BH = adfuller(train['北京→杭州'].dropna())
            if (ADF_BH[1] > 0.05):
                train_diff1 = train.copy()
                train_diff1.iloc[:, 1:] = train_diff1.iloc[:, 1:].diff(1)
                train_diff1.dropna(inplace=True)
                ADF_BH_1 = adfuller(train_diff1['北京→杭州'].dropna())
            left_days = pred_num - total_days
            train = Original_Requirements.iloc[0:(60 + predict)] # 训练集数据
            test = Original_Requirements.iloc[(60 + predict):(60 + pred_num)] # 测试集数据（真实数据）
            ADF_BH = adfuller(train['北京→杭州'].dropna())
        if (ADF_BH[1] > 0.05):
            train_diff1 = train.copy()
            train_diff1.iloc[:, 1:] = train_diff1.iloc[:, 1:].diff(1)
            train_diff1.dropna(inplace=True)
            ADF_BH_1 = adfuller(train_diff1['北京→杭州'].dropna())
        
        total_days = 0
        predict = 0
        count = 0
        total_cost = 0
        delay_cost = 0
        storage_cost = 0
        transport_cost = 0
        cargoOperating_cost = 0
        type1 = 0
        type2 = 0
        passengerFlight = 0
        cargoFlight = 0
        desert = 0
        total_requirement = 0
        desert_cost = 0
        passengerFreight_BH = 0
        passengerFreight_BS = 0
        passengerFreight_HB = 0
        passengerFreight_HS = 0
        passengerFreight_SB = 0
        passengerFreight_SH = 0
        cargoFreight_BH = 0
        cargoFreight_HS = 0
        cargoFreight_SB = 0
        TotalCargo = 0
        TotalTra_BH_pass = 0
        TotalTra_BS_pass = 0
        TotalTra_HB_pass = 0
        TotalTra_HS_pass = 0
        TotalTra_SB_pass = 0
        TotalTra_SH_pass = 0
        TotalTra_BH_carg = 0
        TotalTra_BS_carg = 0
        TotalTra_HB_carg = 0
        TotalTra_HS_carg = 0
        TotalTra_SB_carg = 0
        TotalTra_SH_carg = 0
        Totaldesr_BH = 0
        Totaldesr_BS = 0
        Totaldesr_HB = 0
        Totaldesr_HS = 0
        Totaldesr_SB = 0
        Totaldesr_SH = 0
        
        left_to_leave_1_4 = [0]
        left_to_leave_1_5 = [0]
        left_to_leave_1_6 = [0]
        left_to_leave_1_7 = [0]
        left_to_leave_1_8 = [0]
        left_to_leave_2_4 = [0]
        left_to_leave_2_5 = [0]
        left_to_leave_2_6 = [0]
        left_to_leave_2_7 = [0]
        left_to_leave_2_8 = [0]
        left_to_leave_3_4 = [0]
        left_to_leave_3_5 = [0]
        left_to_leave_3_6 = [0]
        left_to_leave_3_7 = [0]
        left_to_leave_3_8 = [0]
        left_to_leave_4_1 = [0]
        left_to_leave_4_2 = [0]
        left_to_leave_4_3 = [0]
        left_to_leave_4_7 = [0]
        left_to_leave_4_8 = [0]
        left_to_leave_5_1 = [0]
        left_to_leave_5_2 = [0]
        left_to_leave_5_3 = [0]
        left_to_leave_5_7 = [0]
        left_to_leave_5_8 = [0]
        left_to_leave_6_1 = [0]
        left_to_leave_6_2 = [0]
        left_to_leave_6_3 = [0]
        left_to_leave_6_7 = [0]
        left_to_leave_6_8 = [0]
        left_to_leave_7_1 = [0]
        left_to_leave_7_2 = [0]
        left_to_leave_7_3 = [0]
        left_to_leave_7_4 = [0]
        left_to_leave_7_5 = [0]
        left_to_leave_7_6 = [0]
        left_to_leave_8_1 = [0]
        left_to_leave_8_2 = [0]
        left_to_leave_8_3 = [0]
        left_to_leave_8_4 = [0]
        left_to_leave_8_5 = [0]
        left_to_leave_8_6 = [0]
    
        while total_days < (pred_num - K):
            train = Original_Requirements.iloc[0:(60 + predict)] # 训练集数据
            test = Original_Requirements.iloc[(60 + predict):(60 + pred_num)] # 测试集数据（真实数据）
            # p、q值选择
            train_results = sm.tsa.arma_order_select_ic(train_diff1['北京→杭州'], ic=['aic', 'bic'], max_ar=5, max_ma=5)
            pARIMA = train_results.aic_min_order[0]
            dARIMA = 1
            qARIMA = train_results.aic_min_order[1]
            del train_results.aic_min_order
            predict += K
            total_days += K
            count += 1
            Cost_add,delayCost_add,storageCost_add,transportCost_add,cargo_add,type1_add,type2_add,desert_add,req_add,passengerFlight_add,cargoFlight_add,desertCost_add,passFreightBH,passFreightBS,passFreightHB,passFreightHS,passFreightSB,passFreightSH,cargFreightBH,cargFreightHS,cargFreightSB,TotalCargo_add,Tra_BH_pass,Tra_BS_pass,Tra_HB_pass,Tra_HS_pass,Tra_SB_pass,Tra_SH_pass,Tra_BH_carg,Tra_BS_carg,Tra_HB_carg,Tra_HS_carg,Tra_SB_carg,Tra_SH_carg,desr_BH,desr_BS,desr_HB,desr_HS,desr_SB,desr_SH = mainFunctionARIMA(K)
            total_cost += Cost_add
            delay_cost += delayCost_add
            storage_cost += storageCost_add
            transport_cost += transportCost_add
            cargoOperating_cost += cargo_add
            type1 += type1_add
            type2 += type2_add
            desert += desert_add
            total_requirement += req_add
            passengerFlight += passengerFlight_add
            cargoFlight += cargoFlight_add
            desert_cost += desertCost_add
            passengerFreight_BH += passFreightBH
            passengerFreight_BS += passFreightBS
            passengerFreight_HB += passFreightHB
            passengerFreight_HS += passFreightHS
            passengerFreight_SB += passFreightSB
            passengerFreight_SH += passFreightSH
            cargoFreight_BH += cargFreightBH
            cargoFreight_HS += cargFreightHS
            cargoFreight_SB += cargFreightSB
            TotalCargo += TotalCargo_add
            TotalTra_BH_pass += Tra_BH_pass
            TotalTra_BS_pass += Tra_BS_pass
            TotalTra_HB_pass += Tra_HB_pass
            TotalTra_HS_pass += Tra_HS_pass
            TotalTra_SB_pass += Tra_SB_pass
            TotalTra_SH_pass += Tra_SH_pass
            TotalTra_BH_carg += Tra_BH_carg
            TotalTra_BS_carg += Tra_BS_carg
            TotalTra_HB_carg += Tra_HB_carg
            TotalTra_HS_carg += Tra_HS_carg
            TotalTra_SB_carg += Tra_SB_carg
            TotalTra_SH_carg += Tra_SH_carg
            Totaldesr_BH += desr_BH
            Totaldesr_BS += desr_BS
            Totaldesr_HB += desr_HB
            Totaldesr_HS += desr_HS
            Totaldesr_SB += desr_SB
            Totaldesr_SH += desr_SH
        
        train = Original_Requirements.iloc[0:(60 + predict)] # 训练集数据
        test = Original_Requirements.iloc[(60 + predict):(60 + pred_num)] # 测试集数据（真实数据）
        # p、q值选择
        train_results = sm.tsa.arma_order_select_ic(train_diff1['北京→杭州'], ic=['aic', 'bic'], max_ar=5, max_ma=5)
        pARIMA = train_results.aic_min_order[0]
        dARIMA = 1
        qARIMA = train_results.aic_min_order[1]
        del train_results.aic_min_order
    
        K = pred_num - total_days
        Cost_add,delayCost_add,storageCost_add,transportCost_add,cargo_add,type1_add,type2_add,desert_add,req_add,passengerFlight_add,cargoFlight_add,desertCost_add,passFreightBH,passFreightBS,passFreightHB,passFreightHS,passFreightSB,passFreightSH,cargFreightBH,cargFreightHS,cargFreightSB,TotalCargo_add,Tra_BH_pass,Tra_BS_pass,Tra_HB_pass,Tra_HS_pass,Tra_SB_pass,Tra_SH_pass,Tra_BH_carg,Tra_BS_carg,Tra_HB_carg,Tra_HS_carg,Tra_SB_carg,Tra_SH_carg,desr_BH,desr_BS,desr_HB,desr_HS,desr_SB,desr_SH = mainFunctionARIMA(K)
        total_cost += Cost_add
        delay_cost += delayCost_add
        storage_cost += storageCost_add
        transport_cost += transportCost_add
        cargoOperating_cost += cargo_add
        type1 += type1_add
        type2 += type2_add
        desert += desert_add
        total_requirement += req_add
        passengerFlight += passengerFlight_add
        cargoFlight += cargoFlight_add
        desert_cost += desertCost_add
        passengerFreight_BH += passFreightBH
        passengerFreight_BS += passFreightBS
        passengerFreight_HB += passFreightHB
        passengerFreight_HS += passFreightHS
        passengerFreight_SB += passFreightSB
        passengerFreight_SH += passFreightSH
        cargoFreight_BH += cargFreightBH
        cargoFreight_HS += cargFreightHS
        cargoFreight_SB += cargFreightSB
        TotalCargo += TotalCargo_add
        TotalTra_BH_pass += Tra_BH_pass
        TotalTra_BS_pass += Tra_BS_pass
        TotalTra_HB_pass += Tra_HB_pass
        TotalTra_HS_pass += Tra_HS_pass
        TotalTra_SB_pass += Tra_SB_pass
        TotalTra_SH_pass += Tra_SH_pass
        TotalTra_BH_carg += Tra_BH_carg
        TotalTra_BS_carg += Tra_BS_carg
        TotalTra_HB_carg += Tra_HB_carg
        TotalTra_HS_carg += Tra_HS_carg
        TotalTra_SB_carg += Tra_SB_carg
        TotalTra_SH_carg += Tra_SH_carg
        Totaldesr_BH += desr_BH
        Totaldesr_BS += desr_BS
        Totaldesr_HB += desr_HB
        Totaldesr_HS += desr_HS
        Totaldesr_SB += desr_SB
        Totaldesr_SH += desr_SH
        
        ave1 += total_cost
        ave2 += delay_cost
        ave3 += storage_cost
        ave4 += transport_cost
        ave5 += cargoOperating_cost
        ave6 += desert_cost
        ave7 += total_requirement
        ave8 += type1
        ave9 += type2
        ave10 += passengerFlight
        ave11 += cargoFlight
        ave12 += desert
        ave13 += passengerFlight/(passengerCapacity*pred_num)
        ave14 += cargoFlight/(3*Q*TotalCargo)
        ave15 += passengerFreight_BH/(passengerCapacity_BH*pred_num)
        ave16 += passengerFreight_BS/(passengerCapacity_BS*pred_num)
        ave17 += passengerFreight_HB/(passengerCapacity_HB*pred_num)
        ave18 += passengerFreight_HS/(passengerCapacity_HS*pred_num)
        ave19 += passengerFreight_SB/(passengerCapacity_SB*pred_num)
        ave20 += passengerFreight_SH/(passengerCapacity_SH*pred_num)
        ave21 += cargoFreight_BH/(Q*TotalCargo)
        ave22 += cargoFreight_HS/(Q*TotalCargo)
        ave23 += cargoFreight_SB/(Q*TotalCargo)
        ave24 += cargoFreight_BH/(Q*pred_num*N)
        ave25 += cargoFreight_HS/(Q*pred_num*N)
        ave26 += cargoFreight_SB/(Q*pred_num*N)
        ave27 += (cargoFreight_BH+cargoFreight_HS+cargoFreight_SB)/(3*Q*pred_num*N)
        TotalCargoUsed += TotalCargo/pred_num
        ave28 += TotalTra_BH_pass
        ave29 += TotalTra_BS_pass
        ave30 += TotalTra_HB_pass
        ave31 += TotalTra_HS_pass
        ave32 += TotalTra_SB_pass
        ave33 += TotalTra_SH_pass
        ave34 += TotalTra_BH_carg
        ave35 += TotalTra_BS_carg
        ave36 += TotalTra_HB_carg
        ave37 += TotalTra_HS_carg
        ave38 += TotalTra_SB_carg
        ave39 += TotalTra_SH_carg
        ave40 += Totaldesr_BH
        ave41 += Totaldesr_BS
        ave42 += Totaldesr_HB
        ave43 += Totaldesr_HS
        ave44 += Totaldesr_SB
        ave45 += Totaldesr_SH
    
        print(f"---------------------------------K = {s}时的结果-----------------------------------------------------------")
        print(f"平均总成本为{ave1}")
        print(f"平均逾期成本为{ave2}")
        print(f"平均仓储成本为{ave3}")
        print(f"平均客机成本为{ave4}")
        print(f"平均货机成本为{ave5}")
        print(f"平均丢弃成本为{ave6}")
        print(f"平均预测总需求为{ave7}")
        print(f"平均货物1为{ave8}")
        print(f"平均货物2为{ave9}")
        print(f"平均客机运载量为{ave10}")
        print(f"平均货机运载量为{ave11}")
        print(f"平均丢弃量为{ave12}")
        print(f"平均客机总效率为{ave13}")
        print(f"平均货机总效率为{ave14}")
        print(f"平均每天调用货机航班数量为{TotalCargoUsed}")
        print(f"平均货机机队运力总效率为{ave27}")
        print(f"平均BH客机效率为{ave15}")
        print(f"平均BS客机效率为{ave16}")
        print(f"平均HB客机效率为{ave17}")
        print(f"平均HS客机效率为{ave18}")
        print(f"平均SB客机效率为{ave19}")
        print(f"平均SH客机效率为{ave20}")
        print(f"平均BH货机效率为{ave21}")
        print(f"平均HS货机效率为{ave22}")
        print(f"平均SB货机效率为{ave23}")
        print(f"平均BH货机机队运力使用效率为{ave24}")
        print(f"平均BH货机机队运力使用效率为{ave25}")
        print(f"平均BH货机机队运力使用效率为{ave26}")
    
        print(f"北京到杭州的货物使用客机运输重量{ave28}，使用货机运输重量{ave34}，丢弃重量{ave40}")
        print(f"北京到深圳的货物使用客机运输重量{ave29}，使用货机运输重量{ave35}，丢弃重量{ave41}")
        print(f"杭州到北京的货物使用客机运输重量{ave30}，使用货机运输重量{ave36}，丢弃重量{ave42}")
        print(f"杭州到深圳的货物使用客机运输重量{ave31}，使用货机运输重量{ave37}，丢弃重量{ave43}")
        print(f"深圳到北京的货物使用客机运输重量{ave32}，使用货机运输重量{ave38}，丢弃重量{ave44}")
        print(f"深圳到杭州的货物使用客机运输重量{ave33}，使用货机运输重量{ave39}，丢弃重量{ave45}")   
        averagecost = ave1 / ave7
        print(f"\n在货机运力系数为{round(w,2)}的情况下单位重量的货物订单造成的成本为{averagecost}\n")
        
    # 已知全部需求信息下的结果
    print("\n----------------------------------实际结果----------------------------------\n")
    ave1 = 0
    ave2 = 0
    ave3 = 0
    ave4 = 0
    ave5 = 0
    ave6 = 0
    ave7 = 0
    ave8 = 0
    ave9 = 0
    ave10 = 0
    ave11 = 0
    ave12 = 0
    ave13 = 0
    ave14 = 0
    ave15 = 0
    ave16 = 0
    ave17 = 0
    ave18 = 0
    ave19 = 0
    ave20 = 0
    ave21 = 0
    ave22 = 0
    ave23 = 0
    ave24 = 0
    ave25 = 0
    ave26 = 0
    ave27 = 0
    TotalCargoUsed = 0
    ave28 = 0
    ave29 = 0
    ave30 = 0
    ave31 = 0
    ave32 = 0
    ave33 = 0
    ave34 = 0
    ave35 = 0
    ave36 = 0
    ave37 = 0
    ave38 = 0
    ave39 = 0
    ave40 = 0
    ave41 = 0
    ave42 = 0
    ave43 = 0
    ave44 = 0
    ave45 = 0
    
    K = pred_num # 周期长度
    total_days = K
    predict = 0
    count = 0
    while total_days < pred_num:
        train = Original_Requirements.iloc[0:(60 + predict)] # 训练集数据
        test = Original_Requirements.iloc[(60 + predict):90] # 测试集数据（真实数据）
        predict += K
        total_days += K
        count += 1
        ADF_BH = adfuller(train['北京→杭州'].dropna())
        if (ADF_BH[1] > 0.05):
            train_diff1 = train.copy()
            train_diff1.iloc[:, 1:] = train_diff1.iloc[:, 1:].diff(1)
            train_diff1.dropna(inplace=True)
            ADF_BH_1 = adfuller(train_diff1['北京→杭州'].dropna())
        left_days = pred_num - total_days
        train = Original_Requirements.iloc[0:(60 + predict)] # 训练集数据
        test = Original_Requirements.iloc[(60 + predict):(60 + pred_num)] # 测试集数据（真实数据）
        ADF_BH = adfuller(train['北京→杭州'].dropna())
    if (ADF_BH[1] > 0.05):
        train_diff1 = train.copy()
        train_diff1.iloc[:, 1:] = train_diff1.iloc[:, 1:].diff(1)
        train_diff1.dropna(inplace=True)
        ADF_BH_1 = adfuller(train_diff1['北京→杭州'].dropna())
        
    total_days = 0
    predict = 0
    count = 0
    total_cost = 0
    delay_cost = 0
    storage_cost = 0
    transport_cost = 0
    cargoOperating_cost = 0
    type1 = 0
    type2 = 0
    passengerFlight = 0
    cargoFlight = 0
    desert = 0
    total_requirement = 0
    desert_cost = 0
    passengerFreight_BH = 0
    passengerFreight_BS = 0
    passengerFreight_HB = 0
    passengerFreight_HS = 0
    passengerFreight_SB = 0
    passengerFreight_SH = 0
    cargoFreight_BH = 0
    cargoFreight_HS = 0
    cargoFreight_SB = 0
    TotalCargo = 0
    TotalTra_BH_pass = 0
    TotalTra_BS_pass = 0
    TotalTra_HB_pass = 0
    TotalTra_HS_pass = 0
    TotalTra_SB_pass = 0
    TotalTra_SH_pass = 0
    TotalTra_BH_carg = 0
    TotalTra_BS_carg = 0
    TotalTra_HB_carg = 0
    TotalTra_HS_carg = 0
    TotalTra_SB_carg = 0
    TotalTra_SH_carg = 0
    Totaldesr_BH = 0
    Totaldesr_BS = 0
    Totaldesr_HB = 0
    Totaldesr_HS = 0
    Totaldesr_SB = 0
    Totaldesr_SH = 0
    
    left_to_leave_1_4 = [0]
    left_to_leave_1_5 = [0]
    left_to_leave_1_6 = [0]
    left_to_leave_1_7 = [0]
    left_to_leave_1_8 = [0]
    left_to_leave_2_4 = [0]
    left_to_leave_2_5 = [0]
    left_to_leave_2_6 = [0]
    left_to_leave_2_7 = [0]
    left_to_leave_2_8 = [0]
    left_to_leave_3_4 = [0]
    left_to_leave_3_5 = [0]
    left_to_leave_3_6 = [0]
    left_to_leave_3_7 = [0]
    left_to_leave_3_8 = [0]
    left_to_leave_4_1 = [0]
    left_to_leave_4_2 = [0]
    left_to_leave_4_3 = [0]
    left_to_leave_4_7 = [0]
    left_to_leave_4_8 = [0]
    left_to_leave_5_1 = [0]
    left_to_leave_5_2 = [0]
    left_to_leave_5_3 = [0]
    left_to_leave_5_7 = [0]
    left_to_leave_5_8 = [0]
    left_to_leave_6_1 = [0]
    left_to_leave_6_2 = [0]
    left_to_leave_6_3 = [0]
    left_to_leave_6_7 = [0]
    left_to_leave_6_8 = [0]
    left_to_leave_7_1 = [0]
    left_to_leave_7_2 = [0]
    left_to_leave_7_3 = [0]
    left_to_leave_7_4 = [0]
    left_to_leave_7_5 = [0]
    left_to_leave_7_6 = [0]
    left_to_leave_8_1 = [0]
    left_to_leave_8_2 = [0]
    left_to_leave_8_3 = [0]
    left_to_leave_8_4 = [0]
    left_to_leave_8_5 = [0]
    left_to_leave_8_6 = [0]
    
    while total_days < (pred_num - K):
        forecast_1_4 = Original_Requirements['北京→杭州'].iloc[(60 + predict):(60 + predict + K)]
        forecast_1_5 = Original_Requirements['北京→南京'].iloc[(60 + predict):(60 + predict + K)]
        forecast_1_6 = Original_Requirements['北京→上海'].iloc[(60 + predict):(60 + predict + K)]
        forecast_1_7 = Original_Requirements['北京→深圳'].iloc[(60 + predict):(60 + predict + K)]
        forecast_1_8 = Original_Requirements['北京→香港'].iloc[(60 + predict):(60 + predict + K)]
        forecast_2_4 = Original_Requirements['潍坊→杭州'].iloc[(60 + predict):(60 + predict + K)]
        forecast_2_5 = Original_Requirements['潍坊→南京'].iloc[(60 + predict):(60 + predict + K)]
        forecast_2_6 = Original_Requirements['潍坊→上海'].iloc[(60 + predict):(60 + predict + K)]
        forecast_2_7 = Original_Requirements['潍坊→深圳'].iloc[(60 + predict):(60 + predict + K)]
        forecast_2_8 = Original_Requirements['潍坊→香港'].iloc[(60 + predict):(60 + predict + K)]
        forecast_3_4 = Original_Requirements['沈阳→杭州'].iloc[(60 + predict):(60 + predict + K)]
        forecast_3_5 = Original_Requirements['沈阳→南京'].iloc[(60 + predict):(60 + predict + K)]
        forecast_3_6 = Original_Requirements['沈阳→上海'].iloc[(60 + predict):(60 + predict + K)]
        forecast_3_7 = Original_Requirements['沈阳→深圳'].iloc[(60 + predict):(60 + predict + K)]
        forecast_3_8 = Original_Requirements['沈阳→香港'].iloc[(60 + predict):(60 + predict + K)]
        forecast_4_1 = Original_Requirements['杭州→北京'].iloc[(60 + predict):(60 + predict + K)]
        forecast_4_2 = Original_Requirements['杭州→潍坊'].iloc[(60 + predict):(60 + predict + K)]
        forecast_4_3 = Original_Requirements['杭州→沈阳'].iloc[(60 + predict):(60 + predict + K)]
        forecast_4_7 = Original_Requirements['杭州→深圳'].iloc[(60 + predict):(60 + predict + K)]
        forecast_4_8 = Original_Requirements['杭州→香港'].iloc[(60 + predict):(60 + predict + K)]
        forecast_5_1 = Original_Requirements['南京→北京'].iloc[(60 + predict):(60 + predict + K)]
        forecast_5_2 = Original_Requirements['南京→潍坊'].iloc[(60 + predict):(60 + predict + K)]
        forecast_5_3 = Original_Requirements['南京→沈阳'].iloc[(60 + predict):(60 + predict + K)]
        forecast_5_7 = Original_Requirements['南京→深圳'].iloc[(60 + predict):(60 + predict + K)]
        forecast_5_8 = Original_Requirements['南京→香港'].iloc[(60 + predict):(60 + predict + K)]
        forecast_6_1 = Original_Requirements['上海→北京'].iloc[(60 + predict):(60 + predict + K)]
        forecast_6_2 = Original_Requirements['上海→潍坊'].iloc[(60 + predict):(60 + predict + K)]
        forecast_6_3 = Original_Requirements['上海→沈阳'].iloc[(60 + predict):(60 + predict + K)]
        forecast_6_7 = Original_Requirements['上海→深圳'].iloc[(60 + predict):(60 + predict + K)]
        forecast_6_8 = Original_Requirements['上海→香港'].iloc[(60 + predict):(60 + predict + K)]
        forecast_7_1 = Original_Requirements['深圳→北京'].iloc[(60 + predict):(60 + predict + K)]
        forecast_7_2 = Original_Requirements['深圳→潍坊'].iloc[(60 + predict):(60 + predict + K)]
        forecast_7_3 = Original_Requirements['深圳→沈阳'].iloc[(60 + predict):(60 + predict + K)]
        forecast_7_4 = Original_Requirements['深圳→杭州'].iloc[(60 + predict):(60 + predict + K)]
        forecast_7_5 = Original_Requirements['深圳→南京'].iloc[(60 + predict):(60 + predict + K)]
        forecast_7_6 = Original_Requirements['深圳→上海'].iloc[(60 + predict):(60 + predict + K)]
        forecast_8_1 = Original_Requirements['香港→北京'].iloc[(60 + predict):(60 + predict + K)]
        forecast_8_2 = Original_Requirements['香港→潍坊'].iloc[(60 + predict):(60 + predict + K)]
        forecast_8_3 = Original_Requirements['香港→沈阳'].iloc[(60 + predict):(60 + predict + K)]
        forecast_8_4 = Original_Requirements['香港→杭州'].iloc[(60 + predict):(60 + predict + K)]
        forecast_8_5 = Original_Requirements['香港→南京'].iloc[(60 + predict):(60 + predict + K)]
        forecast_8_6 = Original_Requirements['香港→上海'].iloc[(60 + predict):(60 + predict + K)]
            
        predict += K
        total_days += K
        count += 1
        Cost_add,delayCost_add,storageCost_add,transportCost_add,cargo_add,type1_add,type2_add,desert_add,req_add,passengerFlight_add,cargoFlight_add,desertCost_add,passFreightBH,passFreightBS,passFreightHB,passFreightHS,passFreightSB,passFreightSH,cargFreightBH,cargFreightHS,cargFreightSB,TotalCargo_add,Tra_BH_pass,Tra_BS_pass,Tra_HB_pass,Tra_HS_pass,Tra_SB_pass,Tra_SH_pass,Tra_BH_carg,Tra_BS_carg,Tra_HB_carg,Tra_HS_carg,Tra_SB_carg,Tra_SH_carg,desr_BH,desr_BS,desr_HB,desr_HS,desr_SB,desr_SH = mainFunctionACTUAL(K)
        total_cost += Cost_add
        delay_cost += delayCost_add
        storage_cost += storageCost_add
        transport_cost += transportCost_add
        cargoOperating_cost += cargo_add
        type1 += type1_add
        type2 += type2_add
        desert += desert_add
        total_requirement += req_add
        passengerFlight += passengerFlight_add
        cargoFlight += cargoFlight_add
        desert_cost += desertCost_add
        passengerFreight_BH += passFreightBH
        passengerFreight_BS += passFreightBS
        passengerFreight_HB += passFreightHB
        passengerFreight_HS += passFreightHS
        passengerFreight_SB += passFreightSB
        passengerFreight_SH += passFreightSH
        cargoFreight_BH += cargFreightBH
        cargoFreight_HS += cargFreightHS
        cargoFreight_SB += cargFreightSB
        TotalCargo += TotalCargo_add
        TotalTra_BH_pass += Tra_BH_pass
        TotalTra_BS_pass += Tra_BS_pass
        TotalTra_HB_pass += Tra_HB_pass
        TotalTra_HS_pass += Tra_HS_pass
        TotalTra_SB_pass += Tra_SB_pass
        TotalTra_SH_pass += Tra_SH_pass
        TotalTra_BH_carg += Tra_BH_carg
        TotalTra_BS_carg += Tra_BS_carg
        TotalTra_HB_carg += Tra_HB_carg
        TotalTra_HS_carg += Tra_HS_carg
        TotalTra_SB_carg += Tra_SB_carg
        TotalTra_SH_carg += Tra_SH_carg
        Totaldesr_BH += desr_BH
        Totaldesr_BS += desr_BS
        Totaldesr_HB += desr_HB
        Totaldesr_HS += desr_HS
        Totaldesr_SB += desr_SB
        Totaldesr_SH += desr_SH
        
    forecast_1_4 = Original_Requirements['北京→杭州'].iloc[(60 + predict):(60 + pred_num)]
    forecast_1_5 = Original_Requirements['北京→南京'].iloc[(60 + predict):(60 + pred_num)]
    forecast_1_6 = Original_Requirements['北京→上海'].iloc[(60 + predict):(60 + pred_num)]
    forecast_1_7 = Original_Requirements['北京→深圳'].iloc[(60 + predict):(60 + pred_num)]
    forecast_1_8 = Original_Requirements['北京→香港'].iloc[(60 + predict):(60 + pred_num)]
    forecast_2_4 = Original_Requirements['潍坊→杭州'].iloc[(60 + predict):(60 + pred_num)]
    forecast_2_5 = Original_Requirements['潍坊→南京'].iloc[(60 + predict):(60 + pred_num)]
    forecast_2_6 = Original_Requirements['潍坊→上海'].iloc[(60 + predict):(60 + pred_num)]
    forecast_2_7 = Original_Requirements['潍坊→深圳'].iloc[(60 + predict):(60 + pred_num)]
    forecast_2_8 = Original_Requirements['潍坊→香港'].iloc[(60 + predict):(60 + pred_num)]
    forecast_3_4 = Original_Requirements['沈阳→杭州'].iloc[(60 + predict):(60 + pred_num)]
    forecast_3_5 = Original_Requirements['沈阳→南京'].iloc[(60 + predict):(60 + pred_num)]
    forecast_3_6 = Original_Requirements['沈阳→上海'].iloc[(60 + predict):(60 + pred_num)]
    forecast_3_7 = Original_Requirements['沈阳→深圳'].iloc[(60 + predict):(60 + pred_num)]
    forecast_3_8 = Original_Requirements['沈阳→香港'].iloc[(60 + predict):(60 + pred_num)]
    forecast_4_1 = Original_Requirements['杭州→北京'].iloc[(60 + predict):(60 + pred_num)]
    forecast_4_2 = Original_Requirements['杭州→潍坊'].iloc[(60 + predict):(60 + pred_num)]
    forecast_4_3 = Original_Requirements['杭州→沈阳'].iloc[(60 + predict):(60 + pred_num)]
    forecast_4_7 = Original_Requirements['杭州→深圳'].iloc[(60 + predict):(60 + pred_num)]
    forecast_4_8 = Original_Requirements['杭州→香港'].iloc[(60 + predict):(60 + pred_num)]
    forecast_5_1 = Original_Requirements['南京→北京'].iloc[(60 + predict):(60 + pred_num)]
    forecast_5_2 = Original_Requirements['南京→潍坊'].iloc[(60 + predict):(60 + pred_num)]
    forecast_5_3 = Original_Requirements['南京→沈阳'].iloc[(60 + predict):(60 + pred_num)]
    forecast_5_7 = Original_Requirements['南京→深圳'].iloc[(60 + predict):(60 + pred_num)]
    forecast_5_8 = Original_Requirements['南京→香港'].iloc[(60 + predict):(60 + pred_num)]
    forecast_6_1 = Original_Requirements['上海→北京'].iloc[(60 + predict):(60 + pred_num)]
    forecast_6_2 = Original_Requirements['上海→潍坊'].iloc[(60 + predict):(60 + pred_num)]
    forecast_6_3 = Original_Requirements['上海→沈阳'].iloc[(60 + predict):(60 + pred_num)]
    forecast_6_7 = Original_Requirements['上海→深圳'].iloc[(60 + predict):(60 + pred_num)]
    forecast_6_8 = Original_Requirements['上海→香港'].iloc[(60 + predict):(60 + pred_num)]
    forecast_7_1 = Original_Requirements['深圳→北京'].iloc[(60 + predict):(60 + pred_num)]
    forecast_7_2 = Original_Requirements['深圳→潍坊'].iloc[(60 + predict):(60 + pred_num)]
    forecast_7_3 = Original_Requirements['深圳→沈阳'].iloc[(60 + predict):(60 + pred_num)]
    forecast_7_4 = Original_Requirements['深圳→杭州'].iloc[(60 + predict):(60 + pred_num)]
    forecast_7_5 = Original_Requirements['深圳→南京'].iloc[(60 + predict):(60 + pred_num)]
    forecast_7_6 = Original_Requirements['深圳→上海'].iloc[(60 + predict):(60 + pred_num)]
    forecast_8_1 = Original_Requirements['香港→北京'].iloc[(60 + predict):(60 + pred_num)]
    forecast_8_2 = Original_Requirements['香港→潍坊'].iloc[(60 + predict):(60 + pred_num)]
    forecast_8_3 = Original_Requirements['香港→沈阳'].iloc[(60 + predict):(60 + pred_num)]
    forecast_8_4 = Original_Requirements['香港→杭州'].iloc[(60 + predict):(60 + pred_num)]
    forecast_8_5 = Original_Requirements['香港→南京'].iloc[(60 + predict):(60 + pred_num)]
    forecast_8_6 = Original_Requirements['香港→上海'].iloc[(60 + predict):(60 + pred_num)]
    
    K = pred_num - total_days
    Cost_add,delayCost_add,storageCost_add,transportCost_add,cargo_add,type1_add,type2_add,desert_add,req_add,passengerFlight_add,cargoFlight_add,desertCost_add,passFreightBH,passFreightBS,passFreightHB,passFreightHS,passFreightSB,passFreightSH,cargFreightBH,cargFreightHS,cargFreightSB,TotalCargo_add,Tra_BH_pass,Tra_BS_pass,Tra_HB_pass,Tra_HS_pass,Tra_SB_pass,Tra_SH_pass,Tra_BH_carg,Tra_BS_carg,Tra_HB_carg,Tra_HS_carg,Tra_SB_carg,Tra_SH_carg,desr_BH,desr_BS,desr_HB,desr_HS,desr_SB,desr_SH = mainFunctionACTUAL(K)
    total_cost += Cost_add
    delay_cost += delayCost_add
    storage_cost += storageCost_add
    transport_cost += transportCost_add
    cargoOperating_cost += cargo_add
    type1 += type1_add
    type2 += type2_add
    desert += desert_add
    total_requirement += req_add
    passengerFlight += passengerFlight_add
    cargoFlight += cargoFlight_add
    desert_cost += desertCost_add
    passengerFreight_BH += passFreightBH
    passengerFreight_BS += passFreightBS
    passengerFreight_HB += passFreightHB
    passengerFreight_HS += passFreightHS
    passengerFreight_SB += passFreightSB
    passengerFreight_SH += passFreightSH
    cargoFreight_BH += cargFreightBH
    cargoFreight_HS += cargFreightHS
    cargoFreight_SB += cargFreightSB
    TotalCargo += TotalCargo_add
    TotalTra_BH_pass += Tra_BH_pass
    TotalTra_BS_pass += Tra_BS_pass
    TotalTra_HB_pass += Tra_HB_pass
    TotalTra_HS_pass += Tra_HS_pass
    TotalTra_SB_pass += Tra_SB_pass
    TotalTra_SH_pass += Tra_SH_pass
    TotalTra_BH_carg += Tra_BH_carg
    TotalTra_BS_carg += Tra_BS_carg
    TotalTra_HB_carg += Tra_HB_carg
    TotalTra_HS_carg += Tra_HS_carg
    TotalTra_SB_carg += Tra_SB_carg
    TotalTra_SH_carg += Tra_SH_carg
    Totaldesr_BH += desr_BH
    Totaldesr_BS += desr_BS
    Totaldesr_HB += desr_HB
    Totaldesr_HS += desr_HS
    Totaldesr_SB += desr_SB
    Totaldesr_SH += desr_SH
        
    ave1 += total_cost
    ave2 += delay_cost
    ave3 += storage_cost
    ave4 += transport_cost
    ave5 += cargoOperating_cost
    ave6 += desert_cost
    ave7 += total_requirement
    ave8 += type1
    ave9 += type2
    ave10 += passengerFlight
    ave11 += cargoFlight
    ave12 += desert
    ave13 += passengerFlight/(passengerCapacity*pred_num)
    ave14 += cargoFlight/(3*Q*TotalCargo)
    ave15 += passengerFreight_BH/(passengerCapacity_BH*pred_num)
    ave16 += passengerFreight_BS/(passengerCapacity_BS*pred_num)
    ave17 += passengerFreight_HB/(passengerCapacity_HB*pred_num)
    ave18 += passengerFreight_HS/(passengerCapacity_HS*pred_num)
    ave19 += passengerFreight_SB/(passengerCapacity_SB*pred_num)
    ave20 += passengerFreight_SH/(passengerCapacity_SH*pred_num)
    ave21 += cargoFreight_BH/(Q*TotalCargo)
    ave22 += cargoFreight_HS/(Q*TotalCargo)
    ave23 += cargoFreight_SB/(Q*TotalCargo)
    ave24 += cargoFreight_BH/(Q*pred_num*N)
    ave25 += cargoFreight_HS/(Q*pred_num*N)
    ave26 += cargoFreight_SB/(Q*pred_num*N)
    ave27 += (cargoFreight_BH+cargoFreight_HS+cargoFreight_SB)/(3*Q*pred_num*N)
    TotalCargoUsed += TotalCargo/pred_num
    ave28 += TotalTra_BH_pass
    ave29 += TotalTra_BS_pass
    ave30 += TotalTra_HB_pass
    ave31 += TotalTra_HS_pass
    ave32 += TotalTra_SB_pass
    ave33 += TotalTra_SH_pass
    ave34 += TotalTra_BH_carg
    ave35 += TotalTra_BS_carg
    ave36 += TotalTra_HB_carg
    ave37 += TotalTra_HS_carg
    ave38 += TotalTra_SB_carg
    ave39 += TotalTra_SH_carg
    ave40 += Totaldesr_BH
    ave41 += Totaldesr_BS
    ave42 += Totaldesr_HB
    ave43 += Totaldesr_HS
    ave44 += Totaldesr_SB
    ave45 += Totaldesr_SH

    print(f"平均总成本为{ave1}")
    print(f"平均逾期成本为{ave2}")
    print(f"平均仓储成本为{ave3}")
    print(f"平均客机成本为{ave4}")
    print(f"平均货机成本为{ave5}")
    print(f"平均丢弃成本为{ave6}")
    print(f"平均预测总需求为{ave7}")
    print(f"平均货物1为{ave8}")
    print(f"平均货物2为{ave9}")
    print(f"平均客机运载量为{ave10}")
    print(f"平均货机运载量为{ave11}")
    print(f"平均丢弃量为{ave12}")
    print(f"平均客机总效率为{ave13}")
    print(f"平均货机总效率为{ave14}")
    print(f"平均每天调用货机航班数量为{TotalCargoUsed}")
    print(f"平均货机机队运力总效率为{ave27}")
    print(f"平均BH客机效率为{ave15}")
    print(f"平均BS客机效率为{ave16}")
    print(f"平均HB客机效率为{ave17}")
    print(f"平均HS客机效率为{ave18}")
    print(f"平均SB客机效率为{ave19}")
    print(f"平均SH客机效率为{ave20}")
    print(f"平均BH货机效率为{ave21}")
    print(f"平均HS货机效率为{ave22}")
    print(f"平均SB货机效率为{ave23}")
    print(f"平均BH货机机队运力使用效率为{ave24}")
    print(f"平均BH货机机队运力使用效率为{ave25}")
    print(f"平均BH货机机队运力使用效率为{ave26}")
    
    print(f"北京到杭州的货物使用客机运输重量{ave28}，使用货机运输重量{ave34}，丢弃重量{ave40}")
    print(f"北京到深圳的货物使用客机运输重量{ave29}，使用货机运输重量{ave35}，丢弃重量{ave41}")
    print(f"杭州到北京的货物使用客机运输重量{ave30}，使用货机运输重量{ave36}，丢弃重量{ave42}")
    print(f"杭州到深圳的货物使用客机运输重量{ave31}，使用货机运输重量{ave37}，丢弃重量{ave43}")
    print(f"深圳到北京的货物使用客机运输重量{ave32}，使用货机运输重量{ave38}，丢弃重量{ave44}")
    print(f"深圳到杭州的货物使用客机运输重量{ave33}，使用货机运输重量{ave39}，丢弃重量{ave45}")   
    averagecost = ave1 / ave7
    print(f"\n在货机运力系数为{round(w,2)}的情况下单位重量的货物订单造成的成本为{averagecost}\n")

# 神经网络模型预测代码
import gurobipy as gp
from gurobipy import GRB
import openpyxl               
from datashape import string
from openpyxl import load_workbook
import numpy as np
import pandas as pd
import random
import re
import matplotlib.pyplot as plt
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.graphics.tsaplots import plot_pacf, plot_acf
from statsmodels.tsa.arima.model import ARIMA
import statsmodels.api as sm
from statsmodels.stats.diagnostic import acorr_ljungbox
from scipy import stats
from matplotlib.font_manager import FontProperties
import warnings
from arch.unitroot import ADF
import statsmodels.api as sm
import statsmodels.formula.api as smf
import statsmodels.tsa.api as smt
from statsmodels.tsa.stattools import adfuller
from statsmodels.stats.diagnostic import acorr_ljungbox
from statsmodels.graphics.api import qqplot
warnings.filterwarnings("ignore")
from datetime import datetime, timedelta
import math
import tracemalloc
from keras.models import Sequential
from keras.layers import LSTM, Dense

df = pd.read_excel('C:/Users/net2/Downloads/客机航班.xlsx')
Original_Requirements = pd.read_excel('C:/Users/net2/Downloads/需求.xlsx',sheet_name='需求')
print("---------------------------------------------客机航班数据---------------------------------------------")
print(df)
print("\n---------------------------------------------需求数据---------------------------------------------")
print(Original_Requirements)

# 提取客机航班起飞时间段表与抵达时间段表
passengerStartTime_BH = [element.strftime("%Y-%m-%d %H:%M") for element in df['起飞时刻BH'].dropna()]
passengerEndTime_BH = [element.strftime("%Y-%m-%d %H:%M") for element in df['到达时刻BH'].dropna()]
passengerStartTime_BS = [element.strftime("%Y-%m-%d %H:%M") for element in df['起飞时刻BS'].dropna()]
passengerEndTime_BS = [element.strftime("%Y-%m-%d %H:%M") for element in df['到达时刻BS'].dropna()]
passengerStartTime_HB = [element.strftime("%Y-%m-%d %H:%M") for element in df['起飞时刻HB'].dropna()]
passengerEndTime_HB = [element.strftime("%Y-%m-%d %H:%M") for element in df['到达时刻HB'].dropna()]
passengerStartTime_HS = [element.strftime("%Y-%m-%d %H:%M") for element in df['起飞时刻HS'].dropna()]
passengerEndTime_HS = [element.strftime("%Y-%m-%d %H:%M") for element in df['到达时刻HS'].dropna()]
passengerStartTime_SB = [element.strftime("%Y-%m-%d %H:%M") for element in df['起飞时刻SB'].dropna()]
passengerEndTime_SB = [element.strftime("%Y-%m-%d %H:%M") for element in df['到达时刻SB'].dropna()]
passengerStartTime_SH = [element.strftime("%Y-%m-%d %H:%M") for element in df['起飞时刻SH'].dropna()]
passengerEndTime_SH = [element.strftime("%Y-%m-%d %H:%M") for element in df['到达时刻SH'].dropna()]

# 计算客机航班的飞行时间
passenger_flight_times_BH = []
passenger_flight_times_BS = []
passenger_flight_times_HB = []
passenger_flight_times_HS = []
passenger_flight_times_SB = []
passenger_flight_times_SH = []

def freightIdentify(lst1,lst2):
    passengerStartTime = [element.strftime("%Y-%m-%d %H:%M") for element in lst1.dropna()]
    passengerEndTime = [element.strftime("%Y-%m-%d %H:%M") for element in lst2.dropna()]
    passenger_flight_times = []
    
    for departure_time, arrival_time in zip(passengerStartTime, passengerEndTime):
        departure_datetime = datetime.strptime(departure_time, "%Y-%m-%d %H:%M")
        arrival_datetime = datetime.strptime(arrival_time, "%Y-%m-%d %H:%M")
        if arrival_datetime < departure_datetime:
            arrival_datetime += timedelta(days=1)
        flight_time = arrival_datetime - departure_datetime
        flight_hours = flight_time.total_seconds() / 3600
        passenger_flight_times.append(flight_hours)
        
    return passenger_flight_times

def departureTimeIdentify(lst):
    passengerStartTime = [element.strftime("%Y-%m-%d %H:%M") for element in lst.dropna()]
    departure_times = [datetime.strptime(time, "%Y-%m-%d %H:%M") for time in passengerStartTime]
    hours_from_midnight = [(departure_time - departure_time.replace(hour=0, minute=0)).total_seconds() / 3600 for departure_time in departure_times]
    return hours_from_midnight

def TimeTableOfPassenger(lst):
    TimeTable0 = []
    for i in range(K):
        passenger_flight_time_add = [x + 24 * i for x in lst]
        
        for j in range(len(passenger_flight_time_add)):
            TimeTable0.append(passenger_flight_time_add[j])
    arrPassenger = np.array(TimeTable0)
    passengerTimeTable = arrPassenger.reshape((1, -1)).tolist()[0]
    return passengerTimeTable

def process_value(value):
    if isinstance(value, int):
        return value
    elif isinstance(value, float):
        return math.floor(value)
    else:
        raise ValueError("Unsupported value type")

def passCantTransCal(lst):
    passCantTrans = []
    for a in lst:
        if a.is_integer():
            passCantTrans.append(int(a) + 1)
        else:
            next_int = math.ceil(a)
            passCantTrans.append(next_int)
    return max(passCantTrans)

def passengerTimeCal(lst):
    passengerTime = []
    for a in lst:
        if a.is_integer():
            passengerTime.append(int(a))
        else:
            prev_int = math.floor(a)
            passengerTime.append(prev_int)
    return passengerTime

# 每天的时间段系数
Time_Table = [0.008,0.008,0.008,0.008,0.008,0.008,0.008,0.008,0.008,0.008,0.662,0.037,0.128,0.004,0.011,0.02,0.01,0.007,0,0.009,0.008,0.008,0.008,0.008]

passenger_flight_times_BH = freightIdentify(df['起飞时刻BH'],df['到达时刻BH'])
passenger_flight_times_BS = freightIdentify(df['起飞时刻BS'],df['到达时刻BS'])
passenger_flight_times_HB = freightIdentify(df['起飞时刻HB'],df['到达时刻HB'])
passenger_flight_times_HS = freightIdentify(df['起飞时刻HS'],df['到达时刻HS'])
passenger_flight_times_SB = freightIdentify(df['起飞时刻SB'],df['到达时刻SB'])
passenger_flight_times_SH = freightIdentify(df['起飞时刻SH'],df['到达时刻SH'])
hours_from_midnight_BH = departureTimeIdentify(df['起飞时刻BH'])
hours_from_midnight_BS = departureTimeIdentify(df['起飞时刻BS'])
hours_from_midnight_HB = departureTimeIdentify(df['起飞时刻HB'])
hours_from_midnight_HS = departureTimeIdentify(df['起飞时刻HS'])
hours_from_midnight_SB = departureTimeIdentify(df['起飞时刻SB'])
hours_from_midnight_SH = departureTimeIdentify(df['起飞时刻SH'])

print("-----------------------三地两两之间客机航班飞行时间-----------------------")
print("北京→杭州：\n",passenger_flight_times_BH)
print("\n")
print("北京→深圳：\n",passenger_flight_times_BS)
print("\n")
print("杭州→北京：\n",passenger_flight_times_HB)
print("\n")
print("杭州→深圳：\n",passenger_flight_times_HS)
print("\n")
print("深圳→北京：\n",passenger_flight_times_SB)
print("\n")
print("深圳→杭州：\n",passenger_flight_times_SH)


departure_times_BH = [datetime.strptime(time, "%Y-%m-%d %H:%M") for time in passengerStartTime_BH]
departure_times_BS = [datetime.strptime(time, "%Y-%m-%d %H:%M") for time in passengerStartTime_BS]
departure_times_HB = [datetime.strptime(time, "%Y-%m-%d %H:%M") for time in passengerStartTime_HB]
departure_times_HS = [datetime.strptime(time, "%Y-%m-%d %H:%M") for time in passengerStartTime_HS]
departure_times_SB = [datetime.strptime(time, "%Y-%m-%d %H:%M") for time in passengerStartTime_SB]
departure_times_SH = [datetime.strptime(time, "%Y-%m-%d %H:%M") for time in passengerStartTime_SH]

hours_from_midnight_BH = [(departure_time - departure_time.replace(hour=0, minute=0)).total_seconds() / 3600 for departure_time in departure_times_BH]
hours_from_midnight_BS = [(departure_time - departure_time.replace(hour=0, minute=0)).total_seconds() / 3600 for departure_time in departure_times_BS]
hours_from_midnight_HB = [(departure_time - departure_time.replace(hour=0, minute=0)).total_seconds() / 3600 for departure_time in departure_times_HB]
hours_from_midnight_HS = [(departure_time - departure_time.replace(hour=0, minute=0)).total_seconds() / 3600 for departure_time in departure_times_HS]
hours_from_midnight_SB = [(departure_time - departure_time.replace(hour=0, minute=0)).total_seconds() / 3600 for departure_time in departure_times_SB]
hours_from_midnight_SH = [(departure_time - departure_time.replace(hour=0, minute=0)).total_seconds() / 3600 for departure_time in departure_times_SH]

print("\n\n\n------------------------三地两两之间起飞时刻表------------------------\n")
print("北京→杭州起飞时刻:\n", hours_from_midnight_BH)
print("\n")
print("北京→深圳起飞时刻:\n", hours_from_midnight_BS)
print("\n")
print("杭州→北京起飞时刻:\n", hours_from_midnight_HB)
print("\n")
print("杭州→深圳起飞时刻:\n", hours_from_midnight_HS)
print("\n")
print("深圳→北京起飞时刻:\n", hours_from_midnight_SB)
print("\n")
print("深圳→杭州起飞时刻:\n", hours_from_midnight_SH)

del departure_times_BH
del departure_times_BS
del departure_times_HB
del departure_times_HS
del departure_times_SB
del departure_times_SH

del passengerStartTime_BH
del passengerEndTime_BH
del passengerStartTime_BS
del passengerEndTime_BS
del passengerStartTime_HB
del passengerEndTime_HB
del passengerStartTime_HS
del passengerEndTime_HS
del passengerStartTime_SB
del passengerEndTime_SB
del passengerStartTime_SH
del passengerEndTime_SH

t1 = 0.5  # 北京-北京
t2 = 1.5  # 北京-潍坊
t3 = 2    # 北京-沈阳
t4 = 0.5  # 杭州-杭州
t5 = 1    # 杭州-南京
t6 = 1.5  # 杭州-上海
t7 = 0.5  # 深圳-深圳
t8 = 1.5  # 深圳-香港

def TimeSplit(lst):
    lstu = []
    for pred in lst:
        temp = []
        for a in Time_Table:
            temp.append(pred * a * Perc)
        lstu.extend(temp)
    return lstu

def SJWL(lst,K):
    A = lst.values
    normalized_data = (A - np.mean(A)) / np.std(A)
    X_train, y_train = [], []
    timesteps = K
    for i in range(len(normalized_data) - timesteps):
        X_train.append(normalized_data[i:i+timesteps])
        y_train.append(normalized_data[i+timesteps])
    X_train, y_train = np.array(X_train), np.array(y_train)
    model = Sequential([
        Dense(64, activation='relu', input_shape=(timesteps,)),
        Dense(32, activation='relu'),
        Dense(1)
    ])
    model.compile(optimizer='adam', loss='mean_squared_error')
    model.fit(X_train, y_train, epochs=50, batch_size=32, validation_split=0.2, verbose=0)
    future_data = normalized_data[-timesteps:].reshape(1, timesteps)
    predicted_prices = []
    for _ in range(K):
        prediction = model.predict(future_data)
        predicted_prices.append(prediction[0])
        future_data = np.append(future_data[:, 1:], prediction, axis=1)
    predicted_prices = np.ravel(predicted_prices) * np.std(A) + np.mean(A)
    predicted_prices = predicted_prices.tolist()
    return predicted_prices

def mainFunctionSJWL(K):
    cargo_BH = []
    cargo_HS = []
    cargo_SB = []
        
    for i in range(K):
        cargo_BH_add = [x + 24 * i for x in cargo_BH_unit]
        cargo_HS_add = [x + 24 * i for x in cargo_HS_unit]
        cargo_SB_add = [x + 24 * i for x in cargo_SB_unit]
        for j in range(N):
            cargo_BH.append(cargo_BH_add[j])
            cargo_HS.append(cargo_HS_add[j])
            cargo_SB.append(cargo_SB_add[j])
    del cargo_BH_add,cargo_HS_add,cargo_SB_add
    BH_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_BH)
    BS_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_BS)
    HB_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_HB)
    HS_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_HS)
    SB_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_SB)
    SH_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_SH)
    flightTime_BH = passenger_flight_times_BH * K
    flightTime_BS = passenger_flight_times_BS * K
    flightTime_HB = passenger_flight_times_HB * K
    flightTime_HS = passenger_flight_times_HS * K
    flightTime_SB = passenger_flight_times_SB * K
    flightTime_SH = passenger_flight_times_SH * K
    first_flight_BH = min(min(BH_passengerTimeTable),min(cargo_BH))
    last_flight_BH = max(max(BH_passengerTimeTable),max(cargo_BH))
    first_flight_HS = min(min(HS_passengerTimeTable),min(cargo_HS))
    last_flight_HS = max(max(HS_passengerTimeTable),max(cargo_HS))
    first_flight_SB = min(min(SB_passengerTimeTable),min(cargo_SB))
    last_flight_SB = max(max(SB_passengerTimeTable),max(cargo_SB))
    first_flight_BS = min(BS_passengerTimeTable)
    last_flight_BS = max(BS_passengerTimeTable)
    first_flight_SH = min(SH_passengerTimeTable)
    last_flight_SH = max(SH_passengerTimeTable)
    first_flight_HB = min(HB_passengerTimeTable)
    last_flight_HB = max(HB_passengerTimeTable)
    BHcant_transport_passenger = passCantTransCal(BH_passengerTimeTable)
    BScant_transport_passenger = passCantTransCal(BS_passengerTimeTable)
    HBcant_transport_passenger = passCantTransCal(HB_passengerTimeTable)
    HScant_transport_passenger = passCantTransCal(HS_passengerTimeTable)
    SBcant_transport_passenger = passCantTransCal(SB_passengerTimeTable)
    SHcant_transport_passenger = passCantTransCal(SH_passengerTimeTable)
    BHcant_transport_cargo = max(cargo_BH) + 1
    HScant_transport_cargo = max(cargo_HS) + 1
    SBcant_transport_cargo = max(cargo_SB) + 1
    first_BH = process_value(first_flight_BH)
    first_BS = process_value(first_flight_BS)
    first_HB = process_value(first_flight_HB)
    first_HS = process_value(first_flight_HS)
    first_SB = process_value(first_flight_SB)
    first_SH = process_value(first_flight_SH)
    last_BH = process_value(last_flight_BH)
    last_BS = process_value(last_flight_BS)
    last_HB = process_value(last_flight_HB)
    last_HS = process_value(last_flight_HS)
    last_SB = process_value(last_flight_SB)
    last_SH = process_value(last_flight_SH)
    passengerTime_BH = passengerTimeCal(BH_passengerTimeTable)
    passengerTime_BS = passengerTimeCal(BS_passengerTimeTable)
    passengerTime_HB = passengerTimeCal(HB_passengerTimeTable)
    passengerTime_HS = passengerTimeCal(HS_passengerTimeTable)
    passengerTime_SB = passengerTimeCal(SB_passengerTimeTable)
    passengerTime_SH = passengerTimeCal(SH_passengerTimeTable)

    C1 = 0 # C1为未运完的仓储成本，初始值为0
    C2 = 0 # C2为未运完的逾期延迟成本，初始值为0
    C3 = 0 # C3为能运完的逾期延迟成本，初始值为0
    C4 = 0 # C4为能运完的仓储成本，初始值为0
    C5 = 0 # C5为运输成本，初始值为0
    C6 = 0 # C6为丢弃成本，初始值为0
    C7 = 0
    transported_1 = 0
    transported_2 = 0
    cargoUsed = 0
    
    # 进行模型拟合和预测
    forecast_1_4 = SJWL(train['北京→杭州'],K)
    forecast_1_5 = SJWL(train['北京→南京'],K)
    forecast_1_6 = SJWL(train['北京→上海'],K)
    forecast_1_7 = SJWL(train['北京→深圳'],K)
    forecast_1_8 = SJWL(train['北京→香港'],K)
    forecast_2_4 = SJWL(train['潍坊→杭州'],K)
    forecast_2_5 = SJWL(train['潍坊→南京'],K)
    forecast_2_6 = SJWL(train['潍坊→上海'],K)
    forecast_2_7 = SJWL(train['潍坊→深圳'],K)
    forecast_2_8 = SJWL(train['潍坊→香港'],K)
    forecast_3_4 = SJWL(train['沈阳→杭州'],K)
    forecast_3_5 = SJWL(train['沈阳→南京'],K)
    forecast_3_6 = SJWL(train['沈阳→上海'],K)
    forecast_3_7 = SJWL(train['沈阳→深圳'],K)
    forecast_3_8 = SJWL(train['沈阳→香港'],K)
    forecast_4_1 = SJWL(train['杭州→北京'],K)
    forecast_4_2 = SJWL(train['杭州→潍坊'],K)
    forecast_4_3 = SJWL(train['杭州→沈阳'],K)
    forecast_4_7 = SJWL(train['杭州→深圳'],K)
    forecast_4_8 = SJWL(train['杭州→香港'],K)
    forecast_5_1 = SJWL(train['南京→北京'],K)
    forecast_5_2 = SJWL(train['南京→潍坊'],K)
    forecast_5_3 = SJWL(train['南京→沈阳'],K)
    forecast_5_7 = SJWL(train['南京→深圳'],K)
    forecast_5_8 = SJWL(train['南京→香港'],K)
    forecast_6_1 = SJWL(train['上海→北京'],K)
    forecast_6_2 = SJWL(train['上海→潍坊'],K)
    forecast_6_3 = SJWL(train['上海→沈阳'],K)
    forecast_6_7 = SJWL(train['上海→深圳'],K)
    forecast_6_8 = SJWL(train['上海→香港'],K)
    forecast_7_1 = SJWL(train['深圳→北京'],K)
    forecast_7_2 = SJWL(train['深圳→潍坊'],K)
    forecast_7_3 = SJWL(train['深圳→沈阳'],K)
    forecast_7_4 = SJWL(train['深圳→杭州'],K)
    forecast_7_5 = SJWL(train['深圳→南京'],K)
    forecast_7_6 = SJWL(train['深圳→上海'],K)
    forecast_8_1 = SJWL(train['香港→北京'],K)
    forecast_8_2 = SJWL(train['香港→潍坊'],K)
    forecast_8_3 = SJWL(train['香港→沈阳'],K)
    forecast_8_4 = SJWL(train['香港→杭州'],K)
    forecast_8_5 = SJWL(train['香港→南京'],K)
    forecast_8_6 = SJWL(train['香港→上海'],K)
    
    forecast_1_4_K = TimeSplit(forecast_1_4)
    forecast_1_5_K = TimeSplit(forecast_1_5)
    forecast_1_6_K = TimeSplit(forecast_1_6)
    forecast_1_7_K = TimeSplit(forecast_1_7)
    forecast_1_8_K = TimeSplit(forecast_1_8)
    forecast_2_4_K = TimeSplit(forecast_2_4)
    forecast_2_5_K = TimeSplit(forecast_2_5)
    forecast_2_6_K = TimeSplit(forecast_2_6)
    forecast_2_7_K = TimeSplit(forecast_2_7)
    forecast_2_8_K = TimeSplit(forecast_2_8)
    forecast_3_4_K = TimeSplit(forecast_3_4)
    forecast_3_5_K = TimeSplit(forecast_3_5)
    forecast_3_6_K = TimeSplit(forecast_3_6)
    forecast_3_7_K = TimeSplit(forecast_3_7)
    forecast_3_8_K = TimeSplit(forecast_3_8)
    forecast_4_1_K = TimeSplit(forecast_4_1)
    forecast_4_2_K = TimeSplit(forecast_4_2)
    forecast_4_3_K = TimeSplit(forecast_4_3)
    forecast_4_7_K = TimeSplit(forecast_4_7)
    forecast_4_8_K = TimeSplit(forecast_4_8)
    forecast_5_1_K = TimeSplit(forecast_5_1)
    forecast_5_2_K = TimeSplit(forecast_5_2)
    forecast_5_3_K = TimeSplit(forecast_5_3)
    forecast_5_7_K = TimeSplit(forecast_5_7)
    forecast_5_8_K = TimeSplit(forecast_5_8)
    forecast_6_1_K = TimeSplit(forecast_6_1)
    forecast_6_2_K = TimeSplit(forecast_6_2)
    forecast_6_3_K = TimeSplit(forecast_6_3)
    forecast_6_7_K = TimeSplit(forecast_6_7)
    forecast_6_8_K = TimeSplit(forecast_6_8)
    forecast_7_1_K = TimeSplit(forecast_7_1)
    forecast_7_2_K = TimeSplit(forecast_7_2)
    forecast_7_3_K = TimeSplit(forecast_7_3)
    forecast_7_4_K = TimeSplit(forecast_7_4)
    forecast_7_5_K = TimeSplit(forecast_7_5)
    forecast_7_6_K = TimeSplit(forecast_7_6)
    forecast_8_1_K = TimeSplit(forecast_8_1)
    forecast_8_2_K = TimeSplit(forecast_8_2)
    forecast_8_3_K = TimeSplit(forecast_8_3)
    forecast_8_4_K = TimeSplit(forecast_8_4)
    forecast_8_5_K = TimeSplit(forecast_8_5)
    forecast_8_6_K = TimeSplit(forecast_8_6)
    
    forecast_1_4_K[0] += left_to_leave_1_4[-1]
    forecast_1_5_K[0] += left_to_leave_1_5[-1]
    forecast_1_6_K[0] += left_to_leave_1_6[-1]
    forecast_1_7_K[0] += left_to_leave_1_7[-1]
    forecast_1_8_K[0] += left_to_leave_1_8[-1]
    forecast_2_4_K[0] += left_to_leave_2_4[-1]
    forecast_2_5_K[0] += left_to_leave_2_5[-1]
    forecast_2_6_K[0] += left_to_leave_2_6[-1]
    forecast_2_7_K[0] += left_to_leave_2_7[-1]
    forecast_2_8_K[0] += left_to_leave_2_8[-1]
    forecast_3_4_K[0] += left_to_leave_3_4[-1]
    forecast_3_5_K[0] += left_to_leave_3_5[-1]
    forecast_3_6_K[0] += left_to_leave_3_6[-1]
    forecast_3_7_K[0] += left_to_leave_3_7[-1]
    forecast_3_8_K[0] += left_to_leave_3_8[-1]
    forecast_4_1_K[0] += left_to_leave_4_1[-1]
    forecast_4_2_K[0] += left_to_leave_4_2[-1]
    forecast_4_3_K[0] += left_to_leave_4_3[-1]
    forecast_4_7_K[0] += left_to_leave_4_7[-1]
    forecast_4_8_K[0] += left_to_leave_4_8[-1]
    forecast_5_1_K[0] += left_to_leave_5_1[-1]
    forecast_5_2_K[0] += left_to_leave_5_2[-1]
    forecast_5_3_K[0] += left_to_leave_5_3[-1]
    forecast_5_7_K[0] += left_to_leave_5_7[-1]
    forecast_5_8_K[0] += left_to_leave_5_8[-1]
    forecast_6_1_K[0] += left_to_leave_6_1[-1]
    forecast_6_2_K[0] += left_to_leave_6_2[-1]
    forecast_6_3_K[0] += left_to_leave_6_3[-1]
    forecast_6_7_K[0] += left_to_leave_6_7[-1]
    forecast_6_8_K[0] += left_to_leave_6_8[-1]
    forecast_7_1_K[0] += left_to_leave_7_1[-1]
    forecast_7_2_K[0] += left_to_leave_7_2[-1]
    forecast_7_3_K[0] += left_to_leave_7_3[-1]
    forecast_7_4_K[0] += left_to_leave_7_4[-1]
    forecast_7_5_K[0] += left_to_leave_7_5[-1]
    forecast_7_6_K[0] += left_to_leave_7_6[-1]
    forecast_8_1_K[0] += left_to_leave_8_1[-1]
    forecast_8_2_K[0] += left_to_leave_8_2[-1]
    forecast_8_3_K[0] += left_to_leave_8_3[-1]
    forecast_8_4_K[0] += left_to_leave_8_4[-1]
    forecast_8_5_K[0] += left_to_leave_8_5[-1]
    forecast_8_6_K[0] += left_to_leave_8_6[-1]
    
    # 计算时效快递的需求
    TimeSensitive_Req_1_4 = [x * perc1 for x in forecast_1_4_K]
    TimeSensitive_Req_1_5 = [x * perc1 for x in forecast_1_5_K]
    TimeSensitive_Req_1_6 = [x * perc1 for x in forecast_1_6_K]
    TimeSensitive_Req_1_7 = [x * perc1 for x in forecast_1_7_K]
    TimeSensitive_Req_1_8 = [x * perc1 for x in forecast_1_8_K]
    TimeSensitive_Req_2_4 = [x * perc1 for x in forecast_2_4_K]
    TimeSensitive_Req_2_5 = [x * perc1 for x in forecast_2_5_K]
    TimeSensitive_Req_2_6 = [x * perc1 for x in forecast_2_6_K]
    TimeSensitive_Req_2_7 = [x * perc1 for x in forecast_2_7_K]
    TimeSensitive_Req_2_8 = [x * perc1 for x in forecast_2_8_K]
    TimeSensitive_Req_3_4 = [x * perc1 for x in forecast_3_4_K]
    TimeSensitive_Req_3_5 = [x * perc1 for x in forecast_3_5_K]
    TimeSensitive_Req_3_6 = [x * perc1 for x in forecast_3_6_K]
    TimeSensitive_Req_3_7 = [x * perc1 for x in forecast_3_7_K]
    TimeSensitive_Req_3_8 = [x * perc1 for x in forecast_3_8_K]
    TimeSensitive_Req_4_1 = [x * perc1 for x in forecast_4_1_K]
    TimeSensitive_Req_4_2 = [x * perc1 for x in forecast_4_2_K]
    TimeSensitive_Req_4_3 = [x * perc1 for x in forecast_4_3_K]
    TimeSensitive_Req_4_7 = [x * perc1 for x in forecast_4_7_K]
    TimeSensitive_Req_4_8 = [x * perc1 for x in forecast_4_8_K]
    TimeSensitive_Req_5_1 = [x * perc1 for x in forecast_5_1_K]
    TimeSensitive_Req_5_2 = [x * perc1 for x in forecast_5_2_K]
    TimeSensitive_Req_5_3 = [x * perc1 for x in forecast_5_3_K]
    TimeSensitive_Req_5_7 = [x * perc1 for x in forecast_5_7_K]
    TimeSensitive_Req_5_8 = [x * perc1 for x in forecast_5_8_K]
    TimeSensitive_Req_6_1 = [x * perc1 for x in forecast_6_1_K]
    TimeSensitive_Req_6_2 = [x * perc1 for x in forecast_6_2_K]
    TimeSensitive_Req_6_3 = [x * perc1 for x in forecast_6_3_K]
    TimeSensitive_Req_6_7 = [x * perc1 for x in forecast_6_7_K]
    TimeSensitive_Req_6_8 = [x * perc1 for x in forecast_6_8_K]
    TimeSensitive_Req_7_1 = [x * perc1 for x in forecast_7_1_K]
    TimeSensitive_Req_7_2 = [x * perc1 for x in forecast_7_2_K]
    TimeSensitive_Req_7_3 = [x * perc1 for x in forecast_7_3_K]
    TimeSensitive_Req_7_4 = [x * perc1 for x in forecast_7_4_K]
    TimeSensitive_Req_7_5 = [x * perc1 for x in forecast_7_5_K]
    TimeSensitive_Req_7_6 = [x * perc1 for x in forecast_7_6_K]
    TimeSensitive_Req_8_1 = [x * perc1 for x in forecast_8_1_K]
    TimeSensitive_Req_8_2 = [x * perc1 for x in forecast_8_2_K]
    TimeSensitive_Req_8_3 = [x * perc1 for x in forecast_8_3_K]
    TimeSensitive_Req_8_4 = [x * perc1 for x in forecast_8_4_K]
    TimeSensitive_Req_8_5 = [x * perc1 for x in forecast_8_5_K]
    TimeSensitive_Req_8_6 = [x * perc1 for x in forecast_8_6_K]
    
    # 计算经济快递的需求
    Economy_Req_1_4 = [x * perc2 for x in forecast_1_4_K]
    Economy_Req_1_5 = [x * perc2 for x in forecast_1_5_K]
    Economy_Req_1_6 = [x * perc2 for x in forecast_1_6_K]
    Economy_Req_1_7 = [x * perc2 for x in forecast_1_7_K]
    Economy_Req_1_8 = [x * perc2 for x in forecast_1_8_K]
    Economy_Req_2_4 = [x * perc2 for x in forecast_2_4_K]
    Economy_Req_2_5 = [x * perc2 for x in forecast_2_5_K]
    Economy_Req_2_6 = [x * perc2 for x in forecast_2_6_K]
    Economy_Req_2_7 = [x * perc2 for x in forecast_2_7_K]
    Economy_Req_2_8 = [x * perc2 for x in forecast_2_8_K]
    Economy_Req_3_4 = [x * perc2 for x in forecast_3_4_K]
    Economy_Req_3_5 = [x * perc2 for x in forecast_3_5_K]
    Economy_Req_3_6 = [x * perc2 for x in forecast_3_6_K]
    Economy_Req_3_7 = [x * perc2 for x in forecast_3_7_K]
    Economy_Req_3_8 = [x * perc2 for x in forecast_3_8_K]
    Economy_Req_4_1 = [x * perc2 for x in forecast_4_1_K]
    Economy_Req_4_2 = [x * perc2 for x in forecast_4_2_K]
    Economy_Req_4_3 = [x * perc2 for x in forecast_4_3_K]
    Economy_Req_4_7 = [x * perc2 for x in forecast_4_7_K]
    Economy_Req_4_8 = [x * perc2 for x in forecast_4_8_K]
    Economy_Req_5_1 = [x * perc2 for x in forecast_5_1_K]
    Economy_Req_5_2 = [x * perc2 for x in forecast_5_2_K]
    Economy_Req_5_3 = [x * perc2 for x in forecast_5_3_K]
    Economy_Req_5_7 = [x * perc2 for x in forecast_5_7_K]
    Economy_Req_5_8 = [x * perc2 for x in forecast_5_8_K]
    Economy_Req_6_1 = [x * perc2 for x in forecast_6_1_K]
    Economy_Req_6_2 = [x * perc2 for x in forecast_6_2_K]
    Economy_Req_6_3 = [x * perc2 for x in forecast_6_3_K]
    Economy_Req_6_7 = [x * perc2 for x in forecast_6_7_K]
    Economy_Req_6_8 = [x * perc2 for x in forecast_6_8_K]
    Economy_Req_7_1 = [x * perc2 for x in forecast_7_1_K]
    Economy_Req_7_2 = [x * perc2 for x in forecast_7_2_K]
    Economy_Req_7_3 = [x * perc2 for x in forecast_7_3_K]
    Economy_Req_7_4 = [x * perc2 for x in forecast_7_4_K]
    Economy_Req_7_5 = [x * perc2 for x in forecast_7_5_K]
    Economy_Req_7_6 = [x * perc2 for x in forecast_7_6_K]
    Economy_Req_8_1 = [x * perc2 for x in forecast_8_1_K]
    Economy_Req_8_2 = [x * perc2 for x in forecast_8_2_K]
    Economy_Req_8_3 = [x * perc2 for x in forecast_8_3_K]
    Economy_Req_8_4 = [x * perc2 for x in forecast_8_4_K]
    Economy_Req_8_5 = [x * perc2 for x in forecast_8_5_K]
    Economy_Req_8_6 = [x * perc2 for x in forecast_8_6_K]
    
    # 主要计算模型
    m = gp.Model()
    m.Params.OutputFlag = 0
    m.Params.MIPGap = 0.005
    
    x_1_4 = {}
    x_1_5 = {}
    x_1_6 = {}
    x_1_7 = {}
    x_1_8 = {}
    x_2_4 = {}
    x_2_5 = {}
    x_2_6 = {}
    x_2_7 = {}
    x_2_8 = {}
    x_3_4 = {}
    x_3_5 = {}
    x_3_6 = {}
    x_3_7 = {}
    x_3_8 = {}
    x_4_1 = {}
    x_4_2 = {}
    x_4_3 = {}
    x_4_7 = {}
    x_4_8 = {}
    x_5_1 = {}
    x_5_2 = {}
    x_5_3 = {}
    x_5_7 = {}
    x_5_8 = {}
    x_6_1 = {}
    x_6_2 = {}
    x_6_3 = {}
    x_6_7 = {}
    x_6_8 = {}
    x_7_1 = {}
    x_7_2 = {}
    x_7_3 = {}
    x_7_4 = {}
    x_7_5 = {}
    x_7_6 = {}
    x_8_1 = {}
    x_8_2 = {}
    x_8_3 = {}
    x_8_4 = {}
    x_8_5 = {}
    x_8_6 = {}
    
    y_1_4 = {}
    y_1_5 = {}
    y_1_6 = {}
    y_1_7 = {}
    y_1_8 = {}
    y_2_4 = {}
    y_2_5 = {}
    y_2_6 = {}
    y_2_7 = {}
    y_2_8 = {}
    y_3_4 = {}
    y_3_5 = {}
    y_3_6 = {}
    y_3_7 = {}
    y_3_8 = {}
    y_4_1 = {}
    y_4_2 = {}
    y_4_3 = {}
    y_4_7 = {}
    y_4_8 = {}
    y_5_1 = {}
    y_5_2 = {}
    y_5_3 = {}
    y_5_7 = {}
    y_5_8 = {}
    y_6_1 = {}
    y_6_2 = {}
    y_6_3 = {}
    y_6_7 = {}
    y_6_8 = {}
    y_7_1 = {}
    y_7_2 = {}
    y_7_3 = {}
    y_7_4 = {}
    y_7_5 = {}
    y_7_6 = {}
    y_8_1 = {}
    y_8_2 = {}
    y_8_3 = {}
    y_8_4 = {}
    y_8_5 = {}
    y_8_6 = {}
    
    for w in range(1,3):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                x_1_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_1_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_1_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_2_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_2_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_2_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_3_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_3_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_3_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                x_1_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_1_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_2_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_2_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_3_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_3_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                x_4_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_4_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_4_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_5_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_5_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_5_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_6_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_6_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_6_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                x_4_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_4_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_5_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_5_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_6_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_6_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                x_7_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_7_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_7_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                x_7_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_7_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_7_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                
    for w in range(1,3):
        for j in range(N*K):
            for i in range(cargo_BH[j]):
                y_1_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_1_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_1_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_1_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_1_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_2_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_2_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_2_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_2_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_2_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_3_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_3_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_3_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_3_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_3_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
            for i in range(cargo_HS[j]):
                y_4_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_4_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_4_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_5_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_5_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_5_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_6_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_6_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_6_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_4_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_4_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_5_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_5_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_6_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_6_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
            for i in range(cargo_SB[j]):
                y_7_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_7_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_7_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_7_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_7_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_7_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                
    # 客机容量限制约束
    for j in range(len(passengerTime_BH)):
        cal1_BH = 0
        cal1_BH += gp.quicksum(x_1_4[i,j,w]+x_1_5[i,j,w]+x_1_6[i,j,w]+x_2_4[i,j,w]+x_2_5[i,j,w]+x_2_6[i,j,w]+x_3_4[i,j,w]+x_3_5[i,j,w]+x_3_6[i,j,w] for w in range(1,3) for i in range(passengerTime_BH[j]))
        m.addConstr(cal1_BH <= q)
    for j in range(len(passengerTime_BS)):
        cal1_BS = 0
        cal1_BS += gp.quicksum(x_1_7[i,j,w]+x_1_8[i,j,w]+x_2_7[i,j,w]+x_2_8[i,j,w]+x_3_7[i,j,w]+x_3_8[i,j,w] for w in range(1,3) for i in range(passengerTime_BS[j]))
        m.addConstr(cal1_BS <= q)
    for j in range(len(passengerTime_HB)):
        cal1_HB = 0
        cal1_HB += gp.quicksum(x_4_1[i,j,w]+x_4_2[i,j,w]+x_4_3[i,j,w]+x_5_1[i,j,w]+x_5_2[i,j,w]+x_5_3[i,j,w]+x_6_1[i,j,w]+x_6_2[i,j,w]+x_6_3[i,j,w] for w in range(1,3) for i in range(passengerTime_HB[j]))
        m.addConstr(cal1_HB <= q)
    for j in range(len(passengerTime_HS)):
        cal1_HS = 0
        cal1_HS += gp.quicksum(x_4_7[i,j,w]+x_4_8[i,j,w]+x_5_7[i,j,w]+x_5_8[i,j,w]+x_6_7[i,j,w]+x_6_8[i,j,w] for w in range(1,3) for i in range(passengerTime_HS[j]))
        m.addConstr(cal1_HS <= q)
    for j in range(len(passengerTime_SB)):
        cal1_SB = 0
        cal1_SB += gp.quicksum(x_7_1[i,j,w]+x_7_2[i,j,w]+x_7_3[i,j,w]+x_8_1[i,j,w]+x_8_2[i,j,w]+x_8_3[i,j,w] for w in range(1,3) for i in range(passengerTime_SB[j]))
        m.addConstr(cal1_SB <= q)
    for j in range(len(passengerTime_SH)):
        cal1_SH = 0
        cal1_SH += gp.quicksum(x_7_4[i,j,w]+x_7_5[i,j,w]+x_7_6[i,j,w]+x_8_4[i,j,w]+x_8_5[i,j,w]+x_8_6[i,j,w] for w in range(1,3) for i in range(passengerTime_SH[j]))
        m.addConstr(cal1_SH <= q)
        
    # 货机容量约束
    for j in range(N*K):
        cal2_BH = 0
        cal2_BH += (gp.quicksum((y_1_4[i,j,w]+y_1_5[i,j,w]+y_1_6[i,j,w]+y_2_4[i,j,w]+y_2_5[i,j,w]+y_2_6[i,j,w]+y_3_4[i,j,w]+y_3_5[i,j,w]+y_3_6[i,j,w]+y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w]) for w in range(1,3) for i in range(cargo_BH[j]))+gp.quicksum(y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w] for w in range(1,3) for i in range(cargo_SB[j])))
        m.addConstr(cal2_BH <= Q)
    for j in range(N*K):
        cal2_HS = 0
        cal2_HS += (gp.quicksum((y_4_7[i,j,w]+y_4_8[i,j,w]+y_5_7[i,j,w]+y_5_8[i,j,w]+y_6_7[i,j,w]+y_6_8[i,j,w]+y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w]) for w in range(1,3) for i in range(cargo_HS[j]))+gp.quicksum(y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w] for w in range(1,3) for i in range(cargo_BH[j])))
        m.addConstr(cal2_HS <= Q)
    for j in range(N*K):
        cal2_SB = 0
        cal2_SB += (gp.quicksum((y_7_1[i,j,w]+y_7_2[i,j,w]+y_7_3[i,j,w]+y_8_1[i,j,w]+y_8_2[i,j,w]+y_8_3[i,j,w]+y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w]) for w in range(1,3) for i in range(cargo_SB[j]))+gp.quicksum(y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w] for w in range(1,3) for i in range(cargo_HS[j])))
        m.addConstr(cal2_SB <= Q)
        
    # 在能运完的货物中，被运走的货物量最多达到这个时间段的订单需求量
    # 能运完的货物的仓储成本和逾期成本及被丢弃货物的成本计算
    for w in range(1,3):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                C3 += C2per[w] * (x_1_4[i,j,w]*max(BH_passengerTimeTable[j]+t1+t4-i-T_1[w]+flightTime_BH[j],0)+x_1_5[i,j,w]*max(BH_passengerTimeTable[j]+t1+t5-i-T_1[w]+flightTime_BH[j],0)+x_1_6[i,j,w]*max(BH_passengerTimeTable[j]+t1+t6-i-T_1[w]+flightTime_BH[j],0)+x_2_4[i,j,w]*max(BH_passengerTimeTable[j]+t2+t4-i-T_1[w]+flightTime_BH[j],0)+x_2_5[i,j,w]*max(BH_passengerTimeTable[j]+t2+t5-i-T_1[w]+flightTime_BH[j],0)+x_2_6[i,j,w]*max(BH_passengerTimeTable[j]+t2+t6-i-T_1[w]+flightTime_BH[j],0)+x_3_4[i,j,w]*max(BH_passengerTimeTable[j]+t3+t4-i-T_1[w]+flightTime_BH[j],0)+x_3_5[i,j,w]*max(BH_passengerTimeTable[j]+t3+t5-i-T_1[w]+flightTime_BH[j],0)+x_3_6[i,j,w]*max(BH_passengerTimeTable[j]+t3+t6-i-T_1[w]+flightTime_BH[j],0))
                C4 += c1 * ((x_1_4[i,j,w]+x_1_5[i,j,w]+x_1_6[i,j,w]+x_2_4[i,j,w]+x_2_5[i,j,w]+x_2_6[i,j,w]+x_3_4[i,j,w]+x_3_5[i,j,w]+x_3_6[i,j,w]) * (BH_passengerTimeTable[j] - i))
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                C3 += C2per[w] * (x_1_7[i,j,w]*max(BS_passengerTimeTable[j]+t1+t7-i-T_1[w]+flightTime_BS[j],0)+x_1_8[i,j,w]*max(BS_passengerTimeTable[j]+t1+t8-i-T_1[w]+flightTime_BS[j],0)+x_2_7[i,j,w]*max(BS_passengerTimeTable[j]+t2+t7-i-T_1[w]+flightTime_BS[j],0)+x_2_8[i,j,w]*max(BS_passengerTimeTable[j]+t2+t8-i-T_1[w]+flightTime_BS[j],0)+x_3_7[i,j,w]*max(BS_passengerTimeTable[j]+t3+t7-i-T_1[w]+flightTime_BS[j],0)+x_3_8[i,j,w]*max(BS_passengerTimeTable[j]+t3+t8-i-T_1[w]+flightTime_BS[j],0))
                C4 += c1 * ((x_1_7[i,j,w]+x_1_8[i,j,w]+x_2_7[i,j,w]+x_2_8[i,j,w]+x_3_7[i,j,w]+x_3_8[i,j,w]) * (BS_passengerTimeTable[j] - i))
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                C3 += C2per[w] * (x_4_1[i,j,w]*max(HB_passengerTimeTable[j]+t4+t1-i-T_1[w]+flightTime_HB[j],0)+x_4_2[i,j,w]*max(HB_passengerTimeTable[j]+t4+t2-i-T_1[w]+flightTime_HB[j],0)+x_4_3[i,j,w]*max(HB_passengerTimeTable[j]+t4+t3-i-T_1[w]+flightTime_HB[j],0)+x_5_1[i,j,w]*max(HB_passengerTimeTable[j]+t5+t1-i-T_1[w]+flightTime_HB[j],0)+x_5_2[i,j,w]*max(HB_passengerTimeTable[j]+t5+t2-i-T_1[w]+flightTime_HB[j],0)+x_5_3[i,j,w]*max(HB_passengerTimeTable[j]+t5+t3-i-T_1[w]+flightTime_HB[j],0)+x_6_1[i,j,w]*max(HB_passengerTimeTable[j]+t6+t1-i-T_1[w]+flightTime_HB[j],0)+x_6_2[i,j,w]*max(HB_passengerTimeTable[j]+t6+t2-i-T_1[w]+flightTime_HB[j],0)+x_6_3[i,j,w]*max(HB_passengerTimeTable[j]+t6+t3-i-T_1[w]+flightTime_HB[j],0))
                C4 += c1 * ((x_4_1[i,j,w]+x_4_2[i,j,w]+x_4_3[i,j,w]+x_5_1[i,j,w]+x_5_2[i,j,w]+x_5_3[i,j,w]+x_6_1[i,j,w]+x_6_2[i,j,w]+x_6_3[i,j,w]) * (HB_passengerTimeTable[j] - i))
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                C3 += C2per[w] * (x_4_7[i,j,w]*max(HS_passengerTimeTable[j]+t4+t7-i-T_1[w]+flightTime_HS[j],0)+x_4_8[i,j,w]*max(HS_passengerTimeTable[j]+t4+t8-i-T_1[w]+flightTime_HS[j],0)+x_5_7[i,j,w]*max(HS_passengerTimeTable[j]+t5+t7-i-T_1[w]+flightTime_HS[j],0)+x_5_8[i,j,w]*max(HS_passengerTimeTable[j]+t5+t8-i-T_1[w]+flightTime_HS[j],0)+x_6_7[i,j,w]*max(HS_passengerTimeTable[j]+t6+t7-i-T_1[w]+flightTime_HS[j],0)+x_6_8[i,j,w]*max(HS_passengerTimeTable[j]+t6+t8-i-T_1[w]+flightTime_HS[j],0))
                C4 += c1 * ((x_4_7[i,j,w]+x_4_8[i,j,w]+x_5_7[i,j,w]+x_5_8[i,j,w]+x_6_7[i,j,w]+x_6_8[i,j,w]) * (HS_passengerTimeTable[j] - i))
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                C3 += C2per[w] * (x_7_1[i,j,w]*max(SB_passengerTimeTable[j]+t7+t1-i-T_1[w]+flightTime_SB[j],0)+x_7_2[i,j,w]*max(SB_passengerTimeTable[j]+t7+t2-i-T_1[w]+flightTime_SB[j],0)+x_7_3[i,j,w]*max(SB_passengerTimeTable[j]+t7+t3-i-T_1[w]+flightTime_SB[j],0)+x_8_1[i,j,w]*max(SB_passengerTimeTable[j]+t8+t1-i-T_1[w]+flightTime_SB[j],0)+x_8_2[i,j,w]*max(SB_passengerTimeTable[j]+t8+t2-i-T_1[w]+flightTime_SB[j],0)+x_8_3[i,j,w]*max(SB_passengerTimeTable[j]+t8+t3-i-T_1[w]+flightTime_SB[j],0))
                C4 += c1 * ((x_7_1[i,j,w]+x_7_2[i,j,w]+x_7_3[i,j,w]+x_8_1[i,j,w]+x_8_2[i,j,w]+x_8_3[i,j,w]) * (SB_passengerTimeTable[j] - i))
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                C3 += C2per[w] * (x_7_4[i,j,w]*max(SH_passengerTimeTable[j]+t7+t4-i-T_1[w]+flightTime_SH[j],0)+x_7_5[i,j,w]*max(SH_passengerTimeTable[j]+t7+t5-i-T_1[w]+flightTime_SH[j],0)+x_7_6[i,j,w]*max(SH_passengerTimeTable[j]+t7+t6-i-T_1[w]+flightTime_SH[j],0)+x_8_4[i,j,w]*max(SH_passengerTimeTable[j]+t8+t4-i-T_1[w]+flightTime_SH[j],0)+x_8_5[i,j,w]*max(SH_passengerTimeTable[j]+t8+t5-i-T_1[w]+flightTime_SH[j],0)+x_8_6[i,j,w]*max(SH_passengerTimeTable[j]+t8+t6-i-T_1[w]+flightTime_SH[j],0))
                C4 += c1 * ((x_7_4[i,j,w]+x_7_5[i,j,w]+x_7_6[i,j,w]+x_8_4[i,j,w]+x_8_5[i,j,w]+x_8_6[i,j,w]) * (SH_passengerTimeTable[j] - i))
        for j in range(N*K):
            for i in range(cargo_BH[j]):
                C3 += C2per[w] * (y_1_4[i,j,w]*max(cargo_BH[j]+t1+t4-i-T_1[w]+Tcargo_1,0)+y_1_5[i,j,w]*max(cargo_BH[j]+t1+t5-i-T_1[w]+Tcargo_1,0)+y_1_6[i,j,w]*max(cargo_BH[j]+t1+t6-i-T_1[w]+Tcargo_1,0)+y_2_4[i,j,w]*max(cargo_BH[j]+t2+t4-i-T_1[w]+Tcargo_1,0)+y_2_5[i,j,w]*max(cargo_BH[j]+t2+t5-i-T_1[w]+Tcargo_1,0)+y_2_6[i,j,w]*max(cargo_BH[j]+t2+t6-i-T_1[w]+Tcargo_1,0))
                C3 += C2per[w] * (y_1_7[i,j,w]*max(cargo_HS[j]+t1+t7-i-T_1[w]+Tcargo_2,0)+y_1_8[i,j,w]*max(cargo_HS[j]+t1+t8-i-T_1[w]+Tcargo_2,0)+y_2_7[i,j,w]*max(cargo_HS[j]+t2+t7-i-T_1[w]+Tcargo_2,0)+y_2_8[i,j,w]*max(cargo_HS[j]+t2+t8-i-T_1[w]+Tcargo_2,0)+y_3_7[i,j,w]*max(cargo_HS[j]+t3+t7-i-T_1[w]+Tcargo_2,0)+y_3_8[i,j,w]*max(cargo_HS[j]+t3+t8-i-T_1[w]+Tcargo_2,0))
                C4 += c1 * ((y_1_4[i,j,w]+y_1_5[i,j,w]+y_1_6[i,j,w]+y_2_4[i,j,w]+y_2_5[i,j,w]+y_2_6[i,j,w]+y_3_4[i,j,w]+y_3_5[i,j,w]+y_3_6[i,j,w]+y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w]) * (cargo_BH[j] - i))
            for i in range(cargo_HS[j]):
                C3 += C2per[w] * (y_4_1[i,j,w]*max(cargo_SB[j]+t4+t1-i-T_1[w]+Tcargo_3,0)+y_4_2[i,j,w]*max(cargo_SB[j]+t4+t2-i-T_1[w]+Tcargo_3,0)+y_4_3[i,j,w]*max(cargo_SB[j]+t4+t3-i-T_1[w]+Tcargo_3,0)+y_5_1[i,j,w]*max(cargo_HS[j]+t5+t1-i-T_1[w]+Tcargo_3,0)+y_5_2[i,j,w]*max(cargo_SB[j]+t5+t2-i-T_1[w]+Tcargo_3,0)+y_5_3[i,j,w]*max(cargo_SB[j]+t5+t3-i-T_1[w]+Tcargo_3,0))
                C3 += C2per[w] * (y_4_7[i,j,w]*max(cargo_HS[j]+t4+t7-i-T_1[w]+Tcargo_2,0)+y_4_8[i,j,w]*max(cargo_HS[j]+t4+t8-i-T_1[w]+Tcargo_2,0)+y_5_7[i,j,w]*max(cargo_HS[j]+t5+t7-i-T_1[w]+Tcargo_2,0)+y_5_8[i,j,w]*max(cargo_HS[j]+t5+t8-i-T_1[w]+Tcargo_2,0))
                C4 += c1 * ((y_4_7[i,j,w]+y_4_8[i,j,w]+y_5_7[i,j,w]+y_5_8[i,j,w]+y_6_7[i,j,w]+y_6_8[i,j,w]+y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w]) * (cargo_HS[j] - i))
            for i in range(cargo_SB[j]):
                C3 += C2per[w] * (y_7_1[i,j,w]*max(cargo_SB[j]+t7+t1-i-T_1[w]+Tcargo_3,0)+y_7_2[i,j,w]*max(cargo_SB[j]+t7+t2-i-T_1[w]+Tcargo_3,0)+y_7_3[i,j,w]*max(cargo_SB[j]+t7+t3-i-T_1[w]+Tcargo_3,0)+y_8_1[i,j,w]*max(cargo_SB[j]+t8+t1-i-T_1[w]+Tcargo_3,0)+y_8_2[i,j,w]*max(cargo_SB[j]+t8+t2-i-T_1[w]+Tcargo_3,0)+y_8_3[i,j,w]*max(cargo_SB[j]+t8+t3-i-T_1[w]+Tcargo_3,0))
                C3 += C2per[w] * (y_7_4[i,j,w]*max(cargo_BH[j]+t7+t4-i-T_1[w]+Tcargo_1,0)+y_7_5[i,j,w]*max(cargo_BH[j]+t7+t5-i-T_1[w]+Tcargo_1,0)+y_7_6[i,j,w]*max(cargo_BH[j]+t7+t6-i-T_1[w]+Tcargo_1,0)+y_8_4[i,j,w]*max(cargo_BH[j]+t8+t4-i-T_1[w]+Tcargo_1,0)+y_8_5[i,j,w]*max(cargo_BH[j]+t8+t5-i-T_1[w]+Tcargo_1,0)+y_8_6[i,j,w]*max(cargo_BH[j]+t8+t6-i-T_1[w]+Tcargo_1,0))
                C4 += c1 * ((y_7_1[i,j,w]+y_7_2[i,j,w]+y_7_3[i,j,w]+y_8_1[i,j,w]+y_8_2[i,j,w]+y_8_3[i,j,w]+y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w]) * (cargo_SB[j] - i))
                
    TimeSensitive_Req_BH = [x1+x2+x3+x4+x5+x6+x7+x8+x9 for x1,x2,x3,x4,x5,x6,x7,x8,x9 in zip(TimeSensitive_Req_1_4,TimeSensitive_Req_1_5,TimeSensitive_Req_1_6,TimeSensitive_Req_2_4,TimeSensitive_Req_2_5,TimeSensitive_Req_2_6,TimeSensitive_Req_3_4,TimeSensitive_Req_3_5,TimeSensitive_Req_3_6)]
    TimeSensitive_Req_BS = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(TimeSensitive_Req_1_7,TimeSensitive_Req_1_8,TimeSensitive_Req_2_7,TimeSensitive_Req_2_8,TimeSensitive_Req_3_7,TimeSensitive_Req_3_8)]
    TimeSensitive_Req_HB = [x1+x2+x3+x4+x5+x6+x7+x8+x9 for x1,x2,x3,x4,x5,x6,x7,x8,x9 in zip(TimeSensitive_Req_4_1,TimeSensitive_Req_4_2,TimeSensitive_Req_4_3,TimeSensitive_Req_5_1,TimeSensitive_Req_5_2,TimeSensitive_Req_5_3,TimeSensitive_Req_6_1,TimeSensitive_Req_6_2,TimeSensitive_Req_6_3)]
    TimeSensitive_Req_HS = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(TimeSensitive_Req_4_7,TimeSensitive_Req_4_8,TimeSensitive_Req_5_7,TimeSensitive_Req_5_8,TimeSensitive_Req_6_7,TimeSensitive_Req_6_8)]
    TimeSensitive_Req_SB = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(TimeSensitive_Req_7_1,TimeSensitive_Req_7_2,TimeSensitive_Req_7_3,TimeSensitive_Req_8_1,TimeSensitive_Req_8_2,TimeSensitive_Req_8_3)]
    TimeSensitive_Req_SH = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(TimeSensitive_Req_7_4,TimeSensitive_Req_7_5,TimeSensitive_Req_7_6,TimeSensitive_Req_8_4,TimeSensitive_Req_8_5,TimeSensitive_Req_8_6)]
    Economy_Req_BH = [x1+x2+x3+x4+x5+x6+x7+x8+x9 for x1,x2,x3,x4,x5,x6,x7,x8,x9 in zip(Economy_Req_1_4,Economy_Req_1_5,Economy_Req_1_6,Economy_Req_2_4,Economy_Req_2_5,Economy_Req_2_6,Economy_Req_3_4,Economy_Req_3_5,Economy_Req_3_6)]
    Economy_Req_BS = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(Economy_Req_1_7,Economy_Req_1_8,Economy_Req_2_7,Economy_Req_2_8,Economy_Req_3_7,Economy_Req_3_8)]
    Economy_Req_HB = [x1+x2+x3+x4+x5+x6+x7+x8+x9 for x1,x2,x3,x4,x5,x6,x7,x8,x9 in zip(Economy_Req_4_1,Economy_Req_4_2,Economy_Req_4_3,Economy_Req_5_1,Economy_Req_5_2,Economy_Req_5_3,Economy_Req_6_1,Economy_Req_6_2,Economy_Req_6_3)]
    Economy_Req_HS = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(Economy_Req_4_7,Economy_Req_4_8,Economy_Req_5_7,Economy_Req_5_8,Economy_Req_6_7,Economy_Req_6_8)]
    Economy_Req_SB = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(Economy_Req_7_1,Economy_Req_7_2,Economy_Req_7_3,Economy_Req_8_1,Economy_Req_8_2,Economy_Req_8_3)]
    Economy_Req_SH = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(Economy_Req_7_4,Economy_Req_7_5,Economy_Req_7_6,Economy_Req_8_4,Economy_Req_8_5,Economy_Req_8_6)]
    forecast_BH_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_BH,Economy_Req_BH)]
    forecast_BS_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_BS,Economy_Req_BS)]
    forecast_HB_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_HB,Economy_Req_HB)]
    forecast_HS_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_HS,Economy_Req_HS)]
    forecast_SB_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_SB,Economy_Req_SB)]
    forecast_SH_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_SH,Economy_Req_SH)]
    passengerTotalBH = 0
    cargoTotalBH = 0
    passengerTotalBS = 0
    cargoTotalBS = 0
    passengerTotalHB = 0
    cargoTotalHB = 0
    passengerTotalHS = 0
    cargoTotalHS = 0
    passengerTotalSB = 0
    cargoTotalSB = 0
    passengerTotalSH = 0
    cargoTotalSH = 0
    
    for k in range(last_BH):
        transOut1 = 0
        transOut2 = 0
        transOut1_1_4 = 0
        transOut1_1_5 = 0
        transOut1_1_6 = 0
        transOut2_1_4 = 0
        transOut2_1_5 = 0
        transOut2_1_6 = 0
        transOut1_2_4 = 0
        transOut1_2_5 = 0
        transOut1_2_6 = 0
        transOut2_2_4 = 0
        transOut2_2_5 = 0
        transOut2_2_6 = 0
        transOut1_3_4 = 0
        transOut1_3_5 = 0
        transOut1_3_6 = 0
        transOut2_3_4 = 0
        transOut2_3_5 = 0
        transOut2_3_6 = 0
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                if i == k:
                    transOut1_1_4 += x_1_4[i,j,1]
                    transOut2_1_4 += x_1_4[i,j,2]
                    transOut1_1_5 += x_1_5[i,j,1]
                    transOut2_1_5 += x_1_5[i,j,2]
                    transOut1_1_6 += x_1_6[i,j,1]
                    transOut2_1_6 += x_1_6[i,j,2]
                    transOut1_2_4 += x_2_4[i,j,1]
                    transOut2_2_4 += x_2_4[i,j,2]
                    transOut1_2_5 += x_2_5[i,j,1]
                    transOut2_2_5 += x_2_5[i,j,2]
                    transOut1_2_6 += x_2_6[i,j,1]
                    transOut2_2_6 += x_2_6[i,j,2]
                    transOut1_3_4 += x_3_4[i,j,1]
                    transOut2_3_4 += x_3_4[i,j,2]
                    transOut1_3_5 += x_3_5[i,j,1]
                    transOut2_3_5 += x_3_5[i,j,2]
                    transOut1_3_6 += x_3_6[i,j,1]
                    transOut2_3_6 += x_3_6[i,j,2]
                    transOut1 += (x_1_4[i,j,1]+x_1_5[i,j,1]+x_1_6[i,j,1]+x_2_4[i,j,1]+x_2_5[i,j,1]+x_2_6[i,j,1]+x_3_4[i,j,1]+x_3_5[i,j,1]+x_3_6[i,j,1])
                    transOut2 += (x_1_4[i,j,2]+x_1_5[i,j,2]+x_1_6[i,j,2]+x_2_4[i,j,2]+x_2_5[i,j,2]+x_2_6[i,j,2]+x_3_4[i,j,2]+x_3_5[i,j,2]+x_3_6[i,j,2])
                    passengerTotalBH += (x_1_4[i,j,1]+x_1_5[i,j,1]+x_1_6[i,j,1]+x_2_4[i,j,1]+x_2_5[i,j,1]+x_2_6[i,j,1]+x_3_4[i,j,1]+x_3_5[i,j,1]+x_3_6[i,j,1]+x_1_4[i,j,2]+x_1_5[i,j,2]+x_1_6[i,j,2]+x_2_4[i,j,2]+x_2_5[i,j,2]+x_2_6[i,j,2]+x_3_4[i,j,2]+x_3_5[i,j,2]+x_3_6[i,j,2])          
        for j in range(N*K):
            for i in range(cargo_BH[j]):
                if i == k:
                    transOut1_1_4 += y_1_4[i,j,1]
                    transOut2_1_4 += y_1_4[i,j,2]
                    transOut1_1_5 += y_1_5[i,j,1]
                    transOut2_1_5 += y_1_5[i,j,2]
                    transOut1_1_6 += y_1_6[i,j,1]
                    transOut2_1_6 += y_1_6[i,j,2]
                    transOut1_2_4 += y_2_4[i,j,1]
                    transOut2_2_4 += y_2_4[i,j,2]
                    transOut1_2_5 += y_2_5[i,j,1]
                    transOut2_2_5 += y_2_5[i,j,2]
                    transOut1_2_6 += y_2_6[i,j,1]
                    transOut2_2_6 += y_2_6[i,j,2]
                    transOut1_3_4 += y_3_4[i,j,1]
                    transOut2_3_4 += y_3_4[i,j,2]
                    transOut1_3_5 += y_3_5[i,j,1]
                    transOut2_3_5 += y_3_5[i,j,2]
                    transOut1_3_6 += y_3_6[i,j,1]
                    transOut2_3_6 += y_3_6[i,j,2]
                    transOut1 += (y_1_4[i,j,1]+y_1_5[i,j,1]+y_1_6[i,j,1]+y_2_4[i,j,1]+y_2_5[i,j,1]+y_2_6[i,j,1]+y_3_4[i,j,1]+y_3_5[i,j,1]+y_3_6[i,j,1])
                    transOut2 += (y_1_4[i,j,2]+y_1_5[i,j,2]+y_1_6[i,j,2]+y_2_4[i,j,2]+y_2_5[i,j,2]+y_2_6[i,j,2]+y_3_4[i,j,2]+y_3_5[i,j,2]+y_3_6[i,j,2])
                    cargoTotalBH += (y_1_4[i,j,1]+y_1_5[i,j,1]+y_1_6[i,j,1]+y_2_4[i,j,1]+y_2_5[i,j,1]+y_2_6[i,j,1]+y_3_4[i,j,1]+y_3_5[i,j,1]+y_3_6[i,j,1]+y_1_4[i,j,2]+y_1_5[i,j,2]+y_1_6[i,j,2]+y_2_4[i,j,2]+y_2_5[i,j,2]+y_2_6[i,j,2]+y_3_4[i,j,2]+y_3_5[i,j,2]+y_3_6[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_1_4 <= TimeSensitive_Req_1_4[k])
        m.addConstr(transOut2_1_4 <= Economy_Req_1_4[k])
        m.addConstr(transOut1_1_5 <= TimeSensitive_Req_1_5[k])
        m.addConstr(transOut2_1_5 <= Economy_Req_1_5[k])
        m.addConstr(transOut1_1_6 <= TimeSensitive_Req_1_6[k])
        m.addConstr(transOut2_1_6 <= Economy_Req_1_6[k])
        m.addConstr(transOut1_2_4 <= TimeSensitive_Req_2_4[k])
        m.addConstr(transOut2_2_4 <= Economy_Req_2_4[k])
        m.addConstr(transOut1_2_5 <= TimeSensitive_Req_2_5[k])
        m.addConstr(transOut2_2_5 <= Economy_Req_2_5[k])
        m.addConstr(transOut1_2_6 <= TimeSensitive_Req_2_6[k])
        m.addConstr(transOut2_2_6 <= Economy_Req_2_6[k])
        m.addConstr(transOut1_3_4 <= TimeSensitive_Req_3_4[k])
        m.addConstr(transOut2_3_4 <= Economy_Req_3_4[k])
        m.addConstr(transOut1_3_5 <= TimeSensitive_Req_3_5[k])
        m.addConstr(transOut2_3_5 <= Economy_Req_3_5[k])
        m.addConstr(transOut1_3_6 <= TimeSensitive_Req_3_6[k])
        m.addConstr(transOut2_3_6 <= Economy_Req_3_6[k])
        trash = c3_1 * (TimeSensitive_Req_BH[k]-transOut1) + c3_2 * (Economy_Req_BH[k]-transOut2)
        C6 += trash
    for k in range(last_BS):
        transOut1 = 0
        transOut2 = 0
        transOut1_1_7 = 0
        transOut2_1_7 = 0
        transOut1_1_8 = 0
        transOut2_1_8 = 0
        transOut1_2_7 = 0
        transOut2_2_7 = 0
        transOut1_2_8 = 0
        transOut2_2_8 = 0
        transOut1_3_7 = 0
        transOut2_3_7 = 0
        transOut1_3_8 = 0
        transOut2_3_8 = 0
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                if i == k:
                    transOut1_1_7 += x_1_7[i,j,1]
                    transOut2_1_7 += x_1_7[i,j,2]
                    transOut1_1_8 += x_1_8[i,j,1]
                    transOut2_1_8 += x_1_8[i,j,2]
                    transOut1_2_7 += x_2_7[i,j,1]
                    transOut2_2_7 += x_2_7[i,j,2]
                    transOut1_2_8 += x_2_8[i,j,1]
                    transOut2_2_8 += x_2_8[i,j,2]
                    transOut1_3_7 += x_3_7[i,j,1]
                    transOut2_3_7 += x_3_7[i,j,2]
                    transOut1_3_8 += x_3_8[i,j,1]
                    transOut2_3_8 += x_3_8[i,j,2]
                    transOut1 += (x_1_7[i,j,1]+x_1_8[i,j,1]+x_2_7[i,j,1]+x_2_8[i,j,1]+x_3_7[i,j,1]+x_3_8[i,j,1])
                    transOut2 += (x_1_7[i,j,2]+x_1_8[i,j,2]+x_2_7[i,j,2]+x_2_8[i,j,2]+x_3_7[i,j,2]+x_3_8[i,j,2])
                    passengerTotalBS += (x_1_7[i,j,1]+x_1_8[i,j,1]+x_2_7[i,j,1]+x_2_8[i,j,1]+x_3_7[i,j,1]+x_3_8[i,j,1]+x_1_7[i,j,2]+x_1_8[i,j,2]+x_2_7[i,j,2]+x_2_8[i,j,2]+x_3_7[i,j,2]+x_3_8[i,j,2])
        for j in range(N*K):
            for i in range(cargo_BH[j]):
                if i == k:
                    transOut1_1_7 += y_1_7[i,j,1]
                    transOut2_1_7 += y_1_7[i,j,2]
                    transOut1_1_8 += y_1_8[i,j,1]
                    transOut2_1_8 += y_1_8[i,j,2]
                    transOut1_2_7 += y_2_7[i,j,1]
                    transOut2_2_7 += y_2_7[i,j,2]
                    transOut1_2_8 += y_2_8[i,j,1]
                    transOut2_2_8 += y_2_8[i,j,2]
                    transOut1_3_7 += y_3_7[i,j,1]
                    transOut2_3_7 += y_3_7[i,j,2]
                    transOut1_3_8 += y_3_8[i,j,1]
                    transOut2_3_8 += y_3_8[i,j,2]
                    transOut1 += (y_1_7[i,j,1]+y_1_8[i,j,1]+y_2_7[i,j,1]+y_2_8[i,j,1]+y_3_7[i,j,1]+y_3_8[i,j,1])
                    transOut2 += (y_1_7[i,j,2]+y_1_8[i,j,2]+y_2_7[i,j,2]+y_2_8[i,j,2]+y_3_7[i,j,2]+y_3_8[i,j,2])
                    cargoTotalBS += (y_1_7[i,j,1]+y_1_8[i,j,1]+y_2_7[i,j,1]+y_2_8[i,j,1]+y_3_7[i,j,1]+y_3_8[i,j,1]+y_1_7[i,j,2]+y_1_8[i,j,2]+y_2_7[i,j,2]+y_2_8[i,j,2]+y_3_7[i,j,2]+y_3_8[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_1_7 <= TimeSensitive_Req_1_7[k])
        m.addConstr(transOut2_1_7 <= Economy_Req_1_7[k])
        m.addConstr(transOut1_1_8 <= TimeSensitive_Req_1_8[k])
        m.addConstr(transOut2_1_8 <= Economy_Req_1_8[k])
        m.addConstr(transOut1_2_7 <= TimeSensitive_Req_2_7[k])
        m.addConstr(transOut2_2_7 <= Economy_Req_2_7[k])
        m.addConstr(transOut1_2_8 <= TimeSensitive_Req_2_8[k])
        m.addConstr(transOut2_2_8 <= Economy_Req_2_8[k])
        m.addConstr(transOut1_3_7 <= TimeSensitive_Req_3_7[k])
        m.addConstr(transOut2_3_7 <= Economy_Req_3_7[k])
        m.addConstr(transOut1_3_8 <= TimeSensitive_Req_3_8[k])
        m.addConstr(transOut2_3_8 <= Economy_Req_3_8[k])
        trash = c3_1 * (TimeSensitive_Req_BS[k]-transOut1) + c3_2 * (Economy_Req_BS[k]-transOut2)
        C6 += trash
    for k in range(last_HB):
        transOut1 = 0
        transOut2 = 0
        transOut1_4_1 = 0
        transOut2_4_1 = 0
        transOut1_4_2 = 0
        transOut2_4_2 = 0
        transOut1_4_3 = 0
        transOut2_4_3 = 0
        transOut1_5_1 = 0
        transOut2_5_1 = 0
        transOut1_5_2 = 0
        transOut2_5_2 = 0
        transOut1_5_3 = 0
        transOut2_5_3 = 0
        transOut1_6_1 = 0
        transOut2_6_1 = 0
        transOut1_6_2 = 0
        transOut2_6_2 = 0
        transOut1_6_3 = 0
        transOut2_6_3 = 0
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                if i == k:
                    transOut1_4_1 += x_4_1[i,j,1]
                    transOut2_4_1 += x_4_1[i,j,2]
                    transOut1_4_2 += x_4_2[i,j,1]
                    transOut2_4_2 += x_4_2[i,j,2]
                    transOut1_4_3 += x_4_3[i,j,1]
                    transOut2_4_3 += x_4_3[i,j,2]
                    transOut1_5_1 += x_5_1[i,j,1]
                    transOut2_5_1 += x_5_1[i,j,2]
                    transOut1_5_2 += x_5_2[i,j,1]
                    transOut2_5_2 += x_5_2[i,j,2]
                    transOut1_5_3 += x_5_3[i,j,1]
                    transOut2_5_3 += x_5_3[i,j,2]
                    transOut1_6_1 += x_6_1[i,j,1]
                    transOut2_6_1 += x_6_1[i,j,2]
                    transOut1_6_2 += x_6_2[i,j,1]
                    transOut2_6_2 += x_6_2[i,j,2]
                    transOut1_6_3 += x_6_3[i,j,1]
                    transOut2_6_3 += x_6_3[i,j,2]
                    transOut1 += x_4_1[i,j,1]+x_4_2[i,j,1]+x_4_3[i,j,1]+x_5_1[i,j,1]+x_5_2[i,j,1]+x_5_3[i,j,1]+x_6_1[i,j,1]+x_6_2[i,j,1]+x_6_3[i,j,1]
                    transOut2 += x_4_1[i,j,2]+x_4_2[i,j,2]+x_4_3[i,j,2]+x_5_1[i,j,2]+x_5_2[i,j,2]+x_5_3[i,j,2]+x_6_1[i,j,2]+x_6_2[i,j,2]+x_6_3[i,j,2]
                    passengerTotalHB += (x_4_1[i,j,1]+x_4_2[i,j,1]+x_4_3[i,j,1]+x_5_1[i,j,1]+x_5_2[i,j,1]+x_5_3[i,j,1]+x_6_1[i,j,1]+x_6_2[i,j,1]+x_6_3[i,j,1]+x_4_1[i,j,2]+x_4_2[i,j,2]+x_4_3[i,j,2]+x_5_1[i,j,2]+x_5_2[i,j,2]+x_5_3[i,j,2]+x_6_1[i,j,2]+x_6_2[i,j,2]+x_6_3[i,j,2])
        for j in range(N*K):
            for i in range(cargo_HS[j]):
                if i == k:
                    transOut1_4_1 += y_4_1[i,j,1]
                    transOut2_4_1 += y_4_1[i,j,2]
                    transOut1_4_2 += y_4_2[i,j,1]
                    transOut2_4_2 += y_4_2[i,j,2]
                    transOut1_4_3 += y_4_3[i,j,1]
                    transOut2_4_3 += y_4_3[i,j,2]
                    transOut1_5_1 += y_5_1[i,j,1]
                    transOut2_5_1 += y_5_1[i,j,2]
                    transOut1_5_2 += y_5_2[i,j,1]
                    transOut2_5_2 += y_5_2[i,j,2]
                    transOut1_5_3 += y_5_3[i,j,1]
                    transOut2_5_3 += y_5_3[i,j,2]
                    transOut1_6_1 += y_6_1[i,j,1]
                    transOut2_6_1 += y_6_1[i,j,2]
                    transOut1_6_2 += y_6_2[i,j,1]
                    transOut2_6_2 += y_6_2[i,j,2]
                    transOut1_6_3 += y_6_3[i,j,1]
                    transOut2_6_3 += y_6_3[i,j,2]
                    transOut1 += y_4_1[i,j,1]+y_4_2[i,j,1]+y_4_3[i,j,1]+y_5_1[i,j,1]+y_5_2[i,j,1]+y_5_3[i,j,1]+y_6_1[i,j,1]+y_6_2[i,j,1]+y_6_3[i,j,1]
                    transOut2 += y_4_1[i,j,2]+y_4_2[i,j,2]+y_4_3[i,j,2]+y_5_1[i,j,2]+y_5_2[i,j,2]+y_5_3[i,j,2]+y_6_1[i,j,2]+y_6_2[i,j,2]+y_6_3[i,j,2]
                    cargoTotalHB += (y_4_1[i,j,1]+y_4_2[i,j,1]+y_4_3[i,j,1]+y_5_1[i,j,1]+y_5_2[i,j,1]+y_5_3[i,j,1]+y_6_1[i,j,1]+y_6_2[i,j,1]+y_6_3[i,j,1]+y_4_1[i,j,2]+y_4_2[i,j,2]+y_4_3[i,j,2]+y_5_1[i,j,2]+y_5_2[i,j,2]+y_5_3[i,j,2]+y_6_1[i,j,2]+y_6_2[i,j,2]+y_6_3[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_4_1 <= TimeSensitive_Req_4_1[k])
        m.addConstr(transOut2_4_1 <= Economy_Req_4_1[k])
        m.addConstr(transOut1_4_2 <= TimeSensitive_Req_4_2[k])
        m.addConstr(transOut2_4_2 <= Economy_Req_4_2[k])
        m.addConstr(transOut1_4_3 <= TimeSensitive_Req_4_3[k])
        m.addConstr(transOut2_4_3 <= Economy_Req_4_3[k])
        m.addConstr(transOut1_5_1 <= TimeSensitive_Req_5_1[k])
        m.addConstr(transOut2_5_1 <= Economy_Req_5_1[k])
        m.addConstr(transOut1_5_2 <= TimeSensitive_Req_5_2[k])
        m.addConstr(transOut2_5_2 <= Economy_Req_5_2[k])
        m.addConstr(transOut1_5_3 <= TimeSensitive_Req_5_3[k])
        m.addConstr(transOut2_5_3 <= Economy_Req_5_3[k])
        m.addConstr(transOut1_6_1 <= TimeSensitive_Req_6_1[k])
        m.addConstr(transOut2_6_1 <= Economy_Req_6_1[k])
        m.addConstr(transOut1_6_2 <= TimeSensitive_Req_6_2[k])
        m.addConstr(transOut2_6_2 <= Economy_Req_6_2[k])
        m.addConstr(transOut1_6_3 <= TimeSensitive_Req_6_3[k])
        m.addConstr(transOut2_6_3 <= Economy_Req_6_3[k])
        trash = c3_1 * (TimeSensitive_Req_HB[k]-transOut1) + c3_2 * (Economy_Req_HB[k]-transOut2)
        C6 += trash
    for k in range(last_HS):
        transOut1 = 0
        transOut2 = 0
        transOut1_4_7 = 0
        transOut2_4_7 = 0
        transOut1_4_8 = 0
        transOut2_4_8 = 0
        transOut1_5_7 = 0
        transOut2_5_7 = 0
        transOut1_5_8 = 0
        transOut2_5_8 = 0
        transOut1_6_7 = 0
        transOut2_6_7 = 0
        transOut1_6_8 = 0
        transOut2_6_8 = 0
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                if i == k:
                    transOut1_4_7 += x_4_7[i,j,1]
                    transOut2_4_7 += x_4_7[i,j,2]
                    transOut1_4_8 += x_4_8[i,j,1]
                    transOut2_4_8 += x_4_8[i,j,2]
                    transOut1_5_7 += x_5_7[i,j,1]
                    transOut2_5_7 += x_5_7[i,j,2]
                    transOut1_5_8 += x_5_8[i,j,1]
                    transOut2_5_8 += x_5_8[i,j,2]
                    transOut1_6_7 += x_6_7[i,j,1]
                    transOut2_6_7 += x_6_7[i,j,2]
                    transOut1_6_8 += x_6_8[i,j,1]
                    transOut2_6_8 += x_6_8[i,j,2]
                    transOut1 += x_4_7[i,j,1]+x_4_8[i,j,1]+x_5_7[i,j,1]+x_5_8[i,j,1]+x_6_7[i,j,1]+x_6_8[i,j,1]
                    transOut2 += x_4_7[i,j,2]+x_4_8[i,j,2]+x_5_7[i,j,2]+x_5_8[i,j,2]+x_6_7[i,j,2]+x_6_8[i,j,2]
                    passengerTotalHS += (x_4_7[i,j,1]+x_4_8[i,j,1]+x_5_7[i,j,1]+x_5_8[i,j,1]+x_6_7[i,j,1]+x_6_8[i,j,1]+x_4_7[i,j,2]+x_4_8[i,j,2]+x_5_7[i,j,2]+x_5_8[i,j,2]+x_6_7[i,j,2]+x_6_8[i,j,2])
        for j in range(N*K):
            for i in range(cargo_HS[j]):
                if i == k:
                    transOut1_4_7 += y_4_7[i,j,1]
                    transOut2_4_7 += y_4_7[i,j,2]
                    transOut1_4_8 += y_4_8[i,j,1]
                    transOut2_4_8 += y_4_8[i,j,2]
                    transOut1_5_7 += y_5_7[i,j,1]
                    transOut2_5_7 += y_5_7[i,j,2]
                    transOut1_5_8 += y_5_8[i,j,1]
                    transOut2_5_8 += y_5_8[i,j,2]
                    transOut1_6_7 += y_6_7[i,j,1]
                    transOut2_6_7 += y_6_7[i,j,2]
                    transOut1_6_8 += y_6_8[i,j,1]
                    transOut2_6_8 += y_6_8[i,j,2]
                    transOut1 += y_4_7[i,j,1]+y_4_8[i,j,1]+y_5_7[i,j,1]+y_5_8[i,j,1]+y_6_7[i,j,1]+y_6_8[i,j,1]
                    transOut2 += y_4_7[i,j,2]+y_4_8[i,j,2]+y_5_7[i,j,2]+y_5_8[i,j,2]+y_6_7[i,j,2]+y_6_8[i,j,2]
                    cargoTotalHS += (y_4_7[i,j,1]+y_4_8[i,j,1]+y_5_7[i,j,1]+y_5_8[i,j,1]+y_6_7[i,j,1]+y_6_8[i,j,1]+y_4_7[i,j,2]+y_4_8[i,j,2]+y_5_7[i,j,2]+y_5_8[i,j,2]+y_6_7[i,j,2]+y_6_8[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_4_7 <= TimeSensitive_Req_4_7[k])
        m.addConstr(transOut2_4_7 <= Economy_Req_4_7[k])
        m.addConstr(transOut1_4_8 <= TimeSensitive_Req_4_8[k])
        m.addConstr(transOut2_4_8 <= Economy_Req_4_8[k])
        m.addConstr(transOut1_5_7 <= TimeSensitive_Req_5_7[k])
        m.addConstr(transOut2_5_7 <= Economy_Req_5_7[k])
        m.addConstr(transOut1_5_8 <= TimeSensitive_Req_5_8[k])
        m.addConstr(transOut2_5_8 <= Economy_Req_5_8[k])
        m.addConstr(transOut1_6_7 <= TimeSensitive_Req_6_7[k])
        m.addConstr(transOut2_6_7 <= Economy_Req_6_7[k])
        m.addConstr(transOut1_6_8 <= TimeSensitive_Req_6_8[k])
        m.addConstr(transOut2_6_8 <= Economy_Req_6_8[k])
        trash = c3_1 * (TimeSensitive_Req_HS[k]-transOut1) + c3_2 * (Economy_Req_HS[k]-transOut2)
        C6 += trash
    for k in range(last_SB):
        transOut1 = 0
        transOut2 = 0
        transOut1_7_1 = 0
        transOut2_7_1 = 0
        transOut1_7_2 = 0
        transOut2_7_2 = 0
        transOut1_7_3 = 0
        transOut2_7_3 = 0
        transOut1_8_1 = 0
        transOut2_8_1 = 0
        transOut1_8_2 = 0
        transOut2_8_2 = 0
        transOut1_8_3 = 0
        transOut2_8_3 = 0
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                if i == k:
                    transOut1_7_1 += x_7_1[i,j,1]
                    transOut2_7_1 += x_7_1[i,j,2]
                    transOut1_7_2 += x_7_2[i,j,1]
                    transOut2_7_2 += x_7_2[i,j,2]
                    transOut1_7_3 += x_7_3[i,j,1]
                    transOut2_7_3 += x_7_3[i,j,2]
                    transOut1_8_1 += x_8_1[i,j,1]
                    transOut2_8_1 += x_8_1[i,j,2]
                    transOut1_8_2 += x_8_2[i,j,1]
                    transOut2_8_2 += x_8_2[i,j,2]
                    transOut1_8_3 += x_8_3[i,j,1]
                    transOut2_8_3 += x_8_3[i,j,2]
                    transOut1 += x_7_1[i,j,1]+x_7_2[i,j,1]+x_7_3[i,j,1]+x_8_1[i,j,1]+x_8_2[i,j,1]+x_8_3[i,j,1]
                    transOut2 += x_7_1[i,j,2]+x_7_2[i,j,2]+x_7_3[i,j,2]+x_8_1[i,j,2]+x_8_2[i,j,2]+x_8_3[i,j,2]
                    passengerTotalSB += (x_7_1[i,j,1]+x_7_2[i,j,1]+x_7_3[i,j,1]+x_8_1[i,j,1]+x_8_2[i,j,1]+x_8_3[i,j,1]+x_7_1[i,j,2]+x_7_2[i,j,2]+x_7_3[i,j,2]+x_8_1[i,j,2]+x_8_2[i,j,2]+x_8_3[i,j,2])
        for j in range(N*K):
            for i in range(cargo_SB[j]):
                if i == k:
                    transOut1_7_1 += y_7_1[i,j,1]
                    transOut2_7_1 += y_7_1[i,j,2]
                    transOut1_7_2 += y_7_2[i,j,1]
                    transOut2_7_2 += y_7_2[i,j,2]
                    transOut1_7_3 += y_7_3[i,j,1]
                    transOut2_7_3 += y_7_3[i,j,2]
                    transOut1_8_1 += y_8_1[i,j,1]
                    transOut2_8_1 += y_8_1[i,j,2]
                    transOut1_8_2 += y_8_2[i,j,1]
                    transOut2_8_2 += y_8_2[i,j,2]
                    transOut1_8_3 += y_8_3[i,j,1]
                    transOut2_8_3 += y_8_3[i,j,2]
                    transOut1 += y_7_1[i,j,1]+y_7_2[i,j,1]+y_7_3[i,j,1]+y_8_1[i,j,1]+y_8_2[i,j,1]+y_8_3[i,j,1]
                    transOut2 += y_7_1[i,j,2]+y_7_2[i,j,2]+y_7_3[i,j,2]+y_8_1[i,j,2]+y_8_2[i,j,2]+y_8_3[i,j,2]
                    cargoTotalSB += (y_7_1[i,j,1]+y_7_2[i,j,1]+y_7_3[i,j,1]+y_8_1[i,j,1]+y_8_2[i,j,1]+y_8_3[i,j,1]+y_7_1[i,j,2]+y_7_2[i,j,2]+y_7_3[i,j,2]+y_8_1[i,j,2]+y_8_2[i,j,2]+y_8_3[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_7_1 <= TimeSensitive_Req_7_1[k])
        m.addConstr(transOut2_7_1 <= Economy_Req_7_1[k])
        m.addConstr(transOut1_7_2 <= TimeSensitive_Req_7_2[k])
        m.addConstr(transOut2_7_2 <= Economy_Req_7_2[k])
        m.addConstr(transOut1_7_3 <= TimeSensitive_Req_7_3[k])
        m.addConstr(transOut2_7_3 <= Economy_Req_7_3[k])
        m.addConstr(transOut1_8_1 <= TimeSensitive_Req_8_1[k])
        m.addConstr(transOut2_8_1 <= Economy_Req_8_1[k])
        m.addConstr(transOut1_8_2 <= TimeSensitive_Req_8_2[k])
        m.addConstr(transOut2_8_2 <= Economy_Req_8_2[k])
        m.addConstr(transOut1_8_3 <= TimeSensitive_Req_8_3[k])
        m.addConstr(transOut2_8_3 <= Economy_Req_8_3[k])
        trash = c3_1 * (TimeSensitive_Req_SB[k]-transOut1) + c3_2 * (Economy_Req_SB[k]-transOut2)
        C6 += trash
    for k in range(last_SH):
        transOut1 = 0
        transOut2 = 0
        transOut1_7_4 = 0
        transOut2_7_4 = 0
        transOut1_7_5 = 0
        transOut2_7_5 = 0
        transOut1_7_6 = 0
        transOut2_7_6 = 0
        transOut1_8_4 = 0
        transOut2_8_4 = 0
        transOut1_8_5 = 0
        transOut2_8_5 = 0
        transOut1_8_6 = 0
        transOut2_8_6 = 0
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                if i == k:
                    transOut1_7_4 += x_7_4[i,j,1]
                    transOut2_7_4 += x_7_4[i,j,2]
                    transOut1_7_5 += x_7_5[i,j,1]
                    transOut2_7_5 += x_7_5[i,j,2]
                    transOut1_7_6 += x_7_6[i,j,1]
                    transOut2_7_6 += x_7_6[i,j,2]
                    transOut1_8_4 += x_8_4[i,j,1]
                    transOut2_8_4 += x_8_4[i,j,2]
                    transOut1_8_5 += x_8_5[i,j,1]
                    transOut2_8_5 += x_8_5[i,j,2]
                    transOut1_8_6 += x_8_6[i,j,1]
                    transOut2_8_6 += x_8_6[i,j,2]
                    transOut1 += x_7_4[i,j,1]+x_7_5[i,j,1]+x_7_6[i,j,1]+x_8_4[i,j,1]+x_8_5[i,j,1]+x_8_6[i,j,1]
                    transOut2 += x_7_4[i,j,2]+x_7_5[i,j,2]+x_7_6[i,j,2]+x_8_4[i,j,2]+x_8_5[i,j,2]+x_8_6[i,j,2]
                    passengerTotalSH += (x_7_4[i,j,1]+x_7_5[i,j,1]+x_7_6[i,j,1]+x_8_4[i,j,1]+x_8_5[i,j,1]+x_8_6[i,j,1]+x_7_4[i,j,2]+x_7_5[i,j,2]+x_7_6[i,j,2]+x_8_4[i,j,2]+x_8_5[i,j,2]+x_8_6[i,j,2])
        for j in range(N*K):
            for i in range(cargo_SB[j]):
                if i == k:
                    transOut1_7_4 += y_7_4[i,j,1]
                    transOut2_7_4 += y_7_4[i,j,2]
                    transOut1_7_5 += y_7_5[i,j,1]
                    transOut2_7_5 += y_7_5[i,j,2]
                    transOut1_7_6 += y_7_6[i,j,1]
                    transOut2_7_6 += y_7_6[i,j,2]
                    transOut1_8_4 += y_8_4[i,j,1]
                    transOut2_8_4 += y_8_4[i,j,2]
                    transOut1_8_5 += y_8_5[i,j,1]
                    transOut2_8_5 += y_8_5[i,j,2]
                    transOut1_8_6 += y_8_6[i,j,1]
                    transOut2_8_6 += y_8_6[i,j,2]
                    transOut1 += y_7_4[i,j,1]+y_7_5[i,j,1]+y_7_6[i,j,1]+y_8_4[i,j,1]+y_8_5[i,j,1]+y_8_6[i,j,1]
                    transOut2 += y_7_4[i,j,2]+y_7_5[i,j,2]+y_7_6[i,j,2]+y_8_4[i,j,2]+y_8_5[i,j,2]+y_8_6[i,j,2]
                    cargoTotalSH += (y_7_4[i,j,1]+y_7_5[i,j,1]+y_7_6[i,j,1]+y_8_4[i,j,1]+y_8_5[i,j,1]+y_8_6[i,j,1]+y_7_4[i,j,2]+y_7_5[i,j,2]+y_7_6[i,j,2]+y_8_4[i,j,2]+y_8_5[i,j,2]+y_8_6[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_7_4 <= TimeSensitive_Req_7_4[k])
        m.addConstr(transOut2_7_4 <= Economy_Req_7_4[k])
        m.addConstr(transOut1_7_5 <= TimeSensitive_Req_7_5[k])
        m.addConstr(transOut2_7_5 <= Economy_Req_7_5[k])
        m.addConstr(transOut1_7_6 <= TimeSensitive_Req_7_6[k])
        m.addConstr(transOut2_7_6 <= Economy_Req_7_6[k])
        m.addConstr(transOut1_8_4 <= TimeSensitive_Req_8_4[k])
        m.addConstr(transOut2_8_4 <= Economy_Req_8_4[k])
        m.addConstr(transOut1_8_5 <= TimeSensitive_Req_8_5[k])
        m.addConstr(transOut2_8_5 <= Economy_Req_8_5[k])
        m.addConstr(transOut1_8_6 <= TimeSensitive_Req_8_6[k])
        m.addConstr(transOut2_8_6 <= Economy_Req_8_6[k])
        trash = c3_1 * (TimeSensitive_Req_SH[k]-transOut1) + c3_2 * (Economy_Req_SH[k]-transOut2)
        C6 += trash
    
    desertTotalBH = sum(forecast_1_4_K)+sum(forecast_1_5_K)+sum(forecast_1_6_K)+sum(forecast_2_4_K)+sum(forecast_2_5_K)+sum(forecast_2_6_K)+sum(forecast_3_4_K)+sum(forecast_3_5_K)+sum(forecast_3_6_K)-passengerTotalBH-cargoTotalBH
    desertTotalBS = sum(forecast_1_7_K)+sum(forecast_1_8_K)+sum(forecast_2_7_K)+sum(forecast_2_8_K)+sum(forecast_3_7_K)+sum(forecast_3_8_K)-passengerTotalBS-cargoTotalBS
    desertTotalHB = sum(forecast_4_1_K)+sum(forecast_4_2_K)+sum(forecast_4_3_K)+sum(forecast_5_1_K)+sum(forecast_5_2_K)+sum(forecast_5_3_K)+sum(forecast_6_1_K)+sum(forecast_6_2_K)+sum(forecast_6_3_K)-passengerTotalHB-cargoTotalHB
    desertTotalHS = sum(forecast_4_7_K)+sum(forecast_4_8_K)+sum(forecast_5_7_K)+sum(forecast_5_8_K)+sum(forecast_6_7_K)+sum(forecast_6_8_K)-passengerTotalHS-cargoTotalHS
    desertTotalSB = sum(forecast_7_1_K)+sum(forecast_7_2_K)+sum(forecast_7_3_K)+sum(forecast_8_1_K)+sum(forecast_8_2_K)+sum(forecast_8_3_K)-passengerTotalSB-cargoTotalSB
    desertTotalSH = sum(forecast_7_4_K)+sum(forecast_7_5_K)+sum(forecast_7_6_K)+sum(forecast_8_4_K)+sum(forecast_8_5_K)+sum(forecast_8_6_K)-passengerTotalSH-cargoTotalSH
                      
    # 本周期内无法运完的货物的仓储成本和预期逾期成本
    left_1_4 = 0
    left_1_5 = 0
    left_1_6 = 0
    left_1_7 = 0
    left_1_8 = 0
    left_2_4 = 0
    left_2_5 = 0
    left_2_6 = 0
    left_2_7 = 0
    left_2_8 = 0
    left_3_4 = 0
    left_3_5 = 0
    left_3_6 = 0
    left_3_7 = 0
    left_3_8 = 0
    left_4_1 = 0
    left_4_2 = 0
    left_4_3 = 0
    left_4_7 = 0
    left_4_8 = 0
    left_5_1 = 0
    left_5_2 = 0
    left_5_3 = 0
    left_5_7 = 0
    left_5_8 = 0
    left_6_1 = 0
    left_6_2 = 0
    left_6_3 = 0
    left_6_7 = 0
    left_6_8 = 0
    left_7_1 = 0
    left_7_2 = 0
    left_7_3 = 0
    left_7_4 = 0
    left_7_5 = 0
    left_7_6 = 0
    left_8_1 = 0
    left_8_2 = 0
    left_8_3 = 0
    left_8_4 = 0
    left_8_5 = 0
    left_8_6 = 0                 
    for i in range(last_BH, 24 * K):
        left_1_4 += forecast_1_4_K[i]
        left_1_5 += forecast_1_5_K[i]
        left_1_6 += forecast_1_6_K[i]
        left_2_4 += forecast_2_4_K[i]
        left_2_5 += forecast_2_5_K[i]
        left_2_6 += forecast_2_6_K[i]
        left_3_4 += forecast_3_4_K[i]
        left_3_5 += forecast_3_5_K[i]
        left_3_6 += forecast_3_6_K[i]      
        C1 += c1 * (forecast_1_4_K[i]+forecast_1_5_K[i]+forecast_1_6_K[i]+forecast_2_4_K[i]+forecast_2_5_K[i]+forecast_2_6_K[i]+forecast_3_4_K[i]+forecast_3_5_K[i]+forecast_3_6_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_BH[i] + c2_2 * Economy_Req_BH[i]) * (24 * K - i + first_BH - 1) * (1 - (i + 1) / (24 * K))
    for i in range(last_BS, 24 * K):
        left_1_7 += forecast_1_7_K[i]
        left_1_8 += forecast_1_8_K[i]
        left_2_7 += forecast_2_7_K[i]
        left_2_8 += forecast_2_8_K[i]
        left_3_7 += forecast_3_7_K[i]
        left_3_8 += forecast_3_8_K[i]
        C1 += c1 * (forecast_1_7_K[i]+forecast_1_8_K[i]+forecast_2_7_K[i]+forecast_2_8_K[i]+forecast_3_7_K[i]+forecast_3_8_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_BS[i] + c2_2 * Economy_Req_BS[i]) * (24 * K - i + first_BS - 1) * (1 - (i + 1) / (24 * K))  
    for i in range(last_HB, 24 * K):
        left_4_1 += forecast_4_1_K[i]
        left_4_2 += forecast_4_2_K[i]
        left_4_3 += forecast_4_3_K[i]
        left_5_1 += forecast_5_1_K[i]
        left_5_2 += forecast_5_2_K[i]
        left_5_3 += forecast_5_3_K[i]
        left_6_1 += forecast_6_1_K[i]
        left_6_2 += forecast_6_2_K[i]
        left_6_3 += forecast_6_3_K[i]
        C1 += c1 * (forecast_4_1_K[i]+forecast_4_2_K[i]+forecast_4_3_K[i]+forecast_5_1_K[i]+forecast_5_2_K[i]+forecast_5_3_K[i]+forecast_6_1_K[i]+forecast_6_2_K[i]+forecast_6_3_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_HB[i] + c2_2 * Economy_Req_HB[i]) * (24 * K - i + first_HB - 1) * (1 - (i + 1) / (24 * K))
    for i in range(last_HS, 24 * K):
        left_4_7 += forecast_4_7_K[i]
        left_4_8 += forecast_4_8_K[i]
        left_5_7 += forecast_5_7_K[i]
        left_5_8 += forecast_5_8_K[i]
        left_6_7 += forecast_6_7_K[i]
        left_6_8 += forecast_6_8_K[i]  
        C1 += c1 * (forecast_4_7_K[i]+forecast_4_8_K[i]+forecast_5_7_K[i]+forecast_5_8_K[i]+forecast_6_7_K[i]+forecast_6_8_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_HS[i] + c2_2 * Economy_Req_HS[i]) * (24 * K - i + first_HS - 1) * (1 - (i + 1) / (24 * K))
    for i in range(last_SB, 24 * K):
        left_7_1 += forecast_7_1_K[i]
        left_7_2 += forecast_7_2_K[i]
        left_7_3 += forecast_7_3_K[i]
        left_8_1 += forecast_8_1_K[i]
        left_8_2 += forecast_8_2_K[i]
        left_8_3 += forecast_8_3_K[i]   
        C1 += c1 * (forecast_7_1_K[i]+forecast_7_2_K[i]+forecast_7_3_K[i]+forecast_8_1_K[i]+forecast_8_2_K[i]+forecast_8_3_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_SB[i] + c2_2 * Economy_Req_SB[i]) * (24 * K - i + first_SB - 1) * (1 - (i + 1) / (24 * K))
    for i in range(last_SH, 24 * K):
        left_7_4 += forecast_7_4_K[i]
        left_7_5 += forecast_7_5_K[i]
        left_7_6 += forecast_7_6_K[i]
        left_8_4 += forecast_8_4_K[i]
        left_8_5 += forecast_8_5_K[i]
        left_8_6 += forecast_8_6_K[i]
        C1 += c1 * (forecast_7_4_K[i]+forecast_7_5_K[i]+forecast_7_6_K[i]+forecast_8_4_K[i]+forecast_8_5_K[i]+forecast_8_6_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_SH[i] + c2_2 * Economy_Req_SH[i]) * (24 * K - i + first_SH - 1) * (1 - (i + 1) / (24 * K))       
                
    left_to_leave_1_4.append(left_1_4)
    left_to_leave_1_5.append(left_1_5)
    left_to_leave_1_6.append(left_1_6)
    left_to_leave_1_7.append(left_1_7)
    left_to_leave_1_8.append(left_1_8)
    left_to_leave_2_4.append(left_2_4)
    left_to_leave_2_5.append(left_2_5)
    left_to_leave_2_6.append(left_2_6)
    left_to_leave_2_7.append(left_2_7)
    left_to_leave_2_8.append(left_2_8)
    left_to_leave_3_4.append(left_3_4)
    left_to_leave_3_5.append(left_3_5)
    left_to_leave_3_6.append(left_3_6)
    left_to_leave_3_7.append(left_3_7)
    left_to_leave_3_8.append(left_3_8)
    left_to_leave_4_1.append(left_4_1)
    left_to_leave_4_2.append(left_4_2)
    left_to_leave_4_3.append(left_4_3)
    left_to_leave_4_7.append(left_4_7)
    left_to_leave_4_8.append(left_4_8)
    left_to_leave_5_1.append(left_5_1)
    left_to_leave_5_2.append(left_5_2)
    left_to_leave_5_3.append(left_5_3)
    left_to_leave_5_7.append(left_5_7)
    left_to_leave_5_8.append(left_5_8)
    left_to_leave_6_1.append(left_6_1)
    left_to_leave_6_2.append(left_6_2)
    left_to_leave_6_3.append(left_6_3)
    left_to_leave_6_7.append(left_6_7)
    left_to_leave_6_8.append(left_6_8)
    left_to_leave_7_1.append(left_7_1)
    left_to_leave_7_2.append(left_7_2)
    left_to_leave_7_3.append(left_7_3)
    left_to_leave_7_4.append(left_7_4)
    left_to_leave_7_5.append(left_7_5)
    left_to_leave_7_6.append(left_7_6)
    left_to_leave_8_1.append(left_8_1)
    left_to_leave_8_2.append(left_8_2)
    left_to_leave_8_3.append(left_8_3)
    left_to_leave_8_4.append(left_8_4)
    left_to_leave_8_5.append(left_8_5)
    left_to_leave_8_6.append(left_8_6)
                      
    # 计算每个航段上客机和货机运输的量
    passengerTrans_BH = 0
    passengerTrans_BS = 0
    passengerTrans_HB = 0
    passengerTrans_HS = 0
    passengerTrans_SB = 0
    passengerTrans_SH = 0
    cargoTrans = 0
    cargoTrans_BH = 0
    cargoTrans_HS = 0
    cargoTrans_SB = 0
    for w in range(1,3):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                passengerTrans_BH += (x_1_4[i,j,w]+x_1_5[i,j,w]+x_1_6[i,j,w]+x_2_4[i,j,w]+x_2_5[i,j,w]+x_2_6[i,j,w]+x_3_4[i,j,w]+x_3_5[i,j,w]+x_3_6[i,j,w])
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                passengerTrans_BS += (x_1_7[i,j,w]+x_1_8[i,j,w]+x_2_7[i,j,w]+x_2_8[i,j,w]+x_3_7[i,j,w]+x_3_8[i,j,w])
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                passengerTrans_HB += (x_4_1[i,j,w]+x_4_2[i,j,w]+x_4_3[i,j,w]+x_5_1[i,j,w]+x_5_2[i,j,w]+x_5_3[i,j,w]+x_6_1[i,j,w]+x_6_2[i,j,w]+x_6_3[i,j,w])
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                passengerTrans_HS += (x_4_7[i,j,w]+x_4_8[i,j,w]+x_5_7[i,j,w]+x_5_8[i,j,w]+x_6_7[i,j,w]+x_6_8[i,j,w])
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                passengerTrans_SB += (x_7_1[i,j,w]+x_7_2[i,j,w]+x_7_3[i,j,w]+x_8_1[i,j,w]+x_8_2[i,j,w]+x_8_3[i,j,w])
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                passengerTrans_SH += (x_7_4[i,j,w]+x_7_5[i,j,w]+x_7_6[i,j,w]+x_8_4[i,j,w]+x_8_5[i,j,w]+x_8_6[i,j,w])
        for j in range(N*K):
            for i in range(cargo_BH[j]):
                cargoTrans += (y_1_4[i,j,w]+y_1_5[i,j,w]+y_1_6[i,j,w]+y_2_4[i,j,w]+y_2_5[i,j,w]+y_2_6[i,j,w]+y_3_4[i,j,w]+y_3_5[i,j,w]+y_3_6[i,j,w]+y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w])
                cargoTrans_BH += (y_1_4[i,j,w]+y_1_5[i,j,w]+y_1_6[i,j,w]+y_2_4[i,j,w]+y_2_5[i,j,w]+y_2_6[i,j,w]+y_3_4[i,j,w]+y_3_5[i,j,w]+y_3_6[i,j,w]+y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w])
                cargoTrans_HS += (y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w])
            for i in range(cargo_HS[j]):
                cargoTrans += (y_4_7[i,j,w]+y_4_8[i,j,w]+y_5_7[i,j,w]+y_5_8[i,j,w]+y_6_7[i,j,w]+y_6_8[i,j,w]+y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w])
                cargoTrans_HS += (y_4_7[i,j,w]+y_4_8[i,j,w]+y_5_7[i,j,w]+y_5_8[i,j,w]+y_6_7[i,j,w]+y_6_8[i,j,w]+y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w])
                cargoTrans_SB += (y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w])
            for i in range(cargo_SB[j]):
                cargoTrans += (y_7_1[i,j,w]+y_7_2[i,j,w]+y_7_3[i,j,w]+y_8_1[i,j,w]+y_8_2[i,j,w]+y_8_3[i,j,w]+y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w])
                cargoTrans_SB += (y_7_1[i,j,w]+y_7_2[i,j,w]+y_7_3[i,j,w]+y_8_1[i,j,w]+y_8_2[i,j,w]+y_8_3[i,j,w]+y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w])
                cargoTrans_BH += (y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w])
    passengerTrans = passengerTrans_BH+passengerTrans_BS+passengerTrans_HB+passengerTrans_HS+passengerTrans_SB+passengerTrans_SH
    
    # 只有客机运输成本是分段计价的
    zBH = {}
    zBS = {}
    zHB = {}
    zHS = {}
    zSB = {}
    zSH = {}
    A_BH = m.addVars(range(len(FR_BH)), vtype=GRB.BINARY)
    A_BS = m.addVars(range(len(FR_BS)), vtype=GRB.BINARY)
    A_HB = m.addVars(range(len(FR_HB)), vtype=GRB.BINARY)
    A_HS = m.addVars(range(len(FR_HS)), vtype=GRB.BINARY)
    A_SB = m.addVars(range(len(FR_SB)), vtype=GRB.BINARY)
    A_SH = m.addVars(range(len(FR_SH)), vtype=GRB.BINARY)
    
    for r in range(len(FR_BH)):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                zBH[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                zBS[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                zHB[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                zHS[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                zSB[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                zSH[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                
    m.addConstr(gp.quicksum(A_BH[r] for r in range(len(FR_BH))) == 1)
    m.addConstr(gp.quicksum(A_BS[r] for r in range(len(FR_BS))) == 1)
    m.addConstr(gp.quicksum(A_HB[r] for r in range(len(FR_HB))) == 1)
    m.addConstr(gp.quicksum(A_HS[r] for r in range(len(FR_HS))) == 1)
    m.addConstr(gp.quicksum(A_SB[r] for r in range(len(FR_SB))) == 1)
    m.addConstr(gp.quicksum(A_SH[r] for r in range(len(FR_SH))) == 1)
    
    for r in range(len(FR_BH)):
        for j in range(len(passengerTime_BH)):
            m.addConstr(gp.quicksum(x_1_4[i,j,w]+x_1_5[i,j,w]+x_1_6[i,j,w]+x_2_4[i,j,w]+x_2_5[i,j,w]+x_2_6[i,j,w]+x_3_4[i,j,w]+x_3_5[i,j,w]+x_3_6[i,j,w] for w in range(1,3) for i in range(passengerTime_BH[j])) >= lBH[r] * A_BH[r])
        for j in range(len(passengerTime_BS)):
            m.addConstr(gp.quicksum(x_1_7[i,j,w]+x_1_8[i,j,w]+x_2_7[i,j,w]+x_2_8[i,j,w]+x_3_7[i,j,w]+x_3_8[i,j,w] for w in range(1,3) for i in range(passengerTime_BS[j])) >= lBS[r] * A_BS[r])
        for j in range(len(passengerTime_HB)):
            m.addConstr(gp.quicksum(x_4_1[i,j,w]+x_4_2[i,j,w]+x_4_3[i,j,w]+x_5_1[i,j,w]+x_5_2[i,j,w]+x_5_3[i,j,w]+x_6_1[i,j,w]+x_6_2[i,j,w]+x_6_3[i,j,w] for w in range(1,3) for i in range(passengerTime_HB[j])) >= lHB[r] * A_HB[r])
        for j in range(len(passengerTime_HS)):
            m.addConstr(gp.quicksum(x_4_7[i,j,w]+x_4_8[i,j,w]+x_5_7[i,j,w]+x_5_8[i,j,w]+x_6_7[i,j,w]+x_6_8[i,j,w] for w in range(1,3) for i in range(passengerTime_HS[j])) >= lHS[r] * A_HS[r])
        for j in range(len(passengerTime_SB)):
            m.addConstr(gp.quicksum(x_7_1[i,j,w]+x_7_2[i,j,w]+x_7_3[i,j,w]+x_8_1[i,j,w]+x_8_2[i,j,w]+x_8_3[i,j,w] for w in range(1,3) for i in range(passengerTime_SB[j])) >= lSB[r] * A_SB[r])
        for j in range(len(passengerTime_SH)):
            m.addConstr(gp.quicksum(x_7_4[i,j,w]+x_7_5[i,j,w]+x_7_6[i,j,w]+x_8_4[i,j,w]+x_8_5[i,j,w]+x_8_6[i,j,w] for w in range(1,3) for i in range(passengerTime_SH[j])) >= lSH[r] * A_SH[r])
        
    for r in range(len(FR_BH)):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                m.addConstr(zBH[i,j,r] <= A_BH[r] * forecast_BH_K[i])
                m.addConstr(zBH[i,j,r] <= (x_1_4[i,j,1]+x_1_5[i,j,1]+x_1_6[i,j,1]+x_2_4[i,j,1]+x_2_5[i,j,1]+x_2_6[i,j,1]+x_3_4[i,j,1]+x_3_5[i,j,1]+x_3_6[i,j,1]+x_1_4[i,j,2]+x_1_5[i,j,2]+x_1_6[i,j,2]+x_2_4[i,j,2]+x_2_5[i,j,2]+x_2_6[i,j,2]+x_3_4[i,j,2]+x_3_5[i,j,2]+x_3_6[i,j,2]))
                m.addConstr(zBH[i,j,r] >= (x_1_4[i,j,1]+x_1_5[i,j,1]+x_1_6[i,j,1]+x_2_4[i,j,1]+x_2_5[i,j,1]+x_2_6[i,j,1]+x_3_4[i,j,1]+x_3_5[i,j,1]+x_3_6[i,j,1]+x_1_4[i,j,2]+x_1_5[i,j,2]+x_1_6[i,j,2]+x_2_4[i,j,2]+x_2_5[i,j,2]+x_2_6[i,j,2]+x_3_4[i,j,2]+x_3_5[i,j,2]+x_3_6[i,j,2] - forecast_BH_K[i] * (1 - A_BH[r])))
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                m.addConstr(zBS[i,j,r] <= A_BS[r] * forecast_BS_K[i])
                m.addConstr(zBS[i,j,r] <= (x_1_7[i,j,1]+x_1_8[i,j,1]+x_2_7[i,j,1]+x_2_8[i,j,1]+x_3_7[i,j,1]+x_3_8[i,j,1]+x_1_7[i,j,2]+x_1_8[i,j,2]+x_2_7[i,j,2]+x_2_8[i,j,2]+x_3_7[i,j,2]+x_3_8[i,j,2]))
                m.addConstr(zBS[i,j,r] >= (x_1_7[i,j,1]+x_1_8[i,j,1]+x_2_7[i,j,1]+x_2_8[i,j,1]+x_3_7[i,j,1]+x_3_8[i,j,1]+x_1_7[i,j,2]+x_1_8[i,j,2]+x_2_7[i,j,2]+x_2_8[i,j,2]+x_3_7[i,j,2]+x_3_8[i,j,2] - forecast_BS_K[i] * (1 - A_BS[r])))
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                m.addConstr(zHB[i,j,r] <= A_HB[r] * forecast_HB_K[i])
                m.addConstr(zHB[i,j,r] <= (x_4_1[i,j,1]+x_4_2[i,j,1]+x_4_3[i,j,1]+x_5_1[i,j,1]+x_5_2[i,j,1]+x_5_3[i,j,1]+x_6_1[i,j,1]+x_6_2[i,j,1]+x_6_3[i,j,1]+x_4_1[i,j,2]+x_4_2[i,j,2]+x_4_3[i,j,2]+x_5_1[i,j,2]+x_5_2[i,j,2]+x_5_3[i,j,2]+x_6_1[i,j,2]+x_6_2[i,j,2]+x_6_3[i,j,2]))
                m.addConstr(zHB[i,j,r] >= (x_4_1[i,j,1]+x_4_2[i,j,1]+x_4_3[i,j,1]+x_5_1[i,j,1]+x_5_2[i,j,1]+x_5_3[i,j,1]+x_6_1[i,j,1]+x_6_2[i,j,1]+x_6_3[i,j,1]+x_4_1[i,j,2]+x_4_2[i,j,2]+x_4_3[i,j,2]+x_5_1[i,j,2]+x_5_2[i,j,2]+x_5_3[i,j,2]+x_6_1[i,j,2]+x_6_2[i,j,2]+x_6_3[i,j,2] - forecast_HB_K[i] * (1 - A_HB[r])))
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                m.addConstr(zHS[i,j,r] <= A_HS[r] * forecast_HS_K[i])
                m.addConstr(zHS[i,j,r] <= (x_4_7[i,j,1]+x_4_8[i,j,1]+x_5_7[i,j,1]+x_5_8[i,j,1]+x_6_7[i,j,1]+x_6_8[i,j,1]+x_4_7[i,j,2]+x_4_8[i,j,2]+x_5_7[i,j,2]+x_5_8[i,j,2]+x_6_7[i,j,2]+x_6_8[i,j,2]))
                m.addConstr(zHS[i,j,r] >= (x_4_7[i,j,1]+x_4_8[i,j,1]+x_5_7[i,j,1]+x_5_8[i,j,1]+x_6_7[i,j,1]+x_6_8[i,j,1]+x_4_7[i,j,2]+x_4_8[i,j,2]+x_5_7[i,j,2]+x_5_8[i,j,2]+x_6_7[i,j,2]+x_6_8[i,j,2] - forecast_HS_K[i] * (1 - A_HS[r])))
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                m.addConstr(zSB[i,j,r] <= A_BH[r] * forecast_SB_K[i])
                m.addConstr(zSB[i,j,r] <= (x_7_1[i,j,1]+x_7_2[i,j,1]+x_7_3[i,j,1]+x_8_1[i,j,1]+x_8_2[i,j,1]+x_8_3[i,j,1]+x_7_1[i,j,2]+x_7_2[i,j,2]+x_7_3[i,j,2]+x_8_1[i,j,2]+x_8_2[i,j,2]+x_8_3[i,j,2]))
                m.addConstr(zSB[i,j,r] >= (x_7_1[i,j,1]+x_7_2[i,j,1]+x_7_3[i,j,1]+x_8_1[i,j,1]+x_8_2[i,j,1]+x_8_3[i,j,1]+x_7_1[i,j,2]+x_7_2[i,j,2]+x_7_3[i,j,2]+x_8_1[i,j,2]+x_8_2[i,j,2]+x_8_3[i,j,2] - forecast_SB_K[i] * (1 - A_SB[r])))
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                m.addConstr(zSH[i,j,r] <= A_SH[r] * forecast_SH_K[i])
                m.addConstr(zSH[i,j,r] <= (x_7_4[i,j,1]+x_7_5[i,j,1]+x_7_6[i,j,1]+x_8_4[i,j,1]+x_8_5[i,j,1]+x_8_6[i,j,1]+x_7_4[i,j,2]+x_7_5[i,j,2]+x_7_6[i,j,2]+x_8_4[i,j,2]+x_8_5[i,j,2]+x_8_6[i,j,2]))
                m.addConstr(zSH[i,j,r] >= (x_7_4[i,j,1]+x_7_5[i,j,1]+x_7_6[i,j,1]+x_8_4[i,j,1]+x_8_5[i,j,1]+x_8_6[i,j,1]+x_7_4[i,j,2]+x_7_5[i,j,2]+x_7_6[i,j,2]+x_8_4[i,j,2]+x_8_5[i,j,2]+x_8_6[i,j,2] - forecast_SH_K[i] * (1 - A_SH[r])))
                
    for r in range(len(FR_BH)):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                C5 += FR_BH[r] * zBH[i,j,r]
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                C5 += FR_BS[r] * zBS[i,j,r]
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                C5 += FR_HB[r] * zHB[i,j,r]
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                C5 += FR_HS[r] * zHS[i,j,r]
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                C5 += FR_SB[r] * zSB[i,j,r]
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                C5 += FR_SH[r] * zSH[i,j,r]
    
    cargo_operating_perHour = cargo_per + L * OilPrice
    
    nBH = {}
    nHS = {}
    nSB = {}
    M = 0.0001
    for j in range(N*K):
        nBH[j] = m.addVar(vtype=GRB.BINARY)
        nHS[j] = m.addVar(vtype=GRB.BINARY)
        nSB[j] = m.addVar(vtype=GRB.BINARY)
        
    for j in range(N*K):
        m.addConstr(nBH[j] >= M * gp.quicksum((y_1_4[i,j,w]+y_1_5[i,j,w]+y_1_6[i,j,w]+y_2_4[i,j,w]+y_2_5[i,j,w]+y_2_6[i,j,w]+y_3_4[i,j,w]+y_3_5[i,j,w]+y_3_6[i,j,w]+y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w]) for i in range(cargo_BH[j]) for w in range(1,3)) + M * gp.quicksum(y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w] for i in range(cargo_SB[j]) for w in range(1,3)))
        m.addConstr(nHS[j] >= M * gp.quicksum((y_4_7[i,j,w]+y_4_8[i,j,w]+y_5_7[i,j,w]+y_5_8[i,j,w]+y_6_7[i,j,w]+y_6_8[i,j,w]+y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w]) for i in range(cargo_HS[j]) for w in range(1,3)) + M * gp.quicksum(y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w] for i in range(cargo_BH[j]) for w in range(1,3)))
        m.addConstr(nSB[j] >= M * gp.quicksum((y_7_1[i,j,w]+y_7_2[i,j,w]+y_7_3[i,j,w]+y_8_1[i,j,w]+y_8_2[i,j,w]+y_8_3[i,j,w]+y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w]) for i in range(cargo_SB[j]) for w in range(1,3)) + M * gp.quicksum(y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w] for i in range(cargo_HS[j]) for w in range(1,3)))
        
    cargoUsed_BH = 0
    cargoUsed_HS = 0
    cargoUsed_SB = 0
    for j in range(N*K):
        cargoUsed_BH += nBH[j]
        cargoUsed_HS += nHS[j]
        cargoUsed_SB += nSB[j]
        C7 += cargo_operating_perHour * (Tcargo_1*nBH[j]+Tcargo_2*nHS[j]+Tcargo_3*nSB[j])
    
    requi = sum(forecast_BH_K)+sum(forecast_BS_K)+sum(forecast_HB_K)+sum(forecast_HS_K)+sum(forecast_SB_K)+sum(forecast_SH_K)
    unTrans = requi - transported_1 - transported_2
    untransprop = unTrans / requi
    
    m.setObjective(theta1 * (C1 + C2 + C3 + C4 + C5 + C6 + C7) + theta2 * untransprop, GRB.MINIMIZE)
    m.optimize()
    
    cargo_operating = cargo_operating_perHour * (Tcargo_1+Tcargo_2+Tcargo_3) * max(cargoUsed_BH.getValue(),cargoUsed_HS.getValue(),cargoUsed_SB.getValue())
    
    
    
    result1 = C1+C2+C3.getValue()+C4.getValue()+C5.getValue()+C6.getValue()+cargo_operating
    result2 = C3.getValue()+C2
    result3 = C4.getValue()+C1
    result4 = C5.getValue()
    result5 = cargo_operating
    result6 = transported_1.getValue()
    result7 = transported_2.getValue()
    result8 = unTrans.getValue()
    result9 = requi
    result10 = passengerTrans.getValue()
    result11 = cargoTrans.getValue()
    result12 = C6.getValue()
    result13 = passengerTrans_BH.getValue()
    result14 = passengerTrans_BS.getValue()
    result15 = passengerTrans_HB.getValue()
    result16 = passengerTrans_HS.getValue()
    result17 = passengerTrans_SB.getValue()
    result18 = passengerTrans_SH.getValue()
    result19 = cargoTrans_BH.getValue()
    result20 = cargoTrans_HS.getValue()
    result21 = cargoTrans_SB.getValue()
    result22 = max(cargoUsed_BH.getValue(),cargoUsed_HS.getValue(),cargoUsed_SB.getValue())
    output1 = passengerTotalBH.getValue()
    output2 = passengerTotalBS.getValue()
    output3 = passengerTotalHB.getValue()
    output4 = passengerTotalHS.getValue()
    output5 = passengerTotalSB.getValue()
    output6 = passengerTotalSH.getValue()
    output7 = cargoTotalBH.getValue()
    output8 = cargoTotalBS.getValue()
    output9 = cargoTotalHB.getValue()
    output10 = cargoTotalHS.getValue()
    output11 = cargoTotalSB.getValue()
    output12 = cargoTotalSH.getValue()
    output13 = desertTotalBH.getValue()
    output14 = desertTotalBS.getValue()
    output15 = desertTotalHB.getValue()
    output16 = desertTotalHS.getValue()
    output17 = desertTotalSB.getValue()
    output18 = desertTotalSH.getValue()
    
    return result1,result2,result3,result4,result5,result6,result7,result8,result9,result10,result11,result12,result13,result14,result15,result16,result17,result18,result19,result20,result21,result22,output1,output2,output3,output4,output5,output6,output7,output8,output9,output10,output11,output12,output13,output14,output15,output16,output17,output18

def leftFunctionSJWL(K):
    cargo_BH = []
    cargo_HS = []
    cargo_SB = []
        
    for i in range(K):
        cargo_BH_add = [x + 24 * i for x in cargo_BH_unit]
        cargo_HS_add = [x + 24 * i for x in cargo_HS_unit]
        cargo_SB_add = [x + 24 * i for x in cargo_SB_unit]
        for j in range(N):
            cargo_BH.append(cargo_BH_add[j])
            cargo_HS.append(cargo_HS_add[j])
            cargo_SB.append(cargo_SB_add[j])
    del cargo_BH_add,cargo_HS_add,cargo_SB_add
    BH_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_BH)
    BS_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_BS)
    HB_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_HB)
    HS_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_HS)
    SB_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_SB)
    SH_passengerTimeTable = TimeTableOfPassenger(hours_from_midnight_SH)
    flightTime_BH = passenger_flight_times_BH * K
    flightTime_BS = passenger_flight_times_BS * K
    flightTime_HB = passenger_flight_times_HB * K
    flightTime_HS = passenger_flight_times_HS * K
    flightTime_SB = passenger_flight_times_SB * K
    flightTime_SH = passenger_flight_times_SH * K
    first_flight_BH = min(min(BH_passengerTimeTable),min(cargo_BH))
    last_flight_BH = max(max(BH_passengerTimeTable),max(cargo_BH))
    first_flight_HS = min(min(HS_passengerTimeTable),min(cargo_HS))
    last_flight_HS = max(max(HS_passengerTimeTable),max(cargo_HS))
    first_flight_SB = min(min(SB_passengerTimeTable),min(cargo_SB))
    last_flight_SB = max(max(SB_passengerTimeTable),max(cargo_SB))
    first_flight_BS = min(BS_passengerTimeTable)
    last_flight_BS = max(BS_passengerTimeTable)
    first_flight_SH = min(SH_passengerTimeTable)
    last_flight_SH = max(SH_passengerTimeTable)
    first_flight_HB = min(HB_passengerTimeTable)
    last_flight_HB = max(HB_passengerTimeTable)
    BHcant_transport_passenger = passCantTransCal(BH_passengerTimeTable)
    BScant_transport_passenger = passCantTransCal(BS_passengerTimeTable)
    HBcant_transport_passenger = passCantTransCal(HB_passengerTimeTable)
    HScant_transport_passenger = passCantTransCal(HS_passengerTimeTable)
    SBcant_transport_passenger = passCantTransCal(SB_passengerTimeTable)
    SHcant_transport_passenger = passCantTransCal(SH_passengerTimeTable)
    BHcant_transport_cargo = max(cargo_BH) + 1
    HScant_transport_cargo = max(cargo_HS) + 1
    SBcant_transport_cargo = max(cargo_SB) + 1
    first_BH = process_value(first_flight_BH)
    first_BS = process_value(first_flight_BS)
    first_HB = process_value(first_flight_HB)
    first_HS = process_value(first_flight_HS)
    first_SB = process_value(first_flight_SB)
    first_SH = process_value(first_flight_SH)
    last_BH = process_value(last_flight_BH)
    last_BS = process_value(last_flight_BS)
    last_HB = process_value(last_flight_HB)
    last_HS = process_value(last_flight_HS)
    last_SB = process_value(last_flight_SB)
    last_SH = process_value(last_flight_SH)
    passengerTime_BH = passengerTimeCal(BH_passengerTimeTable)
    passengerTime_BS = passengerTimeCal(BS_passengerTimeTable)
    passengerTime_HB = passengerTimeCal(HB_passengerTimeTable)
    passengerTime_HS = passengerTimeCal(HS_passengerTimeTable)
    passengerTime_SB = passengerTimeCal(SB_passengerTimeTable)
    passengerTime_SH = passengerTimeCal(SH_passengerTimeTable)

    C1 = 0 # C1为未运完的仓储成本，初始值为0
    C2 = 0 # C2为未运完的逾期延迟成本，初始值为0
    C3 = 0 # C3为能运完的逾期延迟成本，初始值为0
    C4 = 0 # C4为能运完的仓储成本，初始值为0
    C5 = 0 # C5为运输成本，初始值为0
    C6 = 0 # C6为丢弃成本，初始值为0
    C7 = 0
    transported_1 = 0
    transported_2 = 0
    cargoUsed = 0
    
    # 进行模型拟合和预测
    forecast_1_4 = SJWL(train['北京→杭州'],K)
    forecast_1_5 = SJWL(train['北京→南京'],K)
    forecast_1_6 = SJWL(train['北京→上海'],K)
    forecast_1_7 = SJWL(train['北京→深圳'],K)
    forecast_1_8 = SJWL(train['北京→香港'],K)
    forecast_2_4 = SJWL(train['潍坊→杭州'],K)
    forecast_2_5 = SJWL(train['潍坊→南京'],K)
    forecast_2_6 = SJWL(train['潍坊→上海'],K)
    forecast_2_7 = SJWL(train['潍坊→深圳'],K)
    forecast_2_8 = SJWL(train['潍坊→香港'],K)
    forecast_3_4 = SJWL(train['沈阳→杭州'],K)
    forecast_3_5 = SJWL(train['沈阳→南京'],K)
    forecast_3_6 = SJWL(train['沈阳→上海'],K)
    forecast_3_7 = SJWL(train['沈阳→深圳'],K)
    forecast_3_8 = SJWL(train['沈阳→香港'],K)
    forecast_4_1 = SJWL(train['杭州→北京'],K)
    forecast_4_2 = SJWL(train['杭州→潍坊'],K)
    forecast_4_3 = SJWL(train['杭州→沈阳'],K)
    forecast_4_7 = SJWL(train['杭州→深圳'],K)
    forecast_4_8 = SJWL(train['杭州→香港'],K)
    forecast_5_1 = SJWL(train['南京→北京'],K)
    forecast_5_2 = SJWL(train['南京→潍坊'],K)
    forecast_5_3 = SJWL(train['南京→沈阳'],K)
    forecast_5_7 = SJWL(train['南京→深圳'],K)
    forecast_5_8 = SJWL(train['南京→香港'],K)
    forecast_6_1 = SJWL(train['上海→北京'],K)
    forecast_6_2 = SJWL(train['上海→潍坊'],K)
    forecast_6_3 = SJWL(train['上海→沈阳'],K)
    forecast_6_7 = SJWL(train['上海→深圳'],K)
    forecast_6_8 = SJWL(train['上海→香港'],K)
    forecast_7_1 = SJWL(train['深圳→北京'],K)
    forecast_7_2 = SJWL(train['深圳→潍坊'],K)
    forecast_7_3 = SJWL(train['深圳→沈阳'],K)
    forecast_7_4 = SJWL(train['深圳→杭州'],K)
    forecast_7_5 = SJWL(train['深圳→南京'],K)
    forecast_7_6 = SJWL(train['深圳→上海'],K)
    forecast_8_1 = SJWL(train['香港→北京'],K)
    forecast_8_2 = SJWL(train['香港→潍坊'],K)
    forecast_8_3 = SJWL(train['香港→沈阳'],K)
    forecast_8_4 = SJWL(train['香港→杭州'],K)
    forecast_8_5 = SJWL(train['香港→南京'],K)
    forecast_8_6 = SJWL(train['香港→上海'],K)
    
    forecast_1_4_K = TimeSplit(forecast_1_4)
    forecast_1_5_K = TimeSplit(forecast_1_5)
    forecast_1_6_K = TimeSplit(forecast_1_6)
    forecast_1_7_K = TimeSplit(forecast_1_7)
    forecast_1_8_K = TimeSplit(forecast_1_8)
    forecast_2_4_K = TimeSplit(forecast_2_4)
    forecast_2_5_K = TimeSplit(forecast_2_5)
    forecast_2_6_K = TimeSplit(forecast_2_6)
    forecast_2_7_K = TimeSplit(forecast_2_7)
    forecast_2_8_K = TimeSplit(forecast_2_8)
    forecast_3_4_K = TimeSplit(forecast_3_4)
    forecast_3_5_K = TimeSplit(forecast_3_5)
    forecast_3_6_K = TimeSplit(forecast_3_6)
    forecast_3_7_K = TimeSplit(forecast_3_7)
    forecast_3_8_K = TimeSplit(forecast_3_8)
    forecast_4_1_K = TimeSplit(forecast_4_1)
    forecast_4_2_K = TimeSplit(forecast_4_2)
    forecast_4_3_K = TimeSplit(forecast_4_3)
    forecast_4_7_K = TimeSplit(forecast_4_7)
    forecast_4_8_K = TimeSplit(forecast_4_8)
    forecast_5_1_K = TimeSplit(forecast_5_1)
    forecast_5_2_K = TimeSplit(forecast_5_2)
    forecast_5_3_K = TimeSplit(forecast_5_3)
    forecast_5_7_K = TimeSplit(forecast_5_7)
    forecast_5_8_K = TimeSplit(forecast_5_8)
    forecast_6_1_K = TimeSplit(forecast_6_1)
    forecast_6_2_K = TimeSplit(forecast_6_2)
    forecast_6_3_K = TimeSplit(forecast_6_3)
    forecast_6_7_K = TimeSplit(forecast_6_7)
    forecast_6_8_K = TimeSplit(forecast_6_8)
    forecast_7_1_K = TimeSplit(forecast_7_1)
    forecast_7_2_K = TimeSplit(forecast_7_2)
    forecast_7_3_K = TimeSplit(forecast_7_3)
    forecast_7_4_K = TimeSplit(forecast_7_4)
    forecast_7_5_K = TimeSplit(forecast_7_5)
    forecast_7_6_K = TimeSplit(forecast_7_6)
    forecast_8_1_K = TimeSplit(forecast_8_1)
    forecast_8_2_K = TimeSplit(forecast_8_2)
    forecast_8_3_K = TimeSplit(forecast_8_3)
    forecast_8_4_K = TimeSplit(forecast_8_4)
    forecast_8_5_K = TimeSplit(forecast_8_5)
    forecast_8_6_K = TimeSplit(forecast_8_6)
    
    forecast_1_4_K[0] += left_to_leave_1_4[-1]
    forecast_1_5_K[0] += left_to_leave_1_5[-1]
    forecast_1_6_K[0] += left_to_leave_1_6[-1]
    forecast_1_7_K[0] += left_to_leave_1_7[-1]
    forecast_1_8_K[0] += left_to_leave_1_8[-1]
    forecast_2_4_K[0] += left_to_leave_2_4[-1]
    forecast_2_5_K[0] += left_to_leave_2_5[-1]
    forecast_2_6_K[0] += left_to_leave_2_6[-1]
    forecast_2_7_K[0] += left_to_leave_2_7[-1]
    forecast_2_8_K[0] += left_to_leave_2_8[-1]
    forecast_3_4_K[0] += left_to_leave_3_4[-1]
    forecast_3_5_K[0] += left_to_leave_3_5[-1]
    forecast_3_6_K[0] += left_to_leave_3_6[-1]
    forecast_3_7_K[0] += left_to_leave_3_7[-1]
    forecast_3_8_K[0] += left_to_leave_3_8[-1]
    forecast_4_1_K[0] += left_to_leave_4_1[-1]
    forecast_4_2_K[0] += left_to_leave_4_2[-1]
    forecast_4_3_K[0] += left_to_leave_4_3[-1]
    forecast_4_7_K[0] += left_to_leave_4_7[-1]
    forecast_4_8_K[0] += left_to_leave_4_8[-1]
    forecast_5_1_K[0] += left_to_leave_5_1[-1]
    forecast_5_2_K[0] += left_to_leave_5_2[-1]
    forecast_5_3_K[0] += left_to_leave_5_3[-1]
    forecast_5_7_K[0] += left_to_leave_5_7[-1]
    forecast_5_8_K[0] += left_to_leave_5_8[-1]
    forecast_6_1_K[0] += left_to_leave_6_1[-1]
    forecast_6_2_K[0] += left_to_leave_6_2[-1]
    forecast_6_3_K[0] += left_to_leave_6_3[-1]
    forecast_6_7_K[0] += left_to_leave_6_7[-1]
    forecast_6_8_K[0] += left_to_leave_6_8[-1]
    forecast_7_1_K[0] += left_to_leave_7_1[-1]
    forecast_7_2_K[0] += left_to_leave_7_2[-1]
    forecast_7_3_K[0] += left_to_leave_7_3[-1]
    forecast_7_4_K[0] += left_to_leave_7_4[-1]
    forecast_7_5_K[0] += left_to_leave_7_5[-1]
    forecast_7_6_K[0] += left_to_leave_7_6[-1]
    forecast_8_1_K[0] += left_to_leave_8_1[-1]
    forecast_8_2_K[0] += left_to_leave_8_2[-1]
    forecast_8_3_K[0] += left_to_leave_8_3[-1]
    forecast_8_4_K[0] += left_to_leave_8_4[-1]
    forecast_8_5_K[0] += left_to_leave_8_5[-1]
    forecast_8_6_K[0] += left_to_leave_8_6[-1]
    
    # 计算时效快递的需求
    TimeSensitive_Req_1_4 = [x * perc1 for x in forecast_1_4_K]
    TimeSensitive_Req_1_5 = [x * perc1 for x in forecast_1_5_K]
    TimeSensitive_Req_1_6 = [x * perc1 for x in forecast_1_6_K]
    TimeSensitive_Req_1_7 = [x * perc1 for x in forecast_1_7_K]
    TimeSensitive_Req_1_8 = [x * perc1 for x in forecast_1_8_K]
    TimeSensitive_Req_2_4 = [x * perc1 for x in forecast_2_4_K]
    TimeSensitive_Req_2_5 = [x * perc1 for x in forecast_2_5_K]
    TimeSensitive_Req_2_6 = [x * perc1 for x in forecast_2_6_K]
    TimeSensitive_Req_2_7 = [x * perc1 for x in forecast_2_7_K]
    TimeSensitive_Req_2_8 = [x * perc1 for x in forecast_2_8_K]
    TimeSensitive_Req_3_4 = [x * perc1 for x in forecast_3_4_K]
    TimeSensitive_Req_3_5 = [x * perc1 for x in forecast_3_5_K]
    TimeSensitive_Req_3_6 = [x * perc1 for x in forecast_3_6_K]
    TimeSensitive_Req_3_7 = [x * perc1 for x in forecast_3_7_K]
    TimeSensitive_Req_3_8 = [x * perc1 for x in forecast_3_8_K]
    TimeSensitive_Req_4_1 = [x * perc1 for x in forecast_4_1_K]
    TimeSensitive_Req_4_2 = [x * perc1 for x in forecast_4_2_K]
    TimeSensitive_Req_4_3 = [x * perc1 for x in forecast_4_3_K]
    TimeSensitive_Req_4_7 = [x * perc1 for x in forecast_4_7_K]
    TimeSensitive_Req_4_8 = [x * perc1 for x in forecast_4_8_K]
    TimeSensitive_Req_5_1 = [x * perc1 for x in forecast_5_1_K]
    TimeSensitive_Req_5_2 = [x * perc1 for x in forecast_5_2_K]
    TimeSensitive_Req_5_3 = [x * perc1 for x in forecast_5_3_K]
    TimeSensitive_Req_5_7 = [x * perc1 for x in forecast_5_7_K]
    TimeSensitive_Req_5_8 = [x * perc1 for x in forecast_5_8_K]
    TimeSensitive_Req_6_1 = [x * perc1 for x in forecast_6_1_K]
    TimeSensitive_Req_6_2 = [x * perc1 for x in forecast_6_2_K]
    TimeSensitive_Req_6_3 = [x * perc1 for x in forecast_6_3_K]
    TimeSensitive_Req_6_7 = [x * perc1 for x in forecast_6_7_K]
    TimeSensitive_Req_6_8 = [x * perc1 for x in forecast_6_8_K]
    TimeSensitive_Req_7_1 = [x * perc1 for x in forecast_7_1_K]
    TimeSensitive_Req_7_2 = [x * perc1 for x in forecast_7_2_K]
    TimeSensitive_Req_7_3 = [x * perc1 for x in forecast_7_3_K]
    TimeSensitive_Req_7_4 = [x * perc1 for x in forecast_7_4_K]
    TimeSensitive_Req_7_5 = [x * perc1 for x in forecast_7_5_K]
    TimeSensitive_Req_7_6 = [x * perc1 for x in forecast_7_6_K]
    TimeSensitive_Req_8_1 = [x * perc1 for x in forecast_8_1_K]
    TimeSensitive_Req_8_2 = [x * perc1 for x in forecast_8_2_K]
    TimeSensitive_Req_8_3 = [x * perc1 for x in forecast_8_3_K]
    TimeSensitive_Req_8_4 = [x * perc1 for x in forecast_8_4_K]
    TimeSensitive_Req_8_5 = [x * perc1 for x in forecast_8_5_K]
    TimeSensitive_Req_8_6 = [x * perc1 for x in forecast_8_6_K]
    
    # 计算经济快递的需求
    Economy_Req_1_4 = [x * perc2 for x in forecast_1_4_K]
    Economy_Req_1_5 = [x * perc2 for x in forecast_1_5_K]
    Economy_Req_1_6 = [x * perc2 for x in forecast_1_6_K]
    Economy_Req_1_7 = [x * perc2 for x in forecast_1_7_K]
    Economy_Req_1_8 = [x * perc2 for x in forecast_1_8_K]
    Economy_Req_2_4 = [x * perc2 for x in forecast_2_4_K]
    Economy_Req_2_5 = [x * perc2 for x in forecast_2_5_K]
    Economy_Req_2_6 = [x * perc2 for x in forecast_2_6_K]
    Economy_Req_2_7 = [x * perc2 for x in forecast_2_7_K]
    Economy_Req_2_8 = [x * perc2 for x in forecast_2_8_K]
    Economy_Req_3_4 = [x * perc2 for x in forecast_3_4_K]
    Economy_Req_3_5 = [x * perc2 for x in forecast_3_5_K]
    Economy_Req_3_6 = [x * perc2 for x in forecast_3_6_K]
    Economy_Req_3_7 = [x * perc2 for x in forecast_3_7_K]
    Economy_Req_3_8 = [x * perc2 for x in forecast_3_8_K]
    Economy_Req_4_1 = [x * perc2 for x in forecast_4_1_K]
    Economy_Req_4_2 = [x * perc2 for x in forecast_4_2_K]
    Economy_Req_4_3 = [x * perc2 for x in forecast_4_3_K]
    Economy_Req_4_7 = [x * perc2 for x in forecast_4_7_K]
    Economy_Req_4_8 = [x * perc2 for x in forecast_4_8_K]
    Economy_Req_5_1 = [x * perc2 for x in forecast_5_1_K]
    Economy_Req_5_2 = [x * perc2 for x in forecast_5_2_K]
    Economy_Req_5_3 = [x * perc2 for x in forecast_5_3_K]
    Economy_Req_5_7 = [x * perc2 for x in forecast_5_7_K]
    Economy_Req_5_8 = [x * perc2 for x in forecast_5_8_K]
    Economy_Req_6_1 = [x * perc2 for x in forecast_6_1_K]
    Economy_Req_6_2 = [x * perc2 for x in forecast_6_2_K]
    Economy_Req_6_3 = [x * perc2 for x in forecast_6_3_K]
    Economy_Req_6_7 = [x * perc2 for x in forecast_6_7_K]
    Economy_Req_6_8 = [x * perc2 for x in forecast_6_8_K]
    Economy_Req_7_1 = [x * perc2 for x in forecast_7_1_K]
    Economy_Req_7_2 = [x * perc2 for x in forecast_7_2_K]
    Economy_Req_7_3 = [x * perc2 for x in forecast_7_3_K]
    Economy_Req_7_4 = [x * perc2 for x in forecast_7_4_K]
    Economy_Req_7_5 = [x * perc2 for x in forecast_7_5_K]
    Economy_Req_7_6 = [x * perc2 for x in forecast_7_6_K]
    Economy_Req_8_1 = [x * perc2 for x in forecast_8_1_K]
    Economy_Req_8_2 = [x * perc2 for x in forecast_8_2_K]
    Economy_Req_8_3 = [x * perc2 for x in forecast_8_3_K]
    Economy_Req_8_4 = [x * perc2 for x in forecast_8_4_K]
    Economy_Req_8_5 = [x * perc2 for x in forecast_8_5_K]
    Economy_Req_8_6 = [x * perc2 for x in forecast_8_6_K]
    
    # 主要计算模型
    m = gp.Model()
    m.Params.OutputFlag = 0
    m.Params.MIPGap = 0.005
    
    x_1_4 = {}
    x_1_5 = {}
    x_1_6 = {}
    x_1_7 = {}
    x_1_8 = {}
    x_2_4 = {}
    x_2_5 = {}
    x_2_6 = {}
    x_2_7 = {}
    x_2_8 = {}
    x_3_4 = {}
    x_3_5 = {}
    x_3_6 = {}
    x_3_7 = {}
    x_3_8 = {}
    x_4_1 = {}
    x_4_2 = {}
    x_4_3 = {}
    x_4_7 = {}
    x_4_8 = {}
    x_5_1 = {}
    x_5_2 = {}
    x_5_3 = {}
    x_5_7 = {}
    x_5_8 = {}
    x_6_1 = {}
    x_6_2 = {}
    x_6_3 = {}
    x_6_7 = {}
    x_6_8 = {}
    x_7_1 = {}
    x_7_2 = {}
    x_7_3 = {}
    x_7_4 = {}
    x_7_5 = {}
    x_7_6 = {}
    x_8_1 = {}
    x_8_2 = {}
    x_8_3 = {}
    x_8_4 = {}
    x_8_5 = {}
    x_8_6 = {}
    
    y_1_4 = {}
    y_1_5 = {}
    y_1_6 = {}
    y_1_7 = {}
    y_1_8 = {}
    y_2_4 = {}
    y_2_5 = {}
    y_2_6 = {}
    y_2_7 = {}
    y_2_8 = {}
    y_3_4 = {}
    y_3_5 = {}
    y_3_6 = {}
    y_3_7 = {}
    y_3_8 = {}
    y_4_1 = {}
    y_4_2 = {}
    y_4_3 = {}
    y_4_7 = {}
    y_4_8 = {}
    y_5_1 = {}
    y_5_2 = {}
    y_5_3 = {}
    y_5_7 = {}
    y_5_8 = {}
    y_6_1 = {}
    y_6_2 = {}
    y_6_3 = {}
    y_6_7 = {}
    y_6_8 = {}
    y_7_1 = {}
    y_7_2 = {}
    y_7_3 = {}
    y_7_4 = {}
    y_7_5 = {}
    y_7_6 = {}
    y_8_1 = {}
    y_8_2 = {}
    y_8_3 = {}
    y_8_4 = {}
    y_8_5 = {}
    y_8_6 = {}
    
    for w in range(1,3):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                x_1_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_1_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_1_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_2_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_2_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_2_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_3_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_3_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_3_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                x_1_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_1_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_2_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_2_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_3_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_3_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                x_4_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_4_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_4_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_5_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_5_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_5_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_6_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_6_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_6_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                x_4_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_4_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_5_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_5_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_6_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_6_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                x_7_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_7_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_7_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                x_7_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_7_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_7_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                x_8_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                
    for w in range(1,3):
        for j in range(N*K):
            for i in range(cargo_BH[j]):
                y_1_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_1_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_1_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_1_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_1_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_2_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_2_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_2_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_2_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_2_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_3_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_3_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_3_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_3_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_3_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
            for i in range(cargo_HS[j]):
                y_4_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_4_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_4_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_5_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_5_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_5_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_6_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_6_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_6_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_4_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_4_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_5_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_5_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_6_7[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_6_8[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
            for i in range(cargo_SB[j]):
                y_7_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_7_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_7_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_1[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_2[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_3[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_7_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_7_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_7_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_4[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_5[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                y_8_6[i, j, w] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                
    # 客机容量限制约束
    for j in range(len(passengerTime_BH)):
        cal1_BH = 0
        cal1_BH += gp.quicksum(x_1_4[i,j,w]+x_1_5[i,j,w]+x_1_6[i,j,w]+x_2_4[i,j,w]+x_2_5[i,j,w]+x_2_6[i,j,w]+x_3_4[i,j,w]+x_3_5[i,j,w]+x_3_6[i,j,w] for w in range(1,3) for i in range(passengerTime_BH[j]))
        m.addConstr(cal1_BH <= q)
    for j in range(len(passengerTime_BS)):
        cal1_BS = 0
        cal1_BS += gp.quicksum(x_1_7[i,j,w]+x_1_8[i,j,w]+x_2_7[i,j,w]+x_2_8[i,j,w]+x_3_7[i,j,w]+x_3_8[i,j,w] for w in range(1,3) for i in range(passengerTime_BS[j]))
        m.addConstr(cal1_BS <= q)
    for j in range(len(passengerTime_HB)):
        cal1_HB = 0
        cal1_HB += gp.quicksum(x_4_1[i,j,w]+x_4_2[i,j,w]+x_4_3[i,j,w]+x_5_1[i,j,w]+x_5_2[i,j,w]+x_5_3[i,j,w]+x_6_1[i,j,w]+x_6_2[i,j,w]+x_6_3[i,j,w] for w in range(1,3) for i in range(passengerTime_HB[j]))
        m.addConstr(cal1_HB <= q)
    for j in range(len(passengerTime_HS)):
        cal1_HS = 0
        cal1_HS += gp.quicksum(x_4_7[i,j,w]+x_4_8[i,j,w]+x_5_7[i,j,w]+x_5_8[i,j,w]+x_6_7[i,j,w]+x_6_8[i,j,w] for w in range(1,3) for i in range(passengerTime_HS[j]))
        m.addConstr(cal1_HS <= q)
    for j in range(len(passengerTime_SB)):
        cal1_SB = 0
        cal1_SB += gp.quicksum(x_7_1[i,j,w]+x_7_2[i,j,w]+x_7_3[i,j,w]+x_8_1[i,j,w]+x_8_2[i,j,w]+x_8_3[i,j,w] for w in range(1,3) for i in range(passengerTime_SB[j]))
        m.addConstr(cal1_SB <= q)
    for j in range(len(passengerTime_SH)):
        cal1_SH = 0
        cal1_SH += gp.quicksum(x_7_4[i,j,w]+x_7_5[i,j,w]+x_7_6[i,j,w]+x_8_4[i,j,w]+x_8_5[i,j,w]+x_8_6[i,j,w] for w in range(1,3) for i in range(passengerTime_SH[j]))
        m.addConstr(cal1_SH <= q)
        
    # 货机容量约束
    for j in range(N*K):
        cal2_BH = 0
        cal2_BH += (gp.quicksum((y_1_4[i,j,w]+y_1_5[i,j,w]+y_1_6[i,j,w]+y_2_4[i,j,w]+y_2_5[i,j,w]+y_2_6[i,j,w]+y_3_4[i,j,w]+y_3_5[i,j,w]+y_3_6[i,j,w]+y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w]) for w in range(1,3) for i in range(cargo_BH[j]))+gp.quicksum(y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w] for w in range(1,3) for i in range(cargo_SB[j])))
        m.addConstr(cal2_BH <= Q)
    for j in range(N*K):
        cal2_HS = 0
        cal2_HS += (gp.quicksum((y_4_7[i,j,w]+y_4_8[i,j,w]+y_5_7[i,j,w]+y_5_8[i,j,w]+y_6_7[i,j,w]+y_6_8[i,j,w]+y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w]) for w in range(1,3) for i in range(cargo_HS[j]))+gp.quicksum(y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w] for w in range(1,3) for i in range(cargo_BH[j])))
        m.addConstr(cal2_HS <= Q)
    for j in range(N*K):
        cal2_SB = 0
        cal2_SB += (gp.quicksum((y_7_1[i,j,w]+y_7_2[i,j,w]+y_7_3[i,j,w]+y_8_1[i,j,w]+y_8_2[i,j,w]+y_8_3[i,j,w]+y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w]) for w in range(1,3) for i in range(cargo_SB[j]))+gp.quicksum(y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w] for w in range(1,3) for i in range(cargo_HS[j])))
        m.addConstr(cal2_SB <= Q)
        
    # 在能运完的货物中，被运走的货物量最多达到这个时间段的订单需求量
    # 能运完的货物的仓储成本和逾期成本及被丢弃货物的成本计算
    for w in range(1,3):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                C3 += C2per[w] * (x_1_4[i,j,w]*max(BH_passengerTimeTable[j]+t1+t4-i-T_1[w]+flightTime_BH[j],0)+x_1_5[i,j,w]*max(BH_passengerTimeTable[j]+t1+t5-i-T_1[w]+flightTime_BH[j],0)+x_1_6[i,j,w]*max(BH_passengerTimeTable[j]+t1+t6-i-T_1[w]+flightTime_BH[j],0)+x_2_4[i,j,w]*max(BH_passengerTimeTable[j]+t2+t4-i-T_1[w]+flightTime_BH[j],0)+x_2_5[i,j,w]*max(BH_passengerTimeTable[j]+t2+t5-i-T_1[w]+flightTime_BH[j],0)+x_2_6[i,j,w]*max(BH_passengerTimeTable[j]+t2+t6-i-T_1[w]+flightTime_BH[j],0)+x_3_4[i,j,w]*max(BH_passengerTimeTable[j]+t3+t4-i-T_1[w]+flightTime_BH[j],0)+x_3_5[i,j,w]*max(BH_passengerTimeTable[j]+t3+t5-i-T_1[w]+flightTime_BH[j],0)+x_3_6[i,j,w]*max(BH_passengerTimeTable[j]+t3+t6-i-T_1[w]+flightTime_BH[j],0))
                C4 += c1 * ((x_1_4[i,j,w]+x_1_5[i,j,w]+x_1_6[i,j,w]+x_2_4[i,j,w]+x_2_5[i,j,w]+x_2_6[i,j,w]+x_3_4[i,j,w]+x_3_5[i,j,w]+x_3_6[i,j,w]) * (BH_passengerTimeTable[j] - i))
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                C3 += C2per[w] * (x_1_7[i,j,w]*max(BS_passengerTimeTable[j]+t1+t7-i-T_1[w]+flightTime_BS[j],0)+x_1_8[i,j,w]*max(BS_passengerTimeTable[j]+t1+t8-i-T_1[w]+flightTime_BS[j],0)+x_2_7[i,j,w]*max(BS_passengerTimeTable[j]+t2+t7-i-T_1[w]+flightTime_BS[j],0)+x_2_8[i,j,w]*max(BS_passengerTimeTable[j]+t2+t8-i-T_1[w]+flightTime_BS[j],0)+x_3_7[i,j,w]*max(BS_passengerTimeTable[j]+t3+t7-i-T_1[w]+flightTime_BS[j],0)+x_3_8[i,j,w]*max(BS_passengerTimeTable[j]+t3+t8-i-T_1[w]+flightTime_BS[j],0))
                C4 += c1 * ((x_1_7[i,j,w]+x_1_8[i,j,w]+x_2_7[i,j,w]+x_2_8[i,j,w]+x_3_7[i,j,w]+x_3_8[i,j,w]) * (BS_passengerTimeTable[j] - i))
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                C3 += C2per[w] * (x_4_1[i,j,w]*max(HB_passengerTimeTable[j]+t4+t1-i-T_1[w]+flightTime_HB[j],0)+x_4_2[i,j,w]*max(HB_passengerTimeTable[j]+t4+t2-i-T_1[w]+flightTime_HB[j],0)+x_4_3[i,j,w]*max(HB_passengerTimeTable[j]+t4+t3-i-T_1[w]+flightTime_HB[j],0)+x_5_1[i,j,w]*max(HB_passengerTimeTable[j]+t5+t1-i-T_1[w]+flightTime_HB[j],0)+x_5_2[i,j,w]*max(HB_passengerTimeTable[j]+t5+t2-i-T_1[w]+flightTime_HB[j],0)+x_5_3[i,j,w]*max(HB_passengerTimeTable[j]+t5+t3-i-T_1[w]+flightTime_HB[j],0)+x_6_1[i,j,w]*max(HB_passengerTimeTable[j]+t6+t1-i-T_1[w]+flightTime_HB[j],0)+x_6_2[i,j,w]*max(HB_passengerTimeTable[j]+t6+t2-i-T_1[w]+flightTime_HB[j],0)+x_6_3[i,j,w]*max(HB_passengerTimeTable[j]+t6+t3-i-T_1[w]+flightTime_HB[j],0))
                C4 += c1 * ((x_4_1[i,j,w]+x_4_2[i,j,w]+x_4_3[i,j,w]+x_5_1[i,j,w]+x_5_2[i,j,w]+x_5_3[i,j,w]+x_6_1[i,j,w]+x_6_2[i,j,w]+x_6_3[i,j,w]) * (HB_passengerTimeTable[j] - i))
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                C3 += C2per[w] * (x_4_7[i,j,w]*max(HS_passengerTimeTable[j]+t4+t7-i-T_1[w]+flightTime_HS[j],0)+x_4_8[i,j,w]*max(HS_passengerTimeTable[j]+t4+t8-i-T_1[w]+flightTime_HS[j],0)+x_5_7[i,j,w]*max(HS_passengerTimeTable[j]+t5+t7-i-T_1[w]+flightTime_HS[j],0)+x_5_8[i,j,w]*max(HS_passengerTimeTable[j]+t5+t8-i-T_1[w]+flightTime_HS[j],0)+x_6_7[i,j,w]*max(HS_passengerTimeTable[j]+t6+t7-i-T_1[w]+flightTime_HS[j],0)+x_6_8[i,j,w]*max(HS_passengerTimeTable[j]+t6+t8-i-T_1[w]+flightTime_HS[j],0))
                C4 += c1 * ((x_4_7[i,j,w]+x_4_8[i,j,w]+x_5_7[i,j,w]+x_5_8[i,j,w]+x_6_7[i,j,w]+x_6_8[i,j,w]) * (HS_passengerTimeTable[j] - i))
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                C3 += C2per[w] * (x_7_1[i,j,w]*max(SB_passengerTimeTable[j]+t7+t1-i-T_1[w]+flightTime_SB[j],0)+x_7_2[i,j,w]*max(SB_passengerTimeTable[j]+t7+t2-i-T_1[w]+flightTime_SB[j],0)+x_7_3[i,j,w]*max(SB_passengerTimeTable[j]+t7+t3-i-T_1[w]+flightTime_SB[j],0)+x_8_1[i,j,w]*max(SB_passengerTimeTable[j]+t8+t1-i-T_1[w]+flightTime_SB[j],0)+x_8_2[i,j,w]*max(SB_passengerTimeTable[j]+t8+t2-i-T_1[w]+flightTime_SB[j],0)+x_8_3[i,j,w]*max(SB_passengerTimeTable[j]+t8+t3-i-T_1[w]+flightTime_SB[j],0))
                C4 += c1 * ((x_7_1[i,j,w]+x_7_2[i,j,w]+x_7_3[i,j,w]+x_8_1[i,j,w]+x_8_2[i,j,w]+x_8_3[i,j,w]) * (SB_passengerTimeTable[j] - i))
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                C3 += C2per[w] * (x_7_4[i,j,w]*max(SH_passengerTimeTable[j]+t7+t4-i-T_1[w]+flightTime_SH[j],0)+x_7_5[i,j,w]*max(SH_passengerTimeTable[j]+t7+t5-i-T_1[w]+flightTime_SH[j],0)+x_7_6[i,j,w]*max(SH_passengerTimeTable[j]+t7+t6-i-T_1[w]+flightTime_SH[j],0)+x_8_4[i,j,w]*max(SH_passengerTimeTable[j]+t8+t4-i-T_1[w]+flightTime_SH[j],0)+x_8_5[i,j,w]*max(SH_passengerTimeTable[j]+t8+t5-i-T_1[w]+flightTime_SH[j],0)+x_8_6[i,j,w]*max(SH_passengerTimeTable[j]+t8+t6-i-T_1[w]+flightTime_SH[j],0))
                C4 += c1 * ((x_7_4[i,j,w]+x_7_5[i,j,w]+x_7_6[i,j,w]+x_8_4[i,j,w]+x_8_5[i,j,w]+x_8_6[i,j,w]) * (SH_passengerTimeTable[j] - i))
        for j in range(N*K):
            for i in range(cargo_BH[j]):
                C3 += C2per[w] * (y_1_4[i,j,w]*max(cargo_BH[j]+t1+t4-i-T_1[w]+Tcargo_1,0)+y_1_5[i,j,w]*max(cargo_BH[j]+t1+t5-i-T_1[w]+Tcargo_1,0)+y_1_6[i,j,w]*max(cargo_BH[j]+t1+t6-i-T_1[w]+Tcargo_1,0)+y_2_4[i,j,w]*max(cargo_BH[j]+t2+t4-i-T_1[w]+Tcargo_1,0)+y_2_5[i,j,w]*max(cargo_BH[j]+t2+t5-i-T_1[w]+Tcargo_1,0)+y_2_6[i,j,w]*max(cargo_BH[j]+t2+t6-i-T_1[w]+Tcargo_1,0))
                C3 += C2per[w] * (y_1_7[i,j,w]*max(cargo_HS[j]+t1+t7-i-T_1[w]+Tcargo_2,0)+y_1_8[i,j,w]*max(cargo_HS[j]+t1+t8-i-T_1[w]+Tcargo_2,0)+y_2_7[i,j,w]*max(cargo_HS[j]+t2+t7-i-T_1[w]+Tcargo_2,0)+y_2_8[i,j,w]*max(cargo_HS[j]+t2+t8-i-T_1[w]+Tcargo_2,0)+y_3_7[i,j,w]*max(cargo_HS[j]+t3+t7-i-T_1[w]+Tcargo_2,0)+y_3_8[i,j,w]*max(cargo_HS[j]+t3+t8-i-T_1[w]+Tcargo_2,0))
                C4 += c1 * ((y_1_4[i,j,w]+y_1_5[i,j,w]+y_1_6[i,j,w]+y_2_4[i,j,w]+y_2_5[i,j,w]+y_2_6[i,j,w]+y_3_4[i,j,w]+y_3_5[i,j,w]+y_3_6[i,j,w]+y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w]) * (cargo_BH[j] - i))
            for i in range(cargo_HS[j]):
                C3 += C2per[w] * (y_4_1[i,j,w]*max(cargo_SB[j]+t4+t1-i-T_1[w]+Tcargo_3,0)+y_4_2[i,j,w]*max(cargo_SB[j]+t4+t2-i-T_1[w]+Tcargo_3,0)+y_4_3[i,j,w]*max(cargo_SB[j]+t4+t3-i-T_1[w]+Tcargo_3,0)+y_5_1[i,j,w]*max(cargo_HS[j]+t5+t1-i-T_1[w]+Tcargo_3,0)+y_5_2[i,j,w]*max(cargo_SB[j]+t5+t2-i-T_1[w]+Tcargo_3,0)+y_5_3[i,j,w]*max(cargo_SB[j]+t5+t3-i-T_1[w]+Tcargo_3,0))
                C3 += C2per[w] * (y_4_7[i,j,w]*max(cargo_HS[j]+t4+t7-i-T_1[w]+Tcargo_2,0)+y_4_8[i,j,w]*max(cargo_HS[j]+t4+t8-i-T_1[w]+Tcargo_2,0)+y_5_7[i,j,w]*max(cargo_HS[j]+t5+t7-i-T_1[w]+Tcargo_2,0)+y_5_8[i,j,w]*max(cargo_HS[j]+t5+t8-i-T_1[w]+Tcargo_2,0))
                C4 += c1 * ((y_4_7[i,j,w]+y_4_8[i,j,w]+y_5_7[i,j,w]+y_5_8[i,j,w]+y_6_7[i,j,w]+y_6_8[i,j,w]+y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w]) * (cargo_HS[j] - i))
            for i in range(cargo_SB[j]):
                C3 += C2per[w] * (y_7_1[i,j,w]*max(cargo_SB[j]+t7+t1-i-T_1[w]+Tcargo_3,0)+y_7_2[i,j,w]*max(cargo_SB[j]+t7+t2-i-T_1[w]+Tcargo_3,0)+y_7_3[i,j,w]*max(cargo_SB[j]+t7+t3-i-T_1[w]+Tcargo_3,0)+y_8_1[i,j,w]*max(cargo_SB[j]+t8+t1-i-T_1[w]+Tcargo_3,0)+y_8_2[i,j,w]*max(cargo_SB[j]+t8+t2-i-T_1[w]+Tcargo_3,0)+y_8_3[i,j,w]*max(cargo_SB[j]+t8+t3-i-T_1[w]+Tcargo_3,0))
                C3 += C2per[w] * (y_7_4[i,j,w]*max(cargo_BH[j]+t7+t4-i-T_1[w]+Tcargo_1,0)+y_7_5[i,j,w]*max(cargo_BH[j]+t7+t5-i-T_1[w]+Tcargo_1,0)+y_7_6[i,j,w]*max(cargo_BH[j]+t7+t6-i-T_1[w]+Tcargo_1,0)+y_8_4[i,j,w]*max(cargo_BH[j]+t8+t4-i-T_1[w]+Tcargo_1,0)+y_8_5[i,j,w]*max(cargo_BH[j]+t8+t5-i-T_1[w]+Tcargo_1,0)+y_8_6[i,j,w]*max(cargo_BH[j]+t8+t6-i-T_1[w]+Tcargo_1,0))
                C4 += c1 * ((y_7_1[i,j,w]+y_7_2[i,j,w]+y_7_3[i,j,w]+y_8_1[i,j,w]+y_8_2[i,j,w]+y_8_3[i,j,w]+y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w]) * (cargo_SB[j] - i))
                
    TimeSensitive_Req_BH = [x1+x2+x3+x4+x5+x6+x7+x8+x9 for x1,x2,x3,x4,x5,x6,x7,x8,x9 in zip(TimeSensitive_Req_1_4,TimeSensitive_Req_1_5,TimeSensitive_Req_1_6,TimeSensitive_Req_2_4,TimeSensitive_Req_2_5,TimeSensitive_Req_2_6,TimeSensitive_Req_3_4,TimeSensitive_Req_3_5,TimeSensitive_Req_3_6)]
    TimeSensitive_Req_BS = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(TimeSensitive_Req_1_7,TimeSensitive_Req_1_8,TimeSensitive_Req_2_7,TimeSensitive_Req_2_8,TimeSensitive_Req_3_7,TimeSensitive_Req_3_8)]
    TimeSensitive_Req_HB = [x1+x2+x3+x4+x5+x6+x7+x8+x9 for x1,x2,x3,x4,x5,x6,x7,x8,x9 in zip(TimeSensitive_Req_4_1,TimeSensitive_Req_4_2,TimeSensitive_Req_4_3,TimeSensitive_Req_5_1,TimeSensitive_Req_5_2,TimeSensitive_Req_5_3,TimeSensitive_Req_6_1,TimeSensitive_Req_6_2,TimeSensitive_Req_6_3)]
    TimeSensitive_Req_HS = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(TimeSensitive_Req_4_7,TimeSensitive_Req_4_8,TimeSensitive_Req_5_7,TimeSensitive_Req_5_8,TimeSensitive_Req_6_7,TimeSensitive_Req_6_8)]
    TimeSensitive_Req_SB = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(TimeSensitive_Req_7_1,TimeSensitive_Req_7_2,TimeSensitive_Req_7_3,TimeSensitive_Req_8_1,TimeSensitive_Req_8_2,TimeSensitive_Req_8_3)]
    TimeSensitive_Req_SH = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(TimeSensitive_Req_7_4,TimeSensitive_Req_7_5,TimeSensitive_Req_7_6,TimeSensitive_Req_8_4,TimeSensitive_Req_8_5,TimeSensitive_Req_8_6)]
    Economy_Req_BH = [x1+x2+x3+x4+x5+x6+x7+x8+x9 for x1,x2,x3,x4,x5,x6,x7,x8,x9 in zip(Economy_Req_1_4,Economy_Req_1_5,Economy_Req_1_6,Economy_Req_2_4,Economy_Req_2_5,Economy_Req_2_6,Economy_Req_3_4,Economy_Req_3_5,Economy_Req_3_6)]
    Economy_Req_BS = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(Economy_Req_1_7,Economy_Req_1_8,Economy_Req_2_7,Economy_Req_2_8,Economy_Req_3_7,Economy_Req_3_8)]
    Economy_Req_HB = [x1+x2+x3+x4+x5+x6+x7+x8+x9 for x1,x2,x3,x4,x5,x6,x7,x8,x9 in zip(Economy_Req_4_1,Economy_Req_4_2,Economy_Req_4_3,Economy_Req_5_1,Economy_Req_5_2,Economy_Req_5_3,Economy_Req_6_1,Economy_Req_6_2,Economy_Req_6_3)]
    Economy_Req_HS = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(Economy_Req_4_7,Economy_Req_4_8,Economy_Req_5_7,Economy_Req_5_8,Economy_Req_6_7,Economy_Req_6_8)]
    Economy_Req_SB = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(Economy_Req_7_1,Economy_Req_7_2,Economy_Req_7_3,Economy_Req_8_1,Economy_Req_8_2,Economy_Req_8_3)]
    Economy_Req_SH = [x1+x2+x3+x4+x5+x6 for x1,x2,x3,x4,x5,x6 in zip(Economy_Req_7_4,Economy_Req_7_5,Economy_Req_7_6,Economy_Req_8_4,Economy_Req_8_5,Economy_Req_8_6)]
    forecast_BH_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_BH,Economy_Req_BH)]
    forecast_BS_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_BS,Economy_Req_BS)]
    forecast_HB_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_HB,Economy_Req_HB)]
    forecast_HS_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_HS,Economy_Req_HS)]
    forecast_SB_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_SB,Economy_Req_SB)]
    forecast_SH_K = [x1+x2 for x1,x2 in zip(TimeSensitive_Req_SH,Economy_Req_SH)]
    passengerTotalBH = 0
    cargoTotalBH = 0
    passengerTotalBS = 0
    cargoTotalBS = 0
    passengerTotalHB = 0
    cargoTotalHB = 0
    passengerTotalHS = 0
    cargoTotalHS = 0
    passengerTotalSB = 0
    cargoTotalSB = 0
    passengerTotalSH = 0
    cargoTotalSH = 0
    
    for k in range(last_BH):
        transOut1 = 0
        transOut2 = 0
        transOut1_1_4 = 0
        transOut1_1_5 = 0
        transOut1_1_6 = 0
        transOut2_1_4 = 0
        transOut2_1_5 = 0
        transOut2_1_6 = 0
        transOut1_2_4 = 0
        transOut1_2_5 = 0
        transOut1_2_6 = 0
        transOut2_2_4 = 0
        transOut2_2_5 = 0
        transOut2_2_6 = 0
        transOut1_3_4 = 0
        transOut1_3_5 = 0
        transOut1_3_6 = 0
        transOut2_3_4 = 0
        transOut2_3_5 = 0
        transOut2_3_6 = 0
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                if i == k:
                    transOut1_1_4 += x_1_4[i,j,1]
                    transOut2_1_4 += x_1_4[i,j,2]
                    transOut1_1_5 += x_1_5[i,j,1]
                    transOut2_1_5 += x_1_5[i,j,2]
                    transOut1_1_6 += x_1_6[i,j,1]
                    transOut2_1_6 += x_1_6[i,j,2]
                    transOut1_2_4 += x_2_4[i,j,1]
                    transOut2_2_4 += x_2_4[i,j,2]
                    transOut1_2_5 += x_2_5[i,j,1]
                    transOut2_2_5 += x_2_5[i,j,2]
                    transOut1_2_6 += x_2_6[i,j,1]
                    transOut2_2_6 += x_2_6[i,j,2]
                    transOut1_3_4 += x_3_4[i,j,1]
                    transOut2_3_4 += x_3_4[i,j,2]
                    transOut1_3_5 += x_3_5[i,j,1]
                    transOut2_3_5 += x_3_5[i,j,2]
                    transOut1_3_6 += x_3_6[i,j,1]
                    transOut2_3_6 += x_3_6[i,j,2]
                    transOut1 += (x_1_4[i,j,1]+x_1_5[i,j,1]+x_1_6[i,j,1]+x_2_4[i,j,1]+x_2_5[i,j,1]+x_2_6[i,j,1]+x_3_4[i,j,1]+x_3_5[i,j,1]+x_3_6[i,j,1])
                    transOut2 += (x_1_4[i,j,2]+x_1_5[i,j,2]+x_1_6[i,j,2]+x_2_4[i,j,2]+x_2_5[i,j,2]+x_2_6[i,j,2]+x_3_4[i,j,2]+x_3_5[i,j,2]+x_3_6[i,j,2])
                    passengerTotalBH += (x_1_4[i,j,1]+x_1_5[i,j,1]+x_1_6[i,j,1]+x_2_4[i,j,1]+x_2_5[i,j,1]+x_2_6[i,j,1]+x_3_4[i,j,1]+x_3_5[i,j,1]+x_3_6[i,j,1]+x_1_4[i,j,2]+x_1_5[i,j,2]+x_1_6[i,j,2]+x_2_4[i,j,2]+x_2_5[i,j,2]+x_2_6[i,j,2]+x_3_4[i,j,2]+x_3_5[i,j,2]+x_3_6[i,j,2])          
        for j in range(N*K):
            for i in range(cargo_BH[j]):
                if i == k:
                    transOut1_1_4 += y_1_4[i,j,1]
                    transOut2_1_4 += y_1_4[i,j,2]
                    transOut1_1_5 += y_1_5[i,j,1]
                    transOut2_1_5 += y_1_5[i,j,2]
                    transOut1_1_6 += y_1_6[i,j,1]
                    transOut2_1_6 += y_1_6[i,j,2]
                    transOut1_2_4 += y_2_4[i,j,1]
                    transOut2_2_4 += y_2_4[i,j,2]
                    transOut1_2_5 += y_2_5[i,j,1]
                    transOut2_2_5 += y_2_5[i,j,2]
                    transOut1_2_6 += y_2_6[i,j,1]
                    transOut2_2_6 += y_2_6[i,j,2]
                    transOut1_3_4 += y_3_4[i,j,1]
                    transOut2_3_4 += y_3_4[i,j,2]
                    transOut1_3_5 += y_3_5[i,j,1]
                    transOut2_3_5 += y_3_5[i,j,2]
                    transOut1_3_6 += y_3_6[i,j,1]
                    transOut2_3_6 += y_3_6[i,j,2]
                    transOut1 += (y_1_4[i,j,1]+y_1_5[i,j,1]+y_1_6[i,j,1]+y_2_4[i,j,1]+y_2_5[i,j,1]+y_2_6[i,j,1]+y_3_4[i,j,1]+y_3_5[i,j,1]+y_3_6[i,j,1])
                    transOut2 += (y_1_4[i,j,2]+y_1_5[i,j,2]+y_1_6[i,j,2]+y_2_4[i,j,2]+y_2_5[i,j,2]+y_2_6[i,j,2]+y_3_4[i,j,2]+y_3_5[i,j,2]+y_3_6[i,j,2])
                    cargoTotalBH += (y_1_4[i,j,1]+y_1_5[i,j,1]+y_1_6[i,j,1]+y_2_4[i,j,1]+y_2_5[i,j,1]+y_2_6[i,j,1]+y_3_4[i,j,1]+y_3_5[i,j,1]+y_3_6[i,j,1]+y_1_4[i,j,2]+y_1_5[i,j,2]+y_1_6[i,j,2]+y_2_4[i,j,2]+y_2_5[i,j,2]+y_2_6[i,j,2]+y_3_4[i,j,2]+y_3_5[i,j,2]+y_3_6[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_1_4 <= TimeSensitive_Req_1_4[k])
        m.addConstr(transOut2_1_4 <= Economy_Req_1_4[k])
        m.addConstr(transOut1_1_5 <= TimeSensitive_Req_1_5[k])
        m.addConstr(transOut2_1_5 <= Economy_Req_1_5[k])
        m.addConstr(transOut1_1_6 <= TimeSensitive_Req_1_6[k])
        m.addConstr(transOut2_1_6 <= Economy_Req_1_6[k])
        m.addConstr(transOut1_2_4 <= TimeSensitive_Req_2_4[k])
        m.addConstr(transOut2_2_4 <= Economy_Req_2_4[k])
        m.addConstr(transOut1_2_5 <= TimeSensitive_Req_2_5[k])
        m.addConstr(transOut2_2_5 <= Economy_Req_2_5[k])
        m.addConstr(transOut1_2_6 <= TimeSensitive_Req_2_6[k])
        m.addConstr(transOut2_2_6 <= Economy_Req_2_6[k])
        m.addConstr(transOut1_3_4 <= TimeSensitive_Req_3_4[k])
        m.addConstr(transOut2_3_4 <= Economy_Req_3_4[k])
        m.addConstr(transOut1_3_5 <= TimeSensitive_Req_3_5[k])
        m.addConstr(transOut2_3_5 <= Economy_Req_3_5[k])
        m.addConstr(transOut1_3_6 <= TimeSensitive_Req_3_6[k])
        m.addConstr(transOut2_3_6 <= Economy_Req_3_6[k])
        trash = c3_1 * (TimeSensitive_Req_BH[k]-transOut1) + c3_2 * (Economy_Req_BH[k]-transOut2)
        C6 += trash
    for k in range(last_BS):
        transOut1 = 0
        transOut2 = 0
        transOut1_1_7 = 0
        transOut2_1_7 = 0
        transOut1_1_8 = 0
        transOut2_1_8 = 0
        transOut1_2_7 = 0
        transOut2_2_7 = 0
        transOut1_2_8 = 0
        transOut2_2_8 = 0
        transOut1_3_7 = 0
        transOut2_3_7 = 0
        transOut1_3_8 = 0
        transOut2_3_8 = 0
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                if i == k:
                    transOut1_1_7 += x_1_7[i,j,1]
                    transOut2_1_7 += x_1_7[i,j,2]
                    transOut1_1_8 += x_1_8[i,j,1]
                    transOut2_1_8 += x_1_8[i,j,2]
                    transOut1_2_7 += x_2_7[i,j,1]
                    transOut2_2_7 += x_2_7[i,j,2]
                    transOut1_2_8 += x_2_8[i,j,1]
                    transOut2_2_8 += x_2_8[i,j,2]
                    transOut1_3_7 += x_3_7[i,j,1]
                    transOut2_3_7 += x_3_7[i,j,2]
                    transOut1_3_8 += x_3_8[i,j,1]
                    transOut2_3_8 += x_3_8[i,j,2]
                    transOut1 += (x_1_7[i,j,1]+x_1_8[i,j,1]+x_2_7[i,j,1]+x_2_8[i,j,1]+x_3_7[i,j,1]+x_3_8[i,j,1])
                    transOut2 += (x_1_7[i,j,2]+x_1_8[i,j,2]+x_2_7[i,j,2]+x_2_8[i,j,2]+x_3_7[i,j,2]+x_3_8[i,j,2])
                    passengerTotalBS += (x_1_7[i,j,1]+x_1_8[i,j,1]+x_2_7[i,j,1]+x_2_8[i,j,1]+x_3_7[i,j,1]+x_3_8[i,j,1]+x_1_7[i,j,2]+x_1_8[i,j,2]+x_2_7[i,j,2]+x_2_8[i,j,2]+x_3_7[i,j,2]+x_3_8[i,j,2])
        for j in range(N*K):
            for i in range(cargo_BH[j]):
                if i == k:
                    transOut1_1_7 += y_1_7[i,j,1]
                    transOut2_1_7 += y_1_7[i,j,2]
                    transOut1_1_8 += y_1_8[i,j,1]
                    transOut2_1_8 += y_1_8[i,j,2]
                    transOut1_2_7 += y_2_7[i,j,1]
                    transOut2_2_7 += y_2_7[i,j,2]
                    transOut1_2_8 += y_2_8[i,j,1]
                    transOut2_2_8 += y_2_8[i,j,2]
                    transOut1_3_7 += y_3_7[i,j,1]
                    transOut2_3_7 += y_3_7[i,j,2]
                    transOut1_3_8 += y_3_8[i,j,1]
                    transOut2_3_8 += y_3_8[i,j,2]
                    transOut1 += (y_1_7[i,j,1]+y_1_8[i,j,1]+y_2_7[i,j,1]+y_2_8[i,j,1]+y_3_7[i,j,1]+y_3_8[i,j,1])
                    transOut2 += (y_1_7[i,j,2]+y_1_8[i,j,2]+y_2_7[i,j,2]+y_2_8[i,j,2]+y_3_7[i,j,2]+y_3_8[i,j,2])
                    cargoTotalBS += (y_1_7[i,j,1]+y_1_8[i,j,1]+y_2_7[i,j,1]+y_2_8[i,j,1]+y_3_7[i,j,1]+y_3_8[i,j,1]+y_1_7[i,j,2]+y_1_8[i,j,2]+y_2_7[i,j,2]+y_2_8[i,j,2]+y_3_7[i,j,2]+y_3_8[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_1_7 <= TimeSensitive_Req_1_7[k])
        m.addConstr(transOut2_1_7 <= Economy_Req_1_7[k])
        m.addConstr(transOut1_1_8 <= TimeSensitive_Req_1_8[k])
        m.addConstr(transOut2_1_8 <= Economy_Req_1_8[k])
        m.addConstr(transOut1_2_7 <= TimeSensitive_Req_2_7[k])
        m.addConstr(transOut2_2_7 <= Economy_Req_2_7[k])
        m.addConstr(transOut1_2_8 <= TimeSensitive_Req_2_8[k])
        m.addConstr(transOut2_2_8 <= Economy_Req_2_8[k])
        m.addConstr(transOut1_3_7 <= TimeSensitive_Req_3_7[k])
        m.addConstr(transOut2_3_7 <= Economy_Req_3_7[k])
        m.addConstr(transOut1_3_8 <= TimeSensitive_Req_3_8[k])
        m.addConstr(transOut2_3_8 <= Economy_Req_3_8[k])
        trash = c3_1 * (TimeSensitive_Req_BS[k]-transOut1) + c3_2 * (Economy_Req_BS[k]-transOut2)
        C6 += trash
    for k in range(last_HB):
        transOut1 = 0
        transOut2 = 0
        transOut1_4_1 = 0
        transOut2_4_1 = 0
        transOut1_4_2 = 0
        transOut2_4_2 = 0
        transOut1_4_3 = 0
        transOut2_4_3 = 0
        transOut1_5_1 = 0
        transOut2_5_1 = 0
        transOut1_5_2 = 0
        transOut2_5_2 = 0
        transOut1_5_3 = 0
        transOut2_5_3 = 0
        transOut1_6_1 = 0
        transOut2_6_1 = 0
        transOut1_6_2 = 0
        transOut2_6_2 = 0
        transOut1_6_3 = 0
        transOut2_6_3 = 0
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                if i == k:
                    transOut1_4_1 += x_4_1[i,j,1]
                    transOut2_4_1 += x_4_1[i,j,2]
                    transOut1_4_2 += x_4_2[i,j,1]
                    transOut2_4_2 += x_4_2[i,j,2]
                    transOut1_4_3 += x_4_3[i,j,1]
                    transOut2_4_3 += x_4_3[i,j,2]
                    transOut1_5_1 += x_5_1[i,j,1]
                    transOut2_5_1 += x_5_1[i,j,2]
                    transOut1_5_2 += x_5_2[i,j,1]
                    transOut2_5_2 += x_5_2[i,j,2]
                    transOut1_5_3 += x_5_3[i,j,1]
                    transOut2_5_3 += x_5_3[i,j,2]
                    transOut1_6_1 += x_6_1[i,j,1]
                    transOut2_6_1 += x_6_1[i,j,2]
                    transOut1_6_2 += x_6_2[i,j,1]
                    transOut2_6_2 += x_6_2[i,j,2]
                    transOut1_6_3 += x_6_3[i,j,1]
                    transOut2_6_3 += x_6_3[i,j,2]
                    transOut1 += x_4_1[i,j,1]+x_4_2[i,j,1]+x_4_3[i,j,1]+x_5_1[i,j,1]+x_5_2[i,j,1]+x_5_3[i,j,1]+x_6_1[i,j,1]+x_6_2[i,j,1]+x_6_3[i,j,1]
                    transOut2 += x_4_1[i,j,2]+x_4_2[i,j,2]+x_4_3[i,j,2]+x_5_1[i,j,2]+x_5_2[i,j,2]+x_5_3[i,j,2]+x_6_1[i,j,2]+x_6_2[i,j,2]+x_6_3[i,j,2]
                    passengerTotalHB += (x_4_1[i,j,1]+x_4_2[i,j,1]+x_4_3[i,j,1]+x_5_1[i,j,1]+x_5_2[i,j,1]+x_5_3[i,j,1]+x_6_1[i,j,1]+x_6_2[i,j,1]+x_6_3[i,j,1]+x_4_1[i,j,2]+x_4_2[i,j,2]+x_4_3[i,j,2]+x_5_1[i,j,2]+x_5_2[i,j,2]+x_5_3[i,j,2]+x_6_1[i,j,2]+x_6_2[i,j,2]+x_6_3[i,j,2])
        for j in range(N*K):
            for i in range(cargo_HS[j]):
                if i == k:
                    transOut1_4_1 += y_4_1[i,j,1]
                    transOut2_4_1 += y_4_1[i,j,2]
                    transOut1_4_2 += y_4_2[i,j,1]
                    transOut2_4_2 += y_4_2[i,j,2]
                    transOut1_4_3 += y_4_3[i,j,1]
                    transOut2_4_3 += y_4_3[i,j,2]
                    transOut1_5_1 += y_5_1[i,j,1]
                    transOut2_5_1 += y_5_1[i,j,2]
                    transOut1_5_2 += y_5_2[i,j,1]
                    transOut2_5_2 += y_5_2[i,j,2]
                    transOut1_5_3 += y_5_3[i,j,1]
                    transOut2_5_3 += y_5_3[i,j,2]
                    transOut1_6_1 += y_6_1[i,j,1]
                    transOut2_6_1 += y_6_1[i,j,2]
                    transOut1_6_2 += y_6_2[i,j,1]
                    transOut2_6_2 += y_6_2[i,j,2]
                    transOut1_6_3 += y_6_3[i,j,1]
                    transOut2_6_3 += y_6_3[i,j,2]
                    transOut1 += y_4_1[i,j,1]+y_4_2[i,j,1]+y_4_3[i,j,1]+y_5_1[i,j,1]+y_5_2[i,j,1]+y_5_3[i,j,1]+y_6_1[i,j,1]+y_6_2[i,j,1]+y_6_3[i,j,1]
                    transOut2 += y_4_1[i,j,2]+y_4_2[i,j,2]+y_4_3[i,j,2]+y_5_1[i,j,2]+y_5_2[i,j,2]+y_5_3[i,j,2]+y_6_1[i,j,2]+y_6_2[i,j,2]+y_6_3[i,j,2]
                    cargoTotalHB += (y_4_1[i,j,1]+y_4_2[i,j,1]+y_4_3[i,j,1]+y_5_1[i,j,1]+y_5_2[i,j,1]+y_5_3[i,j,1]+y_6_1[i,j,1]+y_6_2[i,j,1]+y_6_3[i,j,1]+y_4_1[i,j,2]+y_4_2[i,j,2]+y_4_3[i,j,2]+y_5_1[i,j,2]+y_5_2[i,j,2]+y_5_3[i,j,2]+y_6_1[i,j,2]+y_6_2[i,j,2]+y_6_3[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_4_1 <= TimeSensitive_Req_4_1[k])
        m.addConstr(transOut2_4_1 <= Economy_Req_4_1[k])
        m.addConstr(transOut1_4_2 <= TimeSensitive_Req_4_2[k])
        m.addConstr(transOut2_4_2 <= Economy_Req_4_2[k])
        m.addConstr(transOut1_4_3 <= TimeSensitive_Req_4_3[k])
        m.addConstr(transOut2_4_3 <= Economy_Req_4_3[k])
        m.addConstr(transOut1_5_1 <= TimeSensitive_Req_5_1[k])
        m.addConstr(transOut2_5_1 <= Economy_Req_5_1[k])
        m.addConstr(transOut1_5_2 <= TimeSensitive_Req_5_2[k])
        m.addConstr(transOut2_5_2 <= Economy_Req_5_2[k])
        m.addConstr(transOut1_5_3 <= TimeSensitive_Req_5_3[k])
        m.addConstr(transOut2_5_3 <= Economy_Req_5_3[k])
        m.addConstr(transOut1_6_1 <= TimeSensitive_Req_6_1[k])
        m.addConstr(transOut2_6_1 <= Economy_Req_6_1[k])
        m.addConstr(transOut1_6_2 <= TimeSensitive_Req_6_2[k])
        m.addConstr(transOut2_6_2 <= Economy_Req_6_2[k])
        m.addConstr(transOut1_6_3 <= TimeSensitive_Req_6_3[k])
        m.addConstr(transOut2_6_3 <= Economy_Req_6_3[k])
        trash = c3_1 * (TimeSensitive_Req_HB[k]-transOut1) + c3_2 * (Economy_Req_HB[k]-transOut2)
        C6 += trash
    for k in range(last_HS):
        transOut1 = 0
        transOut2 = 0
        transOut1_4_7 = 0
        transOut2_4_7 = 0
        transOut1_4_8 = 0
        transOut2_4_8 = 0
        transOut1_5_7 = 0
        transOut2_5_7 = 0
        transOut1_5_8 = 0
        transOut2_5_8 = 0
        transOut1_6_7 = 0
        transOut2_6_7 = 0
        transOut1_6_8 = 0
        transOut2_6_8 = 0
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                if i == k:
                    transOut1_4_7 += x_4_7[i,j,1]
                    transOut2_4_7 += x_4_7[i,j,2]
                    transOut1_4_8 += x_4_8[i,j,1]
                    transOut2_4_8 += x_4_8[i,j,2]
                    transOut1_5_7 += x_5_7[i,j,1]
                    transOut2_5_7 += x_5_7[i,j,2]
                    transOut1_5_8 += x_5_8[i,j,1]
                    transOut2_5_8 += x_5_8[i,j,2]
                    transOut1_6_7 += x_6_7[i,j,1]
                    transOut2_6_7 += x_6_7[i,j,2]
                    transOut1_6_8 += x_6_8[i,j,1]
                    transOut2_6_8 += x_6_8[i,j,2]
                    transOut1 += x_4_7[i,j,1]+x_4_8[i,j,1]+x_5_7[i,j,1]+x_5_8[i,j,1]+x_6_7[i,j,1]+x_6_8[i,j,1]
                    transOut2 += x_4_7[i,j,2]+x_4_8[i,j,2]+x_5_7[i,j,2]+x_5_8[i,j,2]+x_6_7[i,j,2]+x_6_8[i,j,2]
                    passengerTotalHS += (x_4_7[i,j,1]+x_4_8[i,j,1]+x_5_7[i,j,1]+x_5_8[i,j,1]+x_6_7[i,j,1]+x_6_8[i,j,1]+x_4_7[i,j,2]+x_4_8[i,j,2]+x_5_7[i,j,2]+x_5_8[i,j,2]+x_6_7[i,j,2]+x_6_8[i,j,2])
        for j in range(N*K):
            for i in range(cargo_HS[j]):
                if i == k:
                    transOut1_4_7 += y_4_7[i,j,1]
                    transOut2_4_7 += y_4_7[i,j,2]
                    transOut1_4_8 += y_4_8[i,j,1]
                    transOut2_4_8 += y_4_8[i,j,2]
                    transOut1_5_7 += y_5_7[i,j,1]
                    transOut2_5_7 += y_5_7[i,j,2]
                    transOut1_5_8 += y_5_8[i,j,1]
                    transOut2_5_8 += y_5_8[i,j,2]
                    transOut1_6_7 += y_6_7[i,j,1]
                    transOut2_6_7 += y_6_7[i,j,2]
                    transOut1_6_8 += y_6_8[i,j,1]
                    transOut2_6_8 += y_6_8[i,j,2]
                    transOut1 += y_4_7[i,j,1]+y_4_8[i,j,1]+y_5_7[i,j,1]+y_5_8[i,j,1]+y_6_7[i,j,1]+y_6_8[i,j,1]
                    transOut2 += y_4_7[i,j,2]+y_4_8[i,j,2]+y_5_7[i,j,2]+y_5_8[i,j,2]+y_6_7[i,j,2]+y_6_8[i,j,2]
                    cargoTotalHS += (y_4_7[i,j,1]+y_4_8[i,j,1]+y_5_7[i,j,1]+y_5_8[i,j,1]+y_6_7[i,j,1]+y_6_8[i,j,1]+y_4_7[i,j,2]+y_4_8[i,j,2]+y_5_7[i,j,2]+y_5_8[i,j,2]+y_6_7[i,j,2]+y_6_8[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_4_7 <= TimeSensitive_Req_4_7[k])
        m.addConstr(transOut2_4_7 <= Economy_Req_4_7[k])
        m.addConstr(transOut1_4_8 <= TimeSensitive_Req_4_8[k])
        m.addConstr(transOut2_4_8 <= Economy_Req_4_8[k])
        m.addConstr(transOut1_5_7 <= TimeSensitive_Req_5_7[k])
        m.addConstr(transOut2_5_7 <= Economy_Req_5_7[k])
        m.addConstr(transOut1_5_8 <= TimeSensitive_Req_5_8[k])
        m.addConstr(transOut2_5_8 <= Economy_Req_5_8[k])
        m.addConstr(transOut1_6_7 <= TimeSensitive_Req_6_7[k])
        m.addConstr(transOut2_6_7 <= Economy_Req_6_7[k])
        m.addConstr(transOut1_6_8 <= TimeSensitive_Req_6_8[k])
        m.addConstr(transOut2_6_8 <= Economy_Req_6_8[k])
        trash = c3_1 * (TimeSensitive_Req_HS[k]-transOut1) + c3_2 * (Economy_Req_HS[k]-transOut2)
        C6 += trash
    for k in range(last_SB):
        transOut1 = 0
        transOut2 = 0
        transOut1_7_1 = 0
        transOut2_7_1 = 0
        transOut1_7_2 = 0
        transOut2_7_2 = 0
        transOut1_7_3 = 0
        transOut2_7_3 = 0
        transOut1_8_1 = 0
        transOut2_8_1 = 0
        transOut1_8_2 = 0
        transOut2_8_2 = 0
        transOut1_8_3 = 0
        transOut2_8_3 = 0
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                if i == k:
                    transOut1_7_1 += x_7_1[i,j,1]
                    transOut2_7_1 += x_7_1[i,j,2]
                    transOut1_7_2 += x_7_2[i,j,1]
                    transOut2_7_2 += x_7_2[i,j,2]
                    transOut1_7_3 += x_7_3[i,j,1]
                    transOut2_7_3 += x_7_3[i,j,2]
                    transOut1_8_1 += x_8_1[i,j,1]
                    transOut2_8_1 += x_8_1[i,j,2]
                    transOut1_8_2 += x_8_2[i,j,1]
                    transOut2_8_2 += x_8_2[i,j,2]
                    transOut1_8_3 += x_8_3[i,j,1]
                    transOut2_8_3 += x_8_3[i,j,2]
                    transOut1 += x_7_1[i,j,1]+x_7_2[i,j,1]+x_7_3[i,j,1]+x_8_1[i,j,1]+x_8_2[i,j,1]+x_8_3[i,j,1]
                    transOut2 += x_7_1[i,j,2]+x_7_2[i,j,2]+x_7_3[i,j,2]+x_8_1[i,j,2]+x_8_2[i,j,2]+x_8_3[i,j,2]
                    passengerTotalSB += (x_7_1[i,j,1]+x_7_2[i,j,1]+x_7_3[i,j,1]+x_8_1[i,j,1]+x_8_2[i,j,1]+x_8_3[i,j,1]+x_7_1[i,j,2]+x_7_2[i,j,2]+x_7_3[i,j,2]+x_8_1[i,j,2]+x_8_2[i,j,2]+x_8_3[i,j,2])
        for j in range(N*K):
            for i in range(cargo_SB[j]):
                if i == k:
                    transOut1_7_1 += y_7_1[i,j,1]
                    transOut2_7_1 += y_7_1[i,j,2]
                    transOut1_7_2 += y_7_2[i,j,1]
                    transOut2_7_2 += y_7_2[i,j,2]
                    transOut1_7_3 += y_7_3[i,j,1]
                    transOut2_7_3 += y_7_3[i,j,2]
                    transOut1_8_1 += y_8_1[i,j,1]
                    transOut2_8_1 += y_8_1[i,j,2]
                    transOut1_8_2 += y_8_2[i,j,1]
                    transOut2_8_2 += y_8_2[i,j,2]
                    transOut1_8_3 += y_8_3[i,j,1]
                    transOut2_8_3 += y_8_3[i,j,2]
                    transOut1 += y_7_1[i,j,1]+y_7_2[i,j,1]+y_7_3[i,j,1]+y_8_1[i,j,1]+y_8_2[i,j,1]+y_8_3[i,j,1]
                    transOut2 += y_7_1[i,j,2]+y_7_2[i,j,2]+y_7_3[i,j,2]+y_8_1[i,j,2]+y_8_2[i,j,2]+y_8_3[i,j,2]
                    cargoTotalSB += (y_7_1[i,j,1]+y_7_2[i,j,1]+y_7_3[i,j,1]+y_8_1[i,j,1]+y_8_2[i,j,1]+y_8_3[i,j,1]+y_7_1[i,j,2]+y_7_2[i,j,2]+y_7_3[i,j,2]+y_8_1[i,j,2]+y_8_2[i,j,2]+y_8_3[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_7_1 <= TimeSensitive_Req_7_1[k])
        m.addConstr(transOut2_7_1 <= Economy_Req_7_1[k])
        m.addConstr(transOut1_7_2 <= TimeSensitive_Req_7_2[k])
        m.addConstr(transOut2_7_2 <= Economy_Req_7_2[k])
        m.addConstr(transOut1_7_3 <= TimeSensitive_Req_7_3[k])
        m.addConstr(transOut2_7_3 <= Economy_Req_7_3[k])
        m.addConstr(transOut1_8_1 <= TimeSensitive_Req_8_1[k])
        m.addConstr(transOut2_8_1 <= Economy_Req_8_1[k])
        m.addConstr(transOut1_8_2 <= TimeSensitive_Req_8_2[k])
        m.addConstr(transOut2_8_2 <= Economy_Req_8_2[k])
        m.addConstr(transOut1_8_3 <= TimeSensitive_Req_8_3[k])
        m.addConstr(transOut2_8_3 <= Economy_Req_8_3[k])
        trash = c3_1 * (TimeSensitive_Req_SB[k]-transOut1) + c3_2 * (Economy_Req_SB[k]-transOut2)
        C6 += trash
    for k in range(last_SH):
        transOut1 = 0
        transOut2 = 0
        transOut1_7_4 = 0
        transOut2_7_4 = 0
        transOut1_7_5 = 0
        transOut2_7_5 = 0
        transOut1_7_6 = 0
        transOut2_7_6 = 0
        transOut1_8_4 = 0
        transOut2_8_4 = 0
        transOut1_8_5 = 0
        transOut2_8_5 = 0
        transOut1_8_6 = 0
        transOut2_8_6 = 0
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                if i == k:
                    transOut1_7_4 += x_7_4[i,j,1]
                    transOut2_7_4 += x_7_4[i,j,2]
                    transOut1_7_5 += x_7_5[i,j,1]
                    transOut2_7_5 += x_7_5[i,j,2]
                    transOut1_7_6 += x_7_6[i,j,1]
                    transOut2_7_6 += x_7_6[i,j,2]
                    transOut1_8_4 += x_8_4[i,j,1]
                    transOut2_8_4 += x_8_4[i,j,2]
                    transOut1_8_5 += x_8_5[i,j,1]
                    transOut2_8_5 += x_8_5[i,j,2]
                    transOut1_8_6 += x_8_6[i,j,1]
                    transOut2_8_6 += x_8_6[i,j,2]
                    transOut1 += x_7_4[i,j,1]+x_7_5[i,j,1]+x_7_6[i,j,1]+x_8_4[i,j,1]+x_8_5[i,j,1]+x_8_6[i,j,1]
                    transOut2 += x_7_4[i,j,2]+x_7_5[i,j,2]+x_7_6[i,j,2]+x_8_4[i,j,2]+x_8_5[i,j,2]+x_8_6[i,j,2]
                    passengerTotalSH += (x_7_4[i,j,1]+x_7_5[i,j,1]+x_7_6[i,j,1]+x_8_4[i,j,1]+x_8_5[i,j,1]+x_8_6[i,j,1]+x_7_4[i,j,2]+x_7_5[i,j,2]+x_7_6[i,j,2]+x_8_4[i,j,2]+x_8_5[i,j,2]+x_8_6[i,j,2])
        for j in range(N*K):
            for i in range(cargo_SB[j]):
                if i == k:
                    transOut1_7_4 += y_7_4[i,j,1]
                    transOut2_7_4 += y_7_4[i,j,2]
                    transOut1_7_5 += y_7_5[i,j,1]
                    transOut2_7_5 += y_7_5[i,j,2]
                    transOut1_7_6 += y_7_6[i,j,1]
                    transOut2_7_6 += y_7_6[i,j,2]
                    transOut1_8_4 += y_8_4[i,j,1]
                    transOut2_8_4 += y_8_4[i,j,2]
                    transOut1_8_5 += y_8_5[i,j,1]
                    transOut2_8_5 += y_8_5[i,j,2]
                    transOut1_8_6 += y_8_6[i,j,1]
                    transOut2_8_6 += y_8_6[i,j,2]
                    transOut1 += y_7_4[i,j,1]+y_7_5[i,j,1]+y_7_6[i,j,1]+y_8_4[i,j,1]+y_8_5[i,j,1]+y_8_6[i,j,1]
                    transOut2 += y_7_4[i,j,2]+y_7_5[i,j,2]+y_7_6[i,j,2]+y_8_4[i,j,2]+y_8_5[i,j,2]+y_8_6[i,j,2]
                    cargoTotalSH += (y_7_4[i,j,1]+y_7_5[i,j,1]+y_7_6[i,j,1]+y_8_4[i,j,1]+y_8_5[i,j,1]+y_8_6[i,j,1]+y_7_4[i,j,2]+y_7_5[i,j,2]+y_7_6[i,j,2]+y_8_4[i,j,2]+y_8_5[i,j,2]+y_8_6[i,j,2])
        transported_1 += transOut1
        transported_2 += transOut2
        m.addConstr(transOut1_7_4 <= TimeSensitive_Req_7_4[k])
        m.addConstr(transOut2_7_4 <= Economy_Req_7_4[k])
        m.addConstr(transOut1_7_5 <= TimeSensitive_Req_7_5[k])
        m.addConstr(transOut2_7_5 <= Economy_Req_7_5[k])
        m.addConstr(transOut1_7_6 <= TimeSensitive_Req_7_6[k])
        m.addConstr(transOut2_7_6 <= Economy_Req_7_6[k])
        m.addConstr(transOut1_8_4 <= TimeSensitive_Req_8_4[k])
        m.addConstr(transOut2_8_4 <= Economy_Req_8_4[k])
        m.addConstr(transOut1_8_5 <= TimeSensitive_Req_8_5[k])
        m.addConstr(transOut2_8_5 <= Economy_Req_8_5[k])
        m.addConstr(transOut1_8_6 <= TimeSensitive_Req_8_6[k])
        m.addConstr(transOut2_8_6 <= Economy_Req_8_6[k])
        trash = c3_1 * (TimeSensitive_Req_SH[k]-transOut1) + c3_2 * (Economy_Req_SH[k]-transOut2)
        C6 += trash
    
    desertTotalBH = sum(forecast_1_4_K)+sum(forecast_1_5_K)+sum(forecast_1_6_K)+sum(forecast_2_4_K)+sum(forecast_2_5_K)+sum(forecast_2_6_K)+sum(forecast_3_4_K)+sum(forecast_3_5_K)+sum(forecast_3_6_K)-passengerTotalBH-cargoTotalBH
    desertTotalBS = sum(forecast_1_7_K)+sum(forecast_1_8_K)+sum(forecast_2_7_K)+sum(forecast_2_8_K)+sum(forecast_3_7_K)+sum(forecast_3_8_K)-passengerTotalBS-cargoTotalBS
    desertTotalHB = sum(forecast_4_1_K)+sum(forecast_4_2_K)+sum(forecast_4_3_K)+sum(forecast_5_1_K)+sum(forecast_5_2_K)+sum(forecast_5_3_K)+sum(forecast_6_1_K)+sum(forecast_6_2_K)+sum(forecast_6_3_K)-passengerTotalHB-cargoTotalHB
    desertTotalHS = sum(forecast_4_7_K)+sum(forecast_4_8_K)+sum(forecast_5_7_K)+sum(forecast_5_8_K)+sum(forecast_6_7_K)+sum(forecast_6_8_K)-passengerTotalHS-cargoTotalHS
    desertTotalSB = sum(forecast_7_1_K)+sum(forecast_7_2_K)+sum(forecast_7_3_K)+sum(forecast_8_1_K)+sum(forecast_8_2_K)+sum(forecast_8_3_K)-passengerTotalSB-cargoTotalSB
    desertTotalSH = sum(forecast_7_4_K)+sum(forecast_7_5_K)+sum(forecast_7_6_K)+sum(forecast_8_4_K)+sum(forecast_8_5_K)+sum(forecast_8_6_K)-passengerTotalSH-cargoTotalSH
                      
    # 本周期内无法运完的货物的仓储成本和预期逾期成本
    left_1_4 = 0
    left_1_5 = 0
    left_1_6 = 0
    left_1_7 = 0
    left_1_8 = 0
    left_2_4 = 0
    left_2_5 = 0
    left_2_6 = 0
    left_2_7 = 0
    left_2_8 = 0
    left_3_4 = 0
    left_3_5 = 0
    left_3_6 = 0
    left_3_7 = 0
    left_3_8 = 0
    left_4_1 = 0
    left_4_2 = 0
    left_4_3 = 0
    left_4_7 = 0
    left_4_8 = 0
    left_5_1 = 0
    left_5_2 = 0
    left_5_3 = 0
    left_5_7 = 0
    left_5_8 = 0
    left_6_1 = 0
    left_6_2 = 0
    left_6_3 = 0
    left_6_7 = 0
    left_6_8 = 0
    left_7_1 = 0
    left_7_2 = 0
    left_7_3 = 0
    left_7_4 = 0
    left_7_5 = 0
    left_7_6 = 0
    left_8_1 = 0
    left_8_2 = 0
    left_8_3 = 0
    left_8_4 = 0
    left_8_5 = 0
    left_8_6 = 0                 
    for i in range(last_BH, 24 * K):
        left_1_4 += forecast_1_4_K[i]
        left_1_5 += forecast_1_5_K[i]
        left_1_6 += forecast_1_6_K[i]
        left_2_4 += forecast_2_4_K[i]
        left_2_5 += forecast_2_5_K[i]
        left_2_6 += forecast_2_6_K[i]
        left_3_4 += forecast_3_4_K[i]
        left_3_5 += forecast_3_5_K[i]
        left_3_6 += forecast_3_6_K[i]      
        C1 += c1 * (forecast_1_4_K[i]+forecast_1_5_K[i]+forecast_1_6_K[i]+forecast_2_4_K[i]+forecast_2_5_K[i]+forecast_2_6_K[i]+forecast_3_4_K[i]+forecast_3_5_K[i]+forecast_3_6_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_BH[i] + c2_2 * Economy_Req_BH[i]) * (24 * K - i + first_BH - 1) * (1 - (i + 1) / (24 * K))
    for i in range(last_BS, 24 * K):
        left_1_7 += forecast_1_7_K[i]
        left_1_8 += forecast_1_8_K[i]
        left_2_7 += forecast_2_7_K[i]
        left_2_8 += forecast_2_8_K[i]
        left_3_7 += forecast_3_7_K[i]
        left_3_8 += forecast_3_8_K[i]
        C1 += c1 * (forecast_1_7_K[i]+forecast_1_8_K[i]+forecast_2_7_K[i]+forecast_2_8_K[i]+forecast_3_7_K[i]+forecast_3_8_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_BS[i] + c2_2 * Economy_Req_BS[i]) * (24 * K - i + first_BS - 1) * (1 - (i + 1) / (24 * K))  
    for i in range(last_HB, 24 * K):
        left_4_1 += forecast_4_1_K[i]
        left_4_2 += forecast_4_2_K[i]
        left_4_3 += forecast_4_3_K[i]
        left_5_1 += forecast_5_1_K[i]
        left_5_2 += forecast_5_2_K[i]
        left_5_3 += forecast_5_3_K[i]
        left_6_1 += forecast_6_1_K[i]
        left_6_2 += forecast_6_2_K[i]
        left_6_3 += forecast_6_3_K[i]
        C1 += c1 * (forecast_4_1_K[i]+forecast_4_2_K[i]+forecast_4_3_K[i]+forecast_5_1_K[i]+forecast_5_2_K[i]+forecast_5_3_K[i]+forecast_6_1_K[i]+forecast_6_2_K[i]+forecast_6_3_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_HB[i] + c2_2 * Economy_Req_HB[i]) * (24 * K - i + first_HB - 1) * (1 - (i + 1) / (24 * K))
    for i in range(last_HS, 24 * K):
        left_4_7 += forecast_4_7_K[i]
        left_4_8 += forecast_4_8_K[i]
        left_5_7 += forecast_5_7_K[i]
        left_5_8 += forecast_5_8_K[i]
        left_6_7 += forecast_6_7_K[i]
        left_6_8 += forecast_6_8_K[i]  
        C1 += c1 * (forecast_4_7_K[i]+forecast_4_8_K[i]+forecast_5_7_K[i]+forecast_5_8_K[i]+forecast_6_7_K[i]+forecast_6_8_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_HS[i] + c2_2 * Economy_Req_HS[i]) * (24 * K - i + first_HS - 1) * (1 - (i + 1) / (24 * K))
    for i in range(last_SB, 24 * K):
        left_7_1 += forecast_7_1_K[i]
        left_7_2 += forecast_7_2_K[i]
        left_7_3 += forecast_7_3_K[i]
        left_8_1 += forecast_8_1_K[i]
        left_8_2 += forecast_8_2_K[i]
        left_8_3 += forecast_8_3_K[i]   
        C1 += c1 * (forecast_7_1_K[i]+forecast_7_2_K[i]+forecast_7_3_K[i]+forecast_8_1_K[i]+forecast_8_2_K[i]+forecast_8_3_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_SB[i] + c2_2 * Economy_Req_SB[i]) * (24 * K - i + first_SB - 1) * (1 - (i + 1) / (24 * K))
    for i in range(last_SH, 24 * K):
        left_7_4 += forecast_7_4_K[i]
        left_7_5 += forecast_7_5_K[i]
        left_7_6 += forecast_7_6_K[i]
        left_8_4 += forecast_8_4_K[i]
        left_8_5 += forecast_8_5_K[i]
        left_8_6 += forecast_8_6_K[i]
        C1 += c1 * (forecast_7_4_K[i]+forecast_7_5_K[i]+forecast_7_6_K[i]+forecast_8_4_K[i]+forecast_8_5_K[i]+forecast_8_6_K[i]) * (24 * K - i)
        C2 += (c2_1 * TimeSensitive_Req_SH[i] + c2_2 * Economy_Req_SH[i]) * (24 * K - i + first_SH - 1) * (1 - (i + 1) / (24 * K))       
                
    left_to_leave_1_4.append(left_1_4)
    left_to_leave_1_5.append(left_1_5)
    left_to_leave_1_6.append(left_1_6)
    left_to_leave_1_7.append(left_1_7)
    left_to_leave_1_8.append(left_1_8)
    left_to_leave_2_4.append(left_2_4)
    left_to_leave_2_5.append(left_2_5)
    left_to_leave_2_6.append(left_2_6)
    left_to_leave_2_7.append(left_2_7)
    left_to_leave_2_8.append(left_2_8)
    left_to_leave_3_4.append(left_3_4)
    left_to_leave_3_5.append(left_3_5)
    left_to_leave_3_6.append(left_3_6)
    left_to_leave_3_7.append(left_3_7)
    left_to_leave_3_8.append(left_3_8)
    left_to_leave_4_1.append(left_4_1)
    left_to_leave_4_2.append(left_4_2)
    left_to_leave_4_3.append(left_4_3)
    left_to_leave_4_7.append(left_4_7)
    left_to_leave_4_8.append(left_4_8)
    left_to_leave_5_1.append(left_5_1)
    left_to_leave_5_2.append(left_5_2)
    left_to_leave_5_3.append(left_5_3)
    left_to_leave_5_7.append(left_5_7)
    left_to_leave_5_8.append(left_5_8)
    left_to_leave_6_1.append(left_6_1)
    left_to_leave_6_2.append(left_6_2)
    left_to_leave_6_3.append(left_6_3)
    left_to_leave_6_7.append(left_6_7)
    left_to_leave_6_8.append(left_6_8)
    left_to_leave_7_1.append(left_7_1)
    left_to_leave_7_2.append(left_7_2)
    left_to_leave_7_3.append(left_7_3)
    left_to_leave_7_4.append(left_7_4)
    left_to_leave_7_5.append(left_7_5)
    left_to_leave_7_6.append(left_7_6)
    left_to_leave_8_1.append(left_8_1)
    left_to_leave_8_2.append(left_8_2)
    left_to_leave_8_3.append(left_8_3)
    left_to_leave_8_4.append(left_8_4)
    left_to_leave_8_5.append(left_8_5)
    left_to_leave_8_6.append(left_8_6)
                      
    # 计算每个航段上客机和货机运输的量
    passengerTrans_BH = 0
    passengerTrans_BS = 0
    passengerTrans_HB = 0
    passengerTrans_HS = 0
    passengerTrans_SB = 0
    passengerTrans_SH = 0
    cargoTrans = 0
    cargoTrans_BH = 0
    cargoTrans_HS = 0
    cargoTrans_SB = 0
    for w in range(1,3):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                passengerTrans_BH += (x_1_4[i,j,w]+x_1_5[i,j,w]+x_1_6[i,j,w]+x_2_4[i,j,w]+x_2_5[i,j,w]+x_2_6[i,j,w]+x_3_4[i,j,w]+x_3_5[i,j,w]+x_3_6[i,j,w])
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                passengerTrans_BS += (x_1_7[i,j,w]+x_1_8[i,j,w]+x_2_7[i,j,w]+x_2_8[i,j,w]+x_3_7[i,j,w]+x_3_8[i,j,w])
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                passengerTrans_HB += (x_4_1[i,j,w]+x_4_2[i,j,w]+x_4_3[i,j,w]+x_5_1[i,j,w]+x_5_2[i,j,w]+x_5_3[i,j,w]+x_6_1[i,j,w]+x_6_2[i,j,w]+x_6_3[i,j,w])
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                passengerTrans_HS += (x_4_7[i,j,w]+x_4_8[i,j,w]+x_5_7[i,j,w]+x_5_8[i,j,w]+x_6_7[i,j,w]+x_6_8[i,j,w])
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                passengerTrans_SB += (x_7_1[i,j,w]+x_7_2[i,j,w]+x_7_3[i,j,w]+x_8_1[i,j,w]+x_8_2[i,j,w]+x_8_3[i,j,w])
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                passengerTrans_SH += (x_7_4[i,j,w]+x_7_5[i,j,w]+x_7_6[i,j,w]+x_8_4[i,j,w]+x_8_5[i,j,w]+x_8_6[i,j,w])
        for j in range(N*K):
            for i in range(cargo_BH[j]):
                cargoTrans += (y_1_4[i,j,w]+y_1_5[i,j,w]+y_1_6[i,j,w]+y_2_4[i,j,w]+y_2_5[i,j,w]+y_2_6[i,j,w]+y_3_4[i,j,w]+y_3_5[i,j,w]+y_3_6[i,j,w]+y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w])
                cargoTrans_BH += (y_1_4[i,j,w]+y_1_5[i,j,w]+y_1_6[i,j,w]+y_2_4[i,j,w]+y_2_5[i,j,w]+y_2_6[i,j,w]+y_3_4[i,j,w]+y_3_5[i,j,w]+y_3_6[i,j,w]+y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w])
                cargoTrans_HS += (y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w])
            for i in range(cargo_HS[j]):
                cargoTrans += (y_4_7[i,j,w]+y_4_8[i,j,w]+y_5_7[i,j,w]+y_5_8[i,j,w]+y_6_7[i,j,w]+y_6_8[i,j,w]+y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w])
                cargoTrans_HS += (y_4_7[i,j,w]+y_4_8[i,j,w]+y_5_7[i,j,w]+y_5_8[i,j,w]+y_6_7[i,j,w]+y_6_8[i,j,w]+y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w])
                cargoTrans_SB += (y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w])
            for i in range(cargo_SB[j]):
                cargoTrans += (y_7_1[i,j,w]+y_7_2[i,j,w]+y_7_3[i,j,w]+y_8_1[i,j,w]+y_8_2[i,j,w]+y_8_3[i,j,w]+y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w])
                cargoTrans_SB += (y_7_1[i,j,w]+y_7_2[i,j,w]+y_7_3[i,j,w]+y_8_1[i,j,w]+y_8_2[i,j,w]+y_8_3[i,j,w]+y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w])
                cargoTrans_BH += (y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w])
    passengerTrans = passengerTrans_BH+passengerTrans_BS+passengerTrans_HB+passengerTrans_HS+passengerTrans_SB+passengerTrans_SH
    
    # 只有客机运输成本是分段计价的
    zBH = {}
    zBS = {}
    zHB = {}
    zHS = {}
    zSB = {}
    zSH = {}
    A_BH = m.addVars(range(len(FR_BH)), vtype=GRB.BINARY)
    A_BS = m.addVars(range(len(FR_BS)), vtype=GRB.BINARY)
    A_HB = m.addVars(range(len(FR_HB)), vtype=GRB.BINARY)
    A_HS = m.addVars(range(len(FR_HS)), vtype=GRB.BINARY)
    A_SB = m.addVars(range(len(FR_SB)), vtype=GRB.BINARY)
    A_SH = m.addVars(range(len(FR_SH)), vtype=GRB.BINARY)
    
    for r in range(len(FR_BH)):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                zBH[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                zBS[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                zHB[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                zHS[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                zSB[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                zSH[i,j,r] = m.addVar(lb=0, vtype=GRB.CONTINUOUS)
                
    m.addConstr(gp.quicksum(A_BH[r] for r in range(len(FR_BH))) == 1)
    m.addConstr(gp.quicksum(A_BS[r] for r in range(len(FR_BS))) == 1)
    m.addConstr(gp.quicksum(A_HB[r] for r in range(len(FR_HB))) == 1)
    m.addConstr(gp.quicksum(A_HS[r] for r in range(len(FR_HS))) == 1)
    m.addConstr(gp.quicksum(A_SB[r] for r in range(len(FR_SB))) == 1)
    m.addConstr(gp.quicksum(A_SH[r] for r in range(len(FR_SH))) == 1)
    
    for r in range(len(FR_BH)):
        for j in range(len(passengerTime_BH)):
            m.addConstr(gp.quicksum(x_1_4[i,j,w]+x_1_5[i,j,w]+x_1_6[i,j,w]+x_2_4[i,j,w]+x_2_5[i,j,w]+x_2_6[i,j,w]+x_3_4[i,j,w]+x_3_5[i,j,w]+x_3_6[i,j,w] for w in range(1,3) for i in range(passengerTime_BH[j])) >= lBH[r] * A_BH[r])
        for j in range(len(passengerTime_BS)):
            m.addConstr(gp.quicksum(x_1_7[i,j,w]+x_1_8[i,j,w]+x_2_7[i,j,w]+x_2_8[i,j,w]+x_3_7[i,j,w]+x_3_8[i,j,w] for w in range(1,3) for i in range(passengerTime_BS[j])) >= lBS[r] * A_BS[r])
        for j in range(len(passengerTime_HB)):
            m.addConstr(gp.quicksum(x_4_1[i,j,w]+x_4_2[i,j,w]+x_4_3[i,j,w]+x_5_1[i,j,w]+x_5_2[i,j,w]+x_5_3[i,j,w]+x_6_1[i,j,w]+x_6_2[i,j,w]+x_6_3[i,j,w] for w in range(1,3) for i in range(passengerTime_HB[j])) >= lHB[r] * A_HB[r])
        for j in range(len(passengerTime_HS)):
            m.addConstr(gp.quicksum(x_4_7[i,j,w]+x_4_8[i,j,w]+x_5_7[i,j,w]+x_5_8[i,j,w]+x_6_7[i,j,w]+x_6_8[i,j,w] for w in range(1,3) for i in range(passengerTime_HS[j])) >= lHS[r] * A_HS[r])
        for j in range(len(passengerTime_SB)):
            m.addConstr(gp.quicksum(x_7_1[i,j,w]+x_7_2[i,j,w]+x_7_3[i,j,w]+x_8_1[i,j,w]+x_8_2[i,j,w]+x_8_3[i,j,w] for w in range(1,3) for i in range(passengerTime_SB[j])) >= lSB[r] * A_SB[r])
        for j in range(len(passengerTime_SH)):
            m.addConstr(gp.quicksum(x_7_4[i,j,w]+x_7_5[i,j,w]+x_7_6[i,j,w]+x_8_4[i,j,w]+x_8_5[i,j,w]+x_8_6[i,j,w] for w in range(1,3) for i in range(passengerTime_SH[j])) >= lSH[r] * A_SH[r])
        
    for r in range(len(FR_BH)):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                m.addConstr(zBH[i,j,r] <= A_BH[r] * forecast_BH_K[i])
                m.addConstr(zBH[i,j,r] <= (x_1_4[i,j,1]+x_1_5[i,j,1]+x_1_6[i,j,1]+x_2_4[i,j,1]+x_2_5[i,j,1]+x_2_6[i,j,1]+x_3_4[i,j,1]+x_3_5[i,j,1]+x_3_6[i,j,1]+x_1_4[i,j,2]+x_1_5[i,j,2]+x_1_6[i,j,2]+x_2_4[i,j,2]+x_2_5[i,j,2]+x_2_6[i,j,2]+x_3_4[i,j,2]+x_3_5[i,j,2]+x_3_6[i,j,2]))
                m.addConstr(zBH[i,j,r] >= (x_1_4[i,j,1]+x_1_5[i,j,1]+x_1_6[i,j,1]+x_2_4[i,j,1]+x_2_5[i,j,1]+x_2_6[i,j,1]+x_3_4[i,j,1]+x_3_5[i,j,1]+x_3_6[i,j,1]+x_1_4[i,j,2]+x_1_5[i,j,2]+x_1_6[i,j,2]+x_2_4[i,j,2]+x_2_5[i,j,2]+x_2_6[i,j,2]+x_3_4[i,j,2]+x_3_5[i,j,2]+x_3_6[i,j,2] - forecast_BH_K[i] * (1 - A_BH[r])))
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                m.addConstr(zBS[i,j,r] <= A_BS[r] * forecast_BS_K[i])
                m.addConstr(zBS[i,j,r] <= (x_1_7[i,j,1]+x_1_8[i,j,1]+x_2_7[i,j,1]+x_2_8[i,j,1]+x_3_7[i,j,1]+x_3_8[i,j,1]+x_1_7[i,j,2]+x_1_8[i,j,2]+x_2_7[i,j,2]+x_2_8[i,j,2]+x_3_7[i,j,2]+x_3_8[i,j,2]))
                m.addConstr(zBS[i,j,r] >= (x_1_7[i,j,1]+x_1_8[i,j,1]+x_2_7[i,j,1]+x_2_8[i,j,1]+x_3_7[i,j,1]+x_3_8[i,j,1]+x_1_7[i,j,2]+x_1_8[i,j,2]+x_2_7[i,j,2]+x_2_8[i,j,2]+x_3_7[i,j,2]+x_3_8[i,j,2] - forecast_BS_K[i] * (1 - A_BS[r])))
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                m.addConstr(zHB[i,j,r] <= A_HB[r] * forecast_HB_K[i])
                m.addConstr(zHB[i,j,r] <= (x_4_1[i,j,1]+x_4_2[i,j,1]+x_4_3[i,j,1]+x_5_1[i,j,1]+x_5_2[i,j,1]+x_5_3[i,j,1]+x_6_1[i,j,1]+x_6_2[i,j,1]+x_6_3[i,j,1]+x_4_1[i,j,2]+x_4_2[i,j,2]+x_4_3[i,j,2]+x_5_1[i,j,2]+x_5_2[i,j,2]+x_5_3[i,j,2]+x_6_1[i,j,2]+x_6_2[i,j,2]+x_6_3[i,j,2]))
                m.addConstr(zHB[i,j,r] >= (x_4_1[i,j,1]+x_4_2[i,j,1]+x_4_3[i,j,1]+x_5_1[i,j,1]+x_5_2[i,j,1]+x_5_3[i,j,1]+x_6_1[i,j,1]+x_6_2[i,j,1]+x_6_3[i,j,1]+x_4_1[i,j,2]+x_4_2[i,j,2]+x_4_3[i,j,2]+x_5_1[i,j,2]+x_5_2[i,j,2]+x_5_3[i,j,2]+x_6_1[i,j,2]+x_6_2[i,j,2]+x_6_3[i,j,2] - forecast_HB_K[i] * (1 - A_HB[r])))
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                m.addConstr(zHS[i,j,r] <= A_HS[r] * forecast_HS_K[i])
                m.addConstr(zHS[i,j,r] <= (x_4_7[i,j,1]+x_4_8[i,j,1]+x_5_7[i,j,1]+x_5_8[i,j,1]+x_6_7[i,j,1]+x_6_8[i,j,1]+x_4_7[i,j,2]+x_4_8[i,j,2]+x_5_7[i,j,2]+x_5_8[i,j,2]+x_6_7[i,j,2]+x_6_8[i,j,2]))
                m.addConstr(zHS[i,j,r] >= (x_4_7[i,j,1]+x_4_8[i,j,1]+x_5_7[i,j,1]+x_5_8[i,j,1]+x_6_7[i,j,1]+x_6_8[i,j,1]+x_4_7[i,j,2]+x_4_8[i,j,2]+x_5_7[i,j,2]+x_5_8[i,j,2]+x_6_7[i,j,2]+x_6_8[i,j,2] - forecast_HS_K[i] * (1 - A_HS[r])))
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                m.addConstr(zSB[i,j,r] <= A_BH[r] * forecast_SB_K[i])
                m.addConstr(zSB[i,j,r] <= (x_7_1[i,j,1]+x_7_2[i,j,1]+x_7_3[i,j,1]+x_8_1[i,j,1]+x_8_2[i,j,1]+x_8_3[i,j,1]+x_7_1[i,j,2]+x_7_2[i,j,2]+x_7_3[i,j,2]+x_8_1[i,j,2]+x_8_2[i,j,2]+x_8_3[i,j,2]))
                m.addConstr(zSB[i,j,r] >= (x_7_1[i,j,1]+x_7_2[i,j,1]+x_7_3[i,j,1]+x_8_1[i,j,1]+x_8_2[i,j,1]+x_8_3[i,j,1]+x_7_1[i,j,2]+x_7_2[i,j,2]+x_7_3[i,j,2]+x_8_1[i,j,2]+x_8_2[i,j,2]+x_8_3[i,j,2] - forecast_SB_K[i] * (1 - A_SB[r])))
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                m.addConstr(zSH[i,j,r] <= A_SH[r] * forecast_SH_K[i])
                m.addConstr(zSH[i,j,r] <= (x_7_4[i,j,1]+x_7_5[i,j,1]+x_7_6[i,j,1]+x_8_4[i,j,1]+x_8_5[i,j,1]+x_8_6[i,j,1]+x_7_4[i,j,2]+x_7_5[i,j,2]+x_7_6[i,j,2]+x_8_4[i,j,2]+x_8_5[i,j,2]+x_8_6[i,j,2]))
                m.addConstr(zSH[i,j,r] >= (x_7_4[i,j,1]+x_7_5[i,j,1]+x_7_6[i,j,1]+x_8_4[i,j,1]+x_8_5[i,j,1]+x_8_6[i,j,1]+x_7_4[i,j,2]+x_7_5[i,j,2]+x_7_6[i,j,2]+x_8_4[i,j,2]+x_8_5[i,j,2]+x_8_6[i,j,2] - forecast_SH_K[i] * (1 - A_SH[r])))
                
    for r in range(len(FR_BH)):
        for j in range(len(passengerTime_BH)):
            for i in range(passengerTime_BH[j]):
                C5 += FR_BH[r] * zBH[i,j,r]
        for j in range(len(passengerTime_BS)):
            for i in range(passengerTime_BS[j]):
                C5 += FR_BS[r] * zBS[i,j,r]
        for j in range(len(passengerTime_HB)):
            for i in range(passengerTime_HB[j]):
                C5 += FR_HB[r] * zHB[i,j,r]
        for j in range(len(passengerTime_HS)):
            for i in range(passengerTime_HS[j]):
                C5 += FR_HS[r] * zHS[i,j,r]
        for j in range(len(passengerTime_SB)):
            for i in range(passengerTime_SB[j]):
                C5 += FR_SB[r] * zSB[i,j,r]
        for j in range(len(passengerTime_SH)):
            for i in range(passengerTime_SH[j]):
                C5 += FR_SH[r] * zSH[i,j,r]
    
    cargo_operating_perHour = cargo_per + L * OilPrice
    
    nBH = {}
    nHS = {}
    nSB = {}
    M = 0.0001
    for j in range(N*K):
        nBH[j] = m.addVar(vtype=GRB.BINARY)
        nHS[j] = m.addVar(vtype=GRB.BINARY)
        nSB[j] = m.addVar(vtype=GRB.BINARY)
        
    for j in range(N*K):
        m.addConstr(nBH[j] >= M * gp.quicksum((y_1_4[i,j,w]+y_1_5[i,j,w]+y_1_6[i,j,w]+y_2_4[i,j,w]+y_2_5[i,j,w]+y_2_6[i,j,w]+y_3_4[i,j,w]+y_3_5[i,j,w]+y_3_6[i,j,w]+y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w]) for i in range(cargo_BH[j]) for w in range(1,3)) + M * gp.quicksum(y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w] for i in range(cargo_SB[j]) for w in range(1,3)))
        m.addConstr(nHS[j] >= M * gp.quicksum((y_4_7[i,j,w]+y_4_8[i,j,w]+y_5_7[i,j,w]+y_5_8[i,j,w]+y_6_7[i,j,w]+y_6_8[i,j,w]+y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w]) for i in range(cargo_HS[j]) for w in range(1,3)) + M * gp.quicksum(y_1_7[i,j,w]+y_1_8[i,j,w]+y_2_7[i,j,w]+y_2_8[i,j,w]+y_3_7[i,j,w]+y_3_8[i,j,w] for i in range(cargo_BH[j]) for w in range(1,3)))
        m.addConstr(nSB[j] >= M * gp.quicksum((y_7_1[i,j,w]+y_7_2[i,j,w]+y_7_3[i,j,w]+y_8_1[i,j,w]+y_8_2[i,j,w]+y_8_3[i,j,w]+y_7_4[i,j,w]+y_7_5[i,j,w]+y_7_6[i,j,w]+y_8_4[i,j,w]+y_8_5[i,j,w]+y_8_6[i,j,w]) for i in range(cargo_SB[j]) for w in range(1,3)) + M * gp.quicksum(y_4_1[i,j,w]+y_4_2[i,j,w]+y_4_3[i,j,w]+y_5_1[i,j,w]+y_5_2[i,j,w]+y_5_3[i,j,w]+y_6_1[i,j,w]+y_6_2[i,j,w]+y_6_3[i,j,w] for i in range(cargo_HS[j]) for w in range(1,3)))
        
    cargoUsed_BH = 0
    cargoUsed_HS = 0
    cargoUsed_SB = 0
    for j in range(N*K):
        cargoUsed_BH += nBH[j]
        cargoUsed_HS += nHS[j]
        cargoUsed_SB += nSB[j]
        C7 += cargo_operating_perHour * (Tcargo_1*nBH[j]+Tcargo_2*nHS[j]+Tcargo_3*nSB[j])
    
    requi = sum(forecast_BH_K)+sum(forecast_BS_K)+sum(forecast_HB_K)+sum(forecast_HS_K)+sum(forecast_SB_K)+sum(forecast_SH_K)
    unTrans = requi - transported_1 - transported_2
    untransprop = unTrans / requi
    
    m.setObjective(theta1 * (C1 + C2 + C3 + C4 + C5 + C6 + C7) + theta2 * untransprop, GRB.MINIMIZE)
    m.optimize()
    
    cargo_operating = cargo_operating_perHour * (Tcargo_1+Tcargo_2+Tcargo_3) * max(cargoUsed_BH.getValue(),cargoUsed_HS.getValue(),cargoUsed_SB.getValue())
    
    
    
    result1 = C1+C2+C3.getValue()+C4.getValue()+C5.getValue()+C6.getValue()+cargo_operating
    result2 = C3.getValue()+C2
    result3 = C4.getValue()+C1
    result4 = C5.getValue()
    result5 = cargo_operating
    result6 = transported_1.getValue()
    result7 = transported_2.getValue()
    result8 = unTrans.getValue()
    result9 = requi
    result10 = passengerTrans.getValue()
    result11 = cargoTrans.getValue()
    result12 = C6.getValue()
    result13 = passengerTrans_BH.getValue()
    result14 = passengerTrans_BS.getValue()
    result15 = passengerTrans_HB.getValue()
    result16 = passengerTrans_HS.getValue()
    result17 = passengerTrans_SB.getValue()
    result18 = passengerTrans_SH.getValue()
    result19 = cargoTrans_BH.getValue()
    result20 = cargoTrans_HS.getValue()
    result21 = cargoTrans_SB.getValue()
    result22 = max(cargoUsed_BH.getValue(),cargoUsed_HS.getValue(),cargoUsed_SB.getValue())
    output1 = passengerTotalBH.getValue()
    output2 = passengerTotalBS.getValue()
    output3 = passengerTotalHB.getValue()
    output4 = passengerTotalHS.getValue()
    output5 = passengerTotalSB.getValue()
    output6 = passengerTotalSH.getValue()
    output7 = cargoTotalBH.getValue()
    output8 = cargoTotalBS.getValue()
    output9 = cargoTotalHB.getValue()
    output10 = cargoTotalHS.getValue()
    output11 = cargoTotalSB.getValue()
    output12 = cargoTotalSH.getValue()
    output13 = desertTotalBH.getValue()
    output14 = desertTotalBS.getValue()
    output15 = desertTotalHB.getValue()
    output16 = desertTotalHS.getValue()
    output17 = desertTotalSB.getValue()
    output18 = desertTotalSH.getValue()
    
    return result1,result2,result3,result4,result5,result6,result7,result8,result9,result10,result11,result12,result13,result14,result15,result16,result17,result18,result19,result20,result21,result22,output1,output2,output3,output4,output5,output6,output7,output8,output9,output10,output11,output12,output13,output14,output15,output16,output17,output18

q = 7
Perc = (0.395+0.096+0.104+0.032)
perc1 = (0.395+0.032)/(0.395+0.096+0.104+0.032)
perc2 = (0.096+0.104)/(0.395+0.096+0.104+0.032)
# 当前全货机运输小时单价为39400元，小时油耗2.3t，油价3200元/t
cargo_per = 39400
L = 2.3
OilPrice = 3200

# 由于没有货机航班的数据，因此需要作出假设，假设每架货机运力为60t，货机数量为10
N = 15
Q = 50

Tcargo_1 = 2.4  # 货机航班从北京飞往杭州需要2.4小时
Tcargo_2 = 2.5  # 货机航班从杭州飞往深圳需要2.5小时
Tcargo_3 = 3.5  # 货机航班从深圳飞往北京需要3.5小时

cargo_BH_unit = [1,2,3,3,3,5,6,8,16,21,22,22,23,24,24]
cargo_HS_unit = [9,10,11,11,11,13,14,16,24,5,6,6,7,8,8]
cargo_SB_unit = [17,18,19,19,19,21,22,24,8,13,14,14,15,16,16]

c1 = 300 # 假设单位仓储成本
c2_1 = 2000 # 假设时效性货物单位逾期成本
c2_2 = 800 # 假设经济性性货物单位逾期成本
c3_1 = 70000 # 假设时效性货物的单位丢弃成本
c3_2 = 40000 # 加上经济性货物的单位丢弃成本

C2per = [0,2000,800]

# 假设时效需求货物需要在发货后12小时内送达目的地机场，经济需求货物需在发货后24小时送达
T_1 = [0,12,24]

# 假设客机分段计价总共分成3段
FR_BH = [20000,12000,8000]
lBH = [0,0.4*q,0.7*q]
FR_BS = [20000,12000,8000]
lBS = [0,0.4*q,0.7*q]
FR_HB = [20000,12000,8000]
lHB = [0,0.4*q,0.7*q]
FR_HS = [20000,12000,8000]
lHS = [0,0.4*q,0.7*q]
FR_SB = [20000,12000,8000]
lSB = [0,0.4*q,0.7*q]
FR_SH = [20000,12000,8000]
lSH = [0,0.4*q,0.7*q]

passengerCapacity = q * (len(hours_from_midnight_BH)+len(hours_from_midnight_BS)+len(hours_from_midnight_HB)+len(hours_from_midnight_HS)+len(hours_from_midnight_SB)+len(hours_from_midnight_SH))
passengerCapacity_BH = q * len(hours_from_midnight_BH)
passengerCapacity_BS = q * len(hours_from_midnight_BS)
passengerCapacity_HB = q * len(hours_from_midnight_HB)
passengerCapacity_HS = q * len(hours_from_midnight_HS)
passengerCapacity_SB = q * len(hours_from_midnight_SB)
passengerCapacity_SH = q * len(hours_from_midnight_SH)

# 神经网络模型下的结果

print("----------------------------------神经网络模型下的预测----------------------------------\n")
pred_num = 12 # 假设预测的周期总长度
for s in range(1,pred_num+1):
    ave1 = 0
    ave2 = 0
    ave3 = 0
    ave4 = 0
    ave5 = 0
    ave6 = 0
    ave7 = 0
    ave8 = 0
    ave9 = 0
    ave10 = 0
    ave11 = 0
    ave12 = 0
    ave13 = 0
    ave14 = 0
    ave15 = 0
    ave16 = 0
    ave17 = 0
    ave18 = 0
    ave19 = 0
    ave20 = 0
    ave21 = 0
    ave22 = 0
    ave23 = 0
    ave24 = 0
    ave25 = 0
    ave26 = 0
    ave27 = 0
    TotalCargoUsed = 0
    ave28 = 0
    ave29 = 0
    ave30 = 0
    ave31 = 0
    ave32 = 0
    ave33 = 0
    ave34 = 0
    ave35 = 0
    ave36 = 0
    ave37 = 0
    ave38 = 0
    ave39 = 0
    ave40 = 0
    ave41 = 0
    ave42 = 0
    ave43 = 0
    ave44 = 0
    ave45 = 0
    
    K = s # 假设周期长度
    total_days = K
    predict = 0
    count = 0
    while total_days < pred_num:
        train = Original_Requirements.iloc[0:(60 + predict)] # 训练集数据
        test = Original_Requirements.iloc[(60 + predict):90] # 测试集数据（真实数据）
        predict += K
        total_days += K
        count += 1
        ADF_BH = adfuller(train['北京→杭州'].dropna())
        if (ADF_BH[1] > 0.05):
            train_diff1 = train.copy()
            train_diff1.iloc[:, 1:] = train_diff1.iloc[:, 1:].diff(1)
            train_diff1.dropna(inplace=True)
            ADF_BH_1 = adfuller(train_diff1['北京→杭州'].dropna())
        left_days = pred_num - total_days
        train = Original_Requirements.iloc[0:(60 + predict)] # 训练集数据
        test = Original_Requirements.iloc[(60 + predict):(60 + pred_num)] # 测试集数据（真实数据）
        ADF_BH = adfuller(train['北京→杭州'].dropna())
    if (ADF_BH[1] > 0.05):
        train_diff1 = train.copy()
        train_diff1.iloc[:, 1:] = train_diff1.iloc[:, 1:].diff(1)
        train_diff1.dropna(inplace=True)
        ADF_BH_1 = adfuller(train_diff1['北京→杭州'].dropna())
        
    total_days = 0
    predict = 0
    count = 0
    total_cost = 0
    delay_cost = 0
    storage_cost = 0
    transport_cost = 0
    cargoOperating_cost = 0
    type1 = 0
    type2 = 0
    passengerFlight = 0
    cargoFlight = 0
    desert = 0
    total_requirement = 0
    desert_cost = 0
    passengerFreight_BH = 0
    passengerFreight_BS = 0
    passengerFreight_HB = 0
    passengerFreight_HS = 0
    passengerFreight_SB = 0
    passengerFreight_SH = 0
    cargoFreight_BH = 0
    cargoFreight_HS = 0
    cargoFreight_SB = 0
    TotalCargo = 0
    TotalTra_BH_pass = 0
    TotalTra_BS_pass = 0
    TotalTra_HB_pass = 0
    TotalTra_HS_pass = 0
    TotalTra_SB_pass = 0
    TotalTra_SH_pass = 0
    TotalTra_BH_carg = 0
    TotalTra_BS_carg = 0
    TotalTra_HB_carg = 0
    TotalTra_HS_carg = 0
    TotalTra_SB_carg = 0
    TotalTra_SH_carg = 0
    Totaldesr_BH = 0
    Totaldesr_BS = 0
    Totaldesr_HB = 0
    Totaldesr_HS = 0
    Totaldesr_SB = 0
    Totaldesr_SH = 0
        
    left_to_leave_1_4 = [0]
    left_to_leave_1_5 = [0]
    left_to_leave_1_6 = [0]
    left_to_leave_1_7 = [0]
    left_to_leave_1_8 = [0]
    left_to_leave_2_4 = [0]
    left_to_leave_2_5 = [0]
    left_to_leave_2_6 = [0]
    left_to_leave_2_7 = [0]
    left_to_leave_2_8 = [0]
    left_to_leave_3_4 = [0]
    left_to_leave_3_5 = [0]
    left_to_leave_3_6 = [0]
    left_to_leave_3_7 = [0]
    left_to_leave_3_8 = [0]
    left_to_leave_4_1 = [0]
    left_to_leave_4_2 = [0]
    left_to_leave_4_3 = [0]
    left_to_leave_4_7 = [0]
    left_to_leave_4_8 = [0]
    left_to_leave_5_1 = [0]
    left_to_leave_5_2 = [0]
    left_to_leave_5_3 = [0]
    left_to_leave_5_7 = [0]
    left_to_leave_5_8 = [0]
    left_to_leave_6_1 = [0]
    left_to_leave_6_2 = [0]
    left_to_leave_6_3 = [0]
    left_to_leave_6_7 = [0]
    left_to_leave_6_8 = [0]
    left_to_leave_7_1 = [0]
    left_to_leave_7_2 = [0]
    left_to_leave_7_3 = [0]
    left_to_leave_7_4 = [0]
    left_to_leave_7_5 = [0]
    left_to_leave_7_6 = [0]
    left_to_leave_8_1 = [0]
    left_to_leave_8_2 = [0]
    left_to_leave_8_3 = [0]
    left_to_leave_8_4 = [0]
    left_to_leave_8_5 = [0]
    left_to_leave_8_6 = [0]
            
    theta1 = 1 # 成本权重
    theta2 = 0 # 丢弃比例权重
    
    while total_days < (pred_num - K):
        train = Original_Requirements.iloc[0:(60 + predict)] # 训练集数据
        test = Original_Requirements.iloc[(60 + predict):(60 + pred_num)] # 测试集数据（真实数据）
        # p、q值选择
        train_results = sm.tsa.arma_order_select_ic(train_diff1['北京→杭州'], ic=['aic', 'bic'], max_ar=5, max_ma=5)
        pARIMA = train_results.aic_min_order[0]
        dARIMA = 1
        qARIMA = train_results.aic_min_order[1]
        del train_results.aic_min_order
        predict += K
        total_days += K
        count += 1
        Cost_add,delayCost_add,storageCost_add,transportCost_add,cargo_add,type1_add,type2_add,desert_add,req_add,passengerFlight_add,cargoFlight_add,desertCost_add,passFreightBH,passFreightBS,passFreightHB,passFreightHS,passFreightSB,passFreightSH,cargFreightBH,cargFreightHS,cargFreightSB,TotalCargo_add,Tra_BH_pass,Tra_BS_pass,Tra_HB_pass,Tra_HS_pass,Tra_SB_pass,Tra_SH_pass,Tra_BH_carg,Tra_BS_carg,Tra_HB_carg,Tra_HS_carg,Tra_SB_carg,Tra_SH_carg,desr_BH,desr_BS,desr_HB,desr_HS,desr_SB,desr_SH = mainFunctionSJWL(K)
        total_cost += Cost_add
        delay_cost += delayCost_add
        storage_cost += storageCost_add
        transport_cost += transportCost_add
        cargoOperating_cost += cargo_add
        type1 += type1_add
        type2 += type2_add
        desert += desert_add
        total_requirement += req_add
        passengerFlight += passengerFlight_add
        cargoFlight += cargoFlight_add
        desert_cost += desertCost_add
        passengerFreight_BH += passFreightBH
        passengerFreight_BS += passFreightBS
        passengerFreight_HB += passFreightHB
        passengerFreight_HS += passFreightHS
        passengerFreight_SB += passFreightSB
        passengerFreight_SH += passFreightSH
        cargoFreight_BH += cargFreightBH
        cargoFreight_HS += cargFreightHS
        cargoFreight_SB += cargFreightSB
        TotalCargo += TotalCargo_add
        TotalTra_BH_pass += Tra_BH_pass
        TotalTra_BS_pass += Tra_BS_pass
        TotalTra_HB_pass += Tra_HB_pass
        TotalTra_HS_pass += Tra_HS_pass
        TotalTra_SB_pass += Tra_SB_pass
        TotalTra_SH_pass += Tra_SH_pass
        TotalTra_BH_carg += Tra_BH_carg
        TotalTra_BS_carg += Tra_BS_carg
        TotalTra_HB_carg += Tra_HB_carg
        TotalTra_HS_carg += Tra_HS_carg
        TotalTra_SB_carg += Tra_SB_carg
        TotalTra_SH_carg += Tra_SH_carg
        Totaldesr_BH += desr_BH
        Totaldesr_BS += desr_BS
        Totaldesr_HB += desr_HB
        Totaldesr_HS += desr_HS
        Totaldesr_SB += desr_SB
        Totaldesr_SH += desr_SH
        
    train = Original_Requirements.iloc[0:(60 + predict)] # 训练集数据
    test = Original_Requirements.iloc[(60 + predict):(60 + pred_num)] # 测试集数据（真实数据）
    # p、q值选择
    train_results = sm.tsa.arma_order_select_ic(train_diff1['北京→杭州'], ic=['aic', 'bic'], max_ar=5, max_ma=5)
    pARIMA = train_results.aic_min_order[0]
    dARIMA = 1
    qARIMA = train_results.aic_min_order[1]
    del train_results.aic_min_order
    
    K = pred_num - total_days
    Cost_add,delayCost_add,storageCost_add,transportCost_add,cargo_add,type1_add,type2_add,desert_add,req_add,passengerFlight_add,cargoFlight_add,desertCost_add,passFreightBH,passFreightBS,passFreightHB,passFreightHS,passFreightSB,passFreightSH,cargFreightBH,cargFreightHS,cargFreightSB,TotalCargo_add,Tra_BH_pass,Tra_BS_pass,Tra_HB_pass,Tra_HS_pass,Tra_SB_pass,Tra_SH_pass,Tra_BH_carg,Tra_BS_carg,Tra_HB_carg,Tra_HS_carg,Tra_SB_carg,Tra_SH_carg,desr_BH,desr_BS,desr_HB,desr_HS,desr_SB,desr_SH = mainFunctionSJWL(K)
    total_cost += Cost_add
    delay_cost += delayCost_add
    storage_cost += storageCost_add
    transport_cost += transportCost_add
    cargoOperating_cost += cargo_add
    type1 += type1_add
    type2 += type2_add
    desert += desert_add
    total_requirement += req_add
    passengerFlight += passengerFlight_add
    cargoFlight += cargoFlight_add
    desert_cost += desertCost_add
    passengerFreight_BH += passFreightBH
    passengerFreight_BS += passFreightBS
    passengerFreight_HB += passFreightHB
    passengerFreight_HS += passFreightHS
    passengerFreight_SB += passFreightSB
    passengerFreight_SH += passFreightSH
    cargoFreight_BH += cargFreightBH
    cargoFreight_HS += cargFreightHS
    cargoFreight_SB += cargFreightSB
    TotalCargo += TotalCargo_add
    TotalTra_BH_pass += Tra_BH_pass
    TotalTra_BS_pass += Tra_BS_pass
    TotalTra_HB_pass += Tra_HB_pass
    TotalTra_HS_pass += Tra_HS_pass
    TotalTra_SB_pass += Tra_SB_pass
    TotalTra_SH_pass += Tra_SH_pass
    TotalTra_BH_carg += Tra_BH_carg
    TotalTra_BS_carg += Tra_BS_carg
    TotalTra_HB_carg += Tra_HB_carg
    TotalTra_HS_carg += Tra_HS_carg
    TotalTra_SB_carg += Tra_SB_carg
    TotalTra_SH_carg += Tra_SH_carg
    Totaldesr_BH += desr_BH
    Totaldesr_BS += desr_BS
    Totaldesr_HB += desr_HB
    Totaldesr_HS += desr_HS
    Totaldesr_SB += desr_SB
    Totaldesr_SH += desr_SH
        
    ave1 += total_cost
    ave2 += delay_cost
    ave3 += storage_cost
    ave4 += transport_cost
    ave5 += cargoOperating_cost
    ave6 += desert_cost
    ave7 += total_requirement
    ave8 += type1
    ave9 += type2
    ave10 += passengerFlight
    ave11 += cargoFlight
    ave12 += desert
    ave13 += passengerFlight/(passengerCapacity*pred_num)
    ave14 += cargoFlight/(3*Q*TotalCargo)
    ave15 += passengerFreight_BH/(passengerCapacity_BH*pred_num)
    ave16 += passengerFreight_BS/(passengerCapacity_BS*pred_num)
    ave17 += passengerFreight_HB/(passengerCapacity_HB*pred_num)
    ave18 += passengerFreight_HS/(passengerCapacity_HS*pred_num)
    ave19 += passengerFreight_SB/(passengerCapacity_SB*pred_num)
    ave20 += passengerFreight_SH/(passengerCapacity_SH*pred_num)
    ave21 += cargoFreight_BH/(Q*TotalCargo)
    ave22 += cargoFreight_HS/(Q*TotalCargo)
    ave23 += cargoFreight_SB/(Q*TotalCargo)
    ave24 += cargoFreight_BH/(Q*pred_num*N)
    ave25 += cargoFreight_HS/(Q*pred_num*N)
    ave26 += cargoFreight_SB/(Q*pred_num*N)
    ave27 += (cargoFreight_BH+cargoFreight_HS+cargoFreight_SB)/(3*Q*pred_num*N)
    TotalCargoUsed += TotalCargo/pred_num
    ave28 += TotalTra_BH_pass
    ave29 += TotalTra_BS_pass
    ave30 += TotalTra_HB_pass
    ave31 += TotalTra_HS_pass
    ave32 += TotalTra_SB_pass
    ave33 += TotalTra_SH_pass
    ave34 += TotalTra_BH_carg
    ave35 += TotalTra_BS_carg
    ave36 += TotalTra_HB_carg
    ave37 += TotalTra_HS_carg
    ave38 += TotalTra_SB_carg
    ave39 += TotalTra_SH_carg
    ave40 += Totaldesr_BH
    ave41 += Totaldesr_BS
    ave42 += Totaldesr_HB
    ave43 += Totaldesr_HS
    ave44 += Totaldesr_SB
    ave45 += Totaldesr_SH
    
    print(f"\n\n---------------------------------K = {s}时的结果-----------------------------------------------------------")
    print(f"平均总成本为{ave1}")
    print(f"平均逾期成本为{ave2}")
    print(f"平均仓储成本为{ave3}")
    print(f"平均客机成本为{ave4}")
    print(f"平均货机成本为{ave5}")
    print(f"平均丢弃成本为{ave6}")
    print(f"平均预测总需求为{ave7}")
    print(f"平均货物1为{ave8}")
    print(f"平均货物2为{ave9}")
    print(f"平均客机运载量为{ave10}")
    print(f"平均货机运载量为{ave11}")
    print(f"平均丢弃量为{ave12}")
    print(f"平均客机总效率为{ave13}")
    print(f"平均货机总效率为{ave14}")
    print(f"平均每天调用货机航班数量为{TotalCargoUsed}")
    print(f"平均货机机队运力总效率为{ave27}")
    print(f"平均BH客机效率为{ave15}")
    print(f"平均BS客机效率为{ave16}")
    print(f"平均HB客机效率为{ave17}")
    print(f"平均HS客机效率为{ave18}")
    print(f"平均SB客机效率为{ave19}")
    print(f"平均SH客机效率为{ave20}")
    print(f"平均BH货机效率为{ave21}")
    print(f"平均HS货机效率为{ave22}")
    print(f"平均SB货机效率为{ave23}")
    print(f"平均BH货机机队运力使用效率为{ave24}")
    print(f"平均BH货机机队运力使用效率为{ave25}")
    print(f"平均BH货机机队运力使用效率为{ave26}")
    
    print(f"北京到杭州的货物使用客机运输重量{ave28}，使用货机运输重量{ave34}，丢弃重量{ave40}")
    print(f"北京到深圳的货物使用客机运输重量{ave29}，使用货机运输重量{ave35}，丢弃重量{ave41}")
    print(f"杭州到北京的货物使用客机运输重量{ave30}，使用货机运输重量{ave36}，丢弃重量{ave42}")
    print(f"杭州到深圳的货物使用客机运输重量{ave31}，使用货机运输重量{ave37}，丢弃重量{ave43}")
    print(f"深圳到北京的货物使用客机运输重量{ave32}，使用货机运输重量{ave38}，丢弃重量{ave44}")
    print(f"深圳到杭州的货物使用客机运输重量{ave33}，使用货机运输重量{ave39}，丢弃重量{ave45}")   
    averagecost = ave1 / ave7
    print(f"单位重量的货物订单造成的成本为{averagecost}\n")
